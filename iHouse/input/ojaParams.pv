///////////////////////////////////////////////////////////////////////////////////////////
// Parameter file for iHouse - Oja STDPConn
// DPaiton
///////////////////////////////////////////////////////////////////////////////////////////

HyPerCol "column" = {
   nx                           = 32;      // pixel width of input image
   ny                           = 32;      // pixel height of input image
   dt                           = 1.;      // ms
                                           // 
   randomSeed                   = 1234567890;   
                                           //
   numSteps                     = 2000400;    // amount of time steps performed during run-time
   progressStep                 = 100;    // write output to see progress
   writeProgressToErr           = 0;       // write progress steps to std err
                                           // 
   //outputPath                   = "~/Documents/workspace/iHouse/output";
   //outputPath                   = "~/Documents/Work/LANL/workspace/iHouse/output"; //Dylan's Mac
   outputPath                   = "/home/dpaiton/workspace/iHouse/output"; //Dylan's Remote 
                                           // 
   filenamesContainLayerNames      = 2;    // stores pvp files as: 0 = layer number/1 = layer number and layer name/2 = layer name
   filenamesContainConnectionNames = 2;
                                           // 
   checkpointRead               = true;
   checkpointReadDirIndex       = 2000000;
   //checkpointReadDir            = "~/Documents/workspace/iHouse/checkpoints";
   //checkpointReadDir            = "~/Documents/Work/LANL/workspace/iHouse/checkpoints"; //Dylan's Mac
   checkpointReadDir            = "/home/dpaiton/workspace/iHouse/checkpoints"; //Dylan's Remote 
                                           //
   checkpointWrite              = true;
   deleteOlderCheckpoints       = false;
   checkpointWriteStepInterval  = 400;
   //checkpointWriteDir           = "~/Documents/workspace/iHouse/output/checkpoints";
   //checkpointWriteDir           = "~/Documents/Work/LANL/workspace/iHouse/checkpoints"; //Dylan's Mac
   checkpointWriteDir           = "/home/dpaiton/workspace/iHouse/checkpoints"; //Dylan's Remote 
   suppressLastOutput           = 0;
                                           //
   //printParamsFilename          = "~/Documents/workspace/iHouse/output/params_run.pv";
   //printParamsFilename          = "~/Documents/Work/LANL/workspace/iHouse/output/params_run.pv"; //Dylan's Mac
   printParamsFilename          = "/home/dpaiton/workspace/iHouse/output/params_run.pv"; //Dylan's remote 
};

////////////////////////////////////////////////////////////////////////////////
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
////////////////////////////////////////////////////////////////////////////////
Patterns "Input" = {
   nxScale                 = 1;
   nyScale                 = 1;
   nf                      = 1;
                                     // 
   patternType             = "DROP";
                                     //
   inOut                   = 1;      //-1 is all in, 0 is random, 1 is all out. Values between represent how much in given direction
		                             //
   dropSpeed               = 1;      //(pixels/dt) Radius expands dropSpeed pixles per timestep; 0 for rand
   //dropSpeedRandomMin      = 1;      // only applies of dropSpeed = -1
   //dropSpeedRandomMax      = 2;      // only applies if dropSpeed = -1
    							     // 
   dropPeriod              = 25;     //(dt) -1 for random period, otherwise, number of frames in between drops
   //dropPeriodRandomMin     = 25;
   //dropPeriodRandomMax     = 75;     // avg of 50
    							     // 
   dropPosition            = 0;//100;     // -1 random period of drop positions, 0 is drop from center only, n>0 is number of frames (period) for drop positions
   //dropPositionRandomMin   = 5;       // Min length of time that drop stays in a certain position if dropPosition=-1
   //dropPositionRandomMax   = 20;       // Max length of time that drop stays in a certain position if dropPosition=-1
    							     //TODO: Sets dropPosition random min and max when dropPosition=0, shouldn't do that.
                                     //
   maxValue                = 0.75;
   minValue                = 0.25;
    							     //
   halfNeutral             = true;
    							     // 
   startFrame              = 0; 
   endFrame                = -1;     // -1 means all frames
    							     // 
   writeImages             = true;
   //patternsOutputPath      = "~/Documents/Work/LANL/workspace/iHouse/output/sourceFiles"; // Dylan's Mac
   patternsOutputPath      = "/home/dpaiton/workspace/iHouse/output/sourceFiles"; // Dylan's Remote 
    							     // 
   displayPeriod           = 1;
   writeStep               = -1;
   marginWidth             = 1;
   writeSparseActivity     = false;
   useImageBCflag          = false;
   mirrorBCflag            = true;
   inverseFlag             = false;
   normalizeLuminanceFlag  = false;
   jitterFlag              = false;
   initialWriteTime        = false;
   restart                 = 0;
   phase                   = 0;
};


Retina "RetinaON" = {
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 1;
    							  // 
    marginWidth         = 3;      // 1/2 of post receptive field - 1 if one to many conn
    writeStep           = 1;      // 1 to make pre movie
    mirrorBCflag        = 0;
    spikingFlag         = true;   // false (no quotes) is translated to 0
    writeSparseActivity = true;
    initialWriteTime    = false;
    							  //
    foregroundRate      = 400;    // Hz // Max poisson spiking rate when input is 255
    backgroundRate      = 10;     // Hz // Min poisson spiking rate when input is 0
                                  //
    burstFreq           = 0.001;  // Hz // Everything coming into the retina should be burstin burstFreq times per sec
    burstDuration       = 1000000;// ms // Bursts last burstDuration ms
                                  //
    beginStim           = 0;      // Restrict stimulus to a window of time
    endStim             = -1;     // Run forever
                                  //
    refractoryPeriod    = 3;
    absRefractoryPeriod = 1.5;
    restart             = 0;
    phase               = 0;
};


Retina "RetinaOFF" = {
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 1;
                                  //    
    marginWidth         = 3;      // 1/2 of post receptive field size - 1 if one to many conn
    writeStep           = 1;      // 1 to make pre movie
    mirrorBCflag        = 0;
    spikingFlag         = true;   // false is translated to 0
    writeSparseActivity = true;
    initialWriteTime    = false;
                                  //
    foregroundRate      = 400;    // Hz // Max poisson spiking rate when input is 255
    backgroundRate      = 10;     // Hz // Min poisson spiking rate when input is 0
                                  //
    burstFreq           = 0.001;  // Hz // Everything coming into the retina should be burstin burstFreq times per sec
    burstDuration       = 1000000;// ms // Bursts last burstDuration ms
                                  //
    beginStim           = 0;      // Restrict stimulus to a window of time
    endStim             = -1;     // Run forever
                                  // 
    refractoryPeriod    = 3;
    absRefractoryPeriod = 1.5;
    restart             = 0;
    phase               = 0;
};


LIF "lif" = {
   nxScale             = 4;         //Flat architecture
   nyScale             = 4;         //
   nf                  = 1;         //
                                    // 
   writeStep           = 1; 		// Set to 1 to make post movie
                                    //
   marginWidth         = 13;
   mirrorBCflag        = 0;         // mirroring boundary conditions
   InitVType           = "ConstantV";
   method              = "beginning";
   valueV              = -70.0;
   restart             = 0.0;       // from graylast
   Vexc                = 0.0;       // reversal potential 
   Vinh                = -75.0;     // chloride channel
   VinhB               = -90.0;     // potassium reversal
   tau                 = 10.0;      // intrinsic leak membrane time constant (max)
   tauE                = 1.0;       // how long glutamine stays bound
   tauI                = 5.0;       // how long GABA stays bound
   tauIB               = 10.0;      // inhibitory potassium channel 
   Vrest               = -70.0;     // (mV) resting V level
   VthRest             = -55.0;     // (mV) firing threshold 15 mV above rest
   tauVth              = 10.0;      // 10.0 relative refractory period
   deltaVth            = 5.0;       // jump of threshold when firing
   noiseAmpE           = 0.02; //0.25;      // 0 to 1 means conductance is equal to lead conductance -gjk
   noiseAmpI           = 0.01; //0.25;      // 0 to 1 twice as easy for the membrane capacitance to discharge -gjk
   noiseAmpIB          = 0.0;       // no noise here 
   noiseFreqE          = 250.;      // spontaneous transmitter release/channel openings
   noiseFreqI          = 250.;      // correlation to time step size
   noiseFreqIB         = 0;         // should be scaled by the time constant - look at LIF model
   phase               = 0;
   writeSparseActivity = true;
   initialWriteTime    = 0;
};


////////////////////////////////////////////////////////////////////////////////
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
////////////////////////////////////////////////////////////////////////////////

KernelConn "ImagetoRetinaONCenter" = {
   preLayerName               = "Input";
   postLayerName              = "RetinaON";
   channelCode                = 0;
   nxp                        = 1; 
   nyp                        = 1; 
   nfp                        = 1;
   delay                      = 0;
                                 //
   initFromLastFlag           = 0;  
   writeStep                  = -1;
                                 //
   weightInitType             = "Gauss2DWeight";
   aspect                     = 1;
   sigma                      = 1;
   rMax                       = 1;   
   rMin                       = 0;
   strength                   = 5.33333333333;
   //combineWeightFiles         = false;
                                 //
   numAxonalArbors            = 1;
   plasticityFlag             = false;
   stochasticReleaseFlag      = false;
   preActivityIsNotRate       = false;
   writeCompressedWeights     = true;
   selfFlag                   = false;
   shrinkPatches              = false;
   normalizeTotalToPost       = true;
   normalize_cutoff           = false;
                                 //
   normalize                  = true;
   normalize_zero_offset      = 0.0;
   normalize_max              = 0.0;
   normalize_RMS_amp          = false;
   symmetrizeWeights          = 0;
   writeCompressedCheckpoints = false;
};

KernelConn "ImagetoRetinaOFFCenter" = {
   preLayerName               = "Input";
   postLayerName              = "RetinaOFF";
   channelCode                = 1;
   nxp                        = 1; 
   nyp                        = 1; 
   nfp                        = 1;
   delay                      = 0;
                                 //
   initFromLastFlag           = 0;  
   writeStep                  = -1;
                                 //
   weightInitType             = "Gauss2DWeight";
   aspect                     = 1;
   sigma                      = 1;
   rMax                       = 1;   
   rMin                       = 0;
   strength                   = 5.33333333333;
   //combineWeightFiles         = false;
                                 //
   numAxonalArbors            = 1;
   plasticityFlag             = false;
   stochasticReleaseFlag      = false;
   preActivityIsNotRate       = false;
   writeCompressedWeights     = true;
   selfFlag                   = false;
   shrinkPatches              = false;
   normalizeTotalToPost       = true;
   normalize_cutoff           = false;
                                 //
   normalize                  = true;
   normalize_zero_offset      = 0.0;
   normalize_max              = 0.0;
   normalize_RMS_amp          = false;
   symmetrizeWeights          = 0;
   writeCompressedCheckpoints = false;
};

KernelConn "ImagetoRetinaONSurround" = {
   preLayerName               = "Input";
   postLayerName              = "RetinaON";
   channelCode                = 1;
   nxp                        = 3;
   nyp                        = 3;
   nfp                        = 1;
   delay                      = 0;
                                 //
   initFromLastFlag           = 0;
   writeStep                  = -1;
                                 //
   weightInitType             = "Gauss2DWeight";
   aspect                     = 1;
   sigma                      = 1;
   rMax                       = 5;
   rMin                       = 0.1;
   strength                   = 5.33333333333;
   //combineWeightFiles         = false;
                                 //
   numAxonalArbors            = 1;
   plasticityFlag             = false;
   stochasticReleaseFlag      = false;
   preActivityIsNotRate       = false;
   writeCompressedWeights     = true;
   selfFlag                   = false;
   shrinkPatches              = false;
   normalizeTotalToPost       = true;
   normalize_cutoff           = false;
                                 //
   normalize                  = true;
   normalize_zero_offset      = 0.0;
   normalize_max              = 0.0;
   normalize_RMS_amp          = false;
   symmetrizeWeights          = 0;
   writeCompressedCheckpoints = false;
};

KernelConn "ImagetoRetinaOFFSurround" = {
   preLayerName               = "Input";
   postLayerName              = "RetinaOFF";
   channelCode                = 0;
   nxp                        = 3;
   nyp                        = 3;
   nfp                        = 1;
   delay                      = 0;
                                 //
   initFromLastFlag           = 0;
   writeStep                  = -1;
                                 //
   weightInitType             = "Gauss2DWeight";
   aspect                     = 1;
   sigma                      = 1;
   rMax                       = 5;
   rMin                       = 0.1;
   strength                   = 5.33333333333;
   //combineWeightFiles         = false;
                                 //
   numAxonalArbors            = 1;
   plasticityFlag             = false;
   stochasticReleaseFlag      = false;
   preActivityIsNotRate       = false;
   writeCompressedWeights     = true;
   selfFlag                   = false;
   shrinkPatches              = false;
   normalizeTotalToPost       = true;
   normalize_cutoff           = false;
                                 //
   normalize                  = true;
   normalize_zero_offset      = 0.0;
   normalize_max              = 0.0;
   normalize_RMS_amp          = false;
   symmetrizeWeights          = 0;
   writeCompressedCheckpoints = false;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OjaSTDPConn "RetinaONtoLif" = {
   preLayerName               = "RetinaON";
   postLayerName              = "lif";
   nxp                        = 28;    //7x7 receptive field
   nyp                        = 28;    //7x7 receptive field
   nfp                        = 1;     //flat architecture
   channelCode                = 0;     //
                                       //
   initFromLastFlag           = 0;     // 
                                       //
   writeStep                  = 10;    // Must be a multiple of postLayer's write step for analysis
                                       //
   ampLTP                     = 1;     // (ms)
   initAmpLTD                 = 1;     // (ms)
   tauLTP                     = 4;     // (ms)
   tauLTD                     = 8;     // (ms)
   tauOja                     = 150;   // (ms)
   tauTHR                     = 1000;  // (ms) thresholdAdaptationTime
   tauO                       = 300;   // (ms)
   targetPostRate             = 5;     // (Hz)
   targetPreRate              = 10;    // (Hz)
   weightDecay                = 0;     // How quickly STDP decays if no firing occurs
   dWMax                      = 2;     // How quickly STDP happens (unstable if high)
   weightScale                = 1;     // Modifies strength range for STDP (we want strengths to be around 0.25)
   wMin                       = 0.001; // Min value for weights
   //wMax                       = 1;     // Does not matter if ojaFlag = true
   ojaFlag                    = 1;     // Turns oja rule on or off. Standard STDP if off
   LTDscale                   = 1;     // Scale for the change of ampLTD. Must be positive; defaults to postVthRest - posVrest. If 0, adaptive LTD is fixed to initAmpLTD
                                       //
   numAxonalArbors            = 1;     // Needs to be 1 to have connections.
   //delay                      = [0,1,2,3,4];
   //useListOfArborFiles        = false;
                                   //
   weightInitType             = "UniformRandomWeight";
   //weightInit                 = 0.001;
   wMaxInit                   = 0.1;
   wMinInit                   = 0.01;
   normalize                  = false;
   //normalize_max              = false;
   //normalize_zero_offset      = 0.0;
   //strength                   = 0;     // Strength doesn't matter when weightInitType is UniformRandomWeight
   //symmetrizeWeights          = 0;
   //combineWeightFiles         = false;
                                   //
   combine_dW_with_W_flag     = false;
   selfFlag                   = false;
   plasticityFlag             = true;
   shrinkPatches              = false;
   writeCompressedWeights     = 0.0;
   stochasticReleaseFlag      = false;
   //weightUpdatePeriod         = 1.0;
                                   //
   synscalingFlag             = 0;
   synscaling_v               = 1;
   preActivityIsNotRate       = 0;
   writeCompressedCheckpoints = 0;
   sparseFraction             = 0;
   //initialWriteTime           = 0;
};


OjaSTDPConn "RetinaOFFtoLif" = {
   preLayerName               = "RetinaOFF";
   postLayerName              = "lif";
   nxp                        = 28;    // 7x7 receptive field
   nyp                        = 28;    // 7x7 receptive field
   nfp                        = 1;     // Flat architecture
   channelCode                = 0;     //
                                       //
   initFromLastFlag           = 0;     // 
                                       //
   writeStep                  = 10;    // Must be a multiple of postLayer's write step for analysis
                                       //
   ampLTP                     = 1;     // (ms)
   initAmpLTD                 = 1;     // (ms)
   tauLTP                     = 4;     // (ms)
   tauLTD                     = 8;     // (ms)
   tauOja                     = 150;   // (ms)
   tauTHR                     = 1000;  // (ms) thresholdAdaptationTime
   tauO                       = 300;   // (ms)
   targetPostRate             = 5;     // (Hz)
   targetPreRate              = 10;    // (Hz)
   weightDecay                = 0;     // How quickly STDP decays if no firing occurs
   dWMax                      = 2;     // How quickly STDP happens (unstable if high)
   weightScale                = 1;     // Modifies strength range for STDP (we want strengths to be around 0.25)
   wMin                       = 0.001; // Min value for weights
   //wMax                       = 1;     // Does not matter if ojaFlag = true
   ojaFlag                    = 1;     // Turns oja rule on or off. Standard STDP if off
   LTDscale                   = 1;     // Scale for the change of ampLTD. Must be positive; defaults to postVthRest - posVrest. If 0, adaptive LTD is fixed to initAmpLTD
                                       //
   numAxonalArbors            = 1;     // Needs to be 1 to have connections.
   //delay                      = [0,1,2,3,4];
   //useListOfArborFiles        = false;
                                   //
   weightInitType             = "UniformRandomWeight";
   //weightInit                 = 0.001;
   wMaxInit                   = 0.1;
   wMinInit                   = 0.01;
   normalize                  = false;
   //normalize_max              = false;
   //normalize_zero_offset      = 0.0;
   //strength                   = 0;     // Strength doesn't matter when weightInitType is UniformRandomWeight
   //symmetrizeWeights          = 0;
   //combineWeightFiles         = false;
                                   //
   combine_dW_with_W_flag     = false;
   selfFlag                   = false;
   plasticityFlag             = true;
   shrinkPatches              = false;
   writeCompressedWeights     = 0.0;
   stochasticReleaseFlag      = false;
   //weightUpdatePeriod         = 1.0;
                                   //
   synscalingFlag             = 0;
   synscaling_v               = 1;
   preActivityIsNotRate       = 0;
   writeCompressedCheckpoints = 0;
   sparseFraction             = 0;
   //initialWriteTime           = 0;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      
// Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      
// Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      Inhib connections      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LCALIFLateralConn "lif lateral inhibition" = {
    preLayerName               = "lif";
    postLayerName              = "lif";
    channelCode                = 1;
    nxp                        = 27; // 
    nyp                        = 27; // 
    nfp                        = 1;
                                     //
    integrationTimeConstant    = 40;
    inhibitionTimeConstant     = 1600000;
    targetRate                 = 1;
    coorThresh                 = 1;
                                     //
    numAxonalArbors            = 1;
    writeStep                  = -1;
    initFromLastFlag           = 0;
                                     //
    weightInitType             = "UniformWeight";
    weightInit                 = 1.0;
    dWMax                      = 1.0;
                                     //
    normalize                  = false;
    preActivityIsNotRate       = false;
                                     //
    writeCompressedWeights     = false;
    plasticityFlag             = true;
    selfFlag                   = false;
                                     //
    delay                      = 0;
                                     //
    stochasticReleaseFlag      = false;
    shrinkPatches              = false;
    combine_dW_with_W_flag     = false;
    writeCompressedCheckpoints = 0;
    //combineWeightFiles         = false;
};

////////////////////////////////////////////////////////////////////////////////
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
////////////////////////////////////////////////////////////////////////////////

PointLIFProbe "LIF_Probe" = {
   targetLayer     = "lif";
   probeOutputFile = "ptLIF.txt";
   xLoc            = 23;
   yLoc            = 23;
   fLoc            = 0;
};

OjaConnProbe "Oja_ON_Probe_Ver1" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifVer1.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 23; //About half of the radius out
    kyPost           = 15; //About the middle
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_ON_Probe_Ver2" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifVer2.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 24; //About half of the radius out
    kyPost           = 15; //About the middle
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_ON_Probe_Ver3" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifVer3.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 23; //About half of the radius out
    kyPost           = 16; //About the middle
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_ON_Probe_Ver4" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifVer4.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 24; //About half of the radius out
    kyPost           = 16; //About the middle
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_ON_Probe_Hor" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifHor.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 15; //About the middle
    kyPost           = 23; //About half of the radius out
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_ON_Probe_Dia" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLifDia.txt";
    msg              = "OjaON";
    isPostProbe      = true;
    kxPost           = 23; //About half of the radius out
    kyPost           = 23; //About half of the radius out
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_OFF_Probe_Ver" = {
    targetConnection = "RetinaOFFtoLif";
    probeOutputFile  = "retOFFtoLifVer.txt";
    msg              = "OjaOFF";
    isPostProbe      = true;
    kxPost           = 23; //About half of the radius out
    kyPost           = 15; //About the middle
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_OFF_Probe_Hor" = {
    targetConnection = "RetinaOFFtoLif";
    probeOutputFile  = "retOFFtoLifHor.txt";
    msg              = "OjaOFF";
    isPostProbe      = true;
    kxPost           = 15; //About the middle
    kyPost           = 23; //About half of the radius out
    kfPost           = 0;  //feature
};

OjaConnProbe "Oja_OFF_Probe_Dia" = {
    targetConnection = "RetinaOFFtoLif";
    probeOutputFile  = "retOFFtoLifDia.txt";
    msg              = "OjaOFF";
    isPostProbe      = true;
    kxPost           = 23; //About half of the radius out
    kyPost           = 23; //About half of the radius out
    kfPost           = 0;  //feature
};