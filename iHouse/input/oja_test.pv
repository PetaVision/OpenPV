///////////////////////////////////////////////////////////////////////////////////////////
// Parameter file for iHouse - Oja STDPConn
// DPaiton et SLundquist
///////////////////////////////////////////////////////////////////////////////////////////

HyPerCol "column" = {
   nx  			                = 64; 	// pixel width of input image
   ny                           = 64; 	// pixel height of input image
   dt                           = 1.;     // ms // according GK
   
   randomSeed 	                = 1020304050.0;   

   numSteps                     = 4000000;	// amount of time steps performed during run-time
   progressStep                 = 10000;     // write output to see progress
   writeProgressToErr           = 0;        // write progress steps to std err
   
   //outputPath                 = "~/Documents/workspace/iHouse/output";
   outputPath                   = "~/Documents/Work/LANL/workspace/iHouse/output"; //Dylan's Mac
   //outputPath                   = "~/workspace/iHouse/output"; //Dylan's Neuro
   
   filenamesContainLayerNames   = 2; 	// stores pvp files as: 0 = layer number/1 = layer number and layer name/2 = layer name
   
   checkpointRead  				= true;
   checkpointReadDir            = "~/Documents/Work/LANL/workspace/iHouse/checkpoints";
   checkpointReadDirIndex       = 3000000;
   checkpointWrite 				= false;
   //checkpointWriteDir  			= "~/Documents/workspace/iHouse/output/checkpoints";
   checkpointWriteDir  			= "~/Documents/Work/LANL/workspace/iHouse/checkpoints"; // Dylan's Mac
   //checkpointWriteDir  			= "~/workspace/iHouse/output/checkpoints"; // Dylan's Neuro
   checkpointWriteStepInterval  = 50000;
   suppressLastOutput           = 0;
   
   printParamsFilename          = "~/Documents/Work/LANL/workspace/iHouse/output/params_run.pv";
};


////////////////////////////////////////////////////////////////////////////////
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
// Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers Layers
////////////////////////////////////////////////////////////////////////////////


Patterns "input" = {
   nxScale                 = 1;
   nyScale                 = 1;
   nf                      = 1;
   
   patternType             = "DROP";

   dropSpeed               = 1;   //(pixels/dt) Radius expands dropSpeed pixles per timestep
   //dropSpeedRandomMax      = 3;   // only applies if dropSpeed = -1
   //dropSpeedRandomMin      = 1;   // only applies of dropSpeed = -1
   
   dropPeriod              = 50;  //(dt) -1 for random period, otherwise, number of frames inbetween drops
   //dropPeriodRandomMax     = 50;
   //dropPeriodRandomMin     = 15;
   
   maxValue                = 0.75;
   minValue                = 0.25;

   halfNeutral             = true;
   randomPos               = false;

   startFrame              = 0; 
   endFrame                = 400000000;
   
   writeImages             = false;
   
   //patternsOutputPath      = "~/Documents/workspace/iHouse/output/sourcefiles";
   patternsOutputPath      = "~/Documents/Work/LANL/workspace/iHouse/output/sourcefiles"; // Dylan's Mac
   //patternsOutputPath      = "~/workspace/iHouse/output/sourcefiles"; // Dylan's Neuro 
   
   displayPeriod           = 1;
   writeStep               = -1;
   marginWidth             = 0;
   spikingFlag             = 0;
   useImageBCflag          = false;
   mirrorBCflag            = false;
   inverseFlag             = false;
   
   writeNonspikingActivity = true;
   restart                 = 0;
};


ANNLayer "scaled_input" = {
    nxScale                 = 1;
    nyScale                 = 1;
    nf                      = 1;
    marginWidth             = 1;
    mirrorBCflag            = 1;
    spikingFlag             = false;
    writeStep               = -1;

    InitVType               = "ZeroV";

    VThresh                 = -infinity;
    VMax                    = infinity;
    VMin                    = -infinity;
    writeNonspikingActivity = 1;
    restart                 = 0;
};


Retina "RetinaON" = {
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 1;
    
    marginWidth         = 2;
    writeStep           = -1;
    mirrorBCflag        = 0;
    spikingFlag         = true;  // false (no quotes) is translated to 0

    noiseOnFreq         = 200;   // Hz // Max poisson spiking rate when input is 255
    noiseOffFreq        = 20;    // Hz // Min poisson spiking rate when input is 0

    burstFreq           = 50;    // Hz // Everything coming into the retina should be burstin burstFreq times per sec
    burstDuration       = 20;    // ms // Bursts last burstDuration ms

    beginStim           = 0;       // Restrict stimulus to a window of time
    endStim             = 10000000000;

    Vrest               = 0.0;
    
    refractoryPeriod    = 5;
    absRefractoryPeriod = 2;
    restart             = 0;
};


Retina "RetinaOFF" = {
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 1;
    
    marginWidth         = 2;
    writeStep           = -1;
    mirrorBCflag        = 0;
    spikingFlag         = true;  // false (no quotes) is translated to 0

    noiseOnFreq         = 200;   // Hz // Max poisson spiking rate when input is 255
    noiseOffFreq        = 20;    // Hz // Min poisson spiking rate when input is 0

    burstFreq           = 50;    // Hz // Everything coming into the retina should be burstin burstFreq times per sec
    burstDuration       = 20;    // ms // Bursts last burstDuration ms

    beginStim           = 0;       // Restrict stimulus to a window of time
    endStim             = 10000000000;
    
    Vrest               = 0.0;
    
    refractoryPeriod    = 5;
    absRefractoryPeriod = 2;
    restart             = 0;
};


LIF "lif" = {
   nxScale          = 1;		
   nyScale          = 1;		
   nf               = 1;       	
   
   writeStep        = 200;

   spikingFlag      = 1;       	
   marginWidth      = 0;     	
   mirrorBCflag     = 0;     	// mirroring boundary conditions
   InitVType        = "ConstantV";
   method           = "beginning";
   valueV			= -70.0;
   Vrest            = -70.0;    
   restart          = 0.0;     	// from graylast
   Vexc             = 0.0;     	// reversal potential 
   Vinh             = -75.0;   	// chloride channel
   VinhB            = -90.0;   	// potassium reversal
   tau              = 10.0;    	// intrinsic leak membrane time constant (max)
   tauE             = 1.0;     	// how long glutamine stays bound
   tauI             = 5.0;     	// how long GABA stays bound
   tauIB            = 10.0;    	// inhibitory potassium channel 
   VthRest          = -55.0;   	// firing threshold 15 mV above rest
   tauVth           = 10.0;    	// 10.0 relative refractory period
   deltaVth         = 5.0;     	// jump of threshold when firing
   noiseAmpE        = 1;     	// 0.5 1 means conductance is equal to lead conductance  gjk
   noiseAmpI        = 1;     	// 0,5 "twice as easy for the membrane capacitance to discharge" gjk
   noiseAmpIB       = 0.0;     	// no noise here 
   noiseFreqE       = 250.;    	// spontaneous transmitter release/channel openings
   noiseFreqI       = 250.;    	// correlation to time step size !!!
   noiseFreqIB      =   0.;    	// should be scaled by the time constant - look at LIF model
};


////////////////////////////////////////////////////////////////////////////////
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
// Connections Connections Connections Connections Connections Connections
////////////////////////////////////////////////////////////////////////////////

KernelConn "InputtoScaledInput" = {
    preLayerName  = "input";
    postLayerName = "scaled_input";

    channelCode   = 0;
    nxp           = 1;
    nyp           = 1;
    nfp           = 1;
    delay         = 0;

    numAxonalArbors  = 1;
    writeStep        = -1;
    initFromLastFlag = 0;
    
    weightInitType = "OneToOneWeights";
    weightInit     = 2.0;
      
    normalize              = false;
    symmetrizeWeights      = false;
    plasticityFlag         = false;
    stochasticReleaseFlag  = false;
    writeCompressedWeights = true;
    selfFlag               = false;
    shrinkPatches          = false;
    preActivityIsNotRate   = false;
    combineWeightFiles     = false;
};

KernelConn "ImagetoRetinaONCenter" = {
   preLayerName           = "scaled_input";
   postLayerName          = "RetinaON";
   channelCode            = 0;
   nxp                    = 1; 
   nyp                    = 1; 
   nfp                    = 1;
   delay                  = 0;
 
   stdpFlag               = 0;
   initFromLastFlag       = 0;  
   writeStep              = -1;

   weightInitType         = "Gauss2DWeight";
   aspect                 = 1;
   sigma                  = 1;
   rMax                   = 1;   
   rMin                   = 0;
   strength               = 50;
   combineWeightFiles     = false;
   
   numAxonalArbors        = 1;
   plasticityFlag         = false;
   stochasticReleaseFlag  = false;
   preActivityIsNotRate   = false;
   writeCompressedWeights = true;
   selfFlag               = false;
   shrinkPatches          = false;
   normalizeTotalToPost   = false;
   normalize_cutoff       = false;

   normalize              = true;
   normalize_zero_offset  = 0.0;
   normalize_max 	      = 0.0;
   symmetrizeWeights      = 0;
};

KernelConn "ImagetoRetinaONSurround" = {
   preLayerName           = "scaled_input";
   postLayerName          = "RetinaON";
   channelCode            = 1;
   nxp                    = 3;
   nyp                    = 3;
   nfp                    = 1;
   delay                  = 0;

   stdpFlag               = 0;
   initFromLastFlag       = 0;
   writeStep              = -1;

   weightInitType         = "Gauss2DWeight";
   aspect                 = 1;
   sigma                  = 1;
   rMax                   = 5;
   rMin                   = 0;
   strength               = 50;
   combineWeightFiles     = false;

   numAxonalArbors        = 1;
   plasticityFlag         = false;
   stochasticReleaseFlag  = false;
   preActivityIsNotRate   = false;
   writeCompressedWeights = true;
   selfFlag               = false;
   shrinkPatches          = false;
   normalizeTotalToPost   = false;
   normalize_cutoff       = false;
   
   normalize              = true;
   normalize_zero_offset  = 0.0;
   normalize_max          = 0.0;
   symmetrizeWeights      = 0;
};


KernelConn "ImagetoRetinaOFFCenter" = {
   preLayerName           = "scaled_input";
   postLayerName          = "RetinaOFF";
   channelCode            = 1;
   nxp                    = 1; 
   nyp                    = 1; 
   nfp                    = 1;
   delay                  = 0;
   
   stdpFlag               = 0;
   initFromLastFlag       = 0;  
   writeStep              = -1;

   weightInitType         = "Gauss2DWeight";
   aspect                 = 1;
   sigma                  = 1;
   rMax                   = 1;   
   rMin                   = 0;
   strength               = 50;
   combineWeightFiles     = false;

   numAxonalArbors        = 1;
   plasticityFlag         = false;
   stochasticReleaseFlag  = false;
   preActivityIsNotRate   = false;
   writeCompressedWeights = true;
   selfFlag               = false;
   shrinkPatches          = false;
   normalizeTotalToPost   = false;
   normalize_cutoff       = false;
   
   normalize              = true;
   normalize_zero_offset  = 0.0;
   normalize_max 	      = 0.0;
   symmetrizeWeights      = 0;
};


KernelConn "ImagetoRetinaOFFSurround" = {
   preLayerName           = "scaled_input";
   postLayerName          = "RetinaOFF";
   channelCode            = 0;
   nxp                    = 3;
   nyp                    = 3;
   nfp                    = 1;
   delay                  = 0;

   stdpFlag               = 0;
   initFromLastFlag       = 0;
   writeStep              = -1;

   weightInitType         = "Gauss2DWeight";
   aspect                 = 1;
   sigma                  = 1;
   rMax                   = 5;
   rMin                   = 0;
   strength               = 50;
   combineWeightFiles     = false;

   numAxonalArbors        = 1;
   plasticityFlag         = false;
   stochasticReleaseFlag  = false;
   preActivityIsNotRate   = false;
   writeCompressedWeights = true;
   selfFlag               = false;
   shrinkPatches          = false;
   normalizeTotalToPost   = false;
   normalize_cutoff       = false;
   
   normalize              = true;
   normalize_zero_offset  = 0.0;
   normalize_max          = 0.0;
   symmetrizeWeights      = 0;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
// STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      STDP connections      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OjaSTDPConn "RetinaONtoLif" = {
   preLayerName           = "RetinaON";
   postLayerName          = "lif";
   nxp                    = 5;
   nyp                    = 5;
   nfp                    = 1;
   channelCode            = 0;
   delay                  = 0.0;
   
   initFromLastFlag       = 0;      
   
   writeStep              = 200;
   
   normalize              = false;
   normalize_max          = false;
   normalize_zero_offset  = 0.0;
   strength               = 0;    // Strength doesn't matter when weightInitType is UniformRandomWeight
   combineWeightFiles     = false;
   
   ampLTP                 = 1;    // (ms)
   initAmpLTD             = 1;    // (ms)
   tauLTP                 = 8;    // (ms)
   tauLTD                 = 32;   // (ms)
   tauOja                 = 150;  // (ms)
   tauTHR                 = 5000; // (ms) thresholdAdaptationTime
   targetRate             = 20;   // (Hz)
   weightDecay            = 0;
   dWMax                  = 2;
   wMin                   = 0.001;
   wMax 	              = 1;    // Does not matter if ojaFlag = true
   numAxonalArbors        = 1;
   ojaFlag                = 1;    //Turns oja rule on or off. Standard STDP if off
   LTDscale               = 1;   // Scale for the change of ampLTD. Must be positive; defaults to postVthRest - posVrest. If 0, adaptive LTD is fixed to initAmpLTD
   
   combine_dW_with_W_flag = false;
   selfFlag               = false;

   weightInitType         = "UniformRandomWeight";
   weightInit             = 0.001;
   wMaxInit               = 0.0011;
   wMinInit               = 0.0011;
   
   symmetrizeWeights      = 0;
   
   plasticityFlag         = true;
   shrinkPatches          = false;
   writeCompressedWeights = 0.0;
   stochasticReleaseFlag  = false;
   weightUpdatePeriod     = 1.0;
   
   synscalingFlag         = 0;
   synscaling_v           = 1;
   preActivityIsNotRate   = 0;
   initialWriteTime       = 0;
};


OjaSTDPConn "RetinaOFFtoLif" = {
   preLayerName           = "RetinaOFF";
   postLayerName          = "lif";
   nxp                    = 5;
   nyp                    = 5;
   nfp                    = 1;
   channelCode            = 0;
   delay                  = 0.0;
   
   initFromLastFlag       = 0;  
   
   writeStep              = 200;
   
   normalize              = false;
   normalize_max          = false;
   normalize_zero_offset  = 0.0;
   strength               = 0;
   combineWeightFiles     = false;
   
   ampLTP                 = 1;    // (ms)
   initAmpLTD             = 1;    // (ms)
   tauLTP                 = 8;    // (ms)
   tauLTD                 = 32;   // (ms)
   tauOja                 = 150;  // (ms)
   tauTHR                 = 5000; // (ms) thresholdAdaptationTime
   targetRate             = 20;   // (Hz)
   weightDecay            = 0;
   dWMax                  = 2;
   wMin                   = 0.001;
   wMax 	              = 1;    // Does not matter if ojaFlag = true
   numAxonalArbors        = 1;
   ojaFlag                = 1;    //Turns oja rule on or off. Standard STDP if off
   LTDscale               = 1;    // Scale for the change of ampLTD. Must be positive; defaults to postVthRest - posVrest
   
   combine_dW_with_W_flag = false;
   selfFlag               = false;

   weightInitType         = "UniformRandomWeight";
   weightInit             = 0.001;
   wMaxInit               = 0.0011;
   wMinInit               = 0.0011;
   
   symmetrizeWeights      = 0;
   
   plasticityFlag         = true;
   shrinkPatches          = false;
   writeCompressedWeights = 0.0;
   stochasticReleaseFlag  = false;
   weightUpdatePeriod     = 1.0;
   
   synscalingFlag         = 0;
   synscaling_v           = 1;
   preActivityIsNotRate   = 0;
   initialWriteTime       = 0;
};

////////////////////////////////////////////////////////////////////////////////
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
// Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes Probes
////////////////////////////////////////////////////////////////////////////////

PointLIFProbe "LIF_Probe" = {
   targetLayer     = "lif";
   probeOutputFile = "ptLIF.txt";
   xLoc            = 47;
   yLoc            = 47;
   fLoc            = 0;
};

OjaConnProbe "Oja_ON_Probe" = {
    targetConnection = "RetinaONtoLif";
    probeOutputFile  = "retONtoLif.txt";
    msg              = "OjaON";
    kxPost           = 40; //About half way in
    kyPost           = 40; //About half way in
    kfPost           = 1;  //About half way in (1 feature)
};


OjaConnProbe "Oja_OFF_Probe" = {
    targetConnection = "RetinaOFFtoLif";
    probeOutputFile  = "retOFFtoLif.txt";
    msg              = "OjaOFF";
    kPost            = 2000;
    //kxPost           = 47; //About half way in
    //kyPost           = 47; //About half way in
    //kfPost           = 1;  //About half way in (1 feature)
};
