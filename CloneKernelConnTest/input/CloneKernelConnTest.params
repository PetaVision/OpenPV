//
// CloneKernelConnTest.params
//
// created by peteschultz: Feb 24, 2012
//

//  A params file for testing CloneKernelConn
//  A KernelConn and its clone separately act on a sequence of images.
//  One acts on the excitatory channel of an ANNLayer, and the other
//  on the inhibitory channel.  Since the two conns should be exactly
//  the same, the resulting layer should be zero
//

debugParsing = false;

HyPerCol "column" = {
   nx = 32;   
   ny = 32;
   dt = 1.0;
   dtAdaptFlag = false;
   randomSeed = 1554498580;  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 10;
   progressInterval = 10;
   writeProgressToErr = false;
   verifyWrites = true;
   errorOnNotANumber = false;
   outputPath = "output/";
   printParamsFilename = "pv.params";
   filenamesContainLayerNames = false;
   filenamesContainConnectionNames = false;
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   suppressLastOutput = false;
};

//
// layers
//

Movie "Input" = {
    imageListPath = "./input/images.txt";

    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;  
    autoResizeFlag = false;  
    padValue = 0;
    
    writeImages = false;
    writeFrameToTimestamp = false;

    displayPeriod = 100;
    flipOnTimescaleError = false;
    randomMovie = true;
    randomMovieProb = 0.25;
    // start_frame_index = 0;
    // skip_frame_index = 0;
    // echoFramePathnameFlag = false;
    jitterFlag = false;
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    resetToStartOnLoop = false;
};

ANNLayer "Retina" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "OutputFromOriginal" = {
    nxScale = 1;
    nyScale = 1;
    nf = 8;
    phase = 0;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "OutputFromClone" = {
    nxScale = 1;
    nyScale = 1;
    nf = 8;
    phase = 0;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "Comparison" = {
    nxScale = 1;
    nyScale = 1;
    nf = 8;
    phase = 0;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

HyPerConn "Original" = {
    preLayerName = "Input";
    postLayerName = "OutputFromOriginal";
    channelCode = 0;
    sharedWeights = true;
    nxp = 7;
    nyp = 7;
    nfp = 8;
    numAxonalArbors = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
      
    strength = 1.0;  // 1.0 x post->num_neurons / pre->num_neurons
    normalizeMethod = "normalizeSum";
    normalize_cutoff = 0.0;
    normalizeArborsIndividually = false;
    symmetrizeWeights = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    rMinX = 0;
    rMinY = 0;
    nonnegativeConstraintFlag = false;

    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;
    convertRateToSpikeCount = false;

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;
};

CloneConn "Clone" = {
    preLayerName = "Input";
    postLayerName = "OutputFromClone";
    
    originalConnName = "Original";

    channelCode = 0;

    writeStep = 1.0;
    initialWriteTime = 0.0;

    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    selfFlag = false;
    convertRateToSpikeCount = false;

    delay = 0;
    
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

IdentConn "ExcitatoryOutput" = {
    preLayerName = "OutputFromOriginal";
    postLayerName = "Comparison";

    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

IdentConn "InhibitoryOutput" = {
    preLayerName = "OutputFromClone";
    postLayerName = "Comparison";

    channelCode = 1;
    writeStep = -1;
    delay = 0;
};

IdentConn "InputToRetina" = {
    channelCode = 0;
    writeStep = -1;
    delay = 0;
};

CloneKernelConnTestProbe "ComparisonProbe" = {
    targetLayer = "Comparison";
    probeOutputFile = "Comparison_stats.txt";
    message = "CloneKernelConnTest probe      ";
    buffer = "Activity";
    triggerFlag = false;
    nnzThreshold = 0.0;
};

