function ...
      [ave_target, ...
       psth_target, ...
       ave_clutter, ...
       psth_clutter, ...
       ave_bkgrnd, ...
       psth_bkgrnd] = ...
      pvp_targetRate(layer, ...
		     epoch_struct, ...
		     layer_struct, ...
		     target_struct, ...
		     ave_target, ...
		     psth_target, ...
		     ave_clutter, ...
		     psth_clutter, ...
		     ave_bkgrnd, ...
		     psth_bkgrnd)

  global BIN_STEP_SIZE DELTA_T
  global pvp_order

  %%init PSTH
  for i_target = 1 : target_struct.num_targets
    ave_target{layer,i_target} = zeros( epoch_struct.epoch_steps(layer), 1 );
    psth_target{layer,i_target} = zeros( epoch_struct.epoch_bins(layer), 1 );
  endfor %% % i_target
  ave_clutter{layer,1} = zeros( epoch_struct.epoch_steps(layer), 1 );
  psth_clutter{layer,1} = zeros( epoch_struct.epoch_bins(layer), 1 );
  ave_bkgrnd{layer,1} = zeros( epoch_struct.epoch_steps(layer), 1 );
  psth_bkgrnd{layer,1} = zeros( epoch_struct.epoch_bins(layer), 1 );
  
  %% start loop over epochs
  for i_epoch = 1 : epoch_struct.num_epochs
    disp(['i_epoch = ', num2str(i_epoch)]);
    
    %% read spike train for this epoch
    [spike_array] = ...
        pvp_readSparseSpikes(layer, ...
			     i_epoch, ...
			     epoch_struct, ...
			     layer_struct, ...
			     pvp_order);
    if isempty(spike_array)
      continue;
    endif %%
    
    %% compute average activity for target and clutter
    for i_target = 1:target_struct.num_targets
      ave_tmp = ...
	  1000 * ...
	  sum(spike_array(:,target_struct.target_ndx_all{layer, i_target}),2) / ...
          ( target_struct.num_target_neurons_all(layer, i_target) + ...
	   ( target_struct.num_target_neurons_all(layer, i_target)==0 ) );
      ave_tmp = full(ave_tmp);
      ave_target{layer,i_target} = ...
	  ave_target{layer,i_target} + ave_tmp(1:epoch_struct.epoch_steps(layer));
      psth_target{layer,i_target} = ...
	  psth_target{layer,i_target} + ...
          mean( reshape(ave_tmp(1:epoch_struct.epoch_steps(layer)), ...
			BIN_STEP_SIZE, epoch_struct.epoch_bins(layer)  ), 1)';
    endfor %% % i_target
    ave_tmp = ...
	1000 * ...
	sum(spike_array(:,target_struct.clutter_ndx_all{layer}),2) / ...
        ( target_struct.num_clutter_neurons_all(layer) + ...
	 ( target_struct.num_clutter_neurons_all(layer)==0 ) );
    ave_tmp = full(ave_tmp);
    ave_clutter{layer} =  ...
	ave_clutter{layer} + ave_tmp(1:epoch_struct.epoch_steps(layer));
    psth_clutter{layer,1} = ...
	psth_clutter{layer,1} + ...
        mean( reshape( ave_tmp(1:epoch_struct.epoch_steps(layer)), ...
		      BIN_STEP_SIZE, epoch_struct.epoch_bins(layer)  ), 1)';
    ave_tmp = ...
        1000 * ...
	sum(spike_array(:,target_struct.bkgrnd_ndx_all{layer}),2) / ...
        ( target_struct.num_bkgrnd_neurons_all(layer) + ...
	 ( target_struct.num_bkgrnd_neurons_all(layer)==0 ) );
    ave_tmp = full(ave_tmp);
    ave_bkgrnd{layer} = ...
	ave_bkgrnd{layer} + ave_tmp(1:epoch_struct.epoch_steps(layer));
    psth_bkgrnd{layer,1} = ...
	psth_bkgrnd{layer,1} + ...
        mean( reshape( ave_tmp(1:epoch_struct.epoch_steps(layer)), ...
		      BIN_STEP_SIZE, epoch_struct.epoch_bins(layer)  ), 1)';
  endfor %% % i_epoch
