// TransposeHyPerConnTest.params

debugParsing = false;

HyPerCol "column" = {
    nx                                  = 32;
    ny                                  = 32;
    startTime                           = 0.0;
    stopTime                            = 1.0;
    dt                                  = 1.0;
    randomSeed                          = 570934122;
    progressInterval                    = 1.0;
    writeProgressToErr                  = false;
    outputPath                          = "output/";
    printParamsFilename                 = "pv.params";
    filenamesContainLayerNames          = 2;
    filenamesContainConnectionNames     = 2;
    initializeFromCheckpointDir         = "";
    // checkpointReadDirIndex;
    checkpointWrite                     = false;
    // checkpointWriteDir;
    // checkpointWriteStepInterval;
    // checkpointWriteTimeInterval;
    // deleteOlderCheckpoints;
    suppressLastOutput                  = false;
};

ANNLayer "Layer A" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 4;
    phase                               = 1;
    writeStep                           = -1;
    // initialWriteTime;
    // writeSparseActivity;
    mirrorBCflag                        = false;
    valueBC                             = 0.0;
    // GPUAccelerate;
    
    InitVType                           = "ZeroV";

    VThresh                             = -infinity;
    AMin                                = -infinity;
    AShift                              = 0.0;
    AMax                                = infinity;
};

ANNLayer "Layer B One to One" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 4;
    phase                               = 1;
    writeStep                           = -1;
    // initialWriteTime;
    // writeSparseActivity;
    mirrorBCflag                        = false;
    valueBC                             = 0.0;
    // GPUAccelerate;
    
    InitVType                           = "ZeroV";

    VThresh                             = -infinity;
    AMin                                = -infinity;
    AShift                              = 0.0;
    AMax                                = infinity;
};

ANNLayer "Layer B Many to One" = {
    nxScale                             = 0.25;
    nyScale                             = 0.25;
    nf                                  = 8;
    phase                               = 1;
    writeStep                           = -1;
    // initialWriteTime;
    // writeSparseActivity;
    mirrorBCflag                        = false;
    valueBC                             = 0.0;
    // GPUAccelerate;
    
    InitVType                           = "ZeroV";

    VThresh                             = -infinity;
    AMin                                = -infinity;
    AShift                              = 0.0;
    AMax                                = infinity;
};

ANNLayer "Layer B One to Many" = {
    nxScale                             = 4;
    nyScale                             = 4;
    nf                                  = 2;
    phase                               = 1;
    writeStep                           = -1;
    // initialWriteTime;
    // writeSparseActivity;
    mirrorBCflag                        = false;
    valueBC                             = 0.0;
    // GPUAccelerate;
    
    InitVType                           = "ZeroV";

    VThresh                             = -infinity;
    AMin                                = -infinity;
    AShift                              = 0.0;
    AMax                                = infinity;
};

HyPerConn "Original Map for One to One Test" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B One to One";
    channelCode                         = 0;
    sharedWeights                       = false;
    nxp                                 = 7;
    nyp                                 = 7;
    nxpShrunken                         = 7;
    nypShrunken                         = 7;
    nfp                                 = 4;
    numAxonalArbors                     = 2;
    // useWindowPost;
    delay                               = 0;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    plasticityFlag                      = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    // initialWriteTime;
    // writeCompressedWeights;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;

    weightInitType                      = "UniformRandomWeight";
    wMinInit                            = 1.0;
    wMaxInit                            = 2.0;
    sparseFraction                      = 0.0;
    
    normalizeMethod                     = "normalizeSum";
    
};

TransposeConn "Transpose for One to One Test of TransposeConn" = {
    preLayerName                        = "Layer B One to One";
    postLayerName                       = "Layer A";
    channelCode                         = 0;
    originalConnName                    = "Original Map for One to One Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

TransposeConn "Transpose of Transpose for One to One Test of TransposeConn" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B One to One";
    channelCode                         = 1;
    originalConnName                    = "Transpose for One to One Test of TransposeConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose for One to One Test of FeedbackConn" = {
    channelCode                         = 0;
    originalConnName                    = "Original Map for One to One Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose of Transpose for One to One Test of FeedbackConn" = {
    channelCode                         = 1;
    originalConnName                    = "Transpose for One to One Test of FeedbackConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

HyPerConn "Original Map for Many to One Test" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B Many to One";
    channelCode                         = 0;
    sharedWeights                       = false;
    nxp                                 = 7;
    nyp                                 = 7;
    nxpShrunken                         = 7;
    nypShrunken                         = 7;
    nfp                                 = 8;
    numAxonalArbors                     = 2;
    // useWindowPost;
    delay                               = 0;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    plasticityFlag                      = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    // initialWriteTime;
    // writeCompressedWeights;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;

    weightInitType                      = "UniformRandomWeight";
    wMinInit                            = 1.0;
    wMaxInit                            = 2.0;
    sparseFraction                      = 0.0;
    
    normalizeMethod                     = "normalizeSum";
    
};

TransposeConn "Transpose for Many to One Test of TransposeConn" = {
    preLayerName                        = "Layer B Many to One";
    postLayerName                       = "Layer A";
    channelCode                         = 0;
    originalConnName                    = "Original Map for Many to One Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

TransposeConn "Transpose of Transpose for Many to One Test of TransposeConn" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B Many to One";
    channelCode                         = 1;
    originalConnName                    = "Transpose for Many to One Test of TransposeConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose for Many to One Test of FeedbackConn" = {
    channelCode                         = 0;
    originalConnName                    = "Original Map for Many to One Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose of Transpose for Many to One Test of FeedbackConn" = {
    channelCode                         = 1;
    originalConnName                    = "Transpose for Many to One Test of FeedbackConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

HyPerConn "Original Map for One to Many Test" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B One to Many";
    channelCode                         = 0;
    sharedWeights                       = false;
    nxp                                 = 28;
    nyp                                 = 28;
    nxpShrunken                         = 28;
    nypShrunken                         = 28;
    nfp                                 = 2;
    numAxonalArbors                     = 2;
    // useWindowPost;
    delay                               = 0;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    plasticityFlag                      = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    // initialWriteTime;
    // writeCompressedWeights;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;

    weightInitType                      = "UniformRandomWeight";
    wMinInit                            = 1.0;
    wMaxInit                            = 2.0;
    sparseFraction                      = 0.0;
    
    normalizeMethod                     = "normalizeSum";
    
};

TransposeConn "Transpose for One to Many Test of TransposeConn" = {
    preLayerName                        = "Layer B One to Many";
    postLayerName                       = "Layer A";
    channelCode                         = 0;
    originalConnName                    = "Original Map for One to Many Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

TransposeConn "Transpose of Transpose for One to Many Test of TransposeConn" = {
    preLayerName                        = "Layer A";
    postLayerName                       = "Layer B One to Many";
    channelCode                         = 1;
    originalConnName                    = "Transpose for One to Many Test of TransposeConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose for One to Many Test of FeedbackConn" = {
    channelCode                         = 0;
    originalConnName                    = "Original Map for One to Many Test";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};

FeedbackConn "Transpose of Transpose for One to Many Test of FeedbackConn" = {
    channelCode                         = 1;
    originalConnName                    = "Transpose for One to Many Test of FeedbackConn";
    delay                               = 0;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
};
