
// // Based on HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

// // also based on HyPerHLCA_PASCAL_S1_96_SLP.params
//
// created by garkenyon, 7/11/14
//
//
// Uses a single (could be extended to multi)-layer perceptron-like (SLP/MLP)
// architecture to classify tiles drawn from the 
// PASCAL VOC2007 database.  
// Images were sparse coded using a locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
// If a hidder layer is used, it's features should be adapted to minimize classification
// error while the features themselves generate a sparse code of the 
// input layer usng a basis that has not been optimized for sparse reconstruction but rather
// for minimal classification error.
///////////////////////////



debugParsing = true;

HyPerCol "column" = {
  nx = 256; 
  ny = 192; //256; // 
  dt = 1.0;
  dtAdaptFlag = true;
  dtScaleMax = 10.0;
  dtScaleMin = 0.25;
  dtChangeMax = 0.1;
  dtChangeMin = 0.0;
  dtMinToleratedTimeScale = 1.0e-4;
  randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
  startTime =  0; //2400000; //
  stopTime =   1591000; // 52 landscape //7955 landscape images // 883 portrait images//  * displayPeriod
  progressInterval = 1000;
  outputPath = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape";
  filenamesContainLayerNames = true;
  filenamesContainConnectionNames = true;
  defaultInitializeFromCheckpointFlag = false;
  checkpointWrite = true;
  //checkpointWriteTriggerMode = "step";
  checkpointWriteDir = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints";
  checkpointWriteStepInterval = 50000;
  deleteOlderCheckpoints = false; //true;
    //suppressLastOutput = false;
  initializeFromCheckpointDir = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint180000";
  checkpointWriteTriggerMode = "step";
  writeProgressToErr = true;
  outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
  suppressLastOutput = false;
  printParamsFilename = "PASCAL_VOC_PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP_VOC2007_landscape.params";
  writeTimescales = true;
  verifyWrites = false; //true;
  errorOnNotANumber = false;
};



//
// layers
//


Movie "Image" = {
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/PASCAL_VOC/VOC2007/VOC2007_padded0_landscape_list.txt";
    nf = 3;
    initializeFromCheckpointFlag = false;
    writeStep = 2000;
    initialWriteTime = 2000;
    sparseLayer = false;
    displayPeriod = 200;
    start_frame_index = 0; //2346; 
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    normalizeStdDev = true;
    flipOnTimescaleError = true;
    writeImages = false;
    offsetX = 0; 
    offsetY = 0; 
    offsetAnchor = "tl";
    randomMovie = 0;
    autoResizeFlag = false;
    readPvpFile = false;
    updateGpu = false;
    phase = 0;
};

ANNNormalizedErrorLayer "ImageReconS1Error" = {
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initializeFromCheckpointFlag = false; //true;
    initialWriteTime = 2000.0;
    writeStep = 2000;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    VThresh = 0.0;
    AMax =  infinity;
    AMin = 0;
    AShift = 0;
    VWidth = 0;
    errScale = 1.0;
    //
    triggerFlag = false;
    updateGpu = false;
    phase = 1;  
};

HyPerLCALayer "S1" = {
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 96; //48; 
    initializeFromCheckpointFlag = false; //true;
    numChannels = 1; // should be 1
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 200.0;
    writeStep = 200.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = true;
    writeSparseValues = 1; 
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .1; //0.05 above VThresh
    InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S1_V.pvp";
    Vfilename = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S1_V.pvp";
    // 
    timeConstantTau = 100; //200; //100.0;
    //timeConstantTauMinimum = 10.0;
    //slopeErrorStd = 0.01;
    // 
    VThresh = 0.025; //
    AMax = infinity;
    AMin = 0;
    AShift = 0.0; //0.0; //0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.5; //0.05; //0.025; //0.025; //0.025; 
    selfInteract = true;   //
    triggerFlag = false;
    updateGpu = true;    
    phase = 2;
};


ANNLayer "ImageReconS1" = {
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2001.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "Image";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 3; 
};


// Residual layer driving S2 LCA layer
ANNErrorLayer "S1ReconS2Error" = {
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 96;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = 0.0;
    AMax =  infinity;
    AMin = 0;
    AShift = 0;
    VWidth = 0;
    errScale = 1.0;
    //
    triggerFlag = false;
    updateGpu = false;
    phase = 3;  
};


// use firm threshold with VWidth = 20Xs VThresh to help avoid local minima
HyPerLCALayer "S2" = {
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 1536; 
    numChannels = 1; // should be 1
    initializeFromCheckpointFlag = false;
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 200.0;
    writeStep = 200.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = true;
    writeSparseValues = 1; 
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .1; //0.05 above VThresh
    InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2_V.pvp";
    Vfilename = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2_V.pvp";
    // 
    timeConstantTau = 100; 
    //timeConstantTauMinimum = 10.0;
    //slopeErrorStd = 0.01;
    // 
    VThresh = 0.01; //0.005; // 0.025; //  
    AMax = infinity;
    AMin = 0;
    AShift = 0.0; //0.0; //0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.5; //0.1; 
    selfInteract = true;   //
    triggerFlag = false;
    updateGpu = true;     
    phase = 4;
};



ANNLayer "S1ReconS2" = {
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 96;
    //initialWriteTime = 201.0;
    initializeFromCheckpointFlag = false;
    writeStep = -1.0; 
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = false; //true;
    //triggerLayerName = "Image";
    //triggerOffset = 1;
    updateGpu = false;
    phase = 5; 
};



ANNLayer "ImageReconS2" = {
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2001.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = true;
    triggerLayerName = "Image";
    triggerOffset = 1;
    updateGpu = false;
    phase = 1; 
};


ANNLayer "ImageReconS2Error" = {
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initializeFromCheckpointFlag = false; //true;
    initialWriteTime = 2001.0;
    writeStep = 2000;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax =  infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
    //errScale = 1.0;
    //
    triggerFlag = true;
    triggerLayerName = "Image";
    triggerOffset = 1;
    updateGpu = false;
    phase = 2;  
};





// 2nd order task-based dictionary layers -- sparse MLP

//The ground truth layer: sparse coded image planes with bounding box annotations in PetaVision format
// nf == number of object categories
Movie "ClassID" = {
  nxScale = 1;
  nyScale = 1;
    nf = 20;
    initializeFromCheckpointFlag = false;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/PASCAL_VOC/VOC2007/VOC2007_padded0_landscape_classID.pvp";
    writeStep = -1; //10000;
    //initialWriteTime = 10000;
    sparseLayer = true;
    writeSparseValues = false;
    displayPeriod = 200;
    start_frame_index = 0; //5206; 
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false; //true;
    valueBC = 0.0;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false; //true;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0; 
    offsetY = 0; 
    randomMovie = 0;
    autoResizeFlag = false;
    flipOnTimescaleError = true;
    updateGpu = false;
    phase = 0;
    //useParamsImage = true;
};



// GroundTruth uses max pooling to match desired resolution of output tiling
// * each output tile aquires the classIDs of any of the original bounding boxes that it overlapps 
ANNLayer "GroundTruth_16X12" = {
  nxScale = 0.0625; // 
  nyScale = 0.0625; // 
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = true;
  writeSparseValues = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 1; 
};



// convolve to the Recon layer and then use an ident conn to update the error layer
// convenient for comparing ground truth and reconstructed classID heatmaps
ANNLayer "GroundTruthReconS2_16X12" = {
  nxScale = 0.0625;
  nyScale = 0.0625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 7; 
};



// difference betwee ground truth and S2 based reconstruction of ground truth
// an ordinary error layer works the same
// but a normalizedErrorLayer calculates/writes useful 1/Error info if dtAdaptFlag is set
// switch to LabelErrorLayer, which truncates errors for correct postive classifications to negative values and correct negative classifications to negative values 
//LabelErrorLayer "GroundTruthError" = {
ANNLayer "GroundTruthError_16X12" = {
  nxScale = 0.0625;
  nyScale = 0.0625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax =  infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
  //errScale = 1.0;
  //isBinary = true;
    //
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 8;  
};

ConstantLayer "Bias_16X12" = {
    restart = 0;
    nxScale = 0.0625; 
    nyScale = 0.0625;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};



ANNLayer "S2MaxPooled_16X12" = {
  nxScale = 0.0625;
  nyScale = 0.0625;
    nf = 1536;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 5; 
};



ANNLayer "S2SumPooled_16X12" = {
  nxScale = 0.0625;
  nyScale = 0.0625;
    nf = 1536;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 5; 
};





// GroundTruth uses max pooling to match desired resolution of output tiling
// * each output tile aquires the classIDs of any of the original bounding boxes that it overlapps 
ANNLayer "GroundTruth_4X3" = {
  nxScale = 0.015625; // 
  nyScale = 0.015625; // 
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = true;
  writeSparseValues = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 1; 
};



// convolve to the Recon layer and then use an ident conn to update the error layer
// convenient for comparing ground truth and reconstructed classID heatmaps
ANNLayer "GroundTruthReconS2_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 7; 
};



// difference betwee ground truth and S2 based reconstruction of ground truth
// an ordinary error layer works the same
// but a normalizedErrorLayer calculates/writes useful 1/Error info if dtAdaptFlag is set
// switch to LabelErrorLayer, which truncates errors for correct postive classifications to negative values and correct negative classifications to negative values 
//LabelErrorLayer "GroundTruthError" = {
ANNLayer "GroundTruthError_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax =  infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
  //errScale = 1.0;
  //isBinary = true;
    //
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 8;  
};

ConstantLayer "Bias_4X3" = {
    restart = 0;
    nxScale = 0.015625; 
    nyScale = 0.015625;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};



ANNLayer "S2MaxPooled_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 1536;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 5; 
};



ANNLayer "S2SumPooled_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 1536;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 2000.0;
    writeStep = 2000.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 2;
    updateGpu = false;
    phase = 5; 
};














//
//Connections
//


// 1st Level LCA (unsupervised)

HyPerConn "ImageToImageReconS1Error" = {
    preLayerName = "Image";
    postLayerName = "ImageReconS1Error";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1; 
    nypShrunken = 1; 
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = 0.0555; // 1/sqrt(18*18); 
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
};




HyPerConn "S1ToImageReconS1Error" = {
    preLayerName = "S1";
    postLayerName = "ImageReconS1Error";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 18;
    nypShrunken = 18;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S1ToImageReconS1Error_W.pvp";
    initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S1ToImageReconS1Error_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1.0;  
    normalizeMethod = "normalizeL2";
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    rMinX = 0.0;
    rMinY = 0.0;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 200.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "Image";
    triggerFlag = true;
    triggerOffset = 1;
    //imprintTimeThresh = 20000.0;
    //initialWriteTime = 0.0;
    dWMax = 1.0; //5.0; // 10.0; //
    //selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


TransposeConn "ImageReconS1ErrorToS1" = {
    preLayerName = "ImageReconS1Error";
    postLayerName = "S1";
    channelCode = 0;
    originalConnName = "S1ToImageReconS1Error";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true; 
    receiveGpu = true;
    preDataLocal = true;
    numXLocal = 32;
    numYLocal = 1;
    numFLocal = 1;    
};

CloneConn "S1ToImageReconS1" = {
    preLayerName = "S1";
    postLayerName = "ImageReconS1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "S1ToImageReconS1Error";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


// copy S1 activity to the + channel of the S1 reconstruction error layer
IdentConn "S1ToS1ReconS2Error" = {
    preLayerName = "S1";
    postLayerName = "S1ReconS2Error";
    channelCode = 0;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};



// conventional LCA connection for training S2 to S1 weights to minimize sparse reconstruction error
// ** used for initialize S2ToS1 weights
HyPerConn "S2ToS1ReconS2Error" = {
    preLayerName = "S2";
    postLayerName = "S1ReconS2Error";
    channelCode = -1;
    nxp = 10; // 36x36 patch size (in pixels)
    nyp = 10;
    nxpShrunken = 10;
    nypShrunken = 10;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2ToS1ReconS2Error_W.pvp";
    initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2ToS1ReconS2Error_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    // Normalize this connection to prevent weights from growing without bound
    // Smaller "strength" should correspond to better generalization but possibly lower performance, 
    // similar to "C" parameter in SVM
    //normalizeMethod = "none";
    normalizeMethod = "normalizeL2";
    strength = 1.0;  
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false; 
    symmetrizeWeights = false;
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    rMinX = 0;
    rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    //keepKernelsSynchronized = true; 
    //combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 200.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "Image";
    triggerFlag = true;
    triggerOffset = 1;
    //imprintTimeThresh = 20000.0;
    //initialWriteTime = 0.0;
    dWMax = 1.0; //0.1; 
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// Clone of S2 to S1ReconS2Error 
CloneConn "S2ToS1ReconS2" = {
    preLayerName = "S2";
    postLayerName = "S1ReconS2";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2ToS1ReconS2Error";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;  
    receiveGpu = false; 
};



// copy reconstructed S1 activity to the - channel of the S1 recon error layer
IdentConn "S1ReconS2ToS1ReconS2Error" = {
    preLayerName = "S1ReconS2";
    postLayerName = "S1ReconS2Error";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};



// connection to + channel of S2 LCA layer trained for minimizing sparse reconstruction error
TransposeConn "S1ReconS2ErrorToS2" = {
    preLayerName = "S1ReconS2Error";
    postLayerName = "S2";
    channelCode = 0; // -1; //
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2ToS1ReconS2Error";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = true;     
    receiveGpu = true;
    preDataLocal = true;
    numXLocal = 16;
    numYLocal = 1;
    numFLocal = 1;
};


// for visualizing S2 reconstructions
CloneConn "S1ReconS2ToImageReconS2" = {
    preLayerName = "S1ReconS2";
    postLayerName = "ImageReconS2";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S1ToImageReconS1";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



HyPerConn "ImageToImageReconS2Error" = {
    preLayerName = "Image";
    postLayerName = "ImageReconS2Error";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1; 
    nypShrunken = 1; 
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = 0.0555; // 1/sqrt(18*18); //1.0625;  // 1/sqrt(16*16);  // force unit L2 norm
    //weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



IdentConn "ImageReconS2ToImageReconS2Error" = {
    preLayerName = "ImageReconS2";
    postLayerName = "ImageReconS2Error";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// 2nd Level Task-Based Sparse-Multi-Layer-Perceptron

// the following 5 connections are for training S2 to ground truth weights to minimize classification error

// downsample ClassID to GroundTruth using max pooling
HyPerConn "ClassIDToGroundTruth_16X12" = {
    preLayerName = "ClassID";
    postLayerName = "GroundTruth_16X12";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



// target for defining classification error for training final MLP stage
IdentConn "GroundTruthToGroundTruthError_16X12" = {
    preLayerName = "GroundTruth_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = 0;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1;
    //nypShrunken = 1;
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //receiveGpu = false; //true;
    //updateGSynFromPostPerspective = false;     
};


HyPerConn "S2ToS2MaxPooled_16X12" = {
    preLayerName = "S2";
    postLayerName = "S2MaxPooled_16X12";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



HyPerConn "S2ToS2SumPooled_16X12" = {
    preLayerName = "S2";
    postLayerName = "S2SumPooled_16X12";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
        
    shrinkPatches = false;
    writeCompressedWeights = 0.0;
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none"; //"normalizeSum";
    //strength = 1.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "sumpooling";
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = false;
    //minSumTolerated = 0.00001;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = true;
    //symmetrizeWeights = false;
    //rMinX = 0.0;
    //rMinY = 0.0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



// generates final predicted classification using learned weights (routed through a reconstruction layer for ease of visualization)
HyPerConn "S2MaxPooledToGroundTruthError_16X12" = {
    preLayerName = "S2MaxPooled_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = -1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2MaxPooledToGroundTruthError_16X12_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2MaxPooledToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "S2SumPooledToGroundTruthError_16X12" = {
    preLayerName = "S2SumPooled_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = -1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2SumPooledToGroundTruthError_16X12_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2SumPooledToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "BiasToGroundTruthError_16X12" = {
    preLayerName = "Bias_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = 1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/BiasToGroundTruthError_16X12_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/BiasToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


// visualization of predicted classification
CloneConn "S2MaxPooledToGroundTruthReconS2_16X12" = {
    preLayerName = "S2MaxPooled_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "S2SumPooledToGroundTruthReconS2_16X12" = {
    preLayerName = "S2SumPooled_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2SumPooledToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "BiasToGroundTruthReconS2_16X12" = {
    preLayerName = "Bias_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "BiasToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


// subtracts prediction from ground truth to compute classification error 
IdentConn "GroundTruthReconS2ToGroundTruthError_16X12" = {
    preLayerName = "GroundTruthReconS2_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};



// downsample ClassID to GroundTruth using max pooling
HyPerConn "ClassIDToGroundTruth_4X3" = {
    preLayerName = "ClassID";
    postLayerName = "GroundTruth_4X3";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



// target for defining classification error for training final MLP stage
IdentConn "GroundTruthToGroundTruthError_4X3" = {
    preLayerName = "GroundTruth_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = 0;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1;
    //nypShrunken = 1;
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //receiveGpu = false; //true;
    //updateGSynFromPostPerspective = false;     
};


HyPerConn "S2ToS2MaxPooled_4X3" = {
    preLayerName = "S2";
    postLayerName = "S2MaxPooled_4X3";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



HyPerConn "S2ToS2SumPooled_4X3" = {
    preLayerName = "S2";
    postLayerName = "S2SumPooled_4X3";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "MaxPoolingWeight"; //"UniformWeight";
    //connectOnlySameFeatures = true;
    //weightInit = 1.0;
    normalizeMethod = "none"; //"normalizeSum";
    //strength = 1.0;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = false;
    //minSumTolerated = 0.00001;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = true;
    //symmetrizeWeights = false;
    //rMinX = 0.0;
    //rMinY = 0.0;
    
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "sumpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; //true;
};



// generates final predicted classification using learned weights (routed through a reconstruction layer for ease of visualization)
HyPerConn "S2MaxPooledToGroundTruthError_4X3" = {
    preLayerName = "S2MaxPooled_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = -1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2MaxPooledToGroundTruthError_4X3_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2MaxPooledToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "S2SumPooledToGroundTruthError_4X3" = {
    preLayerName = "S2SumPooled_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = -1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2SumPooledToGroundTruthError_4X3_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/S2SumPooledToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "BiasToGroundTruthError_4X3" = {
    preLayerName = "Bias_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = 1;
    nxp = 1; // 7x7 -> 60x60 pixels converge to each ground truth tile
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    //weightInitType = "FileWeight";
    ////initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2_1536_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/BiasToGroundTruthError_4X3_W.pvp";
    //initWeightsFile = "/nh/compneuro/Data/PASCAL_VOC/PASCAL_S1_96_S2SumMaxPooled_1536_MLP/VOC2007_landscape/Checkpoints/Checkpoint260000/BiasToGroundTruthError_16X12_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -0.001;
    wMaxInit = 0.001;
    sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.005; //0.01; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


// visualization of predicted classification
CloneConn "S2MaxPooledToGroundTruthReconS2_4X3" = {
    preLayerName = "S2MaxPooled_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "S2SumPooledToGroundTruthReconS2_4X3" = {
    preLayerName = "S2SumPooled_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2SumPooledToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "BiasToGroundTruthReconS2_4X3" = {
    preLayerName = "Bias_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "BiasToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


// subtracts prediction from ground truth to compute classification error 
IdentConn "GroundTruthReconS2ToGroundTruthError_4X3" = {
    preLayerName = "GroundTruthReconS2_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};










