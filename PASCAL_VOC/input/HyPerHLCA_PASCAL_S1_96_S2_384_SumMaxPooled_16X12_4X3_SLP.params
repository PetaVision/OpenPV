// // Based on HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

// 
//
// modified by garkenyon, 1/11/15
//
//
// Uses a single (could be extended to multi)-layer perceptron-like (SLP/MLP)
// architecture to classify tiles drawn from the 
// PASCAL VOC2007 database.  
// Images were sparse coded using a locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
// If a hidder layer is used, it's features should be adapted to minimize classification
// error while the features themselves generate a sparse code of the 
// input layer usng a basis that has not been optimized for sparse reconstruction but rather
// for minimal classification error.
///////////////////////////



debugParsing = true;

HyPerCol "column" = {
  nx = 256; 
  ny = 192; //256; // 
  dt = 1.0;
  dtAdaptFlag = true;
  dtScaleMax = 10.0;
  dtScaleMin = 0.25;
  dtChangeMax = 0.1;
  dtChangeMin = 0.0;
  dtMinToleratedTimeScale = 1.0e-4;
  randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
  startTime =  0; //2400000; //
  stopTime =   1591000; // 52 squre //7955 landscape images // 883 portrait images//  * displayPeriod
  progressInterval = 1000;
  outputPath = "~/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape";
  filenamesContainLayerNames = true;
  filenamesContainConnectionNames = true;
  defaultInitializeFromCheckpointFlag = false;
  checkpointWrite = true;
  //checkpointWriteTriggerMode = "step";
  checkpointWriteDir = "~/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints";
  checkpointWriteStepInterval = 200000;
  deleteOlderCheckpoints = false; //true;
    //suppressLastOutput = false;
  initializeFromCheckpointDir = "~/workspace/PASCAL_VOC/PASCAL_S1_96_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000";
  checkpointWriteTriggerMode = "step";
  writeProgressToErr = true;
  outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
  suppressLastOutput = false;
  printParamsFilename = "PASCAL_VOC_PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP_VOC2007_landscape.params";
  writeTimescales = true;
  verifyWrites = true;
  errorOnNotANumber = false;
};



//
// layers
//


Movie "Image" = {
    nxScale = 1;
    nyScale = 1;
    imageListPath = "~/workspace/PASCAL_VOC/VOC2007/VOC2007_padded0_landscape_list.txt";
    nf = 3;
    initializeFromCheckpointFlag = false;
    writeStep = 666;
    initialWriteTime = 666;
    sparseLayer = false;
    displayPeriod = 1; //200;
    start_frame_index = 0; //2346; 
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    normalizeStdDev = true;
    flipOnTimescaleError = true;
    writeImages = false;
    offsetX = 0; 
    offsetY = 0; 
    offsetAnchor = "tl";
    randomMovie = 0;
    autoResizeFlag = false;
    readPvpFile = false;
    updateGpu = false;
    phase = 0;
};




Movie "S2" = {
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 384; 
    initializeFromCheckpointFlag = false;
    readPvpFile = true;
    imageListPath = "~/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_MLP/VOC2007_landscape9/a5_S2.pvp";
    writeStep = -1; //10000;
    //initialWriteTime = 10000;
    sparseLayer = true;
    writeSparseValues = false;
    displayPeriod = 1;
    start_frame_index = 0; //2346; 
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false; //true;
    valueBC = 0.0;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false; //true;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0; 
    offsetY = 0; 
    randomMovie = 0;
    autoResizeFlag = false;
    flipOnTimescaleError = true;
    updateGpu = false;
    phase = 0;
};






// 2nd order task-based dictionary layers -- sparse MLP

//The ground truth layer: sparse coded image planes with bounding box annotations in PetaVision format
// nf == number of object categories
Movie "ClassID" = {
  nxScale = 1;
  nyScale = 1;
    nf = 20;
    initializeFromCheckpointFlag = false;
    readPvpFile = true;
    imageListPath = "/home/gkenyon/workspace/PASCAL_VOC/VOC2007/VOC2007_padded0_landscape_classID.pvp";
    writeStep = -1; //10000;
    //initialWriteTime = 10000;
    sparseLayer = true;
    writeSparseValues = false;
    displayPeriod = 1;
    start_frame_index = 0; //2346; 
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false; //true;
    valueBC = 0.0;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false; //true;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0; 
    offsetY = 0; 
    randomMovie = 0;
    autoResizeFlag = false;
    flipOnTimescaleError = true;
    updateGpu = false;
    phase = 0;
    //useParamsImage = true;
};



// GroundTruth uses max pooling to match desired resolution of output tiling
// * each output tile aquires the classIDs of any of the original bounding boxes that it overlapps 
ANNLayer "GroundTruth_16X12" = {
  nxScale = 0.06250; // 
  nyScale = 0.06250; // 
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = true;
  writeSparseValues = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 1; 
};



// convolve to the Recon layer and then use an ident conn to update the error layer
// convenient for comparing ground truth and reconstructed classID heatmaps
ANNLayer "GroundTruthReconS2_16X12" = {
  nxScale = 0.06250;
  nyScale = 0.06250;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 4; 
};



// difference betwee ground truth and S2 based reconstruction of ground truth
// an ordinary error layer works the same
// but a normalizedErrorLayer calculates/writes useful 1/Error info if dtAdaptFlag is set
// switch to LabelErrorLayer, which truncates errors for correct postive classifications to negative values and correct negative classifications to negative values 
//LabelErrorLayer "GroundTruthError" = {
//ANNWeightedErrorLayer "GroundTruthError" = {
ANNLayer "GroundTruthError_16X12" = {
  nxScale = 0.06250;
  nyScale = 0.06250;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
  VThresh = -infinity;
    AMax =  infinity;
  AMin = -infinity;
    AShift = 0;
    VWidth = 0;
  errScale = 1.0;
  //errWeightsFileName = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_MLP/VOC2007_landscape7/Sparse/Sparse_hist_unsorted_GroundTruth_00684000.txt";
  //errWeightsFileName = "/home/gkenyon/workspace/PASCAL_VOC/Sparse_hist_unsorted_GroundTruth_00684000.txt";
  //isBinary = true;
    //
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 5;  
};

ConstantLayer "Bias_16X12" = {
    restart = 0;
    nxScale = 0.06250; 
    nyScale = 0.06250;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};


ANNLayer "S2MaxPooled_16X12" = {
    nxScale = 0.0625;
    nyScale = 0.0625;
    nf = 384;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = -1.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = true;
    triggerLayerName = "ClassID";
    triggerOffset = 0;
    updateGpu = false;
    phase = 2; 
};


ANNLayer "S2SumPooled_16X12" = {
    nxScale = 0.0625;
    nyScale = 0.0625;
    nf = 384;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = -1.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = true;
    triggerLayerName = "ClassID";
    triggerOffset = 0;
    updateGpu = false;
    phase = 2; 
};


//
// repeat SLP at lower resolution to capture larger objects
ANNLayer "GroundTruth_4X3" = {
  nxScale = 0.015625; // 
  nyScale = 0.015625; // 
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = true;
  writeSparseValues = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 1; 
};



// convolve to the Recon layer and then use an ident conn to update the error layer
// convenient for comparing ground truth and reconstructed classID heatmaps
ANNLayer "GroundTruthReconS2_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666.0;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 4; 
};



// difference betwee ground truth and S2 based reconstruction of ground truth
// an ordinary error layer works the same
// but a normalizedErrorLayer calculates/writes useful 1/Error info if dtAdaptFlag is set
// switch to LabelErrorLayer, which truncates errors for correct postive classifications to negative values and correct negative classifications to negative values 
//LabelErrorLayer "GroundTruthError_4X3" = {
//ANNWeightedErrorLayer "GroundTruthError_4X3" = {
ANNLayer "GroundTruthError_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 20;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = 666;
    mirrorBCflag = 0;
    valueBC = 0.0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
  VThresh = -infinity;
    AMax =  infinity;
  AMin = -infinity;
    AShift = 0;
    VWidth = 0;
  errScale = 1.0;
  //errWeightsFileName = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_MLP/VOC2007_landscape7/Sparse/Sparse_hist_unsorted_GroundTruth_00684000.txt";
  //errWeightsFileName = "/home/gkenyon/workspace/PASCAL_VOC/Sparse_hist_unsorted_GroundTruth_00684000.txt";
  //isBinary = true;
    //
    triggerLayerName = "ClassID";
    triggerFlag = true;
    triggerOffset = 0;
    updateGpu = false;
    phase = 5;  
};

ConstantLayer "Bias_4X3" = {
    restart = 0;
    nxScale = 0.015625; 
    nyScale = 0.015625;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};


ANNLayer "S2MaxPooled_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 384;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = -1.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = true;
    triggerLayerName = "ClassID";
    triggerOffset = 0;
    updateGpu = false;
    phase = 2; 
};


ANNLayer "S2SumPooled_4X3" = {
  nxScale = 0.015625;
  nyScale = 0.015625;
    nf = 384;
    initializeFromCheckpointFlag = false;
    initialWriteTime = 666.0;
    writeStep = -1.0;
    mirrorBCflag = 0;
    valueBC = 0;
    sparseLayer = false;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    VWidth = 0.0; 
    // 
    triggerFlag = true;
    triggerLayerName = "ClassID";
    triggerOffset = 0;
    updateGpu = false;
    phase = 2; 
};













//
//Connections
//



// downsample ClassID to GroundTruth using max pooling
HyPerConn "ClassIDToGroundTruth_16X12" = {
    preLayerName = "ClassID";
    postLayerName = "GroundTruth_16X12";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// target for defining classification error for training final MLP stage
IdentConn "GroundTruthToGroundTruthError_16X12" = {
    preLayerName = "GroundTruth_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = 0;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1;
    //nypShrunken = 1;
    //sharedWeights = true;
    //numAxonalArbors = 1;
    //initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //receiveGpu = false;
    //updateGSynFromPostPerspective = false;     
};



HyPerConn "S2ToS2MaxPooled_16X12" = {
    preLayerName = "S2";
    postLayerName = "S2MaxPooled_16X12";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



HyPerConn "S2ToS2SumPooled_16X12" = {
    preLayerName = "S2";
    postLayerName = "S2SumPooled_16X12";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "sumpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// generates final predicted classification using learned weights (routed through a reconstruction layer for ease of visualization)
HyPerConn "S2MaxPooledToGroundTruthError_16X12" = {
    preLayerName = "S2MaxPooled_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = -1;
    nxp = 1; // 11x11->76x76, pixels converge to each ground truth patch
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2MaxPooledToGroundTruthError_16X12_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "S2SumPooledToGroundTruthError_16X12" = {
    preLayerName = "S2SumPooled_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = -1;
    nxp = 1; // 11x11->76x76, pixels converge to each ground truth patch
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2SumPooledToGroundTruthError_16X12_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "BiasToGroundTruthError_16X12" = {
    preLayerName = "Bias_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = -1;
    nxp = 1; // 
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/BiasToGroundTruthError_16X12_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


// visualization of predicted classification
CloneConn "S2MaxPooledToGroundTruthReconS2_16X12" = {
    preLayerName = "S2MaxPooled_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "S2SumPooledToGroundTruthReconS2_16X12" = {
    preLayerName = "S2SumPooled_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "BiasToGroundTruthReconS2_16X12" = {
    preLayerName = "Bias_16X12";
    postLayerName = "GroundTruthReconS2_16X12";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "BiasToGroundTruthError_16X12";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


// subtracts prediction from ground truth to compute classification error 
IdentConn "GroundTruthReconS2ToGroundTruthError_16X12" = {
    preLayerName = "GroundTruthReconS2_16X12";
    postLayerName = "GroundTruthError_16X12";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    //initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};




// connections to 4X3 SLP

// downsample ClassID to GroundTruth using max pooling
HyPerConn "ClassIDToGroundTruth_4X3" = {
    preLayerName = "ClassID";
    postLayerName = "GroundTruth_4X3";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// target for defining classification error for training final MLP stage
IdentConn "GroundTruthToGroundTruthError" = {
    preLayerName = "GroundTruth_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = 0;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1;
    //nypShrunken = 1;
    //sharedWeights = true;
    //numAxonalArbors = 1;
    //initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    //pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //receiveGpu = false;
    //updateGSynFromPostPerspective = false;     
};



HyPerConn "S2ToS2MaxPooled_4X3" = {
    preLayerName = "S2";
    postLayerName = "S2MaxPooled_4X3";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



HyPerConn "S2ToS2SumPooled_4X3" = {
    preLayerName = "S2";
    postLayerName = "S2SumPooled_4X3";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nxpShrunken = 3;
    nypShrunken = 3;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    weightInit = 1.0;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "sumpooling";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};



// generates final predicted classification using learned weights (routed through a reconstruction layer for ease of visualization)
HyPerConn "S2MaxPooledToGroundTruthError_4X3" = {
    preLayerName = "S2MaxPooled_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = -1;
    nxp = 1; // 11x11->76x76, pixels converge to each ground truth patch
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2MaxPooledToGroundTruthError_4X3_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    //shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "S2SumPooledToGroundTruthError_4X3" = {
    preLayerName = "S2SumPooled_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = -1;
    nxp = 1; // 11x11->76x76, pixels converge to each ground truth patch
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/S2SumPooledToGroundTruthError_4X3_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


HyPerConn "BiasToGroundTruthError_4X3" = {
    preLayerName = "Bias_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = -1;
    nxp = 1; // 
    nyp = 1;
    nxpShrunken = 1;
    nypShrunken = 1;
    sharedWeights = true;
    numAxonalArbors = 1;
    initializeFromCheckpointFlag = false;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/gkenyon/workspace/PASCAL_VOC/PASCAL_S1_96_S2_384_SumMaxPooled_16X12_4X3_SLP/VOC2007_landscape/Checkpoints/Checkpoint980000/BiasToGroundTruthError_4X3_W.pvp";
    useListOfArborFiles = false;
    combineWeightFiles = false;
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -0.01;
    //wMaxInit = 0.01;
    //sparseFraction = 0.0;
    //
    normalizeMethod = "none"; //"normalizeL2";
    //normalizeMethod = "normalizeL2";
    //strength = 10.0; //5.0;  
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //normalizeOnInitialize = true;
    //normalizeOnWeightUpdate = true;
    //rMinX = 0;
    //rMinY = 0; 
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //weightUpdatePeriod = 1.0;
    //initialWeightUpdateTime = 200.0;
    triggerLayerName = "ClassID";
    triggerOffset = 0; //1;
    triggerFlag = true;
    //initialWriteTime = 0.0;
    dWMax = 0.0001; //
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false;
};


// visualization of predicted classification
CloneConn "S2MaxPooledToGroundTruthReconS2_4X3" = {
    preLayerName = "S2MaxPooled_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "S2SumPooledToGroundTruthReconS2_4X3" = {
    preLayerName = "S2SumPooled_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "S2MaxPooledToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


CloneConn "BiasToGroundTruthReconS2_4X3" = {
    preLayerName = "Bias_4X3";
    postLayerName = "GroundTruthReconS2_4X3";
    channelCode = 0;
    initializeFromCheckpointFlag = false;
    writeStep = -1;
    originalConnName = "BiasToGroundTruthError_4X3";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;     
    receiveGpu = false; 
};


// subtracts prediction from ground truth to compute classification error 
IdentConn "GroundTruthReconS2ToGroundTruthError_4X3" = {
    preLayerName = "GroundTruthReconS2_4X3";
    postLayerName = "GroundTruthError_4X3";
    channelCode = 1;
    //nxp = 1; 
    //nyp = 1; 
    //nxpShrunken = 1; 
    //nypShrunken = 1; 
    //sharedWeights = true;
    //numAxonalArbors = 1;
    //initializeFromCheckpointFlag = false;
    writeStep = -1;
    //writeCompressedCheckpoints = false;
    
    //weightInitType = "OneToOneWeights"; //"UniformWeight";
    //weightInit = 1.0;
    //normalizeMethod = "none";
    
    //shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    //plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    preActivityIsNotRate = false;
    //selfFlag = false;
    //updateGSynFromPostPerspective = false;     
    //receiveGpu = false;
};

















