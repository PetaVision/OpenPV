/*
 * Random.hpp
 *
 *  Created on: Aug 23, 2013
 *      Author: pschultz
 *
 *  A class to manage Tausworth random number generators so that
 *  random number generation is not affected by details of the
 *  MPI configuration.
 *
 *  Random(const PVLayerLoc * locptr, bool isExtended)
 *  creates an array of RNG states.
 *  The size of the array is determined by the local layer size specified in
 * locptr,
 *  but the initial seeds are determined by global index.
 *  Hence the sequence of random numbers generated by a specific RNG is
 * determined
 *  by global index, not local index, so it is independent of MPI configuration.
 */

#ifndef RANDOM_HPP_
#define RANDOM_HPP_

#include "utils/cl_random.h"
#include "include/PVLayerLoc.hpp"
#include "include/pv_common.h"
#include <vector>

namespace PV {

class Random {
  public:
   Random(int count);
   Random(const PVLayerLoc *locptr, bool isExtended);
   virtual ~Random();

   taus_uint4 *getRNG(int index) { return &rngArray[index]; }
   float uniformRandom(int localIndex = 0);
   float uniformRandom(int localIndex, float min, float max) {
      return min + uniformRandom(localIndex) * (max - min);
   }
   void uniformRandom(float *values, int localIndex, int count = 1) {
      for (int k   = 0; k < count; k++)
         values[k] = uniformRandom(localIndex + k);
   }
   void uniformRandom(float *values, int localIndex, int count, float min, float max) {
      for (int k   = 0; k < count; k++)
         values[k] = uniformRandom(localIndex + k, min, max);
   }

   unsigned int randomUInt(int localIndex = 0);
   void randomUInt(unsigned int *values, int localIndex, int count = 1) {
      for (int k   = 0; k < count; k++)
         values[k] = randomUInt(localIndex + k);
   }
   static inline unsigned int randomUIntMax() { return CL_RANDOM_MAX; }

  protected:
   Random();
   int initializeFromCount(int count);
   int initializeFromLoc(const PVLayerLoc *locptr, bool isExtended);

  private:
   int initialize_base();

   // Member variables
  protected:
   std::vector<taus_uint4> rngArray;
};

} /* namespace PV */
#endif /* RANDOM_HPP_ */
