/*
 * ANNActivityBuffer.kpp
 *
 *  Created on: Dec 11, 2018
 *      Author: pschultz
 */

// Creates functions applyVerticesANNActivityBufferOnGPU and applyVerticesANNActivityBufferOnCPU,
// that take the same argument list and use the same core code, except that one is run from the
// .cu file and the other is run from the .cpp file.  The .cu file defines the preprocessor
// directive PV_RUN_ON_GPU before including this file; the and the .cpp file undefines it.


#ifdef PV_RUN_ON_GPU
#include "cudakernels/conversions.hcu"
namespace PVCuda {
__global__ void applyVerticesANNActivityBufferOnGPU
#else
namespace PV {
inline void applyVerticesANNActivityBufferOnCPU
#endif // PV_RUN_ON_GPU
      (int const nbatch,
       int const numNeurons,
       int const nx,
       int const ny,
       int const nf,
       int const lt,
       int const rt,
       int const dn,
       int const up,
       int const numVertices,
       float const *verticesV,
       float const *verticesA,
       float const *slopes,
       float const *V,
       float *A) {
#ifdef PV_RUN_ON_GPU
   int index = (blockIdx.x * blockDim.x) + threadIdx.x;
   if (index < numNeurons * nbatch)
#else
#ifdef PV_USE_OPENMP_THREADS
#pragma omp parallel for
#endif
   for (int index = 0; index < numNeurons * nbatch; index++)
#endif // PV_RUN_ON_GPU
   {
      int last            = numVertices - 1;
      int b               = index / numNeurons;
      int k               = index % numNeurons;
      float const *VBatch = V + b * numNeurons;
      float *ABatch       = A + b * (nx + lt + rt) * (ny + up + dn) * nf;
      int kex             = kIndexExtended(k, nx, ny, nf, lt, rt, dn, up);
      float potential = VBatch[k];
      float activity  = 0.0f;

      if (potential < verticesV[0]) {
         activity = verticesA[0] + slopes[0] * (potential - verticesV[0]);
      }
      else if (potential >= verticesV[last]) {
         activity = verticesA[last] + slopes[numVertices] * (potential - verticesV[last]);
      }
      else {
         for (int v = 0; v < last; v++) {
            if (potential < verticesV[v]) {
               // jumps are continuous from the right.  TODO: allow user control over value at jump
               break;
            }
            if (potential == verticesV[v]) {
               activity = verticesA[v];
            }
            else if (potential > verticesV[v] && potential < verticesV[v + 1]) {
               activity = verticesA[v] + slopes[v + 1] * (potential - verticesV[v]);
            }
         }
      }
      ABatch[kex] = activity;
   }
}

} // namespace (PV or PVCuda)
