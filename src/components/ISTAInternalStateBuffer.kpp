/*
 * ISTAInternalStateBufferInternalStateBuffer.kpp
 *
 *  Created on: Dec 12, 2018
 *      Author: Pete Schultz
 */

// Creates functions updateISTAInternalStateBufferOnGPU and updateISTAInternalStateBufferOnCPU,
// that take the same argument list and use the same core code, except that one is run from the
// .cu file and the other is run from the .cpp file.  The .cu file defines the preprocessor
// directive PV_RUN_ON_GPU before including this file; the and the .cpp file undefines it.

#ifdef PV_RUN_ON_GPU
#include "cudakernels/conversions.hcu"
namespace PVCuda {
__global__ void updateISTAInternalStateBufferOnGPU
#else
namespace PV {
inline void updateISTAInternalStateBufferOnCPU
#endif // PV_RUN_ON_GPU
      (int const nbatch,
       int const numNeurons,
       int const nx,
       int const ny,
       int const nf,
       int const lt,
       int const rt,
       int const dn,
       int const up,
       float const VThresh,
       double const *dtAdapt,
       float const tau,
       float const *accumulatedGSyn,
       float const *A,
       float *V) {
#ifdef PV_RUN_ON_GPU
   int index = (blockIdx.x * blockDim.x) + threadIdx.x;
   if (index < numNeurons * nbatch)
#else
#ifdef PV_USE_OPENMP_THREADS
#pragma omp parallel for schedule(static)
#endif
   for (int index = 0; index < numNeurons * nbatch; index++)
#endif // PV_RUN_ON_GPU
   {
      int b                             = index / numNeurons;
      int k                             = index % numNeurons;
      float *VBatch                     = V + b * numNeurons;
      float const *accumulatedGSynBatch = accumulatedGSyn + b * numNeurons;
      // Activity is an extended buffer.
      float const *ABatch = A + b * (nx + rt + lt) * (ny + up + dn) * nf;

      float const gSyn = accumulatedGSynBatch[k];
      int kex          = kIndexExtended(k, nx, ny, nf, lt, rt, dn, up);
      float sign       = 0.0f;
      if (ABatch[kex] != 0.0f) {
         sign = ABatch[kex] / fabsf(ABatch[kex]);
      }
      VBatch[k] += ((float)dtAdapt[b] / tau) * (gSyn - (VThresh * sign));
   }
}

} // namespace (PV or PVCuda)
