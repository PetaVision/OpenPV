/*
 * GSynAccumulator.kpp
 *
 *  Created on: Dec 11, 2018
 *      Author: Pete Schultz
 */

// Creates functions updateGSynAccumulatorOnGPU and updateGSynAccumulatorOnCPU,
// that take the same argument list and use the same core code, except that
// one is run from the .cu file and the other is run from the .cpp file.
// The .cu file defines the preprocessor directive PV_RUN_ON_GPU before
// including this file; the and the .cpp file undefines it.

#ifdef PV_RUN_ON_GPU
namespace PVCuda {
__global__ void updateGSynAccumulatorOnGPU
#else
namespace PV {
inline void updateGSynAccumulatorOnCPU
#endif // PV_RUN_ON_GPU
      (int const numNeuronsAcrossBatch,
       int const numChannels,
       float const *channelCoeffs,
       float const *layerInput,
       float *bufferData) {
#ifdef PV_RUN_ON_GPU
   int index = (blockIdx.x * blockDim.x) + threadIdx.x;
   if (index < numNeuronsAcrossBatch)
#else
#ifdef PV_USE_OPENMP_THREADS
#pragma omp parallel for schedule(static)
#endif
   for (int index = 0; index < numNeuronsAcrossBatch; index++)
#endif // PV_RUN_ON_GPU
   {
      float value = 0.0f;
      for (int ch = 0; ch < numChannels; ch++) {
         value += channelCoeffs[ch] * layerInput[ch * numNeuronsAcrossBatch + index];
      }
      bufferData[index] = value;
   }
}

} // namespace (PV or PVCuda)
