debugParsing = false;

HyPerCol "column" = {
    nx = 8; //1242;  // KITTI synced value
    ny = 8;  //218;
    dt = 1.0;
    dtAdaptFlag = false;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0.0;
    stopTime = 100.0;       // Depends on number of VINE video frames
    progressInterval = 1.0;
    outputPath = "output/";
    printParamsFilename = "pv.params";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    initializeFromCheckpointDir = "";
    checkpointWrite = false;
    // deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
    verifyWrites = false;
    errorOnNotANumber = false;
};

// this is a input layer
Image "input" = {
    restart = 0;  // make only a certain layer restart
    nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    imagePath = "input/input.pvp"; // an 8x8x3 image in which each pixel is equal to the linear index with y axis spining first and color spining last
    nf = 3; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = false; //only write weights which are not 0
    mirrorBCflag = false;    //border condition flag
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;  // offset for crop, when the input size is smaller than the size of image
    offsetY = 0;
    frameNumber = 0;
    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.
    padValue = 0;
};

ANNLayer "maxPoolPre" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 1; 
    triggerFlag = false;
};

ANNLayer "maxPoolPost" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 1; 
    triggerFlag = false;
};

PoolingIndexLayer "maxPoolIndexPre" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 2; 
    triggerFlag = false;
};

PoolingIndexLayer "maxPoolIndexPost" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 2; 
    triggerFlag = false;
};

ANNLayer "GatedMaxPoolPre" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 3; 
    triggerFlag = false;
};

ANNLayer "GatedMaxPoolPost" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 3; 
    triggerFlag = false;
};

GatePoolTestLayer "GatePoolTestPre" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 4; 
    triggerFlag = false;
};

GatePoolTestLayer "GatePoolTestPost" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 4; 
    triggerFlag = false;
};

PoolingConn "input2maxPoolPre" = {
    preLayerName = "input";
    postLayerName = "maxPoolPre";
    channelCode = 0; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 3; 
    nyp = 3; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;
   
    needPostIndexLayer = true;
    postIndexLayerName = "maxPoolIndexPre";

    updateGSynFromPostPerspective = false;
    useWindowPost = false;

    keepKernelsSynchronized             = true;
};

PoolingConn "input2maxPoolPost" = {
    preLayerName = "input";
    postLayerName = "maxPoolPost";
    channelCode = 0; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 3; 
    nyp = 3; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;
   
    needPostIndexLayer = true;
    postIndexLayerName = "maxPoolIndexPost";

    updateGSynFromPostPerspective = true;
    useWindowPost = false;

    keepKernelsSynchronized             = true;
};

TransposePoolingConn "maxPoolPreToGatedMaxPoolPre" = {
    preLayerName = "maxPoolPre";
    postLayerName = "GatedMaxPoolPre";
    channelCode = 0;
    originalConnName = "input2maxPoolPre";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "maxpooling";
    updateGSynFromPostPerspective = false;
};

TransposePoolingConn "maxPoolPostToGatedMaxPoolPost" = {
    preLayerName = "maxPoolPost";
    postLayerName = "GatedMaxPoolPost";
    channelCode = 0;
    originalConnName = "input2maxPoolPost";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "maxpooling";
    updateGSynFromPostPerspective = false;
};

IdentConn "GatedMaxPoolPreToGatePoolTestPre" = {
   preLayerName                        = "GatedMaxPoolPre";
   postLayerName                       = "GatePoolTestPre";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "inputToGatePoolTestPre" = {
   preLayerName                        = "input";
   postLayerName                       = "GatePoolTestPre";
   channelCode                         = 1;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "GatedMaxPoolPostToGatePoolTestPost" = {
   preLayerName                        = "GatedMaxPoolPost";
   postLayerName                       = "GatePoolTestPost";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "inputToGatePoolTestPost" = {
   preLayerName                        = "input";
   postLayerName                       = "GatePoolTestPost";
   channelCode                         = 1;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

