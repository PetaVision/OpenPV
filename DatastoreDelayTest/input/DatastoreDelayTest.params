//
// DatastoreDelayTest.params
//
// created by pschultz: November 2, 2011
//

//  - input parameters for DatastoreDelayTest for testing the datastore with various delays
//

debugParsing = false;

HyPerCol "column" = {
   nx = 16;   
   ny = 16;
   dt = 1.0;
   randomSeed = 30926100951;  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   numSteps = 20;
   progressStep = 20;
   writeProgressToErr = false;
   outputPath = "output/";
   filenamesContainLayerNames = false;
   filenamesContainConnectionNames = false;
   checkpointRead = false;
   checkpointWrite = true;
   checkpointWriteDir = "checkpoints/";
   checkpointWriteStepInterval = 1;
   checkpointWriteTimeInterval = -1;
   deleteOlderCheckpoints = false;
};

//
// layers
//

DatastoreDelayTestLayer "input" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    writeSparseActivity = false;
    
    InitVType = "ZeroV";
    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    VShift = 0.0;
};

ANNLayer "output" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    writeSparseActivity = false;
    
    InitVType = "ZeroV";
    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    VShift = 0.0;
};

ANNLayer "outputArbor" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    writeSparseActivity = false;
    
    InitVType = "ZeroV";
    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    VShift = 0.0;
};
// Connections

IdentConn "delay0" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "delay1" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 1;
    writeStep = -1;
};

IdentConn "delay2" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 2;
    writeStep = -1;
};

IdentConn "delay3" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 3;
    writeStep = -1;
};

IdentConn "delay4" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 4;
    writeStep = -1;
};

KernelConn "delayArbor" = {
    preLayerName = "input";
    postLayerName = "outputArbor";
    
    channelCode = 0;
    nxp         = 1;
    nyp         = 1;
    nfp         = 1;
    //Set delay from 0 to 4
    delay       = [0, 1, 2, 3, 4];
    
    numAxonalArbors  = 5;
    useWindowPost    = false;
    writeStep        = -1;
    initFromLastFlag = 0;

    weightInitType = "OneToOneWeights";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    selfFlag               = false;
    shrinkPatches          = false;
    updateGSynFromPostPerspective = false;
    preActivityIsNotRate   = false;
};

DatastoreDelayTestProbe "probe" = {
    targetLayer = "output";
    probeOutputFile = "probe.txt";
    message = "probe           ";
};

DatastoreDelayTestProbe "probeArbor" = {
    targetLayer = "outputArbor";
    probeOutputFile = "probeArbor.txt";
    message = "probeArbor      ";
};
