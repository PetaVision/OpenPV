# This file is a CMakeLists.txt file for building PetaVision and the systems tests,
# with projects organized the way Eclipse likes.  That is, there is a workspace
# directory that contains PetaVision and the system tests individually
# (as opposed to having the systems test in their own directory as they appear on
# the SVN repository.)
#
# Then copy this file into the workspace directory as CMakeLists.txt.
# Then, run cmake from the PetaVision directory, and then make.
# CMake options for PetaVision are:
#     OPEN_MP_THREADS     If true, compile using OpenMPI threading.
#     LIB_SND_FILE        If true, compile using libsndfile
#     OPEN_CL_GPU         If true, compile using GPU acceleration using OpenCL.
#     CUDA_GPU            If true, compile using GPU acceleration using CUDA.
#         OPEN_CL_GPU and CUDA_GPU cannot both be true.

project(PetaVision)


# See http://www.cmake.org/Wiki/CMake_Useful_Variables for more variables to set
cmake_minimum_required(VERSION 2.8)


# Set variable for current working directory (workspace directory)
set(PV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/PetaVision CACHE FILEPATH "The base petavision directory")

#Set CMAKE_MODULE_PATH
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PV_DIR}/docs/cmake/Modules/")
set(CMAKE_MODULE_PATH "${PV_DIR}/docs/cmake/Modules/")

# Set this as a compiler directive for the code
#add_Definitions(-DPV_DIR="${PV_DIR}")

set(OPEN_MP_THREADS FALSE CACHE PATH "Defines if PetaVision uses OpenMP threads")
set(OPEN_CL_GPU FALSE CACHE PATH "Defines if PetaVision uses OpenCL GPU")
set(CUDA_GPU FALSE CACHE PATH "Defines if PetaVision uses OpenCL GPU")
set(LIB_SND_FILE FALSE CACHE PATH "Defines if PetaVision uses LIB_SND_FILE")
set(CUDA_RELEASE FALSE CACHE PATH "Defines if Cuda compiles with optimization")

set(OpenCL_dir /usr/local/cuda-6.0/ CACHE PATH "Location of opencl headers")
#set(Cuda_lib /usr/local/cuda-6.0/lib64 CACHE PATH "Location of opencl headers")

if(OPEN_MP_THREADS)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -DPV_USE_THREADS")
   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp -DPV_USE_THREADS")
endif (OPEN_MP_THREADS)

if(OPEN_CL_GPU)
   IF(APPLE)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -framework opencl -DPV_OPENCL")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -framework opencl -DPV_OPENCL")
   ELSE(APPLE)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I ${OpenCL_dir}/include -L/${OpenCL_dir}/lib64 -lOpenCL -DPV_OPENCL")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -I ${OpenCL_dir}/include -L/${OpenCL_dir}/lib64 -lOpenCL -DPV_OPENCL")
   ENDIF(APPLE)
endif (OPEN_CL_GPU)

if(CUDA_GPU)
    #Set include file
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I ${CUDA_TOOLKIT_INCLUDE} -DPV_CUDA")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -I ${CUDA_TOOLKIT_INCLUDE} -DPV_CUDA")
endif(CUDA_GPU)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPV_DIR=\"\\\"${PV_DIR}\\\"\"")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DPV_DIR=\"${PV_DIR}\"")


if (LIB_SND_FILE)
    find_package(LIBSNDFILE)
endif (LIB_SND_FILE)

if(LIB_SND_FILE)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPV_USE_SNDFILE")
   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DPV_USE_SNDFILE")
endif (LIB_SND_FILE)

# The user may specify a non-standard compiler name for MPI
#  For example, the user may type:
#    cmake CMakeLists.txt -DCMAKE_C_COMPILER=openmpicc -DCMAKE_CXX_COMPILER=openmpic++
#    

set(MPI_C_COMPILER_NAME "${CMAKE_C_COMPILER}")
set(MPI_CXX_COMPILER_NAME "${CMAKE_CXX_COMPILER}")

add_subdirectory(${PV_DIR})
# # Insert additional add_subdirectory commands to add other projects.
add_subdirectory(AdjustAxonalArborsTest
add_subdirectory(ArborSystemTest
add_subdirectory(BasicSystemTest
add_subdirectory(BinningLayerTest
add_subdirectory(CheckpointSystemTest
add_subdirectory(CloneHyPerConnTest
add_subdirectory(CloneKernelConnTest
add_subdirectory(CloneVLayerTest
add_subdirectory(ConnectionRestartTest)
add_subdirectory(DatastoreDelayTest)
add_subdirectory(DelaysToFeaturesTest)
add_subdirectory(FourByFourGenerativeTest)
add_subdirectory(FourByFourTopDownTest)
add_subdirectory(GPUSystemTest)
add_subdirectory(GenerativeConnTest)
add_subdirectory(GenericSystemTest)
add_subdirectory(ImageSystemTest)
add_subdirectory(ImportParamsTest)
add_subdirectory(InitWeightsTest)
add_subdirectory(KernelTest)
add_subdirectory(LCATest)
add_subdirectory(LIFTest)
add_subdirectory(LayerPhaseTest)
add_subdirectory(LayerRestartTest)
add_subdirectory(MLPTest)
add_subdirectory(MPITest2)
add_subdirectory(MarginWidthTest)
add_subdirectory(MatchingPursuitTest)
add_subdirectory(MovieSystemTest)
add_subdirectory(NormalizeSystemTest)
add_subdirectory(ParameterSweepTest)
add_subdirectory(PlasticConnTest)
add_subdirectory(RandStateSystemTest)
add_subdirectory(ReadArborFileTest)
add_subdirectory(ReceiveFromPostTest)
add_subdirectory(ShrunkenPatchFlagTest)
add_subdirectory(ShrunkenPatchTest)
add_subdirectory(SparsityProbeTest)
add_subdirectory(StochasticReleaseTest)
add_subdirectory(test_border_activity)
add_subdirectory(test_cocirc)
add_subdirectory(test_constant_input)
add_subdirectory(test_datatypes)
add_subdirectory(test_delta)
add_subdirectory(test_delta_pos)
add_subdirectory(test_extend_border)
add_subdirectory(test_gauss2d)
add_subdirectory(test_kg)
add_subdirectory(test_kxpos)
add_subdirectory(test_kypos)
add_subdirectory(test_mirror_BCs)
add_subdirectory(test_mpi_specifyrowscolumns)
add_subdirectory(test_nearby_neighbor)
add_subdirectory(test_patch_head)
add_subdirectory(test_post_weights)
add_subdirectory(test_read_header)
add_subdirectory(test_sign)
add_subdirectory(TransposeConnTest)
add_subdirectory(TriggerTest)
add_subdirectory(UnequalPatchSizeTest)
add_subdirectory(UpdateFromCloneTest)
add_subdirectory(WindowSystemTest)
