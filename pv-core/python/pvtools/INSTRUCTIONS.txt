pvtools is a package for reading and analyzing .pvp files. To use any of the included functions in interactive mode or in a python script, use the statement:

from pvtools import *

pvtool’s __init__.py file contains import statements of all the subordinate .py files, meaning each function defined in these files will be directly accessible when the package is imported (for example, no need for “from pvtools.display import view” in order to obtain the view method, although this syntax is supported as well). This and other aspects of the package structure are designed to resemble matlab functionality.

The crucial method here is readpvpfile in readpvpfile.py. It is designed to resemble as closely as possible the octave method readpvpfile.m. It takes a string as an input, designating the filename or path to a pvpfile. This file is then read in binary mode as a stream and converted into a “PV_Object.” Additional optional inputs are [1] progressPeriod, [2] stopFrame, [3] start Frame, and [4] skipFrame. PV_Objects can be converted back into .pvp files via the writepvpfile.py script. 

The PV_Object is essentially a list of DataFrame objects with a “header” attribute, which is a dict of the pvp file’s header information, and series of methods that return information about contained frames. The DataFrame objects are tuples, the first element of which is a scalar and the second of which is a numpy array. The DataFrame redundantly retains these two pieces of information as the attributes “time” and “values”, to make usage syntax the same as to a matlab struct. The main difference in usage is the usual python 0-indexing, rather than matlab’s 1-indexing. 

For example: 
To read a pvpfile:

myData = readpvpfile(‘myfile.pvp’)

To return header info:

myData.header

To return the 5th row, 7th column, 3rd feature, of the 88th frame in an activity file:

myData[87].values[4,6,2]
