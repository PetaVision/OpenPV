I'm ready to do a large check in, which will change the way Peta-vision does weight initialization, specifically to create a new InitsWeights class, and to remove all initializeWeights methods from all connection classes that actually have code to calculate weights. I'm writing to warn everyone and to get any feedback from the group before I do the check in, since it may break things.  

By having an InitWeights class with code for initializing weights then HyperConn doesn't need to be changed or extended just to add a new initialization method.  Also, this allows more reusing of similar code between different initialization methods. 

The new Param: weightInitType

Aside from any bugs or mistakes I might have made, the biggest issue that will affect people is that the way of choosing a weight initialization method is changing.  The new way to choose an initialization method is to instantiate an InitWeights class that implements the desired initialization and pass that to a connection class constructor.  When HyperConn's initializeWeights is called, it will call InitWeight::initializeWeights.  

But there are now three ways to choose an initialization:

1) instantiate your own InitWeights class and pass it to a connection class constructor
2) use buildandrun.  Buildandrun now checks for a new param called "weightInitType" in connection blocks, which can have any of the following values:

CoCircWeight, SmartWeight, UniformRandomWeight, GaussianRandomWeight, GaborWeight, PoolWeight, RuleWeight, SubUnitWeight, InitIdentWeight, or Gauss2DWeight

Buildandrun will create the appropriate InitWeights class and pass it to the connection class' constructor when it is called.

3) for backwards compatibility inside of Initialize(), HyperConn can create an InitWeights class automatically if none is passed to the constructor.  When choosing which InitWeights class to create, it checks the old boolean params: randomFlag, smartWeights, cocircWeights, uniformWeights, gaussianWeights or if none is set will do a Gauss2D initialization.

What you need to change

However, buildandrun does not check these flags and if you rely on them, buildandrun will choose Gauss2D as default if the weightInitType param is not set.  Therefore, you will need to add a declaration for weightInitType to each of your connections.

The new classes

I am adding two new families of classes: InitWeights and InitWeightsParams.  The InitWeights class and its subclasses were written to be static-like in that no data about a connection or otherwise is saved and once an InitWeights object is instantiated, it can be used multiple times to initialize the weights for multiple connections.  

However, when InitWeights::initializeWeights is called, it is passed a link to the Conn that called it.  To temporarily store information including params that it needs, each InitWeights object can create and use another class called InitWeightsParams.  The InitWeightsParams object that it creates to store and pass information between methods during weight initialization will be deleted when initialization is finished.

Implementation

There are several ways of weight initialization. The default is Gauss2DWeight, which is implemented in the parent class InitWeights.  All other types of initializations are implemented in subclasses of InitWeights.  

Weight initialization will now happen in these steps:

1) the desired weight initialization class is created
2) a HyperConn, KernelConn or one of their subclasses is created and passed a pointer to the weight initializing class
3) HyperConn::initializeWeights() calls InitWeights::initializeWeights, passing it all the patches to be initialized
4) InitWeights::initializeWeights, checks if there is a file to initialize from, and if not, then for each patch it:

4.1) creates a temporary, unshrunken patch
4.2) passes that temporary patch to a method called calcWeights, which does the actual calculation and setting of weights
4.3) copies this temporary patch back to the original, possibly shrunken patch.

5) calcWeights performs the actual implementation of the weight initialization. 

InitWeights' initializeWeights is the same for all initialization types.  The different methods of initialization are implemented in each subclass by overriding calcWeights.

Obsoleted connection classes

I also removed all initializeWeights methods from connection classes except KernelConn, which passes the array of Kernels to HyperConn's initializeWeights, CloneConn, which copies another connection, and HyperConn, which calls the InitWeight's class' initializeWeights.  Some connection classes, however, only implemented initializeWeights methods and all of these classes have been obsoleted:

CocircConn, GaborConn, PoolConn, RuleConn, and SubunitConn.

If you use any of these connection types, you will need to create a HyperConn or KernelConn and set weightinittype to CoCircWeight, GaborWeight, PoolWeight, RuleWeight, or SubUnitWeight.

Verification

I can't guarantee that my reimplementation of these connection types is bug free, but for Gauss2D, Cocirc, GaborConn (for KernelConn only), and smart weights, I tested my implementations by first generating the weights using HyperConn's old methods and comparing the generated weights in Matlab.  There may be parameter settings that will still break my implementations, but I hope they are ok.  

Also, I created a new PVSystemsTest called InitWeightsTest to compare the new InitWeights implementations for Gauss2D, Cocirc, smart weights, and for the KernelConn version of GaborConn.  For the test I create a retina and output layers and connect one of each of the 4 connection types as both a KernelConn and HyperConn (except for GaborConn, which is only added as a KernelConn) and I use a custom buildandrun method to add a second connection to the inhibitory channel using the old initialization method.  If the output layer is all 0, the weights should match and cancel out. The output of the test should be all zeros on the output layers:

Retina Stats Screen            :t==   0.0 N==1024 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L0 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L1 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L2 Stats Screen                :t==   0.0 N==4096 Total==4096.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L5 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L6 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L7 Stats Screen                :t==   0.0 N==4096 Total==4096.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L8 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L9 Stats Screen                :t==   0.0 N==8192 Total==8192.000000 Min==1.000000 Avg==1.000000 Max==1.000000
Retina Stats Screen            :t==   1.0 N==1024 Total==1024.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L0 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L1 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L2 Stats Screen                :t==   1.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L5 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L6 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L7 Stats Screen                :t==   1.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L8 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L9 Stats Screen                :t==   1.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
Retina Stats Screen            :t==   2.0 N==1024 Total==1024.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L0 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L1 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L2 Stats Screen                :t==   2.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L5 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L6 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L7 Stats Screen                :t==   2.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L8 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L9 Stats Screen                :t==   2.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
Retina Stats Screen            :t==   3.0 N==1024 Total==1024.000000 Min==1.000000 Avg==1.000000 Max==1.000000
L0 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L1 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L2 Stats Screen                :t==   3.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L5 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L6 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L7 Stats Screen                :t==   3.0 N==4096 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L8 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
L9 Stats Screen                :t==   3.0 N==8192 Total==0.000000 Min==0.000000 Avg==0.000000 Max==0.000000
