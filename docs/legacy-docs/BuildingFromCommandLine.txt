Below is a procedure for checking out and then headlessly building PetaVision (building a headless PetaVision?) from scratch:

cd ~
mkdir eclipse-test-workspace
cd eclipse-test-workspace
svn co https://petavision.svn.sourceforge.net/svnroot/petavision/trunk PetaVision
cd PetaVision
svn delete .cproject
svn copy linux.cproject .cproject
eclipse -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import ~/eclipse-test-workspace/PetaVision
eclipse -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -build PetaVision

And to do a headless build of BasicSystemTest:

cd ~/eclipse-test-workspace
svn co https://petavision.svn.sourceforge.net/svnroot/petavision/PVSystemTests/BasicSystemTest
cd BasicSystemTest
svn delete .cproject
svn copy linux.cproject .cproject
eclipse -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import ~/eclipse-test-workspace/BasicSystemTest
eclipse -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild -build BasicSystemTest/Debug
# Adding the "/Debug" at the end builds only the Debug configuration.  Leaving it off builds both Debug and Release, but Release has errors because we haven't been maintaining the Release configuration of the properties.

Debug/BasicSystemTest -p input/BasicSystemTest.params
# This should run successfully.

The purpose of the eclipse command with -import is to add a project to the list of projects that eclipse knows about.  I believe that once a particular project has been imported, it doesn't need to be imported again.  I'm not sure where eclipse is maintaining the list of projects.  But if you try to import a project that has already been imported, eclipse complains (and the warning messages aren't very helpful).

The purpose of the eclipse command with -build is to generate the makefile and then run it.  If the makefile already exists and doesn't need to be updated, you can enter the PetaVision/lib directory for pv or the project's Debug directory for the systems test or sandbox projects, and run "make clean && make all".

To add a linux.cproject file to your sandbox or systems test:

Cd to a directory for that project that contains a .cproject file that works on neuro/anterior/canto
svn copy .cproject linux.cproject
svn commit -m 'A useful commit comment goes here' linux.cproject

Then you should be able to check out the project into eclipse-test-workspace as before.

For a new project, I think it's likely to work if you copy a working project's .cproject and .project files into the new project's directory, and then edit them in a text editor to replace all instances of the old project's name with the new project's name.

One thing that may be painful is if we have to do the equivalent of editing the properties.  Maybe Gar's method will make it possible to do that.
