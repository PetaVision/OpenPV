Here is the procedure for installing and compiling the PetaVision repository on Mac OS X.  Thanks to Andree for all his assistance.

0. TODO: instructions for installing eclipse on macs should go here

1. Launch eclipse.  If you get the "Welcome to Eclipse" screen, click Workbench in the top right corner.

2. Install subclipse (the SVN plugin)
  a. Help menu -> Install New Softwareâ€¦ -> enter "http://subclipse.tigris.org/update_1.6.x" (no quotes) in the "Work with:" field, and press Enter.  Note: there is a version 1.8, but Ubuntu's SVN seems to be incompatible with the newest version.

  b. Click Select All, and Next.  The Install Details window opens.

  c. Uncheck "Subclipse Integration for Mylyn 3.x" and "Subversion Revision Graph".  These components don't seem to be on the tigris site where they're expected to be.  Then click Next.  A review page appears; click Next again.

  d. The Review Licenses page appears.  Peruse all the license agreements thoroughly.  Do note that you're agreeing to pet-sit the subclipse developers' cats.  Then select "I accept" and click Finish.

  e. If an "unsigned content" warning appears, click OK.

  f. Restart eclipse.  It may crash during restart; if it does, you may need to log out and log back in again.

  g. If the "Subversion Native Library Not Available" error appears, click OK.  If the "Unsupported Password Stores" error appears, click OK.

  h. Window menu -> Open Perspective, then click "Other" and select SVNKit 3.2.5.
  
  i. The .settings folder should be ignored when synchronizing projects.  Open the Eclipse menu from the menu bar and select preferences.
     Then open Team from the left pane, and select Ignored Resources.  Click the Add Pattern... button,
     enter ".settings" (no quotes), and then click OK to close the Add Ignore Pattern window, and then click OK to
     close the preferences window.

3. Check out PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select SVN Repository Exploring.

  b. Click the "New Repository Location" button, in the upper right corner of the left-most pane.  It is a yellow cylinder with a green plus-sign.  The URL is "http://svn.code.sf.net/p/petavision/code" (no quotes).   Double-click the repository when it appears in the left-hand pane.

  c. Right-click "trunk" and choose Checkout... from the pop-up menu.  In the "Checkout from SVN" window, click Finish.  This step downloads the PetaVision library project.
  
  d. Repeat step [c] for any desired projects in the PVSystemsTests and sandbox directories.

  e. From a terminal, navigate to the PetaVision directory in your eclipse workspace, and copy "mac.cproject" to ".cproject".
     Repeat for any system tests and sandboxes checked out in step [d].
     You can also use the script PetaVision/scripts/copycprojects.bash to copy all projects' mac.cproject to .cproject in a batch.
  
  f. Install the template for PV code style, to use uniform conventions for indenting, etc.  To do this,
     Open Window menu -> Open Perspective -> Other ..., and select C/C++
     Right click on PetaVision in the Project Explorer and select Properties from the bottom of the pop-up menu.
     Open the C/C++ General menu and select Code Style (eclipse version Indigo) or Formatter (version Juno).
     Uncheck "Enable project specific settings" and click "Configure Workspace Settings..."
     Click "Import..." and navigate to PVCodeStyle.xml in the PetaVision directory of your workspace.
     Click Open and then OK

4. Compile PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select C/C++

  b. Right-click PetaVision in the left-hand pane, select Properties.

  c. Under C/C++ Build -> Settings, select GCC C++ Compiler.  Verify that "/opt/local/include" and "/opt/local/include/openmpi" are in the Include paths.  Do the same for GCC C Compiler.

  d. To change the number of processors used during compile, select C/C++ Build,  and click the Behavior tab. Select "Use parallel jobs" and enter the number of processers you want to use.

  e. Right-click PetaVision in the left-hand pane, select Clean Project. Do the same thing, but select Build Project. This should be enough to build the library without errors.

5. Compile a Systems test
  a. Go to the SVN Repository Exploring perspective and click the drop-down menu for PVSystemTest 5118, then check out KernelTest.

  b. Once checked out, right-click on Kernel Test in C/C++ view and select Build Project ....  It should build without errors.

6. Run a Systems test
  I use the command line to run PV jobs.  In a terminal window, cd to the KernelTest directory and type the command
Debug/KernelTest -p input/test_kernel.params

To run under 16 processes,
mpirun -np 16 Debug/KernelTest -p input/test_kernel.params

It should be possible to run and debug from within the Eclipse environment the same as you would on a Mac, but I'm the wrong person to ask how to set that up.

7. The projects' .cproject files on the repository now have optimization set to most and debugging set to none, for both C and C++.  To change these, go to Properties, open the triangle by C/C++ Build, and select Settings.  There are separate Optimization and Debugging panes under both "GCC C++ Compiler" and "GCC C Compiler" in the main part of the properties window.

Please take care when committing, not to commit the .cproject and .project files or the .settings directory.

8. To read *.cl files in the C editor, go to Eclipse menu -> Preferences, open C/C++ and select File Types.  Click New... and enter Pattern: "*.cl" (no quotes) and Type: C Source File.
