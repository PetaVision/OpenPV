Here is the procedure for installing and compiling the PetaVision repository on Mac OS X.  Thanks to Andree for all his assistance.

0. If eclipse is not installed, download "Eclipse for Parallel Application Developers" from <http://eclipse.org/downloads/>.
   Choose the 32-bit or 64-bit version depending on your machine.  See <http://support.apple.com/kb/HT3696> to determine
   if your architecture is 32-bit or 64-bit.
   
   You will also need Open MPI and GDAL.  The projects on the repository assume that these packages have been installed using MacPorts.
   Download MacPorts from <http://www.macports.org> and install it, if it hasn't been installed already.  Then, from a terminal prompt,
   run the commands
   
   /opt/local/bin/port selfupdate
   /opt/local/bin/port install openmpi
   /opt/local/bin/port install gdal

1. Launch eclipse.  If you get the "Welcome to Eclipse" screen, click Workbench in the top right corner.

2. Install subclipse (the SVN plugin).  If subclipse is already installed, skip this step
  a. Help menu -> Install New Softwareâ€¦ -> enter "http://subclipse.tigris.org/update_1.6.x" (no quotes) in the "Work with:" field, and press Enter.  Note: there is a version 1.8, but Ubuntu's SVN seems to be incompatible with the newest version.

  b. Click Select All, and Next.  The Install Details window opens.

  c. Uncheck "Subclipse Integration for Mylyn 3.x" and "Subversion Revision Graph".  These components don't seem to be on the tigris site where they're expected to be.  Then click Next.  A review page appears; click Next again.

  d. The Review Licenses page appears.  Peruse all the license agreements thoroughly.  Do note that you're agreeing to pet-sit the subclipse developers' cats.  Then select "I accept" and click Finish.

  e. If an "unsigned content" warning appears, click OK.

  f. Restart eclipse.  It may crash during restart; if it does, you may need to log out and log back in again.

  g. If the "Subversion Native Library Not Available" error appears, click OK.  If the "Unsupported Password Stores" error appears, click OK.

3. Additional SVN settings.  These should be followed even if subclipse was already installed.
  a. Eclipse menu -> Preferences.  In the left-hand pane, double-click Team, then single-click SVN below it.
     In the SVN interface section, set the client to SVNKit (Pure Java).
  
  b. The .settings folder should be ignored when synchronizing projects.
     Select Ignored Resources (also under Team).  Click the Add Pattern... button,
     enter ".settings" (no quotes), and then click OK to close the Add Ignore Pattern window,
     and then click OK to close the preferences window.

4. Additional Eclipse settings.
   To have eclipse treat *.cl files as C/C++ files, go to Eclipse menu -> Preferences, open C/C++ and select File Types.  Click New... and enter Pattern: "*.cl" (no quotes) and Type: C Source File.


5. Check out PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select SVN Repository Exploring.

  b. Click the "Add SVN Repository" button, in the upper right corner of the
     left-most pane.  It is a yellow rectangle with "SVN" and a plus-sign.
     If you only need to check out, not commit, you can use the URL
     "http://svn.code.sf.net/p/petavision/code" (no quotes).
     To commit, use "https://USERNAME@svn.code.sf.net/p/petavision/code",
     where USERNAME is your sourceforge username.
     You will be prompted for your sourceforge password.

  c. Doubleclick the repository url.
     Then right-click "trunk" and choose Checkout... from the pop-up menu.
     In the "Checkout from SVN" window, click Finish.
     This step downloads the PetaVision library project.
  
  d. Repeat step [c] for any desired projects in the PVSystemsTests and sandbox directories.

  e. Eclipse requires a .cproject file in the project directory to recognize the project as a C/C++ project.
     There are different versions .cproject on the repository.
     If you will be working with PetaVision exclusively in eclipse and want eclipse to manage your makefiles,
     copy "mac-eclipse.cproject" to ".cproject".
     If you will sometimes do code development outside of the eclipse environment, or for any reason do not
     want to have eclipse manage the makefiles, copy "mac-cmake.cproject" to ".cproject".
     Repeat for any system tests and sandboxes checked out in step [d].
     
     You can also use the script PetaVision/scripts/copycproject.bash to copy all projects' mac-*.cproject to .cproject in a batch.
     Use either the command
     "bash PetaVision/scripts/copycproject.bash eclipse" or "bash PetaVision/scripts/copycproject.bash cmake"
     to copy either the eclipse or cmake versions.
  
  f. Install the template for PV code style, to use uniform conventions for indenting, etc.  To do this,
     Open Window menu -> Open Perspective -> Other ..., and select C/C++
     Right click on PetaVision in the Project Explorer and select Properties from the bottom of the pop-up menu.
     Open the C/C++ General menu and select Code Style (eclipse version Indigo) or Formatter (version Juno).
     Uncheck "Enable project specific settings" and click "Configure Workspace Settings..."
     Click "Import..." and navigate to PVCodeStyle.xml in the PetaVision directory of your workspace.
     Click Open and then OK

  g. If you plan to use SoundStream objects you need the sndfile library.  Open the C/C++ Build submenu under properties
     and sellect Settings.  Under the ToolSettings tab, select "MacOS X C++ Linker"  Add
     " -lsndfile" (no quotes) to the end of the "Command" text field.
     Then in both "GCC C++ Compiler" and "GCC C Compiler" add " -DPV_USE_SNDFILE" (no quotes)
     to the end of the "Command" text field.
     For each of the "GCC C++ Compiler" and "GCC C Compiler" menus, select the Includes item.
     If the directory that contains sndfile.h is not in the "Include paths (-I)" pane, select
     the "Add" icon above the pane (a document icon with a green plus sign) and enter the directory.
     You will need to repeat step (g) for each project that uses the PetaVision library, whether or not that project
     explicitly uses SoundStream objects themselves.

6. Compile PetaVision.
  a. If you are using the mac-eclipse.cproject, do steps b-d and f-g.
     If you are using the mac-cmake.cproject, do steps e-g.

  b. (mac-eclipse.cproject only) Window menu -> Open Perspective -> Other ..., and select C/C++

  c. (mac-eclipse.cproject only) Right-click PetaVision in the left-hand pane, select Properties.

  d. (mac-eclipse.cproject only) Under C/C++ Build -> Settings, select GCC C++ Compiler.  Verify that "/opt/local/include" and "/opt/local/include/openmpi" are in the Include paths.  Do the same for GCC C Compiler.

  e. (mac-cmake.cproject only) From a terminal prompt, cd to the PetaVision project directory.  Then execute the command
     "cmake CMakeLists.txt -DCMAKE_C_COMPILER=openmpicc -DCMAKE_CXX_COMPILER=openmpic++ -DMPI_C_COMPILER=openmpicc -DMPI_CXX_COMPILER=openmpic++ -DMPI_HOME=/opt/local"
  
  f. To change the number of processors used during compile, select C/C++ Build,  and click the Behavior tab. Select "Use parallel jobs" and enter the number of processers you want to use.

  g. Right-click PetaVision in the left-hand pane, select Clean Project. Then do the same thing, but select Build Project. This should be enough to build the library without errors.

7. Compile a Systems test
  a. If you did not check out BasicSystemTest in step 4d, go to the SVN Repository Exploring perspective and click the drop-down menu for PVSystemTests, then check out BasicSystemTest.

  b. If you did not copy a cproject file to BasicSystemTest/.cproject in step 4, copy either "mac-eclipse.cproject" or "mac-cmake.cproject" to ".cproject".
  
  c. If you are using mac-cmake.cproject as .cproject, go to a terminal prompt, cd to the BasicSystemTest project directory,
     and execute the same command as in step 5e.

8. Run a Systems test
  I use the command line to run PV jobs.  In a terminal window, cd to the BasicSystemTest directory and type the command
  "Debug/BasicSystemTest -p input/BasicSystemTest.params"

  To run under 16 processes,
  "mpirun -np 16 Debug/BasicSystemTest -p input/BasicSystemTest.params"

It should be possible to run and debug from within the Eclipse environment, but I'm the wrong person to ask how to set that up.

9. The PetaVision's mac-eclipse.cproject file on the repository have optimization set to most and debugging set to none, for both C and C++.
   The PVSystemTests' mac-eclipse.cproject files have optimization set to none and debugging set to most.
   To change these, go to Properties for the appropriate project, open the triangle by C/C++ Build, and select Settings.  There are separate Optimization and Debugging panes under both "GCC C++ Compiler" and "GCC C Compiler" in the main part of the properties window.

   If you are using the mac-cmake.cproject files, you can add the option "-DCMAKE_BUILD_TYPE=Release" to the cmake command to
   set optimization to most and debugging to none.  The option "-DCMAKE_BUILD_TYPE=Debug" sets optimization to none and debugging to most.
   The default for PetaVision is Release; the default for the system tests is Debug.
