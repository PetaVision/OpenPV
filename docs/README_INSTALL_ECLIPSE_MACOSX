Here is the procedure for installing and compiling the PetaVision repository using Eclipse Luna on Mac OS X.
Thanks to Andree for all his assistance.

0. Prerequisites are Xcode with command line tools, Homebrew, and (of course) Eclipse.
   a. Xcode.  Download Xcode from the Apple Store.  You will need to register (free) with Apple as a developer.
   
   b. Command line tools (C compiler, C++ compiler, debugger).  Launch Xcode and select "Preferences…" from
   the Xcode menu.  Then select Downloads, and the Components pane.  Select "Command Line Tools" and click the Install button.
   
   c. Eclipse.  Download "Eclipse for Parallel Application Developers" from <http://eclipse.org/downloads/>.
   Choose the 32-bit or 64-bit version depending on your machine.  See <http://support.apple.com/kb/HT3696> to determine
   if your architecture is 32-bit or 64-bit.
   
   Open the downloaded tar.gz file, and move the resulting folder, "eclipse" to a convenient location.  I like to put it
   in the Applications folder, but I believe that it could be put anywhere.  The application is the file Eclipse.app in the
   eclipse folder.
   
   d. Homebrew.  The projects' configuration files on the repository assume that MPI, GDAL and any optional
   packages have been installed using Homebrew.  You can use other package managers (e.g. MacPorts, Fink)
   but some properties will have to be modified.
   
   To install Homebrew, execute the following command (documented at <http://brew.sh>):
   ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
   
   If you want to run with the OpenMP threads extension on Mac, there are some extra steps to follow, because the 
   
   brew install openmpi
   /opt/local/bin/port install openmpi
   /opt/local/bin/port install gdal

1. Dependencies.  CMake, OpenMPI and GDAL are required dependencies; Libsndfile (for audio) and support for OpenMP directives
   (for parallel threading) are optional.
   
   a.  (Optional) If you want to use OpenMP directives, you will need to install GNU's GCC.  This is because the
   Apple-installed commands gcc and g++ do not actually run the GNU compilers, but are instead really clang and clang++.
   These compilers do not (yet) have support for OpenMP directives.  To use these features, you'll need to install GNU's
   compilers.  To install GCC using Homebrew, execute the command
   
   brew install gcc
   
   This installs commands /usr/local/bin/gcc-4.9 and /usr/local/bin/g++-4.9 (the version number may be older if you have an older version of Mac OS)
   
   b.  Other required dependencies.
   
   PetaVision relies extensively on Open MPI and on GDAL.  These libraries should be compiled with the same compiler as the
   PetaVision library.  If you are using OpenMP threading, run the commands
   
   brew install open-mpi --cc=gcc-4.9
   brew install gdal --cc=gcc-4.9
   (adjust the version number as necessary)
   
   If you are not using OpenMP threading, the commands are simply
   
   brew install open-mpi
   brew install gdal
   
   We use CMake to maintain the make files.  Run the command
   
   brew install cmake
   
   (If you installed gcc through Homebrew you can add the --cc option to installing CMake as well, but it's not necessary.)
   
   c. Optional dependencies
   
   If you want to use the audio-based layers, run the command
   
   brew install libsndfile
   
   or
   
   brew install libsndfile --cc=gcc-4.9
   
   depending on whether you're using OpenMP threads.

2. Launch eclipse by opening Eclipse.app in the eclipse folder from step 0.c.
   If Eclipse complains about the Java version, install an up-to-date Java Development Kit from
   <http://www.oracle.com/technetwork/java/javase/downloads/index.html>,
   and relaunch Eclipse.
  
   Select a location for your workspace and click OK.  If this is a new workspace, click Workbench in the top right corner.
  
3. Install subclipse (the SVN plugin).  If subclipse is already installed, skip this step
  a. Help menu -> Install New Software… -> enter "http://subclipse.tigris.org/update_1.10.x" (no quotes) in the "Work with:" field, and press Enter.

  b. Click Select All and then click Next.  The Install Details window opens.  Click Next again.
  
  c. The Review Licenses page appears.  Peruse all the license agreements thoroughly.  If not, you could end up agreeing to pet-sit the subclipse developers' cats.  Then select "I accept" and click Finish.

  d. If an "unsigned content" warning appears, click OK.

  e. Restart eclipse when prompted.  Older versions of eclipse sometimes crashed at this point during restart.  If this happens, you may need to log out and log back in again.

3. Additional SVN settings.  These should be followed even if subclipse was already installed.
  a. Eclipse menu -> Preferences.  In the left-hand pane, double-click Team, then single-click SVN below it.
     If the "Subversion Native Library Not Available" error or the "Unsupported Password Stores" error appears, click OK.
     In the SVN interface section, set the client to SVNKit (Pure Java).  This gets rid of the annoying "Subversion Native Library" error mentioned above.
  
  b. The .settings folder should be ignored when synchronizing projects.
     Select Ignored Resources (also under Team).  Click the Add Pattern... button,
     enter ".settings" (no quotes), and then click OK to close the Add Ignore Pattern window,
     and then click OK to close the preferences window.

4. Additional Eclipse settings.
  a. To have eclipse treat *.cl files as C/C++ files, go to Eclipse menu -> Preferences, open C/C++ and select File Types.  Click New... and enter "*.cl" (no quotes) in the Pattern field, and in the pop-up menu labeled "Type:", select C Source File.
  
  b. If you are using the Homebrew-installed compilers, you will need to add /usr/local/bin to the path.
     Under the Eclipse menu, select Preferences.  Double-click C/C++ in the left-hand pane, then double-click Build, and then select Environment.
     Click the Add... button on the right.  In the window that pops up, enter "PATH" in the Name field, and
     in the Value field enter, "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin" (no quotes in either field)

5. Check out PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select SVN Repository Exploring.

  b. Click the "Add SVN Repository" button, in the upper right corner of the
     left-most pane.  It is a yellow rectangle with "SVN" and a plus-sign.
     If you only need to check out, not commit, you can use the URL
     "http://svn.code.sf.net/p/petavision/code" (no quotes).
     To commit, use "https://USERNAME@svn.code.sf.net/p/petavision/code",
     where USERNAME is your sourceforge username.

  c. Doubleclick the repository url.
     Then right-click "trunk" and choose Checkout... from the pop-up menu.
     In the "Checkout from SVN" window, click Finish.
     This step downloads the PetaVision library project.
  
  d. Repeat step [c] for any desired projects in the PVSystemsTests and sandbox directories.  Note that the sandbox and PVSystemTests
     directories should not be checked out as a whole.  Instead, the projects within these directories should be checked out.  You can
     use control-click and shift-click to select several projects at once.

  e. Eclipse requires a .cproject file in the project directory to recognize the project as a C/C++ project.
     We have different versions for different architectures.  Copy "mac-cmake.cproject" to ".cproject".
     Repeat for any system tests and sandboxes checked out in step [d].
     
     You can also use the script PetaVision/scripts/copycproject.bash to copy all projects' mac-cmake.cproject to .cproject in a batch.
     Use the command "bash PetaVision/scripts/copycproject.bash cmake"
  
  f. Install the template for PV code style, to use uniform conventions for indenting, etc.  To do this,
     Open Window menu -> Open Perspective -> Other ..., and select C/C++
     Right click on PetaVision in the Project Explorer and select Properties from the bottom of the pop-up menu.
     Open the C/C++ General menu and select Formatter.
     Uncheck "Enable project specific settings" and click "Configure Workspace Settings..."
     Click "Import..." and navigate to PVCodeStyle.xml in the PetaVision directory of your workspace.
     Click Open and then OK

  g. If you plan to use SoundStream objects you need the sndfile library.  Open the C/C++ Build submenu under properties
     and select Settings.  Under the ToolSettings tab, select "MacOS X C++ Linker"  Add
     " -lsndfile" (no quotes) to the end of the "Command" text field.
     Then in both "GCC C++ Compiler" and "GCC C Compiler" add " -DPV_USE_SNDFILE" (no quotes)
     to the end of the "Command" text field.
     For each of the "GCC C++ Compiler" and "GCC C Compiler" menus, select the Includes item.
     If the directory that contains sndfile.h is not in the "Include paths (-I)" pane, select
     the "Add" icon above the pane (a document icon with a green plus sign) and enter the directory.
     You will need to repeat step (g) for each project that uses the PetaVision library, whether or not that project
     explicitly uses SoundStream objects themselves.

6. Compile PetaVision.

  a. Call cmake to generate the make file.  From a terminal prompt, cd to the PetaVision project directory.
     The basic command is "cmake CMakeLists.txt" but there are several options.
     If you are using OpenMP threads,  add the options
     "-DCMAKE_C_COMPILER=/usr/local/bin/gcc-4.9 -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-4.9 -DOPEN_MP_THREADS=TRUE"
     If you are using SoundStream objects, add the option
     "-DLIB_SND_FILE=TRUE"
     If you want to use GPU acceleration with OpenCL, add the option
     "-DOPEN_CL_GPU=TRUE"
     If you want to use GPU acceleration with CUDA (requires an NVidia graphics card), add the option
     "-DCUDA_GPU=TRUE"
     Finally, to choose between compiling in debug or release mode, add either
     "-DCMAKE_BUILD_TYPE=Debug" or "-DCMAKE_BUILD_TYPE=Release".
     
     For example, to compile in debug mode, using soundstream objects, run the command
     cmake -DCMAKE_BUILD_TYPE=Debug -DLIB_SND_FILE=TRUE
     
     This generates the makefile.
  
  b. To change the number of processors used during compile, select C/C++ Build,  and click the Behavior tab. Select "Use parallel jobs" and enter the number of processers you want to use.
     We do not recommend the "Use unlimited jobs" option, because the large number of source files can cause the machine to lock up.

  c. Right-click PetaVision in the left-hand pane, select Clean Project. Then right-click PetaVision again and select Build Project. This should be enough to build the library without errors.
     The command line equivalents are "make clean" and "make".  To compile using 7 processors from the command line, "make -j 7".
     The equivalent of "use unlimited jobs" would be "make -j" without a numerical argument, but this not recommended, as stated above.

7. Compile a Systems test
  a. If you did not check out BasicSystemTest in step 4d, go to the SVN Repository Exploring perspective and click the drop-down menu for PVSystemTests, then check out BasicSystemTest.

  b. If you did not copy a cproject file to BasicSystemTest/.cproject in step 4, copy "mac-cmake.cproject" to ".cproject".
  
  c. Go to a terminal prompt, cd to the BasicSystemTest project directory,
     and execute the same command as in step 6a, with one additional option:
     add "-DPV_DIR=$PWD/../PetaVision".  This enables BasicSystemTest to be linked to the PetaVision directory.

8. Run a Systems test
  I use the command line to run PV jobs.  In a terminal window, cd to the BasicSystemTest directory and type the command
  "Debug/BasicSystemTest -p input/BasicSystemTest.params"

  To run under 4 processes,
  "mpirun -np 4 Debug/BasicSystemTest -p input/BasicSystemTest.params"

It should be possible to run and debug from within the Eclipse environment, but I'm the wrong person to ask how to set that up.

9. If you make a change to source files and need to recompile, it is enough to rerun the make command.  You will need to
   rerun the CMake command if source files are added or removed, or if you want to change the options that were selected
   by running cmake.
