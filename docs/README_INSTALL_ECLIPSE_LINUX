Here is the procedure for installing and compiling the PetaVision repository on the Linux clusters in NMC.  Thanks to Andree for all his assistance.

0. Log into a machine on the NMC network using ssh -X

1. Launch eclipse.  If you get the "Welcome to Eclipse" screen, click Workbench in the top right corner.
   If eclipse is not installed, you will need to contact techsupport.

2. Install subclipse (the SVN plugin)
  a. Help menu -> Install New Softwareâ€¦ -> enter "http://subclipse.tigris.org/update_1.6.x" (no quotes) in the "Work with:" field, and press Enter.  Note: there is a version 1.8, but Ubuntu's SVN seems to be incompatible with the newest version.

  b. Click Select All, and Next.  The Install Details window opens.

  c. Uncheck "Subclipse Integration for Mylyn 3.x" and "Subversion Revision Graph".  These components don't seem to be on the tigris site where they're expected to be.  Then click Next.  A review page appears; click Next again.

  d. The Review Licenses page appears.  Peruse all the license agreements thoroughly.  Do note that you're agreeing to pet-sit the subclipse developers' cats.  Then select "I accept" and click Finish.

  e. If an "unsigned content" warning appears, click OK.

  f. Restart eclipse.  It may crash during restart; if it does, you may need to log out and log back in again.

  g. If the "Subversion Native Library Not Available" error appears, click OK.  If the "Unsupported Password Stores" error appears, click OK.

  h. Window menu -> Preferences, then click the triangle next to Team and select SVN.  In the pop-up menu labeled "SVN interface", change the setting to SVNKit (Pure Java).  Click Apply and then OK.  This step eliminates the "Subversion Native Library Not Available" error.

  i. The .settings folder should be ignored when synchronizing projects.  Open the Window menu from the menu bar and select preferences.
     Then open Team from the left pane, and select Ignored Resources.  Click the Add Pattern... button,
     enter ".settings" (no quotes), and then click OK to close the Add Ignore Pattern window, and then click OK to
     close the preferences window.

3. Additional eclipse settings.
   To read *.cl files in the C editor, go to Window menu -> Preferences, open C/C++ and select File Types.  Click New... and enter Pattern: "*.cl" (no quotes) and Type: C Source File.

4. Check out PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select SVN Repository Exploring.

  b. Click the "Add SVN Repository" button, in the upper right corner of the
     left-most pane.  It is a yellow rectangle with "SVN" and a plus-sign.
     If you only need to check out, not commit, you can use the URL
     "http://svn.code.sf.net/p/petavision/code" (no quotes).
     If you plan to commit code, use "https://USERNAME@svn.code.sf.net/p/petavision/code",
     where USERNAME is your sourceforge username.
     You will be prompted for your sourceforge password.
     
     Double-click the repository when it appears in the left-hand pane.

  c. Right-click "trunk" and choose Checkout... from the pop-up menu.  In the "Checkout from SVN" window, click Finish.  This step downloads the PetaVision library project.

  d. Repeat step [c] for any desired projects in the PVSystemsTests and sandbox directories.

  e. Eclipse requires a .cproject file in the project directory to recognize the project as a C/C++ project.
     There are different versions .cproject on the repository.
     If you will be working with PetaVision exclusively in eclipse and want eclipse to manage your makefiles,
     copy "mac-eclipse.cproject" to ".cproject".
     If you will sometimes do code development outside of the eclipse environment, or for any reason do not
     want to have eclipse manage the makefiles, copy "mac-cmake.cproject" to ".cproject".
     Repeat for any system tests and sandboxes checked out in step [d].
     
     You can also use the script PetaVision/scripts/copycproject.bash to copy all projects' mac-*.cproject to .cproject in a batch.
     Use either the command
     "bash PetaVision/scripts/copycproject.bash eclipse" or "bash PetaVision/scripts/copycproject.bash cmake"
     to copy either the eclipse or cmake versions.

  f. Install the template for PV code style, to use uniform conventions for indenting, etc.  To do this,
     Open Window menu -> Open Perspective -> Other ..., and select C/C++
     Right click on PetaVision in the Project Explorer and select Properties from the bottom of the pop-up menu.
     Open the C/C++ General menu and select Code Style (eclipse version Indigo) or Formatter (version Juno).
     Uncheck "Enable project specific settings" and click "Configure Workspace Settings..."
     Click "Import..." and navigate to PVCodeStyle.xml in the PetaVision directory of your workspace.
     Click Open and then OK

5. Compile PetaVision.
  b. (linux-eclipse.cproject only) Window menu -> Open Perspective -> Other ..., and select C/C++

  c. (linux-eclipse.cproject only) Right-click PetaVision in the left-hand pane, select Properties.

  d. (linux-eclipse.cproject only) Under C/C++ Build -> Settings, select GCC C++ Compiler ->  Directories.  Verify that /usr/include/gdal is in the Include paths.  Do the same for GCC C Compiler -> Directories

  e. (linux-cmakecproject only) From a terminal prompt, cd to the PetaVision project directory.  Then execute the command
     "cmake CMakeLists.txt -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++"
  
  f. To change the number of processors used during compile, select C/C++ Build,  and click the Behavior tab.

  g. Project Menu -> Build Project.  This should be enough to build the library without errors.

6. Compile a Systems test
  a. Go to the SVN Repository Exploring perspective and check out KernelTest.

  b. Project menu -> Build Project ....  It should build without errors.

7. Run a Systems test
  I use the command line to run PV jobs.  In a terminal window, cd to the KernelTest directory and type the command
Debug/KernelTest -p input/test_kernel.params

To run under 16 processes,
mpirun -np 16 Debug/KernelTest -p input/test_kernel.params

It should be possible to run and debug from within the Eclipse environment, but I'm the wrong person to ask how to set that up.

8. The PetaVision's mac-eclipse.cproject file on the repository have optimization set to most and debugging set to none, for both C and C++.
   The PVSystemTests' mac-eclipse.cproject files have optimization set to none and debugging set to most.
   To change these, go to Properties for the appropriate project, open the triangle by C/C++ Build, and select Settings.  There are separate Optimization and Debugging panes under both "GCC C++ Compiler" and "GCC C Compiler" in the main part of the properties window.

   If you are using the mac-cmake.cproject files, you can add the option "-DCMAKE_BUILD_TYPE=Release" to the cmake command to
   set optimization to most and debugging to none.  The option "-DCMAKE_BUILD_TYPE=Debug" sets optimization to none and debugging to most.
   The default for PetaVision is Release; the default for the system tests is Debug.

Please take care when committing, not to commit the .project file or the .settings directory.
