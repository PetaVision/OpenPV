Here is the procedure for installing and compiling the PetaVision repository on the Linux clusters in NMC.  Thanks to Andree for all his assistance.

0. Log into rebor.newmexicoconsortium.org or retozo.newmexicoconsortium.org with ssh -X, from within the NMC network.
RSA fingerprints are
2e:24:89:92:d4:76:9d:32:d2:e9:e0:cb:d1:16:c3:06 (rubor)
b5:dd:9d:ff:93:ed:ef:28:b4:c8:ff:00:b5:74:09:3a (retozo)

Rubor and Retozo have separate filesystems and password databases; anything you do on one machine won't be there when you log into the other.

1. Launch eclipse.  If you get the "Welcome to Eclipse" screen, click Workbench in the top right corner.

2. Install subclipse (the SVN plugin)
  a. Help menu -> Install New Softwareâ€¦ -> enter "http://subclipse.tigris.org/update_1.6.x" (no quotes) in the "Work with:" field, and press Enter.  Note: there is a version 1.8, but Ubuntu's SVN seems to be incompatible with the newest version.

  b. Click Select All, and Next.  The Install Details window opens.

  c. Uncheck "Subclipse Integration for Mylyn 3.x" and "Subversion Revision Graph".  These components don't seem to be on the tigris site where they're expected to be.  Then click Next.  A review page appears; click Next again.

  d. The Review Licenses page appears.  Peruse all the license agreements thoroughly.  Do note that you're agreeing to pet-sit the subclipse developers' cats.  Then select "I accept" and click Finish.

  e. If an "unsigned content" warning appears, click OK.

  f. Restart eclipse.  It may crash during restart; if it does, you may need to log out and log back in again.

  g. If the "Subversion Native Library Not Available" error appears, click OK.  If the "Unsupported Password Stores" error appears, click OK.

  h. Window menu -> Preferences, then click the triangle next to Team and select SVN.  In the pop-up menu labeled "SVN interface", change the setting to SVNKit (Pure Java).  Click Apply and then OK.  This step eliminates the "Subversion Native Library Not Available" error.

3. Check out PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select SVN Repository Exploring.

  b. Click the "Add SVN Repository" button, in the upper right corner of the left-most pane.  It is a yellow rectangle with an "SVN" label and a plus-sign.  The URL is "https://petavision.svn.sourceforge.net/svnroot/petavision" (no quotes).   Double-click the repository when it appears in the left-hand pane.

  c. Right-click "trunk" and choose Checkout... from the pop-up menu.  In the "Checkout from SVN" window, click Finish.  This step downloads the PetaVision library project.

  d. From a terminal, navigate to the PetaVision directory in your eclipse workspace, and copy "linux.cproject" to ".cproject".

  e. Repeat steps [c] and [d] for any desired projects in the PVSystemsTests and sandbox directories.

  f. Install the template for PV code style, to use uniform conventions for indenting, etc.  To do this,
     Open Window menu -> Open Perspective -> Other ..., and select C/C++
     Right click on PetaVision in the Project Explorer and select Properties from the bottom of the pop-up menu.
     Open the C/C++ General menu and select Code Style (eclipse version Indigo) or Formatting (version Juno).
     Uncheck "Enable project specific settings" and click "Configure Workspace Settings..."
     Click "Import..." and navigate to PVCodeStyle.xml in the PetaVision directory of your workspace.
     Click Open and then OK

4. Compile PetaVision.
  a. Window menu -> Open Perspective -> Other ..., and select C/C++

  b. Right-click PetaVision in the left-hand pane, select Properties.

  c. Under C/C++ Build -> Settings, select GCC C++ Compiler ->  Directories.  Add /usr/include/gdal to the Include paths. It's safe to remove /usr/local/openmpi-1.4.3/include; openmpi is in a standard location on these machines.  Do the same for GCC C Compiler -> Directories

  d. To change the number of processors used during compile, select C/C++ Build,  and click the Behavior tab.

  e. Project Menu -> Build Project.  This should be enough to build the library without errors.

5. Compile a Systems test
  a. Go to the SVN Repository Exploring perspective and check out KernelTest.

  b. Project menu -> Build Project ....  It should build without errors.

6. Run a Systems test
  I use the command line to run PV jobs.  In a terminal window, cd to the KernelTest directory and type the command
Debug/KernelTest -p input/test_kernel.params

To run under 16 processes,
mpirun -np 16 Debug/KernelTest -p input/test_kernel.params

It should be possible to run and debug from within the Eclipse environment the same as you would on a Mac, but I'm the wrong person to ask how to set that up.

7. The projects' .cproject files on the repository now have optimization set to most and debugging set to none, for both C and C++.  To change these, go to Properties, open the triangle by C/C++ Build, and select Settings.  There are separate Optimization and Debugging panes under both "GCC C++ Compiler" and "GCC C Compiler" in the main part of the properties window.

Please take care when committing, not to commit the .cproject and .project files or the .settings directory.

8. To read *.cl files in the C editor, go to Window menu -> Preferences, open C/C++ and select File Types.  Click New... and enter Pattern: "*.cl" (no quotes) and Type: C Source File.
