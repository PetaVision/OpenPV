This is a tutorial on getting PetaVision and running on OSX with GPU support, assuming you have a clean installation of Ubuntu.


**********************************
Requirements
**********************************
An NVIDIA card with compute capabilities 3.0 or above. Check at https://developer.nvidia.com/cuda-gpus to see if your video card is supported.
OSX
XCode (make sure to open XCode and accept licenses)
Homebrew


**********************************
Initialization
**********************************
brew update
brew install svn
brew install cmake


**********************************
Clang + OMP
**********************************
Currently, OSX's Clang does not support openMP. Therefore, we need to download a different version of clang and replace the current clang.

Replace clang with clamp/llvm:
   cd ~
   mkdir clamp
   cd clamp
   git clone https://github.com/clang-omp/llvm
   git clone https://github.com/clang-omp/compiler-rt llvm/projects/compiler-rt
   git clone -b clang-omp https://github.com/clang-omp/clang llvm/tools/clang
   mkdir build
   cd build
   ../llvm/configure --enable-optimized
   make -j8

Open your ~/.bash_profile (or .profile, whichever one you use) and append these lines to the end of the file, making sure the clamp path is before /usr/bin
   export PATH=~/clamp/build/Release+Asserts/bin:$PATH 
   export C_INCLUDE_PATH=~/clamp/build/Release+Asserts/include:$C_INCLUDE_PATH
   export CPLUS_INCLUDE_PATH=~/clamp/build/Release+Asserts/include:$CPLUS_INCLUDE_PATH
   export LIBRARY_PATH=~/clamp/build/Release+Asserts/lib:$LIBRARY_PATH
   export DYLD_LIBRARY_PATH=~/clamp/build/Release+Asserts/lib:$DYLD_LIBRARY_PATH
Make sure to source your .bash_profile:
   source ~/.bash_profile

Make sure "which clang" is pointing to ~/clamp/build/Release_Asserts/bin/clang.

Install the openmp runtime library:
Releases can be found at https://www.openmprtl.org/download#stable-releases
   mv ~/Downloads/name_of_openmp_runtime_library.tgz ~/clamp
   cd ~/clamp
   tar -xvf name_of_openmp_runtime_library.tgz
   cd libomp_oss
   cmake CMakeLists.txt
   make -j8

Once again, append these lines to the end of the file.
   export C_INCLUDE_PATH=~/clamp/libomp_oss:$C_INCLUDE_PATH
   export CPLUS_INCLUDE_PATH=~/clamp/libomp_oss:$CPLUS_INCLUDE_PATH
   export LIBRARY_PATH=~/clamp/libomp_oss:$LIBRARY_PATH
   export DYLD_LIBRARY_PATH=~/clamp/libomp_oss:$DYLD_LIBRARY_PATH
Make sure to source your .bash_profile:
   source ~/.bash_profile




**********************************
OpenMPI:
**********************************
With the new version of clang installed, we can now install openmpi using the new clang.
brew install openmpi


**********************************
GDAL:
**********************************
brew install gdal


**********************************
CUDA and NVIDIA Driver:
**********************************
NVIDIA drivers are included with the cuda download. To install cuda:
   Go to https://developer.nvidia.com/cuda-downloads
   Select Mac OSX and download the pkg provided
   Follow the onscreen instructions. Make sure to select cuda driver and cuda toolkit.


**********************************
CUDNN
**********************************
Go to https://developer.nvidia.com/cuDNN and click Download at the bottom.
Register with NVIDIA developers if need be, and wait for confirmation.
Download CUDNN
(Alternative: You can also just copy the cuDNN folder from compneuro: /nh/compneuro/Data/cudnn_osx.tgz)


**********************************
PetaVision:
**********************************
cd ~
mkdir workspace
cd workspace
svn co https://<useranme>@svn.code.sf.net/p/petavision/code/trunk PetaVision
svn co https://<username>@svn.code.sf.net/p/petavision/code/PVSystemTests PVSystemTests
Optional: Download your sandbox
cp PetaVision/docs/cmake/CMakeLists.txt .
Optional: Add your sandbox to the end of CMakeLists
ccmake .

CMake options:
CMAKE_BUILD_TYPE = Release (Optimiztaion for CPU)
CUDA_GPU = True (depending on if you want to use GPUS)
CUDA_RELEASE = True (Optimization for Cuda)
CUDNN = True (If you're using CUDNN)
CUDNN_PATH = /path/to/cudnn/folder (The path to the cuDNN folder you downloaded/copied)
OPEN_MP_THREADS = True (If we use threads or not)

If some of these options do not show up on ccmake, fill the ones you can, press c to configure, and look again for variables
Press G to generate when avaliable.

To Test:
cd ~/workspace/PVSystemTest/GPUSystemTest
make -j 8
Release/GPUSystemTest -p input/postTest.params -t


