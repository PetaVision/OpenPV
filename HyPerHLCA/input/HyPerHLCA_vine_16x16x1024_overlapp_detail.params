// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
   nx = 480;   
   ny = 480;
   dt = 1.0;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   numSteps = 196000;       // Depends on number of VINE video frames
   progressStep = 1000;
   outputPath = "/nh/compneuro/Data/vine/LCA/detail/output_16x16x1024_overlap_lambda_05X2_errorthresh_005";
   filenamesContainLayerNames = true;
   filenamesContainConnectionNames = true;
   checkpointRead = false;
   //checkpointReadDir = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_16x16x1024_Overlap_lambda_05X2/Checkpoints";
   //checkpointReadDirIndex = 42300000;
   checkpointWrite = false;
   suppressLastOutput = false;
   writeProgressToErr = true;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/HyPerPursuit/VineVideo/input/VineVideoFrames.txt";
    nf = 1;
    marginWidth = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1000;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

Retina "Retina" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 1;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeSparseActivity = 0;

    foregroundRate = 1000;
    backgroundRate = 0;
    burstFreq = 1;
    burstDuration = 1000;

    beginStim = 0;
    endStim = 1000000000;
    
    phase = 1;
};


ANNLayer "Bipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 7;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 2;
};

ANNLayer "Ganglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    initialWriteTime = 0.0;
    writeStep = 0.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_16x16x1024_Overlap_lambda_05X2/Checkpoints/Checkpoint42300000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 6; 
};


ANNErrorLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 8;
    initialWriteTime = 0.0;
    writeStep = 1;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_16x16x1024_Overlap_lambda_05X2/Checkpoints/Checkpoint42300000/Error_V.pvp";
    //
    VThresh = 0.005; //-infinity;
    VMax =  infinity;
    VMin = 0.0; //-infinity;
    VShift = 0;
    //
    phase = 4;  
};


HyPerLCALayer "V1" = {
    restart = 0;
    /*****************/
    //NON OVERLAPPING
    /*****************/
    //nxScale = 0.0625;
    //nyScale = 0.0625;
    //nf = 4096; //1024;
    //marginWidth = 0;
    // 
    /*****************/
    //OVERLAPPING
    /*****************/
    nxScale = 0.125;
    nyScale = 0.125;
    nf = 1024; //256;
    marginWidth = 1;
    // 
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 1;
    writeSparseActivity = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_16x16x1024_Overlap_lambda_05X2/Checkpoints/Checkpoint42300000/V1_V.pvp";
    // 
    timeConstantTau = 100.0;
    // 
    VThresh = 0.1; // 0.05;
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 5;
};


// connections


KernelConn "MovieToRetina" = {
    preLayerName = "Image";
    postLayerName = "Retina";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformWeight";
    weightInit = 1.0;

    normalizeMethod = "none";
       
    //writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    stochasticReleaseFlag = false;

    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
    shrinkPatches = false;
    
    delay = 0;     
};


KernelConn "RetinaToBipolarCenter" = {
   preLayerName = "Retina";
   postLayerName = "Bipolar";
   channelCode = 0;
   nxp = 3; 
   nyp = 3; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 0.5;
   rMax  = 3;
   rMin = 0;
       
   strength = 1.0;  
   normalizeMethod = "normalizeSum";
   minSumTolerated = 0;
   normalizeArborsIndividually = 0;
   normalize_cutoff = 0.0;
   normalizeFromPostPerspective = true;
   symmetrizeWeights = false;

   shrinkPatches = false;
   //writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};


KernelConn "BipolarToGanglionCenter" = {
   preLayerName = "Bipolar";
   postLayerName = "Ganglion";
   channelCode = 0;
   nxp = 1; 
   nyp = 1; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 1;
   rMax  = 3;
   rMin = 0;
       
   strength = 1.0;  
   normalizeMethod = "normalizeSum";
   minSumTolerated = 0;
   normalizeArborsIndividually = 0;
   normalize_cutoff = 0.0;
   normalizeFromPostPerspective = true;
   symmetrizeWeights = false;

   shrinkPatches = false;
   //writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};


KernelConn "BipolarToGanglionSurround" = {
   preLayerName = "Bipolar";
   postLayerName = "Ganglion";
   channelCode = 1;
   nxp = 15; 
   nyp = 15; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 7.5;
   rMax  = 11;
   rMin = 0.5;
       
   strength = 1.0;  
   normalizeMethod = "normalizeSum";
   minSumTolerated = 0;
   normalizeArborsIndividually = 0;
   normalize_cutoff = 0.0;
   normalizeFromPostPerspective = true;
   symmetrizeWeights = false;

   shrinkPatches = false;
   //writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};


IdentConn "GanglionToError" = {
    preLayerName = "Ganglion";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    //
    /*****************/
    //NON OVERLAPPING
    /*****************/
    //nxp = 16;
    //nyp = 16;
    /*****************/
    //OVERLAPPING
    /*****************/
    nxp = 24;
    nyp = 24;
    nxpShrunken = 16;
    nypShrunken = 16;
    //
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_16x16x1024_Overlap_lambda_05X2/Checkpoints/Checkpoint42300000/V1ToError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
   
    strength = 1.0;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;

    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 

    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    //weightUpdatePeriod = 20.0;
    //initialWeightUpdateTime = 999.0;
    //initialWriteTime = 0.0;
    //dWMax = 1.0;
    selfFlag = false;
    shmget_flag = false;

    delay = 0;

    stochasticReleaseFlag = false;
    shrinkPatches = false;
};

TransposeConn "ErrorToV1" = {
	preLayerName = "Error";
	postLayerName = "V1";
	channelCode = 0;

	originalConnName = "V1ToError";
	    
	selfFlag = false;
	preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//	
	writeStep = -1;
	writeCompressedCheckpoints = false;
	shmget_flag = false;
//
	delay = 0;
	
	stochasticReleaseFlag = false;
};

CloneKernelConn "V1ToRecon" = {
   preLayerName = "V1";
   postLayerName = "Recon";
   channelCode = 0;
   writeStep = -1;
   originalConnName = "V1ToError";
   //writeCompressedWeights = 0.0;
   selfFlag = false;
   stochasticReleaseFlag = false;
   delay = 0;
   preActivityIsNotRate = false;
};




// Probes

//StatsProbe "RetinaStats" = {
//    targetLayer = "Retina";
//};
//
//StatsProbe "GanglionStats" = {
//    targetLayer = "Ganglion";
//};
//
//StatsProbe "ReconStats" = {
//    targetLayer = "Recon";
//};
//
//StatsProbe "ErrorStats" = {
//    targetLayer = "Error";
//};
//
//StatsProbe "V1Stats" = {
//    targetLayer = "V1";
//};
//
StatsProbe "RetinaStatsFile" = {
    targetLayer = "Retina";
    probeOutputFile = "Retina_Stats.txt";
};

StatsProbe "GanglionStatsFile" = {
    targetLayer = "Ganglion";
    probeOutputFile = "Ganglion_Stats.txt";
};

StatsProbe "ReconStatsFile" = {
    targetLayer = "Recon";
    probeOutputFile = "Recon_Stats.txt";
};

StatsProbe "ErrorStatsFile" = {
    targetLayer = "Error";
    probeOutputFile = "Error_Stats.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};


