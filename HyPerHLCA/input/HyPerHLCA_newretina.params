
// HyPerHLCA_newretina.params
// 02-05-2014
// Modified version of HyPerHLCA_retina.params
// Added LPFGanglion ON and OFF layers, and Error/Recon layers to connect to them.
// -Wesley Chavez
/////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 240;  // vine value
    ny = 240;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    numSteps = 1000000;
    progressStep = 100;
    outputPath = "/nh/compneuro/Data/vine/retina/output_retinarun";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = true;
    checkpointReadDir = "/nh/compneuro/Data/vine/retina/output_retinarun";
    checkpointReadDirIndex = 1261292;
    checkpointWrite =true;
    checkpointWriteDir = "/nh/compneuro/Data/vine/retina/output_retinarun";
    checkpointWriteStepInterval = 1000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "GanglionON" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/vine/list/spikes/filenames_retinalspikesON.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = true;
    readPvpFile = false;
    phase = 0;
};


Movie "GanglionOFF" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/vine/list/spikes/filenames_retinalspikesOFF.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = true;
    readPvpFile = false;
    phase = 0;
};


Movie "LPFGanglionON" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/vine/list/spikes/filenames_trialaveragedandbinnedON.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = true;
    readPvpFile = false;
    phase = 0;
};


Movie "LPFGanglionOFF" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/vine/list/spikes/filenames_trialaveragedandbinnedOFF.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = true;
    readPvpFile = false;
    phase = 0;
};


ANNErrorLayer "ErrorON1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 16;
    initialWriteTime = 998.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    valueBC = 0;
    errScale = .25;
    phase = 2;  
};


ANNErrorLayer "ErrorOFF1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 16;
    initialWriteTime = 998.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    valueBC = 0;
    errScale = .25;
    phase = 2;  
};


ANNErrorLayer "ErrorON2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    initialWriteTime = 998.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    valueBC = 0;
    errScale = .25;
    phase = 2;  
};


ANNErrorLayer "ErrorOFF2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    initialWriteTime = 998.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    valueBC = 0;
    errScale = .25;
    phase = 2;  
};


HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.5; //0.25;
    nyScale = 0.5; //0.25;
    nf = 512;
    numChannels = 1;
    initialWriteTime = 998.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .15;
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    VThresh = 0.05;
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    valueBC = 0;
    numWindowX = 1;
    numWindowY = 1;
    phase = 3;
};


ANNLayer "ReconON1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 16;
    initialWriteTime = 998.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";    
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity;
    VShift = 0;
    valueBC = 0;   
    phase = 4;
};


ANNLayer "ReconOFF1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 16;
    initialWriteTime = 998.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity;
    VShift = 0;
    valueBC = 0;
    phase = 4;
};


ANNLayer "ReconON2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    initialWriteTime = 998.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";    
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity;
    VShift = 0;
    valueBC = 0;   
    phase = 4;
};


ANNLayer "ReconOFF2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    initialWriteTime = 998.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";    
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity;
    VShift = 0;
    valueBC = 0;   
    phase = 4;
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// CONNECTIONS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////



KernelConn "delayArborON" = {
    preLayerName = "GanglionON";
    postLayerName = "ErrorON1";
    
    channelCode = 0;
    nxp         = 1;
    nyp         = 1;
    nfp         = 16;
    
    //Set delay from 0 to 15
    delay       = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    
    numAxonalArbors  = 16;
    useWindowPost    = false;
    writeStep        = -1;
    initFromLastFlag = 0;

    weightInitType = "OneToOneWeightsWithDelays";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    selfFlag               = false;
    shrinkPatches          = false;
    updateGSynFromPostPerspective = false;
    preActivityIsNotRate   = false;
    shmget_flag            = true;
};


KernelConn "delayArborOFF" = {
    preLayerName = "GanglionOFF";
    postLayerName = "ErrorOFF1";
    
    channelCode = 0;
    nxp         = 1;
    nyp         = 1;
    nfp         = 16;
    
    //Set delay from 0 to 15
    delay       = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    
    numAxonalArbors  = 16;
    useWindowPost    = false;
    writeStep        = -1;
    initFromLastFlag = 0;

    weightInitType = "OneToOneWeightsWithDelays";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    selfFlag               = false;
    shrinkPatches          = false;
    updateGSynFromPostPerspective = false;
    preActivityIsNotRate   = false;
    shmget_flag            = true;
};


KernelConn "LPFGanglionONToErrorON2" = {
    preLayerName = "LPFGanglionON";
    postLayerName = "ErrorON2";
    
    channelCode = 0;
    nxp         = 1;
    nyp         = 1;
    nfp         = 1;
    
    numAxonalArbors  = 1;
    useWindowPost    = false;
    writeStep        = -1;
    initFromLastFlag = 0;

    weightInitType = "OneToOneWeights";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    selfFlag               = false;
    shrinkPatches          = false;
    updateGSynFromPostPerspective = false;
    preActivityIsNotRate   = false;
    shmget_flag            = true;
};


KernelConn "LPFGanglionOFFToErrorOFF2" = {
    preLayerName = "LPFGanglionOFF";
    postLayerName = "ErrorOFF2";
    
    channelCode = 0;
    nxp         = 1;
    nyp         = 1;
    nfp         = 1;
    
    numAxonalArbors  = 1;
    useWindowPost    = false;
    writeStep        = -1;
    initFromLastFlag = 0;

    weightInitType = "OneToOneWeights";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    selfFlag               = false;
    shrinkPatches          = false;
    updateGSynFromPostPerspective = false;
    preActivityIsNotRate   = false;
    shmget_flag            = true;
};



KernelConn "V1ToErrorON1" = {
    preLayerName = "V1";
    postLayerName = "ErrorON1";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 16;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    strength = 1;
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    writeStep = 10000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 1; //200.0;
    initialWeightUpdateTime = 1; //199.0;
    initialWriteTime = 0.0;
    dWMax = .1; //5.0; 
    selfFlag = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = 0;
};


KernelConn "V1ToErrorOFF1" = {
    preLayerName = "V1";
    postLayerName = "ErrorOFF1";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 16;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    strength = 1;
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true;
    combine_dW_with_W_flag = false;
    writeStep = 10000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 1; //200.0;
    initialWeightUpdateTime = 1; //199.0;
    initialWriteTime = 0.0;
    dWMax = .1; //5.0;
    selfFlag = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = 0;
};


KernelConn "V1ToErrorON2" = {
    preLayerName = "V1";
    postLayerName = "ErrorON2";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    strength = 1;
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    writeStep = 10000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 1; //200.0;
    initialWeightUpdateTime = 1; //199.0;
    initialWriteTime = 0.0;
    dWMax = .1; //5.0; 
    selfFlag = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = 0;
};


KernelConn "V1ToErrorOFF2" = {
    preLayerName = "V1";
    postLayerName = "ErrorOFF2";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    strength = 1;
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    writeStep = 10000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 1; //200.0;
    initialWeightUpdateTime = 1; //199.0;
    initialWriteTime = 0.0;
    dWMax = .1; //5.0; 
    selfFlag = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = 0;
};



TransposeConn "ErrorON1ToV1" = {
    preLayerName = "ErrorON1";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToErrorON1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = 0;
};


TransposeConn "ErrorOFF1ToV1" = {
    preLayerName = "ErrorOFF1";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToErrorOFF1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = 0;
};


TransposeConn "ErrorON2ToV1" = {
    preLayerName = "ErrorON2";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToErrorON2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = 0;
};


TransposeConn "ErrorOFF2ToV1" = {
    preLayerName = "ErrorOFF2";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToErrorOFF2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = 0;
};


CloneKernelConn "V1ToReconON1" = {
    preLayerName = "V1";
    postLayerName = "ReconON1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToErrorON1";
    selfFlag = false;
   pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    updateGSynFromPostPerspective = 0;
    writeCompressedCheckpoints = 0;
};


CloneKernelConn "V1ToReconOFF1" = {
    preLayerName = "V1";
    postLayerName = "ReconOFF1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToErrorOFF1";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    updateGSynFromPostPerspective = 0;
    writeCompressedCheckpoints = 0;
};


CloneKernelConn "V1ToReconON2" = {
    preLayerName = "V1";
    postLayerName = "ReconON2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToErrorON2";
    selfFlag = false;
   pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    updateGSynFromPostPerspective = 0;
    writeCompressedCheckpoints = 0;
};


CloneKernelConn "V1ToReconOFF2" = {
    preLayerName = "V1";
    postLayerName = "ReconOFF2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToErrorOFF2";
    selfFlag = false;
   pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    updateGSynFromPostPerspective = 0;
    writeCompressedCheckpoints = 0;
};




// Probes


StatsProbe "ErrorON1StatsFile" = {
    targetLayer = "ErrorON1";
    probeOutputFile = "Error_StatsON1.txt";
};

StatsProbe "ErrorOFF1StatsFile" = {
    targetLayer = "ErrorOFF1";
    probeOutputFile = "Error_StatsOFF1.txt";
};

StatsProbe "ErrorON2StatsFile" = {
    targetLayer = "ErrorON2";
    probeOutputFile = "Error_StatsON2.txt";
};

StatsProbe "ErrorOFF2StatsFile" = {
    targetLayer = "ErrorOFF2";
    probeOutputFile = "Error_StatsOFF2.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};

StatsProbe "ReconON1StatsFile" = {
    targetLayer = "ReconON1";
    probeOutputFile = "Recon_StatsON1.txt";
};

StatsProbe "ReconOFF1StatsFile" = {
    targetLayer = "ReconOFF1";
    probeOutputFile = "Recon_StatsOFF1.txt";
};

StatsProbe "ReconON2StatsFile" = {
    targetLayer = "ReconON2";
    probeOutputFile = "Recon_StatsON2.txt";
};

StatsProbe "ReconOFF2StatsFile" = {
    targetLayer = "ReconOFF2";
    probeOutputFile = "Recon_StatsOFF2.txt";
};

