// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 480;  // vine value
    ny = 480;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    numSteps = 196000;
    progressStep = 1000;
    outputPath = "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_deep";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false;
    checkpointReadDir = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints";
    checkpointReadDirIndex = 46584000; //
    checkpointWrite = false;
    checkpointWriteDir = "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_deep/Checkpoints";
    checkpointWriteStepInterval = 100000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/HyPerPursuit/VineVideo/input/VineVideoFrames.txt";
    nf = 3;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1000;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    readPvpFile = false;
    phase = 0;
    //useParamsImage = true;
};

ANNTriggerUpdateOnNewImageLayer "Bipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    movieLayerName = "Image";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 2;
};

ANNTriggerUpdateOnNewImageLayer "Ganglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNErrorLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 999.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Error_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 4;  
};


HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128; //256;
    numChannels = 1; // should be 1
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.1; //  // 0.05 works for animalDB
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 5;
};


ANNLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 6; 
};


ANNErrorLayer "Error2" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 3;
    initialWriteTime = 999.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Error2_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin =  0;
    VShift = 0;
    //
    phase = 7;  
};


HyPerLCALayer "V2" = {
    restart = 0;
    nxScale = 0.125;
    nyScale = 0.125;
    nf = 128; //256;
    numChannels = 1;  // should be 1
    numWindowX = 1;
    numWindowY = 1;
    // 
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V2_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.1; //0.05;
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 8;
};


ANNTriggerUpdateOnNewImageLayer "Recon2" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 3;
    initialWriteTime = 1001.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    movieLayerName = "Image";
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Recon2_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 9; 
};


ANNErrorLayer "Error1_2" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 999.0;
    writeStep = 1000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Error1_2_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 7;  
};


ANNLayer "V1Infra" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V1Infra_V.pvp";
    //
    VThresh = 0.005; // using V1's VThresh might be unstable, trying Error1_2 thresh
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = 0.0; // use V1's VMin
    VShift = 0;
    // 
    phase = 9; 
};


ANNLayer "ReconInfra" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 10; 
};


//Movie "Noise" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    imageListPath = "/nh/compneuro/Data/HyPerPursuit/VineVideo/input/noise.pvp";
//    // echoFramePathnameFlag = true;
//    nf = 3;
//    writeStep = -1;
//    writeSparseActivity = false;
//    displayPeriod = 1000;
//    start_frame_index = 1;
//    skip_frame_index = 1;
//    mirrorBCflag = true;
//    jitterFlag = 0;
//    useImageBCflag = false;
//    inverseFlag = false;
//    normalizeLuminanceFlag = false;
//    writeImages = false;
//    offsetX = 0;
//    offsetY = 0;
//    randomMovie = 0;
//    autoResizeFlag = false;
//    readPvpFile = true;
//    phase = 0;
//};



//ANNTriggerUpdateOnNewImageLayer "NoiselessBipolar" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 3;
//    writeStep = 1000.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//
//    movieLayerName = "Image";
//    InitVType = "ZeroV";
//
//    VThresh = -infinity;
//    VMax = infinity;
//    VMin = -infinity;
//    VShift = 0;
//    
//    phase = 2;
//};

//ANNTriggerUpdateOnNewImageLayer "NoiselessGanglion" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 3;
//    writeStep = 1000.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    movieLayerName = "Image";
//    InitVType = "ZeroV";
//    //
//    VThresh = -infinity;
//    VMax = infinity;
//    VMin = -infinity;
//    VShift = 0;
//    // 
//    phase = 3;
//};

//ANNTriggerUpdateOnNewImageLayer "NoiselessError" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 3;
//    initialWriteTime = 999.0;
//    writeStep = 1000;
//    mirrorBCflag = 0;
//    valueBC = 0;
//    writeSparseActivity = 0;
//    movieLayerName = "Image";
//    //
//    //InitVType = "ZeroV";
//    InitVType = "InitVFromFile";
//    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/Error_V.pvp";
//    //
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    //
//    phase = 4;  
//};


// connections


KernelConn "ImageToBipolarCenter" = {
    preLayerName = "Image";
    postLayerName = "Bipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     

    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


KernelConn "BipolarToGanglionCenter" = {
    preLayerName = "Bipolar";
    postLayerName = "Ganglion";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


KernelConn "BipolarToGanglionSurround" = {
    preLayerName = "Bipolar";
    postLayerName = "Ganglion";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


IdentConn "GanglionToError" = {
    preLayerName = "Ganglion";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V1ToError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1.0;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1; //2000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false; //true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 5.0; //1.0; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};


TransposeConn "ErrorToV1" = {
    preLayerName = "Error";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};

CloneKernelConn "V1ToRecon" = {
    preLayerName = "V1";
    postLayerName = "Recon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToError";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    delay = 0;
    preActivityIsNotRate = false;
    updateGSynFromPostPerspective = false;     
};


// downsampling
KernelConn "ReconToError2" = {
    preLayerName = "Recon";
    postLayerName = "Error2";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 3;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 2000;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


KernelConn "V2ToError2" = {
    preLayerName = "V2";
    postLayerName = "Error2";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V2ToError2_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 0.70711; //0.5;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1; //2000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false; //true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 0.25; //0.02; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};

TransposeConn "Error2ToV2" = {
    preLayerName = "Error2";
    postLayerName = "V2";
    channelCode = 0;
    originalConnName = "V2ToError2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt	
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};


CloneKernelConn "V2ToRecon2" = {
   preLayerName = "V2";
   postLayerName = "Recon2";
   channelCode = 0;
   writeStep = -1;
   originalConnName = "V2ToError2";
   selfFlag = false;
   pvpatchAccumulateType = "convolve";
   updateGSynFromPostPerspective = false;     
   delay = 0;
   preActivityIsNotRate = false;
};



// Generative connections

IdentConn "V1ToError1_2" = {
    preLayerName = "V1";
    postLayerName = "Error1_2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


KernelConn "V2ToError1_2" = {
    preLayerName = "V2";
    postLayerName = "Error1_2";
    channelCode = 1;
    nxp =  6;
    nyp =  6;
    nxpShrunken = 4;
    nypShrunken = 4;    
    nfp = 128;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_02_01/output_2013_02_01_12x12x128_lambda_05X2_deep/Checkpoints/Checkpoint46584000/V2ToError1_2_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 0.70711; //0.5;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1; //2000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false; //true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 0.25; //0.02; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};

TransposeConn "Error1_2ToV2" = {
    preLayerName = "Error1_2";
    postLayerName = "V2";
    channelCode = 0;
    originalConnName = "V2ToError1_2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};


CloneKernelConn "V2ToV1Infra" = {
    preLayerName = "V2";
    postLayerName = "V1Infra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V2ToError1_2"; //"V2ToV1";  //
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


IdentConn "ReconInfraToError" = {
    preLayerName = "ReconInfra";
    postLayerName = "Error";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};


CloneKernelConn "V1InfraToReconInfra" = {
    preLayerName = "V1Infra";
    postLayerName = "ReconInfra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V1ToError";
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


//noise connections

//KernelConn "NoiseToBipolar" = {
//    preLayerName = "Noise";
//    postLayerName = "Bipolar";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//    nxp = 1;
//    nyp = 1;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 0.5;
//    rMax = 10;
//    rMin = 0;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//    // strength = 1.0; // ParameterSweep
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = false;
//
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};


//KernelConn "ImageToNoiselessBipolarCenter" = {
//    preLayerName = "Image";
//    postLayerName = "NoiselessBipolar";
//    channelCode = 0;
//    nxp = 3; 
//    nyp = 3; 
//    nfp = 3;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;  // 1;  // restart
//    writeStep = -1;
//    
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 0.5;
//    rMax  = 3;
//    rMin = 0;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//        
//    strength = 1.0;  
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//    
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = false;     
//
//    delay = 0;
//     
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};


//KernelConn "NoiselessBipolarToNoiselessGanglionCenter" = {
//    preLayerName = "NoiselessBipolar";
//    postLayerName = "NoiselessGanglion";
//    channelCode = 0;
//    nxp = 1; 
//    nyp = 1; 
//    nfp = 3;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;  // 1;  // restart
//    writeStep = -1;
//    
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 1;
//    rMax  = 3;
//    rMin = 0;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//        
//    strength = 1.0;  
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//    
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = false;     
//     
//    delay = 0;
//     
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};


//KernelConn "NoiselessBipolarToNoiselessGanglionSurround" = {
//    preLayerName = "NoiselessBipolar";
//    postLayerName = "NoiselessGanglion";
//    channelCode = 1;
//    nxp = 11; 
//    nyp = 11; 
//    nfp = 3;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;  // 1;  // restart
//    writeStep = -1;
//    
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 5.5;
//    rMax  = 7.5;
//    rMin = 0.5;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//               
//    strength = 1.0;  
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//    
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = false;     
//     
//    delay = 0;
//     
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};


//IdentConn "NoiselessGanglionToNoiselessError" = {
//    preLayerName = "NoiselessGanglion";
//    postLayerName = "NoiselessError";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//};


//CloneKernelConn "V1ToNoiselessError" = {
//    preLayerName = "V1";
//    postLayerName = "NoiselessError";
//    channelCode = 1;
//    writeStep = -1;
//    originalConnName = "V1ToError";
//    selfFlag = false;
//    pvpatchAccumulateType = "convolve";
//    delay = 0;
//    preActivityIsNotRate = false;
//    updateGSynFromPostPerspective = false;     
//};




// parameter sweep
ParameterSweep "V1":VThresh = {
    0.05; 0.1; 0.15; 0.2;
};

ParameterSweep "V2":VThresh = {
    0.05; 0.1; 0.15; 0.2;
};

ParameterSweep "column":outputPath = {
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X1_deep/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X2_deep/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X3_deep/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X4_deep/";
};

//ParameterSweep "NoiseToBipolar":strength = {
//    0.5; 1.0; 2.0;
//};

//ParameterSweep "column":outputPath = {
//    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X2_noise_05_deep/";
//    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X2_noise_10_deep/";
//    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_lambda_05X2_noise_20_deep/";
//};

// Probes

//StatsProbe "RetinaStats" = {
//    targetLayer = "Retina";
//};
//
//StatsProbe "GanglionStats" = {
//    targetLayer = "Ganglion";
//};
//
//StatsProbe "ReconStats" = {
//    targetLayer = "Recon";
//};
//
//StatsProbe "ErrorStats" = {
//    targetLayer = "Error";
//};
//
//StatsProbe "V1Stats" = {
//    targetLayer = "V1";
//};
//
//StatsProbe "RetinaStatsFile" = {
//    targetLayer = "Retina";
//    probeOutputFile = "Retina_Stats.txt";
//};
//
//StatsProbe "GanglionStatsFile" = {
//    targetLayer = "Ganglion";
//    probeOutputFile = "Ganglion_Stats.txt";
//};
//
//StatsProbe "ErrorStatsFile" = {
//    targetLayer = "Error";
//    probeOutputFile = "Error_Stats.txt";
//};
//
//StatsProbe "V1StatsFile" = {
//    targetLayer = "V1";
//    probeOutputFile = "V1_Stats.txt";
//};
//
//StatsProbe "ReconStatsFile" = {
//    targetLayer = "Recon";
//    probeOutputFile = "Recon_Stats.txt";
//};
//
//StatsProbe "Error2StatsFile" = {
//    targetLayer = "Error2";
//    probeOutputFile = "Error2_Stats.txt";
//};
//
//StatsProbe "Error1_2StatsFile" = {
//    targetLayer = "Error1_2";
//    probeOutputFile = "Error1_2_Stats.txt";
//};
//
//StatsProbe "V2StatsFile" = {
//    targetLayer = "V2";
//    probeOutputFile = "V2_Stats.txt";
//};
//
//StatsProbe "Recon2StatsFile" = {
//    targetLayer = "Recon2";
//    probeOutputFile = "Recon2_Stats.txt";
//};
//
//StatsProbe "V1InfraStatsFile" = {
//    targetLayer = "V1Infra";
//    probeOutputFile = "V1Infra_Stats.txt";
//};
//
//StatsProbe "ReconInfraStatsFile" = {
//    targetLayer = "ReconInfra";
//    probeOutputFile = "ReconInfra_Stats.txt";
//};


