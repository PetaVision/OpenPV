//
// HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//

// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).

debugParsing = true;

HyPerCol "column" = {
   nx = 256;   
   ny = 256;
   dt = 1.0;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   numSteps = 10000;
   progressStep = 1;
   outputPath = "output/";
   filenamesContainLayerNames = false;
   filenamesContainConnectionNames = false;
   checkpointRead = false;
   checkpointWrite = true;
   checkpointWriteDir = "Checkpoints";
   checkpointWriteStepInterval = 100;
   deleteOlderCheckpoints = true;
   suppressLastOutput = false;
   writeProgressToErr = true;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/Users/garkenyon/Pictures/AnimalDB/target_body.txt";
    nf = 1;
    marginWidth = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 100;
    start_frame_index = 0;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
};



Retina "Retina" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 7;
    writeStep = 1.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeSparseActivity = 0;

    foregroundRate = 1000;
    backgroundRate = 0;
    burstFreq = 1;
    burstDuration = 1000;

    beginStim = 0;
    endStim = 100000;
    
    phase = 1;
};


ANNLayer "Ganglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 8;
    writeStep = 1.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = 0.0;
    VMax = infinity;
    VMin = 0.0;
    VShift = 0;
    
    phase = 2;
};


ANNLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = 2.0;  // prevent reconstruction from exceeding reasonable bounds
    VMin = 0;
    VShift = 0;
    
    phase = 2;
};



ANNLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 8;
    writeStep = 1;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = 2.0;
    VMin = -2.0;
    VShift = 0;
    
    phase = 3;
};


HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 1024;
    marginWidth = 1;
    writeStep = 1;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "UniformRandomV";
    minV = 0.0;
    maxV = 0.5;
    
    timeConstantTau = 10.0;
    
    VThresh = 1.0;
    VMax = 2.0;
    VMin = 0;
    VShift = 0;  // 0 -> hard threshold, 1 -> soft threshold

    phase = 4;
};



// connections


KernelConn "MovieToRetina" = {
    preLayerName = "Image";
    postLayerName = "Retina";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformWeight";
    weightInit = 1.0;

    normalize = 0;
       
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    stochasticReleaseFlag = false;

    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
    shrinkPatches = false;
    
    delay = 0;     
};


KernelConn "RetinaToGanglionCenter" = {
   preLayerName = "Retina";
   postLayerName = "Ganglion";
   channelCode = 0;
   nxp = 3; 
   nyp = 3; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 1;
   rMax  = 1;
   rMin = 0;
       
   strength = 1.0;  
   normalize = 1.0;
   normalize_zero_offset = 0.0;
   normalize_max = 0.0;
   normalize_cutoff = 0;
   symmetrizeWeights = 0;

   shrinkPatches = false;
   writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
   normalizeTotalToPost = true;
};





KernelConn "RetinaToGanglionSurround" = {
   preLayerName = "Retina";
   postLayerName = "Ganglion";
   channelCode = 1;
   nxp = 15; 
   nyp = 15; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 3.5;
   rMax  = 7.5;
   rMin = 0.5;
       
   strength = 1.0;  
   normalize = 1.0;
   normalize_zero_offset = 0.0;
   normalize_max = 0.0;
   normalize_cutoff = 0;
   symmetrizeWeights = 0;

   shrinkPatches = false;
   writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
   normalizeTotalToPost = true;
};




IdentConn "GanglionToError" = {
    preLayerName = "Ganglion";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


IdentConn "ReconToError" = {
    preLayerName = "Recon";
    postLayerName = "Error";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

KernelConn "ErrorToV1" = {
    preLayerName = "Error";
    postLayerName = "V1";
    channelCode = 0;
    nxp = 3;
    nyp = 3;
    nfp = 1024;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformRandomWeight";

    normalize = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 

    writeStep = 1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 100.0;
    initialWeightUpdateTime = 99.0;
    initialWriteTime = 0.0;
    dWMax = 0.1;
    wMinInit = 0.0;
    wMaxInit = 4.0;
    sparseFraction = .95;
    selfFlag = false;
    shmget_flag = false;

    delay = 0;

    stochasticReleaseFlag = false;
    shrinkPatches = false;
};

TransposeConn "V1ToRecon" = {
    preLayerName = "V1";
    postLayerName = "Recon";
    channelCode = 0;

    originalConnName = "ErrorToV1";

    preActivityIsNotRate = false;

    writeStep = -1;
    writeCompressedWeights = false;

    delay = 0;
    
    stochasticReleaseFlag = false;
};


// Probes


StatsProbe "RetinaStats" = {
    targetLayer = "Retina";
};

StatsProbe "GanglionStats" = {
    targetLayer = "Ganglion";
};

StatsProbe "ReconStats" = {
    targetLayer = "Recon";
};

StatsProbe "ErrorStats" = {
    targetLayer = "Error";
};

StatsProbe "V1Stats" = {
    targetLayer = "V1";
};



StatsProbe "RetinaStatsFile" = {
    targetLayer = "Retina";
    probeOutputFile = "Retina_Stats.txt";
};

StatsProbe "GanglionStatsFile" = {
    targetLayer = "Ganglion";
    probeOutputFile = "Ganglion_Stats.txt";
};

StatsProbe "ReconStatsFile" = {
    targetLayer = "Recon";
    probeOutputFile = "Recon_Stats.txt";
};

StatsProbe "ErrorStatsFile" = {
    targetLayer = "Error";
    probeOutputFile = "Error_Stats.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};


