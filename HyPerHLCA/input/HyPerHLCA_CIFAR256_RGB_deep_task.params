// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 32;  // vine value
    ny = 32;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    numSteps = 4000001;  //10,000 images * displayPeriod  
    startTime = 0; //200000;
    progressStep = 1000;
    outputPath = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all11";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false;
    checkpointReadDir = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all/Checkpoints";
    checkpointReadDirIndex = 1000000; 
    checkpointWrite = true;
    checkpointWriteDir = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all11/Checkpoints";
    checkpointWriteStepInterval = 400000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/Users/garkenyon/Pictures/CIFAR/data_batch_all/randorder.txt";
    nf = 3;
    writeStep = 4000;
    initialWriteTime = 3999;
    writeSparseActivity = false;
    displayPeriod = 400;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    readPvpFile = false;
    phase = 0;
    //useParamsImage = true;
};

ANNErrorLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 3999.0;
    writeStep = 4000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/Error_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    //
    phase = 2;  
};

HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 48; //256;
    numChannels = 1; // should be 1
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 399.0;
    writeStep = 400.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1; 
    InitVType = "UniformRandomV";
    minV = -1.0;
    /maxV = .15; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.025; //   0.1 -> 0.5% median activation, 0.05 -> 1.57%
    VMax = infinity;
    VMin = 0;
    VShift = 0.0; //0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.025; 
    //
    phase = 3;
};


//RescaleLayer "RescaleV1" = {
//    restart = 0;
//    nxScale = 0.25;
//    nyScale = 0.25;
//    nf = 128; 
//    numChannels = 0; // should be 1
//    numWindowX = 1;
//    numWindowY = 1;
//    initialWriteTime = 399.0;
//    writeStep = 400.0;
//    mirrorBCflag = 0;
//    valueBC = 0;
//    writeSparseActivity = 1;
//    writeSparseValues = 1; 
//    InitVType = "ZeroV";
//    originalLayerName = "V1";
//    rescaleMethod = "meanstd";
//    targetMean = 0;
//    targetStd = 1;
//    phase = 4;
//};


//ANNLayer "Recon" = {
ANNTriggerUpdateOnNewImageLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 4001.0;
    writeStep = 4000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    movieLayerName = "Image";
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0.0; 
    // 
    phase = 1; 
};


ANNErrorLayer "Error1_2" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 48;
    initialWriteTime = 39999.0;
    writeStep = 40000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/Error1_2_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0.0; 
    //
    phase = 6;  
};


ANNErrorLayer "Error2" = {
    restart = 0;
    nxScale = 1.0; //0.5;
    nyScale = 1.0; //0.5;
    nf = 3;
    initialWriteTime = 3999.0;
    writeStep = 4000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //

    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/Error_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin =  0;
    VShift = 0;
    VWidth = 0.0; 
    //
    phase = 6;  
};


HyPerLCALayer "V2" = {
    restart = 0;
    nxScale = 0.03125;
    nyScale = 0.03125;
    nf = 1024;  // must be 256*48 to be over complete
    numChannels = 1;  // 
    numWindowX = 1;
    numWindowY = 1;
    // 
    initialWriteTime = 399.0;
    writeStep = 400.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1; 
    //
    InitVType = "UniformRandomV";
    minV = -1.0;//
    maxV = .05; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V2_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.025; // 0.1; 
    VMax = infinity;
    VMin = 0;
    VShift = 0.0; //0 -> hard threshold, VThresh -> soft threshold
    VWidth = 0.025; 
    //
    phase = 6;
};



ANNTriggerUpdateOnNewImageLayer "V1Infra" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 48;
    initialWriteTime = 40001.0;
    writeStep = -1.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1; 
    movieLayerName = "Image";
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V1Infra_V.pvp";
    //
    VThresh = 0.025; // use V1's VThresh 
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = 0.0; // use V1's VMin
    VShift = 0;
    VWidth = 0.0; 
    // 
    phase = 1; 
};


ANNTriggerUpdateOnNewImageLayer "ReconInfra" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 4001.0;
    writeStep = 4000.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    movieLayerName = "Image";
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; 
};



// Label layers

LabelLayer "Labels" = {
    restart = 0;
    nxScale = 0.03125;
    nyScale = 0.03125;
    nf = 10;
    initialWriteTime = 3999;
    writeStep = 4000;
    labelStart = 45; // 
    labelLength = 1;
    echoLabelFlag = true;
    movieLayerName = "Image";
    mirrorBCflag = 0;
    valueBC = 0;
    phase = 1;
};


LabelErrorLayer "LabelError" = {
    restart = 0;
    nxScale = 0.03125;
    nyScale = 0.03125;
    nf = 10;
    initialWriteTime = 3999;
    writeStep = 4000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;

    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0.0; 
    
    phase = 2;
};


ANNTriggerUpdateOnNewImageLayer "LabelRecon" = {
    restart = 0;
    nxScale = 0.03125;
    nyScale = 0.03125;
    nf = 10;
    initialWriteTime = 4001;
    writeStep = 4000;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;

    movieLayerName = "Image";
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0.0; 
    
    phase = 1;
};




// connections


KernelConn "ImageToError" = {
    preLayerName = "Image";
    postLayerName = "Error";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .03125;  // 1/sqrt(32*32);  // force unit L2 norm
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};




KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V1ToError_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = 1.0;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 20.0; //1.0; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};


TransposeConn "ErrorToV1" = {
    preLayerName = "Error";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};

CloneKernelConn "V1ToRecon" = {
    preLayerName = "V1";
    postLayerName = "Recon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToError";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


// V2<->V1 connections

IdentConn "V1ToError1_2" = {
    preLayerName = "V1";
    postLayerName = "Error1_2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


KernelConn "V2ToError1_2" = {
    preLayerName = "V2";
    postLayerName = "Error1_2";
    channelCode = 1;
    nxp =  16;
    nyp =  16;
    nfp = 48;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V2ToError1_2_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    strength = 0.70711;
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 0.1; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};

TransposeConn "Error1_2ToV2" = {
    preLayerName = "Error1_2";
    postLayerName = "V2";
    channelCode = 0;
    originalConnName = "V2ToError1_2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};


CloneKernelConn "V2ToV1Infra" = {
    preLayerName = "V2";
    postLayerName = "V1Infra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V2ToError1_2"; //"V2ToV1";  //
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


CloneKernelConn "V1InfraToReconInfra" = {
    preLayerName = "V1Infra";
    postLayerName = "ReconInfra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V1ToError";
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


// label/task-driven connections

IdentConn "LabelstoLabelError" = {
    preLayerName = "Labels";
    postLayerName = "LabelError";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

KernelConn "V2ToLabelError" = {
    preLayerName = "V2";
    postLayerName = "LabelError";
    channelCode = 1;
    nxp = 1;
    nyp = 1;
    nfp = 10;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    
    //weightInitType = "FileWeight";
    //initWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA/CIFAR256_RGB_deep_task/data_batch_all9/Checkpoints/Checkpoint2400000/V2ToLabelError_W.pvp";
    //useListOfArborFiles = false;
    //combineWeightFiles = false;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = 0;
    strength = 0.70711; //
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;

    pvpatchAccumulateType = "convolve";
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 

    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 0.01; 
    selfFlag = false;
    shmget_flag = false;

    delay = 0;

    shrinkPatches = false;
};

TransposeConn "LabelErrorToV2" = {
    preLayerName = "LabelError";
    postLayerName = "V2";
    channelCode = 0;
    
    originalConnName = "V2ToLabelError";
         
    pvpatchAccumulateType = "convolve";
    selfFlag = false;
    preActivityIsNotRate = false;	
    writeStep = -1;
    writeCompressedCheckpoints = false;
    updateGSynFromPostPerspective = false;
    shmget_flag = false;
    
    delay = 0;
};

CloneKernelConn "V2ToLabelRecon" = {
    preLayerName = "V2";
    postLayerName = "LabelRecon";
    channelCode = 0;
    pvpatchAccumulateType = "convolve";
    writeStep = -1;
    originalConnName = "V2ToLabelError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
};






// Probes

StatsProbe "ImageStatsFile" = {
    targetLayer = "Image";
    probeOutputFile = "Image_Stats.txt";
};

StatsProbe "ErrorStatsFile" = {
    targetLayer = "Error";
    probeOutputFile = "Error_Stats.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};

StatsProbe "ReconStatsFile" = {
    targetLayer = "Recon";
    probeOutputFile = "Recon_Stats.txt";
};

StatsProbe "Error1_2StatsFile" = {
    targetLayer = "Error1_2";
    probeOutputFile = "Error1_2_Stats.txt";
};

StatsProbe "V2StatsFile" = {
    targetLayer = "V2";
    probeOutputFile = "V2_Stats.txt";
};

StatsProbe "V1InfraStatsFile" = {
    targetLayer = "V1Infra";
    probeOutputFile = "V1Infra_Stats.txt";
};

StatsProbe "ReconInfraStatsFile" = {
    targetLayer = "ReconInfra";
    probeOutputFile = "ReconInfra_Stats.txt";
};

StatsProbe "LabelsStatsFile" = {
    targetLayer = "Labels";
    probeOutputFile = "Labels_Stats.txt";
};

StatsProbe "LabelErrorStatsFile" = {
    targetLayer = "LabelError";
    probeOutputFile = "LabelError_Stats.txt";
};

StatsProbe "LabelReconStatsFile" = {
    targetLayer = "LabelRecon";
    probeOutputFile = "LabelRecon_Stats.txt";
};


