//
// HyPerHLCA.params
//
// used to train dictionary  on 600 animalDB animal images and/or 600 distractor images
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//

// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).

debugParsing = true;

HyPerCol "column" = {
   nx = 256;   
   ny = 256;
   dt = 1.0;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   numSteps = 1050000; //1200000 - 150000;
   progressStep = 1;
   outputPath = "output_animal1200000_distractor1200000/";
   filenamesContainLayerNames = true;
   filenamesContainConnectionNames = true;
   checkpointRead = false;
   checkpointReadDir = "Checkpoints";
   checkpointReadDirIndex = 1200000;
   checkpointWrite = true;
   checkpointWriteDir = "Checkpoints";
   checkpointWriteStepInterval = 50000;
   deleteOlderCheckpoints = true;
   suppressLastOutput = false;
   writeProgressToErr = true;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/Users/garkenyon/Pictures/AnimalDB/target.txt"; //distractor.txt"; //
    nf = 1;
    marginWidth = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1000;
    start_frame_index = 150;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
    useParamsImage = true;
};


//Image "Image" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    imagePath = "/Users/garkenyon/Pictures/AnimalDB/M_N815026.jpg";
//    nf = 1;
//    marginWidth = 1;
//    writeStep = -1;
//    writeSparseActivity = false;
//    echoFramePathnameFlag = true;
//    mirrorBCflag = true;
//    useImageBCflag = false;
//    inverseFlag = false;
//    normalizeLuminanceFlag = true;
//    writeImages = false;
//    offsetX = 0;
//    offsetY = 0;
//    phase = 0;
//    useParamsImage = true;
//};



Retina "Retina" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 1;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeSparseActivity = 0;

    foregroundRate = 1000;
    backgroundRate = 0;
    burstFreq = 1;
    burstDuration = 1000;

    beginStim = 0;
    endStim = 100000000;
    
    phase = 1;
};


ANNLayer "Bipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 6;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 2;
};

ANNLayer "Ganglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 6;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 3;
};

//ANNSquaredLayer "GanglionSquared" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 1;
//    marginWidth = 6;
//    writeStep = 1000.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//
//    InitVType = "ZeroV";
//
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    
//    phase = 3;
//};
//
//
//ANNLayer "V1AveInput" = {
//    restart = 0;
//    nxScale = 0.25;
//    nyScale = 0.25;
//    nf = 1;
//    marginWidth = 1;
//    writeStep = 500.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//
//    InitVType = "ZeroV";
//
//    VThresh = -infinity;
//    VMax = infinity;
//    VMin = -infinity;
//    VShift = 0;
//    
//    phase = 4;
//};
//
//
//ANNLayer "V1AveSquaredInput" = {
//    restart = 0;
//    nxScale = 0.25;
//    nyScale = 0.25;
//    nf = 1;
//    marginWidth = 1;
//    writeStep = 500.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//
//    InitVType = "ZeroV";
//
//    VThresh = -infinity;
//    VMax = infinity;
//    VMin = -infinity;
//    VShift = 0;
//    
//    phase = 4;
//};
//
//
//ANNWhitenedLayer "GanglionWhitened" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 1;
//    marginWidth = 0;
//    initialWriteTime = 999.0;
//    writeStep = 500.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//
//    InitVType = "ZeroV";
//
//    VThresh = -infinity;
//    VMax = infinity;
//    VMin = -infinity;
//    VShift = 0;
//    
//    phase = 5;
//};


ANNLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/Users/garkenyon/workspace/HyPerHLCA2/Checkpoints/Checkpoint1350000/Recon_V.pvp";

    VThresh = -infinity; //-infinity;
    VMax = infinity; //infinity;  // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; //-infinity;
    VShift = 0;
    
    phase = 6; // 6; // use 6 if whitening loops inserted
};


ANNLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 6;
    initialWriteTime = 999.0;
    writeStep = 1000;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/Users/garkenyon/workspace/HyPerHLCA2/Checkpoints/Checkpoint1350000/Error_V.pvp";

    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 4;  // use 6 is whitening loops inserted
};


HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 512;
    marginWidth = 1;
    initialWriteTime = 999.0;
    writeStep = 1000.0;
    mirrorBCflag = 1;
    writeSparseActivity = 1;

    //InitVType = "UniformRandomV";
    InitVType = "InitVFromFile";
    Vfilename = "/Users/garkenyon/workspace/HyPerHLCA2/Checkpoints/Checkpoint1350000/V1_V.pvp";
    minV = -1.0;
    maxV = 0.1; //1.05;
    
    timeConstantTau = 100.0;
    
    VThresh = 0.05; //0.125; // 1.0;
    VMax = infinity; //infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold

    phase = 5;
};




// connections


KernelConn "MovieToRetina" = {
    preLayerName = "Image";
    postLayerName = "Retina";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformWeight";
    weightInit = 1.0;

    normalize = 0;
       
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    stochasticReleaseFlag = false;

    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
    shrinkPatches = false;
    
    delay = 0;     
};


KernelConn "RetinaToBipolarCenter" = {
   preLayerName = "Retina";
   postLayerName = "Bipolar";
   channelCode = 0;
   nxp = 3; 
   nyp = 3; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 1;
   rMax  = 3;
   rMin = 0;
       
   strength = 1.0;  
   normalize = 1.0;
   normalize_zero_offset = false;
   normalize_max = false;
   normalize_cutoff = 0;
   normalize_RMS_amp = false;
   symmetrizeWeights = false;
   normalizeTotalToPost = true;

   shrinkPatches = false;
   writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};





KernelConn "BipolarToGanglionCenter" = {
   preLayerName = "Bipolar";
   postLayerName = "Ganglion";
   channelCode = 0;
   nxp = 1; 
   nyp = 1; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 1;
   rMax  = 3;
   rMin = 0;
       
   strength = 1.0;  
   normalize = 1.0;
   normalize_zero_offset = false;
   normalize_max = false;
   normalize_cutoff = 0;
   normalize_RMS_amp = false;
   symmetrizeWeights = false;
   normalizeTotalToPost = true;

   shrinkPatches = false;
   writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};





KernelConn "BipolarToGanglionSurround" = {
   preLayerName = "Bipolar";
   postLayerName = "Ganglion";
   channelCode = 1;
   nxp = 11; 
   nyp = 11; 
   nfp = 1;
   numAxonalArbors = 1;
   initFromLastFlag = 0;  // 1;  // restart
   writeStep = -1;
   
   weightInitType = "Gauss2DWeight";
   aspect = 1;
   sigma = 5.5;
   rMax  = 7.5;
   rMin = 0.5;
       
   strength = 1.0;  
   normalize = 1.0;
   normalize_zero_offset = false;
   normalize_max = false;
   normalize_cutoff = 0.0;
   normalize_RMS_amp = false;
   symmetrizeWeights = false;
   normalizeTotalToPost = true;

   shrinkPatches = false;
   writeCompressedWeights = 0.0;
   writeCompressedCheckpoints = false;
   plasticityFlag = 0;
   stochasticReleaseFlag = false;
    
   delay = 0;
    
   preActivityIsNotRate = false;
   selfFlag = false;
   shmget_flag = false;
};



//IdentConn "GanglionToGanglionSquared" = {
//    preLayerName = "Ganglion";
//    postLayerName = "GanglionSquared";
//    channelCode = 0;
//    writeStep = -1;
//    initFromLastFlag = 0;
//    weightInitType = "IdentWeight";
//
//    delay = 0;
//};
//
//
//IdentConn "GanglionToGanglionWhitened" = {
//    preLayerName = "Ganglion";
//    postLayerName = "GanglionWhitened";
//    channelCode = 0;
//    writeStep = -1;
//    initFromLastFlag = 0;
//    weightInitType = "IdentWeight";
//
//    delay = 0;
//};
//
//
//KernelConn "GanglionToV1AveInput" = { // for normalization
//	preLayerName = "Ganglion";
//	postLayerName = "V1AveInput";
//	channelCode = 0;
//	nxp = 1; 
//	nyp = 1; 
//	nfp = 1;
//	numAxonalArbors = 1;
//	initFromLastFlag = 0;  // 1;  // restart
//	writeStep = -1;
//	   
//	weightInitType = "UniformWeight";
//	weightInit = 1.0;	       
//	strength = 1.0;  
//	normalize = 1.0;
//	normalize_zero_offset = false;
//	normalize_max = false;
//	normalize_cutoff = 0.0;
//	normalize_RMS_amp = false;
//	symmetrizeWeights = false;
//	normalizeTotalToPost = true;
//	selfFlag = false;
//
//	shrinkPatches = false;
//	writeCompressedWeights = 0.0;
//	writeCompressedCheckpoints = false;
//	plasticityFlag = 0;
//	stochasticReleaseFlag = false;
//	    
//	delay = 0;
//	    
//	preActivityIsNotRate = false;
//	shmget_flag = false;
//};
//
//
//
//
//KernelConn "GanglionSquaredToV1AveSquaredInput" = { // for normalization
//	preLayerName = "GanglionSquared";
//	postLayerName = "V1AveSquaredInput";
//	channelCode = 0;
//	nxp = 1; 
//	nyp = 1; 
//	nfp = 1;
//	numAxonalArbors = 1;
//	initFromLastFlag = 0;  // 1;  // restart
//	writeStep = -1;
//	   
//	weightInitType = "UniformWeight";
//	weightInit = 1.0;	       
//	strength = 1.0;  
//	normalize = 1.0;
//	normalize_zero_offset = false;
//	normalize_max = false;
//	normalize_cutoff = 0.0;
//	normalize_RMS_amp = false;
//	symmetrizeWeights = false;
//	normalizeTotalToPost = true;
//	selfFlag = false;
//
//	shrinkPatches = false;
//	writeCompressedWeights = 0.0;
//	writeCompressedCheckpoints = false;
//	plasticityFlag = 0;
//	stochasticReleaseFlag = false;
//	    
//	delay = 0;
//	    
//	preActivityIsNotRate = false;
//	shmget_flag = false;
//};
//
//
//KernelConn "V1AveInputToGanglionWhitened" = {
//    preLayerName = "V1AveInput";
//    postLayerName = "GanglionWhitened";
//    channelCode = 1;
//    nxp = 4;
//    nyp = 4;
//    nfp = 1;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;
//    
//	weightInitType = "UniformWeight";
//	weightInit = 1.0;	       
//	strength = 1.0;  
//	normalize = 1.0;
//	normalize_zero_offset = false;
//	normalize_max = false;
//	normalize_cutoff = 0.0;
//	normalize_RMS_amp = false;
//	symmetrizeWeights = false;
//	normalizeTotalToPost = true;
//	selfFlag = false;
//
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//
//    writeStep = -1;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = false;
//    shmget_flag = false;
//
//    delay = 0;
//
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//};
//
//
//KernelConn "V1AveSquaredInputToGanglionWhitened" = {
//    preLayerName = "V1AveSquaredInput";
//    postLayerName = "GanglionWhitened";
//    channelCode = 2;
//    nxp = 4;
//    nyp = 4;
//    nfp = 1;
//    numAxonalArbors = 1;
//    initFromLastFlag = 0;
//    
//	weightInitType = "UniformWeight";
//	weightInit = 1.0;	       
//	strength = 1.0;  
//	normalize = 1.0;
//	normalize_zero_offset = false;
//	normalize_max = false;
//	normalize_cutoff = 0.0;
//	normalize_RMS_amp = false;
//	symmetrizeWeights = false;
//	normalizeTotalToPost = true;
//	selfFlag = false;
//
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//
//    writeStep = -1;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = false;
//    shmget_flag = false;
//
//    delay = 0;
//
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//};
// 
// 
// 
//IdentConn "GanglionWhitenedToError" = {
//    preLayerName = "GanglionWhitened";
//    postLayerName = "Error";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//};


IdentConn "GanglionToError" = {
    preLayerName = "Ganglion";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};



KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/Checkpoints/Checkpoint1350000/V1ToError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .95;
   
    strength = 1.0;  
    normalize = 1.0;
    normalize_zero_offset = false; // could be set to true to write whitened patches
    normalize_max = false;
    normalize_cutoff = 0.0;
    normalize_RMS_amp = true;
    symmetrizeWeights = false;
    normalizeTotalToPost = false;

    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 

    writeStep = 1000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 20.0;
    initialWeightUpdateTime = 999.0;
    initialWriteTime = 0.0;
    dWMax = 200.0; //10.00; //
    selfFlag = false;
    shmget_flag = false;

    delay = 0;

    stochasticReleaseFlag = false;
    shrinkPatches = false;
};

TransposeConn "ErrorToV1" = {
	preLayerName = "Error";
	postLayerName = "V1";
	channelCode = 0;
	numAxonalArbors = 1;

	originalConnName = "V1ToError";
	    
	normalize = false;  
	selfFlag = false;
	preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
	keepKernelsSynchronized = false; 
	combine_dW_with_W_flag = false; 
	weightUpdatePeriod = 20.0;  // not used (uses original conn's value)
	
	writeStep = -1;
	writeCompressedWeights = false;
	writeCompressedCheckpoints = false;
	plasticityFlag = true;
	dWMax = 1.0; // not used
	initialWeightUpdateTime = 20.0;
	initialWriteTime = 0.0;
	shmget_flag = false;
	
	delay = 0;
	
	stochasticReleaseFlag = false;
	shrinkPatches = false;
};

CloneKernelConn "V1ToRecon" = {
   preLayerName = "V1";
   postLayerName = "Recon";
   channelCode = 0;
   writeStep = -1;
   originalConnName = "V1ToError";
   writeCompressedWeights = 0.0;
   selfFlag = false;
   stochasticReleaseFlag = false;
   delay = 0;
   preActivityIsNotRate = false;
};





// Probes


StatsProbe "RetinaStats" = {
    targetLayer = "Retina";
};

StatsProbe "GanglionStats" = {
    targetLayer = "Ganglion";
};

//StatsProbe "GanglionSquaredStats" = {
//    targetLayer = "GanglionSquared";
//};
//
//StatsProbe "GanglionWhitenedStats" = {
//    targetLayer = "GanglionWhitened";
//};
//
//StatsProbe "V1AveInputStats" = {
//    targetLayer = "V1AveInput";
//};
//
//StatsProbe "V1AveSquaredInputStats" = {
//    targetLayer = "V1AveSquaredInput";
//};

StatsProbe "ReconStats" = {
    targetLayer = "Recon";
};

StatsProbe "ErrorStats" = {
    targetLayer = "Error";
};

StatsProbe "V1Stats" = {
    targetLayer = "V1";
};



StatsProbe "RetinaStatsFile" = {
    targetLayer = "Retina";
    probeOutputFile = "Retina_Stats.txt";
};

StatsProbe "GanglionStatsFile" = {
    targetLayer = "Ganglion";
    probeOutputFile = "Ganglion_Stats.txt";
};

//StatsProbe "GanglionSquaredStatsFile" = {
//    targetLayer = "GanglionSquared";
//    probeOutputFile = "GanglionSquared_Stats.txt";
//};
//
//StatsProbe "GanglionWhitenedStatsFile" = {
//    targetLayer = "GanglionWhitened";
//    probeOutputFile = "GanglionWhitened_Stats.txt";
//};
//
//StatsProbe "V1AveInputStatsFile" = {
//    targetLayer = "V1AveInput";
//    probeOutputFile = "V1AveInput_Stats.txt";
//};
//
//StatsProbe "V1AveSquaredInputStatsFile" = {
//    targetLayer = "V1AveSquaredInput";
//    probeOutputFile = "V1AveSquaredInput_Stats.txt";
//};

StatsProbe "ReconStatsFile" = {
    targetLayer = "Recon";
    probeOutputFile = "Recon_Stats.txt";
};

StatsProbe "ErrorStatsFile" = {
    targetLayer = "Error";
    probeOutputFile = "Error_Stats.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};


