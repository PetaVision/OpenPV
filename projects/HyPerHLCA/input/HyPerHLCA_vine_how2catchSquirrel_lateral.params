// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 480;  // vine value
    ny = 480;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime = 7840; //196000;
    progressStep = 1000;
    outputPath = "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_3x3_9x9x128_lateral";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false;
    //checkpointReadDir = "/nh/compneuro/Data/vine/LCA/2013_01_31/output_2013_01_31_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints";
    //checkpointReadDirIndex = 13700000;
    checkpointWrite = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/vine/list/how2catchSquirrel.txt";
    nf = 3;
    writeStep = .0;
    initialWriteTime = 40.0;
    writeSparseActivity = false;
    displayPeriod = 40;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    readPvpFile = false;
    phase = 0;
    //useParamsImage = true;
};

ANNTriggerUpdateOnNewImageLayer "Bipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 40.0;
    initialWriteTime = 40.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    movieLayerName = "Image";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 2;
};

ANNTriggerUpdateOnNewImageLayer "Ganglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 40.0;
    initialWriteTime = 40.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    // 
    phase = 3;
};

ANNErrorLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 40.0;
    writeStep = 40;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Error_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    errScale = 1;
    //
    phase = 4;  
};


HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128; //256;
    numChannels = 1; // should be 1
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 40.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.05; //  // 0.05 works for animalDB
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.05; // transition between soft and hard threshold
    //
    phase = 5;
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 2;  // should be less than V1 phase
};

// use for intra-column connections
ANNErrorLayer "Error2" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 40.0;
    writeStep = 40;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Error2_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin =  0;
    VShift = 0;
    VWidth = 0;
    errScale = 0.5;
    //
    phase = 7;  
};

// V1 layers II-III (complex cells with lateral interactions)
HyPerLCALayer "V2" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128; //256;
    numChannels = 1;  // should be 1
    numWindowX = 1;
    numWindowY = 1;
    // 
    initialWriteTime = 40.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V2_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.05; //0.05;
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.05;
    //
    phase = 8;
};

// use for visualizing intra-column reconstructions, not pre-synaptic
ANNTriggerUpdateOnNewImageLayer "Recon2" = {
    restart = 0;
    nxScale = 1.0;
    nyScale = 1.0;
    nf = 3;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Recon2_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 3; // should be less than V2 phase
};

// staging for visualizing reconstructions from intra column interactions
ANNTriggerUpdateOnNewImageLayer "V1Intra" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 9999.0;
    writeStep = -1;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V1Intra_V.pvp";
    //
    VThresh = 0.005; // using V1's VThresh might be unstable, trying Error1_2 thresh
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = 0.0; // use V1's VMin
    VShift = 0;
    VWidth = 0;
    // 
    phase = 2; // should be less than Recon2 phase
};

// long-range lateral interactions
ANNErrorLayer "Error1_2" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 40.0;
    writeStep = 40;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Error1_2_V.pvp";
    //
    VThresh = 0.005;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    errScale = 0.5;
    //
    phase = 7;  
};

// use for visualizing long-range lateral reconstructions, not pre-synaptic
ANNTriggerUpdateOnNewImageLayer "ReconInfra" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 3; 
};

// staging for visualizing reconstructions from long-range lateral interactions
ANNTriggerUpdateOnNewImageLayer "V1Infra" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 41.0;
    writeStep = -1; 
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V1Infra_V.pvp";
    //
    VThresh = 0.005; // using V1's VThresh might be unstable, trying Error1_2 thresh
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = 0.0; // use V1's VMin
    VShift = 0;
    VWidth = 0;
    // 
    phase = 2; // should be less than Recon2 phase
};



// use for visualizing long-range lateral reconstructions, not pre-synaptic
ANNTriggerUpdateOnNewImageLayer "Recon2PlusReconInfra" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 4; 
};


// Max Pooling layer over 2x2
ANNTriggerUpdateOnNewImageLayer "MaxPoolingV2X05" = {
    restart = 0;
    nxScale = 0.125;
    nyScale = 0.125;
    nf = 128;
    initialWriteTime = 41.0;
    writeStep = 40;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/Error2_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    //
    phase = 2;  
};


ANNTriggerUpdateOnNewImageLayer "ReconV1MaxPoolingV2X05" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 128;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 3; 
};


ANNTriggerUpdateOnNewImageLayer "ReconMaxPoolingV2X05" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    initialWriteTime = 41.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "Image";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/ReconInfra_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    // 
    phase = 4; 
};




// connections


//IdentConn "MovieToRetina" = {
//    preLayerName = "Image";
//    postLayerName = "Retina";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//    writeCompressedCheckpoints = false;
//};


KernelConn "ImageToBipolarCenter" = {
    preLayerName = "Image";
    postLayerName = "Bipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


KernelConn "BipolarToGanglionCenter" = {
    preLayerName = "Bipolar";
    postLayerName = "Ganglion";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


KernelConn "BipolarToGanglionSurround" = {
    preLayerName = "Bipolar";
    postLayerName = "Ganglion";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


IdentConn "GanglionToError" = {
    preLayerName = "Ganglion";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 3;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V1ToError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1.0;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 5; //2.0; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};


TransposeConn "ErrorToV1" = {
    preLayerName = "Error";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};

CloneKernelConn "V1ToRecon" = {
    preLayerName = "V1";
    postLayerName = "Recon";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V1ToError";
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};



// for learning intra-column connections (bottom-up input)
IdentConn "V1ToError2" = {
    preLayerName = "V1";
    postLayerName = "Error2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

// for learning intra-column connections (top-down input)
KernelConn "V2ToError2" = {
    preLayerName = "V2";
    postLayerName = "Error2";
    channelCode = 1;
    nxp = 3;
    nyp = 3;
    nfp = 128;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V2ToError2_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1; //0.70711; //0.5;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1; 
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 0.5; //0.25; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};

TransposeConn "Error2ToV2" = {
    preLayerName = "Error2";
    postLayerName = "V2";
    channelCode = 0;
    originalConnName = "V2ToError2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt	
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};


CloneKernelConn "V2ToV1Intra" = {
   preLayerName = "V2";
   postLayerName = "V1Intra";
   channelCode = 0;
   writeStep = -1;
   writeCompressedCheckpoints = false;
   originalConnName = "V2ToError2";
   selfFlag = false;
   pvpatchAccumulateType = "convolve";
   updateGSynFromPostPerspective = false;     
   delay = 0;
   preActivityIsNotRate = false;
};


CloneKernelConn "V1IntraToRecon2" = {
   preLayerName = "V1Intra";
   postLayerName = "Recon2";
   channelCode = 0;
   writeStep = -1;
   writeCompressedCheckpoints = false;
   originalConnName = "V1ToError";
   selfFlag = false;
   pvpatchAccumulateType = "convolve";
   updateGSynFromPostPerspective = false;     
   delay = 0;
   preActivityIsNotRate = false;
};



// lateral connections

// bottom-up 
IdentConn "V1ToError1_2" = {
    preLayerName = "V1";
    postLayerName = "Error1_2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

// long-range lateral
KernelConn "V2ToError1_2" = {
    preLayerName = "V2";
    postLayerName = "Error1_2";
    channelCode = 1;
    nxp =  9;
    nyp =  9;
    rMinX = 1.5; // zero intra-column connections
    rMinY = 1.5;
    nfp = 128;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_24_2013_02_01/output_2013_01_24_2013_02_01_12x12x128_3x3_9x9x128_lambda_05X1_lateral/Checkpoints/Checkpoint9700000/V2ToError1_2_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1.0; //0.70711; //0.5;  
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1; 
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 0.5; //0.25; 
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    shrinkPatches = false;
};

TransposeConn "Error1_2ToV2" = {
    preLayerName = "Error1_2";
    postLayerName = "V2";
    channelCode = 0;
    originalConnName = "V2ToError1_2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};


CloneKernelConn "V2ToV1Infra" = {
    preLayerName = "V2";
    postLayerName = "V1Infra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V2ToError1_2"; //"V2ToV1";  //
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


CloneKernelConn "V1InfraToReconInfra" = {
    preLayerName = "V1Infra";
    postLayerName = "ReconInfra";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V1ToError";
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};


IdentConn "Recon2ToRecon2PlusReconInfra" = {
    preLayerName = "Recon2";
    postLayerName = "Recon2PlusReconInfra";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "ReconInfraToRecon2PlusReconInfra" = {
    preLayerName = "ReconInfra";
    postLayerName = "Recon2PlusReconInfra";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


// Max Pooling Connections

KernelConn "V1ToMaxPoolingV2X05" = {
    preLayerName = "V1";
    postLayerName = "MaxPoolingV2X05";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 128;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = infinity;
    rMax  = 1;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "none";
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


TransposeConn "MaxPoolingV2X05ToReconV1MaxPoolingV2X05" = {
    preLayerName = "MaxPoolingV2X05";
    postLayerName = "ReconV1MaxPoolingV2X05";
    channelCode = 0;
    originalConnName = "V1ToMaxPoolingV2X05";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
};



CloneKernelConn "ReconV1MaxPoolingV2X05ToReconMaxPoolingV2X05" = {
    preLayerName = "ReconV1MaxPoolingV2X05";
    postLayerName = "ReconMaxPoolingV2X05";
    channelCode = 0;
    writeStep = -1;
    writeCompressedCheckpoints = false;
    originalConnName = "V1ToError";
    //writeCompressedWeights = 0.0;
    selfFlag = false;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
    delay = 0;
    preActivityIsNotRate = false;
};




// parameter sweep
ParameterSweep "V1":VThresh = {
    0.01; 0.025; 0.05; 0.1; 
};

ParameterSweep "V1":VWidth = {
    0.01; 0.025; 0.05; 0.1;
};

ParameterSweep "V2":VThresh = {
    0.01; 0.025; 0.05; 0.1;
};

ParameterSweep "V2":VWidth = {
    0.01; 0.025; 0.05; 0.1;
};

ParameterSweep "column":outputPath = {
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_3x3_9x9x128_lambda_001X10_lateral/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_3x3_9x9x128_lambda_001X25_lateral/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_3x3_9x9x128_lambda_001X50_lateral/";
    "/nh/compneuro/Data/vine/LCA/2013_01_24/output_2013_01_24_how2catchSquirrel_12x12x128_3x3_9x9x128_lambda_001X100_lateral/";
};




// Probes

//StatsProbe "ImageStats" = {
//    targetLayer = "Image";
//};
//
//StatsProbe "GanglionStats" = {
//    targetLayer = "Ganglion";
//};
//
//StatsProbe "ReconStats" = {
//    targetLayer = "Recon";
//};
//
//StatsProbe "ErrorStats" = {
//    targetLayer = "Error";
//};
//
//StatsProbe "V1Stats" = {
//    targetLayer = "V1";
//};
//
//StatsProbe "ImageStatsFile" = {
//    targetLayer = "Image";
//    probeOutputFile = "Image_Stats.txt";
//};
//
//StatsProbe "GanglionStatsFile" = {
//    targetLayer = "Ganglion";
//    probeOutputFile = "Ganglion_Stats.txt";
//};
//
//StatsProbe "ErrorStatsFile" = {
//    targetLayer = "Error";
//    probeOutputFile = "Error_Stats.txt";
//};
//
//StatsProbe "V1StatsFile" = {
//    targetLayer = "V1";
//    probeOutputFile = "V1_Stats.txt";
//};
//
//StatsProbe "ReconStatsFile" = {
//    targetLayer = "Recon";
//    probeOutputFile = "Recon_Stats.txt";
//};
//
//StatsProbe "Error2StatsFile" = {
//    targetLayer = "Error2";
//    probeOutputFile = "Error2_Stats.txt";
//};
//
//StatsProbe "Error1_2StatsFile" = {
//    targetLayer = "Error1_2";
//    probeOutputFile = "Error1_2_Stats.txt";
//};
//
//StatsProbe "V2StatsFile" = {
//    targetLayer = "V2";
//    probeOutputFile = "V2_Stats.txt";
//};
//
//StatsProbe "Recon2StatsFile" = {
//    targetLayer = "Recon2";
//    probeOutputFile = "Recon2_Stats.txt";
//};
//
//StatsProbe "V1IntraStatsFile" = {
//    targetLayer = "V1Intra";
//    probeOutputFile = "V1Intra_Stats.txt";
//};
//
//StatsProbe "ReconInfraStatsFile" = {
//    targetLayer = "ReconInfra";
//    probeOutputFile = "ReconInfra_Stats.txt";
//};
//
//StatsProbe "V1InfraStatsFile" = {
//    targetLayer = "V1Infra";
//    probeOutputFile = "V1Infra_Stats.txt";
//};



