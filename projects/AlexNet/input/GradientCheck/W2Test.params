//
// CifarTrain.params
//
// Alex net on cifar
// created by slundquist: Mar 21, 2014
//


debugParsing = true;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 32;   //2 inputs
   ny = 32;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 2394853940;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 9218.0; //100 training steps  
   progressInterval = 5000.0; //Program will output its progress at each progressStep
   writeProgressToErr = false;  
   outputPath = "/nh/compneuro/Data/AlexNetOut/CIFAR/";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   checkpointRead = false;  
   checkpointWrite = true;
   checkpointWriteDir = "/nh/compneuro/Data/AlexNetOut/CIFAR/Checkpoints";
   checkpointWriteStepInterval = 50000;
   suppressLastOutput = false; //Save the last output as checkpoint.
};

//
// layers
//

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = .03125; 
    nyScale = .03125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//The input layer of data
//Note that the layer name matches train.txt
Movie "input" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/CIFAR/CIFAR_train_images.txt";
    writeFrameToTimestamp = true;
    nf = 3;
    writeStep = 1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 9218;
    start_frame_index = 2;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetAnchor = "br"; //Offset anchor from bottom left
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

RescaleLayer "inputNorm" = {
    restart                         = false;
    originalLayerName               = "input";
    nxScale                         = 1;
    nyScale                         = 1;
    nf                              = 3;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    initialWriteTime                = 200;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    valueBC = 0;
    phase                           = 1;
};


//[conv1]
//type=conv
//inputs=data
//channels=3
//filters=32
//padding=2
//stride=1
//partialSum=4
//sharedBiases=1
ANNLayer "conv1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 32;
    writeStep = -1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    //rectified
    VThresh = 0;
    VMax = infinity;
    VMin = 0;
    phase = 2;
};

//[pool1]
//type=pool
//pool=max
//inputs=conv1
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=32
//neuron=relu
ANNLayer "pool1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 32;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    phase = 3; 
    triggerFlag = false;
};

PoolingIndexLayer "pool1Indicies" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 32;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    // 
    phase = 4; 
    triggerFlag = false;
};

//RescaleLayer "rnorm1" = {
//    restart                         = false;
//    originalLayerName               = "pool1";
//    nxScale                         = .5;
//    nyScale                         = .5;
//    nf                              = 32;
//    mirrorBCflag                    = false;
//    //
//    writeStep                       = -1;
//    initialWriteTime                = 200;
//    writeSparseActivity             = false;
//    //
//    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
//    valueBC = 0;
//    phase                           = 5;
//};

//[conv2]
//type=conv
//inputs=rnorm1
//filters=32
//padding=2
//stride=1
//filterSize=5
//channels=32
//neuron=relu
//initW=0.01
//partialSum=4
//sharedBiases=1
ANNLayer "conv2" = {
   #include "conv1";
   @nxScale = .5;
   @nyScale = .5;
   @nf = 32;
   @phase = 6;
};

//[pool2]
//type=pool
//pool=avg
//inputs=conv2
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=32
ANNLayer "pool2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 32;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    phase = 7; 
    triggerFlag = false;
};

//RescaleLayer "rnorm2" = {
//    restart                         = false;
//    originalLayerName               = "pool2";
//    nxScale                         = .25;
//    nyScale                         = .25;
//    nf                              = 32;
//    mirrorBCflag                    = false;
//    //
//    writeStep                       = -1;
//    initialWriteTime                = 200;
//    writeSparseActivity             = false;
//    //
//    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
//    valueBC = 0;
//    phase                           = 8;
//};

//[conv3]
//type=conv
//inputs=rnorm2
//filters=64
//padding=2
//stride=1
//filterSize=5
//channels=32
//neuron=relu
//initW=0.01
//partialSum=4
//sharedBiases=1
ANNLayer "conv3" = {
   #include "conv1";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 64;
   @phase = 9;
};

//[pool3]
//type=pool
//pool=avg
//inputs=conv3
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=64
ANNLayer "pool3" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    phase = 10; 
    triggerFlag = false;
};

//[fc10]
//type=fc
//outputs=10
//inputs=pool3
//initW=0.01
ANNLayer "fullyconnected" = {
    restart = 0;
    nxScale = 0.03125;
    nyScale = 0.03125;
    nf = 10;
    writeStep = -1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    //rectified
    //VThresh = 0;
    //VMax = infinity;
    //VMin = 0;
    phase = 11;
};

//[probs]
//type=softmax
//inputs=fc10
RescaleLayer "softmax" = {
    restart                         = false;
    originalLayerName               = "fullyconnected";
    nxScale                         = .03125;
    nyScale                         = .03125;
    nf                              = 10;
    mirrorBCflag                    = false;
    //
    writeStep                       = 1;
    initialWriteTime                = 200;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "softmax"; //Can be either meanstd or maxmin
    valueBC = 0;
    phase                           = 12;
};

CIFARGTLayer "gt" = {
    restart = 0;
    nxScale = .03125; 
    nyScale = .03125;
    nf = 10;
    writeStep = 1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ZeroV";
    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    startFrame = 1;
    inFilename = "/nh/compneuro/Data/CIFAR/CIFAR_train_images.txt";
    phase = 0;
    constantValue = true;
};

//For printing purposes
ProbeLayer "Score" = {
    restart = 0;
    nxScale = .03125;
    nyScale = .03125;
    nf = 10;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 13;
};

//Back prop error layers, starting from the back
ANNLayer "FinalError" = {
    restart = 0;
    nxScale = .03125;
    nyScale = .03125;
    nf = 10;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    //ForwardLayername = "fullyconnected";
    phase = 13;
};

ANNLayer "Error3Buf" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 64;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 14;
};

MaskLayer "Error3" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 15;
    maskLayerName = "conv3";
};

ANNLayer "Error2Buf" = {
   #include "Error3Buf";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 32;
   @phase = 16;
};

MaskLayer "Error2" = {
   #include "Error3";
   @nxScale = .5;
   @nyScale = .5;
   @nf = 32;
   @phase = 17;
   @maskLayerName = "conv2";
};

ANNLayer "Error1Buf" = {
   #include "Error3Buf";
   @nxScale = .5;
   @nyScale = .5;
   @nf = 32;
   @phase = 18;
};

MaskLayer "Error1" = {
   #include "Error3";
   @nxScale = 1;
   @nyScale = 1;
   @nf = 32;
   @phase = 19;
   @maskLayerName = "conv1";
};

//Connections
//[conv1]
//epsW=0.001
//momW=0.9
//wc=0.004
//initW=0.0001
//filterSize=5
HyPerConn "W1Plasticity" = {
    preLayerName = "inputNorm";
    postLayerName = "Error1";
    channelCode = -1; //Does not update on this channel
    nxp = 3; //Trying for filterSize of 6, which from the pre perspective is 3 
    nyp = 3; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    sharedWeights = true;
    
    weightInitType = "GaussianRandomWeight";
    wGaussMean = 0;
    wGaussStdev = .0001;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    dWMax = 0.001; // 200.0 used for initial training
    momentumTau = 100;
    //momentumDecay = .004;
    momentumMethod = "viscosity";
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;

   //Masking out zeros, since this layer is receiving gated max pool values
    useMask = true;
    maskLayerName = "Error1";

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

//epsB=0.002
//momB=0.9
//wc=0.004
//initW=0
HyPerConn "B1Plasticity" = {
    preLayerName = "onesLayer";
    postLayerName = "Error1";
    channelCode = -1; //Does not update on this channel
    nxp = 32; 
    nyp = 32; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "UniformWeight";
    weightInit = 0;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    dWMax = 0.001; // 200.0 used for initial training
    momentumTau = 100;
    momentumDecay = 0;
    momentumMethod = "viscosity";
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;

   //Masking out zeros, since this layer is receiving gated max pool values
    useMask = true;
    maskLayerName = "Error1";

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "W1" = {
    preLayerName = "inputNorm";
    postLayerName = "conv1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W1Plasticity";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = true;
    receiveGpu = true;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B1" = {
    preLayerName = "onesLayer";
    postLayerName = "conv1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "B1Plasticity";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = true;
    pvpatchAccumulateType = "convolve";
};

//[pool1]
//type=pool
//pool=max
//inputs=conv1
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=32
//neuron=relu
PoolingConn "conv1ToPool1" = {
    preLayerName = "conv1";
    postLayerName = "pool1";
    channelCode = 0;
    sharedWeights = true;
    nxp = 2; //Trying for sizeX of 4, which translates to this connection having a patch size of 2 
    nyp = 2; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;
   
    needPostIndexLayer = true;
    postIndexLayerName = "pool1Indicies";

    updateGSynFromPostPerspective = true;
    useWindowPost = false;

    keepKernelsSynchronized             = true;
};

//[conv2]
//type=conv
//inputs=rnorm1
//filters=32
//padding=2
//stride=1
//filterSize=5
//channels=32
//neuron=relu
//initW=0.01
//partialSum=4
//sharedBiases=1
//epsW=0.001
//epsB=0.002
//momW=0.9
//momB=0.9
//wc=0.004
GradientCheckConn "W2Plasticity" = {
    preLayerName = "pool1";
    postLayerName = "Error2";
    channelCode = -1; //Does not update on this channel
    nxp = 3; //Trying for filterSize of 6, which from the pre perspective is 3 
    nyp = 3; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    sharedWeights = true;
    
    weightInitType = "GaussianRandomWeight";
    wGaussMean = 0;
    wGaussStdev = .1;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    dWMax = 0.1; // 200.0 used for initial training
    momentumTau = 100;
    //momentumDecay = .004;
    momentumMethod = "viscosity";
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;

   //Masking out zeros, since this layer is receiving gated max pool values
    //useMask = true;
    //maskLayerName = "Error1";

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";

    estLayerName = "softmax";
    gtLayerName = "gt";
    costFunction = "logerr";
};

//epsB=0.002
//momB=0.9
//wc=0
//initB=0
HyPerConn "B2Plasticity" = {
    #include "B1Plasticity";
    @postLayerName = "Error2";
    @nxp = 16;
    @nyp = 16;
    @dWMax = 0.002; // 200.0 used for initial training
    //@momentumTau = 0.9;
    //@momentumDecay = 0;
    //@momentumMethod = "alex";
    @useMask = false;
};

CloneKernelConn "W2" = {
   #include "W1";
   @preLayerName = "pool1";
   @postLayerName = "conv2";
   @originalConnName = "W2Plasticity";
};

CloneKernelConn "B2" = {
   #include "B1";
    @postLayerName = "conv2";
    @originalConnName = "B2Plasticity";
};

//[pool2]
//type=pool
//pool=avg
//inputs=conv2
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=32
PoolingConn "conv2ToPool2" = {
   #include "conv1ToPool1";
   @preLayerName = "conv2";
   @postLayerName = "pool2";
   @nxp = 2; //Trying for sizeX of 4, which translates to this connection having a patch size of 2 
   @nyp = 2; 
   @pvpatchAccumulateType = "sumpooling";
   @needPostIndexLayer = false;
   @updateGSynFromPostPerspective = true;
};


//[conv3]
//type=conv
//inputs=rnorm2
//filters=64
//padding=2
//stride=1
//filterSize=5
//channels=32
//neuron=relu
//initW=0.01
//partialSum=4
//sharedBiases=1
//epsW=0.001
//epsB=0.002
//momW=0.9
//momB=0.9
//wc=0.004
HyPerConn "W3Plasticity" = {
    preLayerName = "pool2";
    postLayerName = "Error3";

    channelCode = -1; //Does not update on this channel
    nxp = 3; //Trying for filterSize of 6, which from the pre perspective is 3 
    nyp = 3; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    sharedWeights = true;
    
    weightInitType = "GaussianRandomWeight";
    wGaussMean = 0;
    wGaussStdev = .1;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    dWMax = 0.1; // 200.0 used for initial training
    momentumTau = 100;
    //momentumDecay = .004;
    momentumMethod = "viscosity";
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;

   //Masking out zeros, since this layer is receiving gated max pool values
    useMask = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";

};

//epsB=0.002
//momB=0.9
//wc=0
//initB=0
HyPerConn "B3Plasticity" = {
    #include "B1Plasticity";
    @postLayerName = "Error3";
    @nxp = 8; 
    @nyp = 8;
    @dWMax = 0.002; // 200.0 used for initial training
    //@momentumTau = 0.9;
    //@momentumDecay = 0;
    //@momentumMethod = "alex";
    @useMask = false;
};

CloneKernelConn "W3" = {
   #include "W1";
   @preLayerName = "pool2";
   @postLayerName = "conv3";
   @originalConnName = "W3Plasticity";
};

CloneKernelConn "B3" = {
   #include "B1";
    @postLayerName = "conv3";
    @originalConnName = "B3Plasticity";
};

//[pool3]
//type=pool
//pool=avg
//inputs=conv3
//start=0
//sizeX=3
//stride=2
//outputsX=0
//channels=64
PoolingConn "conv3ToPool3" = {
   #include "conv1ToPool1";
   @preLayerName = "conv3";
   @postLayerName = "pool3";
   @nxp = 2; //Trying for sizeX of 4, which translates to this connection having a patch size of 2 
   @nyp = 2; 
   @pvpatchAccumulateType = "sumpooling";
   @needPostIndexLayer = false;
   @updateGSynFromPostPerspective = true;
};

//[fc10]
//epsW=0.001
//epsB=0.002
//momW=0.9
//momB=0.9
//wc=1
//type=fc
//outputs=10
//inputs=pool3
//initW=0.01
HyPerConn "W4Plasticity" = {
    preLayerName = "pool3";
    postLayerName = "FinalError";
    channelCode = -1; //Does not update on this channel
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    sharedWeights = true;
    
    weightInitType = "GaussianRandomWeight";
    wGaussMean = 0;
    wGaussStdev = .1;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    dWMax = 0.001; // 200.0 used for initial training
    momentumTau = 100;
    //momentumDecay = .004;
    momentumMethod = "viscosity";
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;

   //Masking out zeros, since this layer is receiving gated max pool values
    //useMask = true;
    //maskLayerName = "Error1";

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";

   // estLayerName = "softmax";
   // gtLayerName = "gt";
   // costFunction = "logerr";
};

//epsB=0.002
//momB=0.9
//wc=0
//initB=0
HyPerConn "B4Plasticity" = {
    #include "B1Plasticity";
    @postLayerName = "FinalError";
    @nxp = 1;
    @nyp = 1;
    @dWMax = 0.002; // 200.0 used for initial training
    //@momentumTau = 0.9;
    //@momentumDecay = 0;
    //@momentumMethod = "alex";
    @useMask = false;
};

CloneConn "W4" = {
    preLayerName = "pool3";
    postLayerName = "fullyconnected";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W4Plasticity";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B4" = {
   #include "B1";
    @postLayerName = "fullyconnected";
    @originalConnName = "B4Plasticity";
};

//Score connections
IdentConn "gtToScore" = {
   preLayerName                        = "gt";
   postLayerName                       = "Score";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "softmaxToScore" = {
   preLayerName                        = "softmax";
   postLayerName                       = "Score";
   channelCode                         = 1;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

//Error connections, stating from back
//Goes gt - guess
IdentConn "gtToFinalError" = {
   preLayerName                        = "gt";
   postLayerName                       = "FinalError";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "softmaxToFinalError" = {
   preLayerName                        = "softmax";
   postLayerName                       = "FinalError";
   channelCode                         = 1;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

TransposeConn "W4T" = {
    preLayerName = "FinalError";
    postLayerName = "Error3Buf";
    channelCode = 0; //On excitatory channel
    originalConnName = "W4Plasticity";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = 1000;
    writeCompressedCheckpoints = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

//Error3 gets multiplied the result of the error and the convolution value
TransposePoolingConn "Error3BufToError3" = {
    preLayerName = "Error3Buf";
    postLayerName = "Error3";
    channelCode = 0;
    originalConnName = "conv3ToPool3";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "sumpooling";
    updateGSynFromPostPerspective = false;
};

TransposeConn "W3T" = {
    preLayerName = "Error3";
    postLayerName = "Error2Buf";
    channelCode = 0; //On excitatory channel
    originalConnName = "W3Plasticity";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = 1000;
    writeCompressedCheckpoints = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

//Error3 gets multiplied the result of the error and the convolution value
TransposePoolingConn "Error2BufToError2" = {
    preLayerName = "Error2Buf";
    postLayerName = "Error2";
    channelCode = 0;
    originalConnName = "conv2ToPool2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "sumpooling";
    updateGSynFromPostPerspective = false;
};

TransposeConn "W2T" = {
    preLayerName = "Error2";
    postLayerName = "Error1Buf";
    channelCode = 0; //On excitatory channel
    originalConnName = "W2Plasticity";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = 1000;
    writeCompressedCheckpoints = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

//Error3 gets multiplied the result of the error and the convolution value
TransposePoolingConn "Error1BufToError1" = {
    preLayerName = "Error1Buf";
    postLayerName = "Error1";
    channelCode = 0;
    originalConnName = "conv1ToPool1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "maxpooling";
    updateGSynFromPostPerspective = false;
};

//W1T is not actually used, here for analysis purposes
TransposeConn "W1T" = {
    preLayerName = "Error1";
    postLayerName = "inputNorm";
    channelCode = -1; //On excitatory channel
    originalConnName = "W1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = 1000;
    writeCompressedCheckpoints = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

