// PetaVision, svn repository version 10315 with local modifications, run at Thu Aug 27 12:17:30 2015
// Compiled with MPI and run using 1 rows and 1 columns.
// Compiled without OpenCL.
// Compiled with CUDA.
// Compiled with OpenMP parallel code and run using 64 threads.

HyPerCol "column" = {
    startTime                           = 0;
    dt                                  = 1;
    dtAdaptFlag                         = false;
    dtScaleMax                          = 1;
    dtScaleMin                          = 0.02;
    dtChangeMax                         = 0.01;
    dtChangeMin                         = -0.02;
    dtMinToleratedTimeScale             = 0.0001;
    stopTime                            = 128; //Total number of nf
    progressInterval                    = 1;
    writeProgressToErr                  = true;
    verifyWrites                        = false;
    outputPath                          = "~/mountData/MAX/deconvolveS1/";
    printParamsFilename                 = "deconvolveS1.params";
    randomSeed                          = 1234567890;
    nx                                  = 72;
    ny                                  = 72;
    filenamesContainLayerNames          = 1;
    filenamesContainConnectionNames     = 1;
    defaultInitializeFromCheckpointFlag = false;
    checkpointWrite                     = false;
    deleteOlderCheckpoints              = false;
    suppressNonplasticCheckpoints       = false;
    writeTimescales                     = true;
    errorOnNotANumber                   = false;
};

//Movie layer that loops through neurons
MoviePvp "S1" = {
    restart = 0; 
    nxScale = .5;
    nyScale = .5;
    inputPath = "~/workspace/projects/DCA/input/data/deconvS1.pvp"; //TODO
    nf = 128; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = true;
    mirrorBCflag = false;    //board condition flag
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;  //No offsets, as this layer is exactly the size of the image
    offsetY = 0;
    offsetAnchor = "cc"; //Neuron in center
    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.
    batchMethod = "byImage";
    displayPeriod = 1;
};

ANNLayer "ImageDeconS1" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 1;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ZeroV";
    triggerFlag                         = false;
    writeStep                           = 1;
    initialWriteTime                    = 1;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
};


HyPerConn "S1ToImageDeconS1" = {
    preLayerName                        = "S1";
    postLayerName                       = "ImageDeconS1";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    weightInitType                      = "FileWeight";
    initWeightsFile                     = "~/mountData/DCA/data/S1ToImageReconS1Error_W.pvp";
    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    initializeFromCheckpointFlag        = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    nxp                                 = 18;
    nyp                                 = 18;
    nfp                                 = 3;
    shrinkPatches                       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;
    normalizeOnWeightUpdate             = true;
    rMinX                               = 0;
    rMinY                               = 0;
    nonnegativeConstraintFlag           = false;
    normalize_cutoff                    = 0;
    normalizeFromPostPerspective        = false;
    minL2NormTolerated                  = 0;
    dWMax                               = 10;
    keepKernelsSynchronized             = true;
    useMask                             = false;
};

