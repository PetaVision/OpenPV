#!/usr/bin/env perl

############
## getDistance.pl
##
## Written by:
##      Dylan Paiton
##      Los Alamos National Laboratory, Group ISR-2 
##      paiton@lanl.gov
## 
## Receives two categories and finds the distance between them in the XML script generated by findParents.pl
##
## The distances should only be compared with respect to a common object.
##  For example, the distance between a bobcat and panther should not be compared to the distance between a terrier and a husky.
##  However, a bobcat can be compared to a panther, terrier and husky in order to find relative distances.
##
## Current metric for distance:
##      Find the Lowest Common Ancestor (LCA) between the categories i and j
##      Find dist_i, dist_j = distance from each category to LCA (number of ancestors between the category and the LCA)
##      Find depth = number of parents from LCA to root of tree
##      Total Distance = (dist1+dist2) / depth
##
##      If there is no LCA between the categories, the number 1000 (to represent inf) is returned, showing no correlation
## 
## TODO:
##  Allow for user error on inputs
############

##Uncomment below to run from command line
##This must stay commented in order to call this function from another program
if ($ARGV[0] && $ARGV[1] && $ARGV[2]) {
    $output = &getDistance($ARGV[0], $ARGV[1], $ARGV[2]);
    if ($output == 1000) {
        print "\n\nOUTPUT:\tinf (the objects are unrelated)\n\n";
    } else {
        print "\n\nOUTPUT:\t$output\n\n";
    }
} else {
    die "Usage: ./getDistance.pl \"dir_to_xml_tree\" \"category1\" \"category2\"\n",
        "Please make sure that Category1 and Category2 are exactly as they appear within the folderStructure.xml file";
}

sub getDistance {

    use XML::XPath;
    use XML::XPath::XMLParser;

    my $root_dir = $_[0];
    $root_dir =~ s/\/$//;
    my $cat1 = $_[1];
    my $cat2 = $_[2];

    my $xmlfile = $root_dir . "/folderStructure.xml";
    my $path1 = "//synset[\@words='${cat1}']";
    my $path2 = "//synset[\@words='${cat2}']";

    print "\nFinding the total distance between \"$cat1\" and \"$cat2\" in $xmlfile\n";

    unless (-e $xmlfile) {
        die "\n\nERROR: $xmlfile does not exist!\n",
            "Please run findParents.pl for each category to create the file.\n",
            "It will be created in the tmp/ directory.\n\n";
    }

    my $xp = XML::XPath->new(filename => $xmlfile);

    my ($dist1, $dist2, $depth, $foundLCA, $LCA, $LCAParent) = 0;

# Get list of parents for each category, find LCA, compute distances
    if ($xp->exists($path1) && $xp->exists($path2)) {
        my $nodeset1 = $xp->find($path1);
        my $nodeset2 = $xp->find($path2);
        my @NODELIST1 = $nodeset1->get_nodelist;
        my @NODELIST2 = $nodeset2->get_nodelist;
        foreach my $node1 (@NODELIST1) {
            if ($node1->getAttribute(words) =~ /$cat1/) {
                foreach my $node2 (@NODELIST2) {
                    if ($node2->getAttribute(words) =~ /$cat2/) {

                        if ($parent1 = $node1->getParentNode()) { $dist1 += 1; }
                        if ($parent2 = $node2->getParentNode()) { $dist2 += 1; }

                        while ($parent1 and $parent1->getAttribute(words)) {
                            while ($parent2 and $parent2->getAttribute(words)) {
                                my $parent1name = $parent1->getAttribute(words);
                                my $parent2name = $parent2->getAttribute(words);
                                if ($parent1name =~ /$parent2name/) {
                                    $LCA = $parent1;
                                   #print "LCA = ", $LCA->getAttribute(words), "\n";
                                    $foundLCA = 1;
                                    last;
                                }
                                if ($parent2 = $parent2->getParentNode()) { $dist2 += 1; }
                            }#parent2
                            last if ($foundLCA);
                            if ($parent1 = $parent1->getParentNode()) { $dist1 += 1; }
                            $dist2 = 0;
                            if ($parent2 = $node2->getParentNode()) { $dist2 += 1; }
                        }#parent1
                    }#node2->cat2
                    last if ($foundLCA);
                }#node2
            }#node1->cat1
            last if ($foundLCA);
        }#node1
    } else {
        die "\n\nERROR: Category1 ($cat1) and/or Category2 ($cat2) were not found in $xmlfile\n\n";
    }

   #print "Distance from \"$cat1\" to \"", $LCA->getAttribute(words), "\" = $dist1\n",
   #      "Distance from \"$cat2\" to \"", $LCA->getAttribute(words), "\" = $dist2\n";

    unless ($foundLCA) {
        return 1000;
    }

#Compute the depth of the LCA
    if ($LCAParent = $LCA->getParentNode()) { $depth += 1; }
    while ($LCAParent and $LCAParent->getAttribute(words)) {
        if ($LCAParent = $LCAParent->getParentNode()) { $depth += 1; }
    }

   #print "Depth of LCA = $depth\n";

    $tot_dist = ($dist1 + $dist2) / $depth;

    print "Done finding distance.\n";

    return $tot_dist;
}
