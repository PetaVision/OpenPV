function [tot_images ...
	  tot_masks ...
	  tot_discarded ...
	  num_BB_mismatch ...
	  ave_height ...
	  ave_width ...
	  std_height ...
	  std_width ...
	  tot_images_landscape ...
	  tot_masks_landscape ...
	  ave_height_landscape ...
	  ave_width_landscape ...
	  std_height_landscape ...
	  std_width_landscape ...
	  tot_time] = ...
      imageNetResize(imageNet_path, image_resize, object_list, grabcut_flag, num_procs)

  %% reformat directory of image net images to be of uniform size with
  %% mirror BCs for padding if necessary
  %% also produces masked images from bounding
  %% box data

  begin_time = time();
  more off

  if nargin < 1 || ~exist(imageNet_path) || isempty(imageNet_path)
    imageNet_path = "~/Pictures/imageNet/";
  endif
  if nargin < 2 || ~exist(image_resize) || isempty(image_resize)
    image_resize = [256 360];
  endif
  if nargin < 3 || ~exist(object_list) || isempty(object_list)
    object_list{1} = "cat";  %% could be a list?
  endif
  if nargin < 4 || ~exist(image_type) || isempty(image_type)
    image_type = ".png";  %% 
  endif
  if nargin < 5 || ~exist(grabcut_flag) || isempty(grabcut_flag)
    grabcut_flag = 1;  %% 
  endif

  global NUM_FIGS
  NUM_FIGS = 0;
  
  matFiles_dir = ...
      [imageNet_path, "matFiles", "/"];
  mkdir(matFiles_dir); 

  unavailable_info = [];
  num_objects = length(object_list);
  for i_object = 1 : num_objects
    object_name = object_list{i_object};
    disp(["object_name = ", object_name]);
    object_dir = ...
	[ imageNet_path, "extract/", object_name, "/" ];
    if ~exist(object_dir, "dir")
      error(["object_dir does not exist: ", object_dir]);
    endif
    standard_parent_dir = ...
	[ imageNet_path, "standard/", object_name, "/" ];
    mkdir(standard_parent_dir);
    masks_parent_dir = ...
	[ imageNet_path, "masks/", object_name, "/" ];
    mkdir(masks_parent_dir);
    tot_images = zeros(1,num_objects);
    tot_masks = zeros(1,num_objects);
    tot_discarded = zeros(1,num_objects);
    num_BB_mismatch = zeros(1,num_objects);
    ave_height = zeros(1,num_objects);
    ave_width = zeros(1,num_objects);
    std_height = zeros(1,num_objects);
    std_width = zeros(1,num_objects);
    tot_images_landscape = zeros(1,num_objects);
    tot_masks_landscape = zeros(1,num_objects);
    ave_height_landscape = zeros(1,num_objects);
    ave_width_landscape = zeros(1,num_objects);
    std_height_landscape = zeros(1,num_objects);
    std_width_landscape = zeros(1,num_objects);
    
    %% imageNet sub directories are drawn from wordNet categories
    subdir_struct = dir([object_dir,"*"]);
    num_subdirs = length(subdir_struct);
    disp(["num_subdirs = ", num2str(num_subdirs)]);
    for i_subdir = 12 : num_subdirs %% : fix(num_subdirs/2) %% 
      if 0 %%~strcmp(subdir_struct(i_subdir).name(1),"n")
	continue;
      endif
      disp(["i_subdir = ", num2str(i_subdir)]);
      images_path = ...
	  [object_dir, ...
	   subdir_struct(i_subdir).name, "/"];
      annotation_path = ...
	  [object_dir, ...
	   subdir_struct(i_subdir).name, "/", ...
	   "Annotation", "/"];
      annotation_flag = exist(annotation_path, "dir");
      if ~annotation_flag
	warning(["annoation_path does not exist: ", annotation_path]);
      else
	local_dir = pwd;
	try
	  chdir(annotation_path);
	  subdir_id = glob("n[0-9]*");
	  subdir_id = subdir_id{1};
	  chdir(local_dir);
	catch
	  chdir(local_dir);
	end
      endif
      standard_dir = ...
	  [standard_parent_dir, ...
	   subdir_struct(i_subdir).name, "/"];
      mkdir(standard_dir); %% does not clobber
      masks_dir = ...
	  [masks_parent_dir, ...
	   subdir_struct(i_subdir).name, "/"];
      mkdir(masks_dir); 
      images_struct = dir([images_path, "n*.*"]);
      num_images = length(images_struct);
      disp(["num_images = ", num2str(num_images)]);
      for i_image = 1 : num_images
	tot_discarded(i_object) = tot_discarded(i_object) + 1;
	disp(["i_image = ", num2str(i_image)]);
	original_name = ...
	    [images_path, images_struct(i_image).name];
	disp(["original_name = ", original_name]);
	base_ndx = strfind(images_struct(i_image).name, ".") - 1;
	base_name = images_struct(i_image).name(1:base_ndx);
	try
	  [original_image, original_map, original_alpha] = imread(original_name);
	catch 
	  continue;
	end
	%% check if image unavaliable
	original_info = imfinfo(original_name);
	[unavailable_flag, unavailable_info] = ...
	    imageNetUnavailableFLCKR(original_info, unavailable_info);
	if unavailable_flag
	  continue;
	endif
	%%if (( original_info.Height < image_resize(1)/(256/194)) || ...
	%%    (original_info.Width < image_resize(2)/(256/194)))
	%%  continue;
	%%endif
	%% ignore transparancy channel: 4th "color")
	if size(original_image,3) == 4
	  original_image = original_image(:,:,1:3);
	endif
	if (strcmp( original_info.Format, "GIF" ) || ...
	    strcmp( original_info.Format, "PNG" ))
	endif
	[pad_image] = ...
	    imageNetPad(original_image, ...
			original_info, ...
			image_resize);
	if isempty(pad_image)
	  continue;
	endif
	standard_name = [standard_dir, base_name, image_type];
	imwrite(pad_image, standard_name);
	tot_images(1,i_object) = ...
	    tot_images(1,i_object) + 1;
	ave_height(1,i_object) = ...
	    ave_height(1,i_object) + original_info.Height;
	ave_width(1,i_object) = ...
	    ave_width(1,i_object) + original_info.Width;
	std_height(1,i_object) = ...
	    std_height(1,i_object) + original_info.Height.^2;
	std_width(1,i_object) = ...
	    std_width(1,i_object) + original_info.Width.^2;
	if original_info.Height < original_info.Width
	  tot_images_landscape(1,i_object) = ...
	      tot_images_landscape(1,i_object) + 1;
	  ave_height_landscape(1,i_object) = ...
	      ave_height_landscape(1,i_object) + original_info.Height;
	  ave_width_landscape(1,i_object) = ...
	      ave_width_landscape(1,i_object) + original_info.Width;
	  std_height_landscape(1,i_object) = ...
	      std_height_landscape(1,i_object) + original_info.Height.^2;
	  std_width_landscape(1,i_object) = ...
	      std_width_landscape(1,i_object) + original_info.Width.^2;
	endif
	if annotation_flag
	  xml_file = [annotation_path, ...
		      subdir_id, "/", ...
		      base_name, ".xml"];
	  xml_flag = exist(xml_file, "file");
	  if xml_flag
	    %%keyboard
	    disp(["xml_file = ", xml_file]);
	    [mask_image, BB_mask, BB_scale_x, BB_scale_y] = ...
		imageNetMaskBB(original_image, original_info, xml_file);
	    if isempty(mask_image)
	      continue;
	    endif
	    [pad_mask_image] = ...
		imageNetPad(mask_image, ...
			    original_info, ...
			    image_resize);
	    if isempty(pad_image)
	      continue;
	    endif
	    mask_name = [masks_dir, base_name, ".png"];
	    imwrite(pad_mask_image, mask_name);
	    tot_masks(i_object) = tot_masks(i_object) + 1;
	    if original_info.Height < original_info.Width
	      tot_masks_landscape(i_object) = ...
		  tot_masks_landscape(i_object) + 1;
	    endif
	    num_BB_mismatch(i_object) = ...
		num_BB_mismatch(i_object) + ...
		((BB_scale_x ~= 1) || (BB_scale_y ~= 1));	    
	  endif
	endif
      endfor %% i_image
    endfor %% i_subdir
    
    tot_discarded(i_object) = ...
	tot_discarded(i_object) - tot_images(i_object);
    disp(["tot_discarded = ", ...
	  num2str(tot_discarded(i_object))]);

    ave_height(i_object) = ...
	ave_height(i_object) / tot_images(i_object);
    ave_width(i_object) = ...
	ave_width(i_object) / tot_images(i_object);
    std_height(i_object) = ...
	sqrt((std_height(i_object) / tot_images(i_object)) - ...
	     ave_height(i_object).^2);
    std_width(i_object) = ...
	sqrt((std_width(i_object) / tot_images(i_object)) - ...
	     ave_width(i_object).^2);
    disp(["tot_images = ", ...
	  num2str(tot_images(i_object))]);
    disp(["tot_masks = ", ...
	  num2str(tot_masks(i_object))]);
    disp(["ave_height = ", ...
	  num2str(ave_height(i_object)), " +/- ", num2str(std_height(i_object))]);
    disp(["ave_width = ", ...
	  num2str(ave_width(i_object)), " +/- ", num2str(std_width(i_object))]);

    ave_height_landscape(i_object) = ...
	ave_height_landscape(i_object) / tot_images_landscape(i_object);
    ave_width_landscape(i_object) = ...
	ave_width_landscape(i_object) / tot_images_landscape(i_object);
    std_height_landscape(i_object) = ...
	sqrt((std_height_landscape(i_object) / tot_images_landscape(i_object)) - ...
	     ave_height_landscape(i_object).^2);
    std_width_landscape(i_object) = ...
	sqrt((std_width_landscape(i_object) / tot_images_landscape(i_object)) - ...
	     ave_width_landscape(i_object).^2);
    disp(["tot_images_landscape = ", ...
	  num2str(tot_images_landscape(i_object))]);
    disp(["tot_masks_landscape = ", ...
	  num2str(tot_masks_landscape(i_object))]);
    disp(["ave_height_landscape = ", ...
	  num2str(ave_height_landscape(i_object)), " +/- ", ...
	  num2str(std_height_landscape(i_object))]);
    disp(["ave_width_landscape = ", ...
	  num2str(ave_width_landscape(i_object)), " +/- ", ...
	  num2str(std_width_landscape(i_object))]);
    
  endfor  %% i_object
  
  matFile_name = [matFiles_dir, date, ".mat"];
  save( "-binary", matFile_name, ...
      "tot_images", ...
      "tot_masks", ...
      "tot_discarded", ...
      "num_BB_mismatch", ...
      "ave_height", ...
      "ave_width", ...
      "std_height", ...
      "std_width", ...
      "tot_images_landscape", ...
      "tot_masks_landscape", ...
      "ave_height_landscape", ...
      "ave_width_landscape", ...
      "std_height_landscape", ...
      "std_width_landscape");
  end_time = time();
  tot_time = end_time - begin_time;
  disp(["tot_time = ", num2str(tot_time)]);

endfunction%% imageNetResize