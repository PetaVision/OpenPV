// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1224; //1226, one pixel cropped from both sides;  // KITTI synced value
    ny = 368;  //370, two pixels cropped from the top;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime = 1000; //193 total testing, splitting into 100 training, 93 testing
    progressStep = 1;
    outputPath = "/nh/compneuro/Data/Depth/LCA/benchmark/stereo_train_slp_single/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/benchmark/stereo_train_slp_single/Checkpoints";
    checkpointWriteStepInterval = 100;
    deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
    dtAdaptFlag = false;
    dtScaleMax = 5.0;
    dtScaleMin = 0.25;
    dtChangeMax = 0.05;
    dtChangeMin = 0.0;
};

//
// layers
//

Movie "V1S2Input" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 32;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/Depth/LCA/benchmark/stereo_train/a16_V1S2.pvp";
    writeFrameToTimestamp = true;
    writeStep = -1;
    sparseLayer = true;
    displayPeriod = 1;
    start_frame_index = 11;
    skip_frame_index = 11;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    resetToStartOnLoop = true;
    //useParamsImage = true;
};

Movie "V1S4Input" = {
   #include "V1S2Input";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 64;
   @imageListPath = "/nh/compneuro/Data/Depth/LCA/benchmark/stereo_train/a17_V1S4.pvp";
};

Movie "V1S8Input" = {
   #include "V1S2Input";
   @nxScale = .125;
   @nyScale = .125;
   @nf = 128;
   @imageListPath = "/nh/compneuro/Data/Depth/LCA/benchmark/stereo_train/a18_V1S8.pvp";
};

BinaryThresh "V1S2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 32;
    writeStep = -1;
    initialWriteTime = -1.0;
    mirrorBCflag = false;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
};

BinaryThresh "V1S4" = {
   #include "V1S2";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 64;
};

BinaryThresh "V1S8" = {
   #include "V1S2";
   @nxScale = .125;
   @nyScale = .125;
   @nf = 128;
};

// for visualization only, makes no output
ANNLayer "LeftReconS2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 1.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 5;
    //
};

ANNLayer "LeftReconS4" = {
    #include "LeftReconS2";
};

ANNLayer "LeftReconS8" = {
    #include "LeftReconS2";
};

ANNLayer "LeftReconAll" = {
    #include "LeftReconS2";
};


// for visualization only, makes no output
ANNLayer "RightReconS2" = {
    #include "LeftReconAll";
};

ANNLayer "RightReconS4" = {
    #include "LeftReconAll";
};

ANNLayer "RightReconS8" = {
    #include "LeftReconAll";
};

ANNLayer "RightReconAll" = {
    #include "LeftReconAll";
};

//Depth ground truth layers

Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/KITTI/stereo_flow/single_frames/training/disp_noc.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = 1;
    sparseLayer = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetAnchor = "br"; //Offset anchor from bottom right
    offsetX = 0; //1 px offset from the left
    offsetY = 0; //offset 0 from bottom
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    resetToStartOnLoop = true;
    //useParamsImage = true;
};

//SLP error layers
SLPError "SLPError" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 8;
};

ANNLayer "ForwardLayer" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 5;
};

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = 1; 
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//SLP connections
KernelConn "W1V1S2" = {
    preLayerName = "V1S2";
    postLayerName = "SLPError";
    useMask = true;
    maskLayerName = "SLPError";
    channelCode = -1; //Doesn't actually feed to error, but attached for weight updates
    nxp = 34; 
    nyp = 34; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/W1V1S2_W.pvp";
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.01; //sqrt(3/24276)
    wMaxInit = .01;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    weightUpdatePeriod = 1;
    initialWeightUpdateTime = 1;

    dWMax = .01; //sqrt(24276)
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "W1V1S2Clone" = {
    preLayerName = "V1S2";
    postLayerName = "ForwardLayer";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W1V1S2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W1V1S4" = {
   #include "W1V1S2";
   @preLayerName = "V1S4";
   @nxp = 68; 
   @nyp = 68; 
   //@wMinInit = -.012; //sqrt(3/24276)
   //@wMaxInit = .012;
   //@dWMax = .01; //sqrt(20736)
   //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/W1V1S4_W.pvp";
};

CloneKernelConn "W1V1S4Clone" = {
   #include "W1V1S2Clone";
   @preLayerName = "V1S4";
   @originalConnName = "W1V1S4";
};

KernelConn "W1V1S8" = {
   #include "W1V1S2";
   @preLayerName = "V1S8";
   @nxp = 136; 
   @nyp = 136; 
   //@wMinInit = -.009; //sqrt(3/36992)
   //@wMaxInit = .009;
   //@dWMax = .01; //sqrt(128)
   //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/W1V1S8_W.pvp";
};

CloneKernelConn "W1V1S8Clone" = {
   #include "W1V1S2Clone";
   @preLayerName = "V1S8";
   @originalConnName = "W1V1S8";
};

KernelConn "B1" = {
    preLayerName = "onesLayer";
    postLayerName = "SLPError";
    channelCode = -1; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/B1_W.pvp";
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.01; //sqrt(3/9408)
    wMaxInit = .01;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    weightUpdatePeriod = 1;
    initialWeightUpdateTime = 1;

    dWMax = .01; //sqrt(9408)/10000

    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B1Clone" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "B1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

IdentConn "V1S2InputToV1S2" = {
    preLayerName = "V1S2Input";
    postLayerName = "V1S2";
    channelCode = 0; //Excitatory Channel
    writeStep = -1;    
    delay = 0;
};

IdentConn "V1S4InputToV1S4" = {
   #include "V1S2InputToV1S2";
   @preLayerName = "V1S4Input";
   @postLayerName = "V1S4";
};

IdentConn "V1S8InputToV1S8" = {
   #include "V1S2InputToV1S2";
   @preLayerName = "V1S8Input";
   @postLayerName = "V1S8";
};

IdentConn "DepthGTToDepthError" = {
    preLayerName = "DepthImage";
    postLayerName = "SLPError";
    channelCode = 0; //Excitatory Channel
    writeStep = -1;    
    delay = 0;
};

IdentConn "ForwardLayerToSLPError" = {
    preLayerName = "ForwardLayer";
    postLayerName = "SLPError";
    channelCode = 1; //Inhibitory Channel
    writeStep = -1;    
    delay = 0;
};

//Image recons
KernelConn "V1S2ToLeftReconS2" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconS2";
    channelCode = 0;
    nxp = 34;
    nyp = 34;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S2ToLeftError_W.pvp";
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    //
    initialWriteTime = 0.0;
    selfFlag = false;
    shmget_flag = false;
    delay = 0;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 100000; //Imprint if element has not been active in 1000 frames
};

KernelConn "V1S4ToLeftReconS4" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S4";
    @postLayerName = "LeftReconS4";
    @nxp = 68;
    @nyp = 68;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S4ToLeftError_W.pvp";
};

KernelConn "V1S8ToLeftReconS8" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S8";
    @postLayerName = "LeftReconS8";
    @nxp = 136;
    @nyp = 136;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S8ToLeftError_W.pvp";
};

CloneKernelConn "V1S2ToLeftReconAll" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconAll";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S2ToLeftReconS2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S4";
    @originalConnName = "V1S4ToLeftReconS4";
};

CloneKernelConn "V1S8ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S8";
    @originalConnName = "V1S8ToLeftReconS8";
};

//Right binocular connections
KernelConn "V1S2ToRightReconS2" = {
    #include "V1S2ToLeftReconS2";
    @postLayerName = "RightReconS2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S2ToRightError_W.pvp";
};

KernelConn "V1S4ToRightReconS4" = {
    #include "V1S4ToLeftReconS4";
    @postLayerName = "RightReconS4";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S4ToRightError_W.pvp";
};

KernelConn "V1S8ToRightReconS8" = {
    #include "V1S8ToLeftReconS8";
    @postLayerName = "RightReconS8";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S8ToRightError_W.pvp";
};

CloneKernelConn "V1S2ToRightReconAll" = {
    #include "V1S2ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S2ToRightReconS2";
};

CloneKernelConn "V1S4ToRightReconAll" = {
    #include "V1S4ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S4ToRightReconS4";
};

CloneKernelConn "V1S8ToRightReconAll" = {
    #include "V1S8ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S8ToRightReconS8";
};

