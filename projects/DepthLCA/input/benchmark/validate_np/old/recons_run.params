// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1226, one pixel cropped from both sides;  // KITTI synced value
    ny = 360;  //370, two pixels cropped from the top;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime = 93; //193 total testing, splitting into 100 training, 93 testing
    progressStep = 1;
    outputPath = "/home/ec2-user/mountData/benchmark/validate/recons_run/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = false;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/benchmark/train/single_rcorr_LCA/Checkpoints";
    checkpointWriteStepInterval = 10;
    deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
    dtAdaptFlag = false;
    dtScaleMax = 5.0;
    dtScaleMin = 0.25;
    dtChangeMax = 0.05;
    dtChangeMin = 0.0;
};

//
// layers
//

//For visualization
Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/home/ec2-user/mountData/kitti/list/image_2_benchmark_aws_cluster_single.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 101;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetAnchor = "br"; //Offset anchor from bottom left
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftBipolar" = {
   nxScale                             = .5;
   nyScale                             = .5;
   nf                                  = 1;
   phase                               = 1;
   mirrorBCflag                        = true;
   InitVType                           = "ZeroV";
   triggerFlag                         = true;
   triggerLayerName                    = "LeftImage";
   triggerOffset                       = 0;
   writeStep                           = -1;
   sparseLayer                         = false;
   updateGpu                           = false;
   VThresh                             = -3.40282e+38;
   AMin                                = -3.40282e+38;
   AMax                                = 3.40282e+38;
   AShift                              = 0;
   VWidth                              = 0;
};

ANNLayer "LeftGanglion" = {
   nxScale                             = .5;
   nyScale                             = .5;
   nf                                  = 1;
   phase                               = 2;
   mirrorBCflag                        = true;
   InitVType                           = "ZeroV";
   triggerFlag                         = true;
   triggerLayerName                    = "LeftImage";
   triggerOffset                       = 0;
   writeStep                           = 1;
   initialWriteTime                    = 1;
   sparseLayer                         = false;
   updateGpu                           = false;
   VThresh                             = -3.40282e+38;
   AMin                                = -3.40282e+38;
   AMax                                = 3.40282e+38;
   AShift                              = 0;
   VWidth                              = 0;
};

Movie "RightImage" = {
    #include "LeftImage";
    @imageListPath = "/home/ec2-user/mountData/kitti/list/image_3_benchmark_aws_cluster_single.txt";
};

ANNLayer "RightBipolar" = {
    #include "LeftBipolar";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion" = {
    #include "LeftGanglion";
    @triggerLayerName = "RightImage";
};



Movie "LCA_V1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 512;
    readPvpFile = true;
    imageListPath = "~/mountData/benchmark/a12_V1_LCA.pvp";
    writeFrameToTimestamp = true;
    writeStep = -1;
    sparseLayer = true;
    writeSparseValues = true;
    displayPeriod = 1;
    start_frame_index = 1111;
    skip_frame_index = 11;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftRecon" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 1.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 1;
    //
};

// for visualization only, makes no output
ANNLayer "RightRecon" = {
    #include "LeftRecon";
};

//Depth ground truth layers
Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/home/ec2-user/mountData/kitti/list/aws_disp_noc.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    sparseLayer = false;
    displayPeriod = 1;
    start_frame_index = 100;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetAnchor = "br"; //Offset anchor from bottom left
    offsetX = 0; //1 px offset from the left
    offsetY = 0; //offset 0 from bottom
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "DepthDownsample" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
};

//This is the ground truth layer
BinningLayer "DepthGT" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 128; //3 pixel error allowed, we may need to change this 
    writeStep = -1.0;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 3;
    InitVType = "ZeroV";
    zeroNeg = false; //Set negative gt values as -1
    zeroDCR = true; //Zero values from the buffer is set to 0
    normalDist = false; //Max value will always be 1 as opposed to normal distribution
    delay = 0;
    originalLayerName = "DepthDownsample";
    phase = 2;
};

ANNLayer "RCorrBuf" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 128;
    writeStep = -1.0;
    initialWriteTime = 1.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    phase = 5; //Same as other recons
};

WTALayer "RCorrRecon" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 1; 
    writeStep = 1.0;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = false;
    delay = 0;
    originalLayerName = "RCorrBuf";
    phase = 6;
};


////SLP layers
//ANNLayer "SLP_Error" = {
//    nxScale                             = 0.5;
//    nyScale                             = 0.5;
//    nf                                  = 128;
//    phase                               = 3;
//    mirrorBCflag                        = false;
//    valueBC                             = 0;
//    InitVType                           = "ZeroV";
//    triggerFlag                         = false;
//    writeStep                           = 1;
//    initialWriteTime                    = 1;
//    sparseLayer                         = false;
//    updateGpu                           = false;
//    VThresh                             = -3.40282e+38;
//    AMin                                = -3.40282e+38;
//    AMax                                = 3.40282e+38;
//    AShift                              = 0;
//    VWidth                              = 0;
//};
//
//ANNLayer "SLP_Recon_Buffer" = {
//    nxScale                             = 0.5;
//    nyScale                             = 0.5;
//    nf                                  = 128;
//    phase                               = 4;
//    mirrorBCflag                        = false;
//    valueBC                             = 0;
//    InitVType                           = "ZeroV";
//    triggerFlag                         = false;
//    writeStep                           = -1;
//    initialWriteTime                    = -1;
//    sparseLayer                         = false;
//    updateGpu                           = false;
//    VThresh                             = -3.40282e+38;
//    AMin                                = -3.40282e+38;
//    AMax                                = 3.40282e+38;
//    AShift                              = 0;
//    VWidth                              = 0;
//};
//
//WTALayer "SLP_Recon" = {
//    restart = 0;
//    nxScale = .5; 
//    nyScale = .5;
//    nf = 1; 
//    writeStep = 1.0;
//    initialWriteTime = 1.0;
//    mirrorBCflag = false;
//    writeSparseActivity = false;
//    delay = 0;
//    originalLayerName = "SLP_Recon_Buffer";
//    phase = 5;
//};

PoolingConn "DepthImageToDepthDownsample" = {
    preLayerName = "DepthImage";
    postLayerName = "DepthDownsample";
    channelCode = 0; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;
    useWindowPost = false;

    keepKernelsSynchronized             = true;
};

//Reverse correlation connections
KernelConn "LCA_V1ToRCorrBuf" = {
    preLayerName = "LCA_V1";
    postLayerName = "RCorrBuf";
    channelCode = 0;
    nxp = 33;
    nyp = 33;
    nfp = 128;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/home/ec2-user/mountData/benchmark/train/aws_rcorr_white_LCA/Last/LCA_V1ToDepthGT_W.pvp";
    //weightInitType = "UniformWeight";
    //weightInit = 0;
    //
    strength = 1; //.25/2  
    normalizeMethod = "none";
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;

    plasticityFlag = false;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    initialWriteTime = 0.0;
    dWMax = 1; //1/numimages
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";

    sharedWeights = true;
};

KernelConn "LCA_V1ToLeftRecon" = {
    preLayerName = "LCA_V1";
    postLayerName = "LeftRecon";
    channelCode = 0;
    nxp = 66;
    nyp = 66;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/home/ec2-user/mountData/dictLearn/aws_white_saved/V1ToLeftError_W.pvp";

    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
    //triggerOffset = 1;
    initialWriteTime = 0.0;
    //dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LCA_V1ToRightRecon" = {
   #include "LCA_V1ToLeftRecon";
   @postLayerName = "RightRecon";
   @initWeightsFile = "/home/ec2-user/mountData/dictLearn/aws_white_saved/V1ToRightError_W.pvp";
};

// Left eye connections

KernelConn "LeftImageToLeftBipolarCenter" = {
   preLayerName                        = "LeftImage";
   postLayerName                       = "LeftBipolar";
   channelCode                         = 0;
   delay                               = [0.000000];
   numAxonalArbors                     = 1;
   plasticityFlag                      = false;
   convertRateToSpikeCount             = false;
   receiveGpu                          = false;
   weightInitType                      = "Gauss2DWeight";
   // initWeightsFile                     was set to (NULL);
   aspect                              = 1;
   sigma                               = .5;
   rMax                                = 3;
   rMin                                = 0;
   strength                            = 1;
   updateGSynFromPostPerspective       = false;
   pvpatchAccumulateType               = "convolve";
   writeStep                           = -1;
   writeCompressedCheckpoints          = false;
   selfFlag                            = false;
   nxp                                 = 3;
   nyp                                 = 3;
   nfp                                 = 1;
   shrinkPatches                       = false;
   normalizeMethod                     = "normalizeSum";
   normalizeArborsIndividually         = false;
   normalizeOnInitialize               = true;
   normalizeOnWeightUpdate             = true;
   rMinX                               = 0;
   rMinY                               = 0;
   nonnegativeConstraintFlag           = false;
   normalize_cutoff                    = 0;
   normalizeFromPostPerspective        = true;
   minSumTolerated                     = 0;
};

KernelConn "LeftBipolarToLeftGanglionCenter" = {
   preLayerName                        = "LeftBipolar";
   postLayerName                       = "LeftGanglion";
   channelCode                         = 0;
   delay                               = [0.000000];
   numAxonalArbors                     = 1;
   plasticityFlag                      = false;
   convertRateToSpikeCount             = false;
   receiveGpu                          = false;
   weightInitType                      = "Gauss2DWeight";
   // initWeightsFile                     was set to (NULL);
   aspect                              = 1;
   sigma                               = 1;
   rMax                                = 3;
   rMin                                = 0;
   strength                            = 1;
   updateGSynFromPostPerspective       = false;
   pvpatchAccumulateType               = "convolve";
   writeStep                           = -1;
   writeCompressedCheckpoints          = false;
   selfFlag                            = false;
   nxp                                 = 1;
   nyp                                 = 1;
   nfp                                 = 1;
   shrinkPatches                       = false;
   normalizeMethod                     = "normalizeSum";
   normalizeArborsIndividually         = false;
   normalizeOnInitialize               = true;
   normalizeOnWeightUpdate             = true;
   rMinX                               = 0;
   rMinY                               = 0;
   nonnegativeConstraintFlag           = false;
   normalize_cutoff                    = 0;
   normalizeFromPostPerspective        = true;
   minSumTolerated                     = 0;
};

KernelConn "LeftBipolarToLeftGanglionSurround" = {
   preLayerName                        = "LeftBipolar";
   postLayerName                       = "LeftGanglion";
   channelCode                         = 1;
   delay                               = [0.000000];
   numAxonalArbors                     = 1;
   plasticityFlag                      = false;
   convertRateToSpikeCount             = false;
   receiveGpu                          = false;
   weightInitType                      = "Gauss2DWeight";
   // initWeightsFile                     was set to (NULL);
   aspect                              = 1;
   sigma                               = 5.5;
   rMax                                = 7.5;
   rMin                                = 0.5;
   strength                            = 1;
   updateGSynFromPostPerspective       = false;
   pvpatchAccumulateType               = "convolve";
   writeStep                           = -1;
   writeCompressedCheckpoints          = false;
   selfFlag                            = false;
   nxp                                 = 11;
   nyp                                 = 11;
   nfp                                 = 1;
   shrinkPatches                       = false;
   normalizeMethod                     = "normalizeSum";
   normalizeArborsIndividually         = false;
   normalizeOnInitialize               = true;
   normalizeOnWeightUpdate             = true;
   rMinX                               = 0;
   rMinY                               = 0;
   nonnegativeConstraintFlag           = false;
   normalize_cutoff                    = 0;
   normalizeFromPostPerspective        = true;
   minSumTolerated                     = 0;
};

// Right eye connections

KernelConn "RightImageToRightBipolarCenter" = {
    #include "LeftImageToLeftBipolarCenter";
    @preLayerName = "RightImage";
    @postLayerName = "RightBipolar";
};

KernelConn "RightBipolarToRightGanglionCenter" = {
    #include "LeftBipolarToLeftGanglionCenter";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};

KernelConn "RightBipolarToRightGanglionSurround" = {
    #include "LeftBipolarToLeftGanglionSurround";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};
