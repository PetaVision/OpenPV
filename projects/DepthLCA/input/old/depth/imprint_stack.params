// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    numSteps = 200000000;
    progressStep = 500;
    outputPath = "/nh/compneuro/Data/Depth/LCA/depth_imprint_stack";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/depth_imprint_stack/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/depth_imprint_stack/Checkpoints";
    checkpointWriteStepInterval = 2000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/newDepth/image_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 400;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftBipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 1;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

ANNLayer "LeftGanglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    // 
    phase = 2;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

RescaleLayer "LeftRescale" = {
    restart                         = false;
    originalLayerName               = "LeftGanglion";
    nxScale                         = 1; 
    nyScale                         = 1; 
    nf                              = 1;
    mirrorBCflag                    = true;
    //
    writeStep                       = 400;
    initialWriteTime                = 400;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 4;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

ANNErrorLayer "LeftError" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/LeftError1_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .4; //Normal is .2
    //
    phase = 5;  
};

// for visualization only, makes no output
ANNLayer "LeftRecon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 401.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 2; //Less than v1 phase
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
};

//
// Left depth eye layers
//

Movie "LeftDepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/newDepth/depth_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 400;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftDepthDownsample" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftDepthImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
    triggerFlag = true;
    triggerLayerName = "LeftDepthImage";
};

BinningLayer "LeftDepthBin" = {
    restart = 0;
    nxScale = .125; 
    nyScale = .125;
    nf = 32; 
    phase = 2;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 2;
    delay = 0;
    originalLayerName = "LeftDepthDownsample";

    triggerFlag = true;
    triggerLayerName = "LeftDepthImage";
};

//Need a buffer layer since binning layer does not have a v
ANNLayer "LeftDepthBuffer" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = -1;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 3;  
    triggerFlag = true;
    triggerLayerName = "LeftDepthImage";
};

RescaleLayer "LeftDepthRescale" = {
    restart                         = false;
    originalLayerName               = "LeftDepthBuffer";
    nxScale                         = .125; 
    nyScale                         = .125; 
    nf                              = 32;
    mirrorBCflag                    = true;
    //
    writeStep                       = 400;
    initialWriteTime                = 400;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 4;

    triggerFlag = true;
    triggerLayerName = "LeftDepthImage";
};

LabelErrorLayer "LeftDepthError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = -1;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/LeftDepthError_V.pvp";
    //
    VThresh = 0.001;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .06666; //Normal is .2
    isBinary = 0; //Depth isn't binary label
    //
    phase = 5;  
};

ANNLayer "LeftDepthRecon" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 400.0;
    initialWriteTime = 401.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftDepthImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; 
    //
    triggerFlag = true;
    triggerLayerName = "LeftDepthImage";
};

//
// Right eye layers
//

Movie "RightImage" = {
    #include "LeftImage";
    @imageListPath = "/nh/compneuro/Data/newDepth/image_03.txt";
};

ANNLayer "RightBipolar" = {
    #include "LeftBipolar";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion" = {
    #include "LeftGanglion";
    @triggerLayerName = "RightImage";
};

RescaleLayer "RightRescale" = {
    #include "LeftRescale";
    @originalLayerName = "RightGanglion";
    @triggerLayerName = "RightImage";
};

ANNErrorLayer "RightError" = {
    #include "LeftError";
    //@InitVType = "ZeroV";
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/RightError1_V.pvp";
};

// for visualization only, makes no output
ANNLayer "RightRecon" = {
    #include "LeftRecon";
    @triggerLayerName = "RightImage";
};

//
// Right depth eye layers
//

Movie "RightDepthImage" = {
    #include "LeftDepthImage";
    @imageListPath = "/nh/compneuro/Data/newDepth/depth_03.txt";
};

ANNLayer "RightDepthDownsample" = {
    #include "LeftDepthDownsample";
    @triggerLayerName = "RightDepthImage";
};

BinningLayer "RightDepthBin" = {
   #include "LeftDepthBin";
   @originalLayerName = "RightDepthDownsample";
   @triggerLayerName = "RightDepthImage";
};

ANNLayer "RightDepthBuffer" = {
   #include "LeftDepthBuffer";
   @triggerLayerName = "RightDepthImage";
};

RescaleLayer "RightDepthRescale" = {
   #include "LeftDepthRescale";
   @originalLayerName = "RightDepthBuffer";
   @triggerLayerName = "RightDepthImage";
};

LabelErrorLayer "RightDepthError" = {
    #include "LeftDepthError";
    //@InitVType = "ZeroV";
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/RightDepthError_V.pvp";
};

ANNLayer "RightDepthRecon" = {
    #include "LeftDepthRecon";
    @triggerLayerName = "RightDepthImage";
};

//Position layers
Image "Position" = {
    restart = 0;  // make only a certain layer restart
    nxScale = 1;  
    nyScale = 1; 
    imagePath = "/nh/compneuro/Data/newDepth/pos.pvp";
    nf = 5; 
    writeStep = -1;  //-1 means doesn't write for log
    writeSparseActivity = false;
    mirrorBCflag = true;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    phase = 0;
};

ANNLayer "PosDownsample" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    writeStep = 400;
    initialWriteTime = 400.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 1;  

    triggerFlag = true;
    triggerLayerName = "Position";
};

RescaleLayer "PosRescale" = {
    restart                         = false;
    originalLayerName               = "PosDownsample";
    nxScale                         = .125; 
    nyScale                         = .125; 
    nf                              = 5;
    mirrorBCflag                    = true;
    //
    writeStep                       = 400;
    initialWriteTime                = 400;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 4;

    triggerFlag = true;
    triggerLayerName = "Position";
};

LabelErrorLayer "PosError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    writeStep = -1;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/PosError_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    errScale = .06666; //Normal is .2
    isBinary = 0;
    //
    phase = 5;  
};


// for visualization only, makes no output
ANNLayer "PosRecon" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    writeStep = 400.0;
    initialWriteTime = 401.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase
    //
    triggerFlag = true;
    //Need to trigger off a movie, not the image layer
    triggerLayerName = "LeftImage";
};

// binoclular layers

HyPerLCALayer "BinocularV1_S2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 16; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .15; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.07; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.07; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "BinocularV1_S4" = {
    #include "BinocularV1_S2";
    @nxScale = .25;
    @nyScale = .25;
    @nf = 64;
    @VThresh = .06;
    @VWidth  = .06;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2_V.pvp";
};

HyPerLCALayer "BinocularV1_S8" = {
    #include "BinocularV1_S2";
    @nxScale = .125;
    @nyScale = .125;
    @nf = 256;
    @VThresh = .05;
    @VWidth  = .05;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2_V.pvp";
};

// connections

// Left eye connections

KernelConn "LeftImageToLeftBipolarCenter" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftBipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglionCenter" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglionSurround" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftRescaleToLeftError" = {
    preLayerName = "LeftRescale";
    postLayerName = "LeftError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    //////////////////////
    //TODO What to do here????
    //////////////////////
    weightInit = .007353;  // 1/sqrt(136*136);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

// Left depth connections

KernelConn "LeftDepthMovieToLeftDepthDownsample" = {
    preLayerName = "LeftDepthImage";
    postLayerName = "LeftDepthDownsample";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

IdentConn "LeftDepthBinToLeftDepthBuffer" = {
    preLayerName = "LeftDepthBin";
    postLayerName = "LeftDepthBuffer";

    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "LeftDepthRescaleToLeftDepthError" = {
    preLayerName = "LeftDepthRescale";
    postLayerName = "LeftDepthError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .17677;  // 1/sqrt(1*1*32);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


// Right eye connections

KernelConn "RightImageToRightBipolarCenter" = {
    #include "LeftImageToLeftBipolarCenter";
    @preLayerName = "RightImage";
    @postLayerName = "RightBipolar";
};

KernelConn "RightBipolarToRightGanglionCenter" = {
    #include "LeftBipolarToLeftGanglionCenter";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};

KernelConn "RightBipolarToRightGanglionSurround" = {
    #include "LeftBipolarToLeftGanglionSurround";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};

KernelConn "RightRescaleToRightError" = {
    #include "LeftRescaleToLeftError";
    @preLayerName = "RightRescale";
    @postLayerName = "RightError";
};

//Right depth Connections

KernelConn "RightDepthMovieToRightDepthDownsample" = {
    #include "LeftDepthMovieToLeftDepthDownsample";
    @preLayerName = "RightDepthImage";
    @postLayerName = "RightDepthDownsample";
};

IdentConn "RightDepthBinToRightDepthBuffer" = {
   #include "LeftDepthBinToLeftDepthBuffer";
   @preLayerName = "RightDepthBin";
   @postLayerName = "RightDepthBuffer";
};

KernelConn "RightDepthRescaleToRightDepthError" = {
    #include "LeftDepthRescaleToLeftDepthError";
    @preLayerName = "RightDepthRescale";
    @postLayerName = "RightDepthError";
};

//Pos connections

KernelConn "PositionToPosDownsample" = {
    preLayerName = "Position";
    postLayerName = "PosDownsample";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

KernelConn "PosRescaleToPosError" = {
    preLayerName = "PosRescale";
    postLayerName = "PosError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .44721;  // 1/sqrt(1*1*5);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


// binocular connections

ImprintConn "BinocularV1_S2ToLeftError" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "LeftError";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1ToLeftError1_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 40000; //Imprint if element has not been active in 100 frames
};

ImprintConn "BinocularV1_S4ToLeftError" = {
    #include "BinocularV1_S2ToLeftError";
    @preLayerName = "BinocularV1_S4";
    @nxp = 68;
    @nyp = 68;
    //
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToLeftError2_W.pvp";
};

ImprintConn "BinocularV1_S8ToLeftError" = {
    #include "BinocularV1_S2ToLeftError";
    @preLayerName = "BinocularV1_S8";
    @nxp = 136;
    @nyp = 136;
    //
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToLeftError2_W.pvp";
};

TransposeConn "LeftErrorToBinocularV1_S2" = {
    preLayerName = "LeftError";
    postLayerName = "BinocularV1_S2";
    channelCode = 0;
    originalConnName = "BinocularV1_S2ToLeftError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftErrorToBinocularV1_S4" = {
    #include "LeftErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToLeftError";
};

TransposeConn "LeftErrorToBinocularV1_S8" = {
    #include "LeftErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToLeftError";
};

CloneKernelConn "BinocularV1_S2ToLeftRecon" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "LeftRecon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1_S2ToLeftError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1_S4ToLeftRecon" = {
    #include "BinocularV1_S2ToLeftRecon";
    @preLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToLeftError";
};

CloneKernelConn "BinocularV1_S8ToLeftRecon" = {
    #include "BinocularV1_S2ToLeftRecon";
    @preLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToLeftError";
};

ImprintConn "BinocularV1_S2ToRightError" = {
    #include "BinocularV1_S2ToLeftError";
    @postLayerName = "RightError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1ToRightError1_W.pvp";
};

ImprintConn "BinocularV1_S4ToRightError" = {
    #include "BinocularV1_S4ToLeftError";
    @postLayerName = "RightError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToRightError2_W.pvp";
};

ImprintConn "BinocularV1_S8ToRightError" = {
    #include "BinocularV1_S8ToLeftError";
    @postLayerName = "RightError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToRightError2_W.pvp";
};

TransposeConn "RightErrorToBinocularV1_S2" = {
    #include "LeftErrorToBinocularV1_S2";
    @preLayerName = "RightError";
    @originalConnName = "BinocularV1_S2ToRightError";
};

TransposeConn "RightErrorToBinocularV1_S4" = {
    #include "LeftErrorToBinocularV1_S4";
    @preLayerName = "RightError";
    @originalConnName = "BinocularV1_S4ToRightError";
};

TransposeConn "RightErrorToBinocularV1_S8" = {
    #include "LeftErrorToBinocularV1_S8";
    @preLayerName = "RightError";
    @originalConnName = "BinocularV1_S8ToRightError";
};

CloneKernelConn "BinocularV1_S2ToRightRecon" = {
    #include "BinocularV1_S2ToLeftRecon";
    @postLayerName = "RightRecon";
    @originalConnName = "BinocularV1_S2ToRightError";
};

CloneKernelConn "BinocularV1_S4ToRightRecon" = {
    #include "BinocularV1_S4ToLeftRecon";
    @postLayerName = "RightRecon";
    @originalConnName = "BinocularV1_S4ToRightError";
};

CloneKernelConn "BinocularV1_S8ToRightRecon" = {
    #include "BinocularV1_S8ToLeftRecon";
    @postLayerName = "RightRecon";
    @originalConnName = "BinocularV1_S8ToRightError";
};

// Depth Binocular Connections

ImprintConn "BinocularV1_S2ToLeftDepthError" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "LeftDepthError";
    channelCode = 1;
    nxp = 1; 
    nyp = 1; 
    nfp = 32;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1ToLeftDepthError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = 0;
    //
    strength = 1; 
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    shrinkPatches = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 40000; //Imprint if element has not been active in 100 frames
};

ImprintConn "BinocularV1_S4ToLeftDepthError" = {
    #include "BinocularV1_S2ToLeftDepthError";
    @preLayerName = "BinocularV1_S4";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToLeftDepthError_W.pvp";
};

ImprintConn "BinocularV1_S8ToLeftDepthError" = {
    #include "BinocularV1_S2ToLeftDepthError";
    @preLayerName = "BinocularV1_S8";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToLeftDepthError_W.pvp";
};

TransposeConn "LeftDepthErrorToBinocularV1_S2" = {
    preLayerName = "LeftDepthError";
    postLayerName = "BinocularV1_S2";
    channelCode = 0;
    originalConnName = "BinocularV1_S2ToLeftDepthError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    useWindowPost = true;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "LeftDepthErrorToBinocularV1_S4" = {
    #include "LeftDepthErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToLeftDepthError";
};

TransposeConn "LeftDepthErrorToBinocularV1_S8" = {
    #include "LeftDepthErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToLeftDepthError";
};

CloneKernelConn "BinocularV1_S2ToLeftDepthRecon" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "LeftDepthRecon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1_S2ToLeftDepthError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1_S4ToLeftDepthRecon" = {
    #include "BinocularV1_S2ToLeftDepthRecon";
    @preLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToLeftDepthError";
};

CloneKernelConn "BinocularV1_S8ToLeftDepthRecon" = {
    #include "BinocularV1_S2ToLeftDepthRecon";
    @preLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToLeftDepthError";
};

ImprintConn "BinocularV1_S2ToRightDepthError" = {
    #include "BinocularV1_S2ToLeftDepthError";
    @postLayerName = "RightDepthError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1ToRightDepthError_W.pvp";
};

ImprintConn "BinocularV1_S4ToRightDepthError" = {
    #include "BinocularV1_S4ToLeftDepthError";
    @postLayerName = "RightDepthError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToRightDepthError_W.pvp";
};

ImprintConn "BinocularV1_S8ToRightDepthError" = {
    #include "BinocularV1_S8ToLeftDepthError";
    @postLayerName = "RightDepthError";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToRightDepthError_W.pvp";
};

TransposeConn "RightDepthErrorToBinocularV1_S2" = {
    #include "LeftDepthErrorToBinocularV1_S2";
    @preLayerName = "RightDepthError";
    @originalConnName = "BinocularV1_S2ToRightDepthError";
};

TransposeConn "RightDepthErrorToBinocularV1_S4" = {
    #include "LeftDepthErrorToBinocularV1_S4";
    @preLayerName = "RightDepthError";
    @originalConnName = "BinocularV1_S4ToRightDepthError";
};

TransposeConn "RightDepthErrorToBinocularV1_S8" = {
    #include "LeftDepthErrorToBinocularV1_S8";
    @preLayerName = "RightDepthError";
    @originalConnName = "BinocularV1_S8ToRightDepthError";
};

CloneKernelConn "BinocularV1_S2ToRightDepthRecon" = {
    #include "BinocularV1_S2ToLeftDepthRecon";
    @postLayerName = "RightDepthRecon";
    @originalConnName = "BinocularV1_S2ToRightDepthError";
};

CloneKernelConn "BinocularV1_S4ToRightDepthRecon" = {
    #include "BinocularV1_S4ToLeftDepthRecon";
    @postLayerName = "RightDepthRecon";
    @originalConnName = "BinocularV1_S4ToRightDepthError";
};

CloneKernelConn "BinocularV1_S8ToRightDepthRecon" = {
    #include "BinocularV1_S8ToLeftDepthRecon";
    @postLayerName = "RightDepthRecon";
    @originalConnName = "BinocularV1_S8ToRightDepthError";
};

//Position connections

ImprintConn "BinocularV1_S2ToPosError" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "PosError";
    channelCode = 1;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S1ToPosError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = 0;
    //
    strength = 1;
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 400.0;
    initialWeightUpdateTime = 399.0;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 40000; //Imprint if element has not been active in 100 frames
};


TransposeConn "PosErrorToBinocularV1_S2" = {
    preLayerName = "PosError";
    postLayerName = "BinocularV1_S2";
    channelCode = 0;
    originalConnName = "BinocularV1_S2ToPosError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

CloneKernelConn "BinocularV1_S2ToPosRecon" = {
    preLayerName = "BinocularV1_S2";
    postLayerName = "PosRecon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1_S2ToPosError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

ImprintConn "BinocularV1_S4ToPosError" = {
    #include "BinocularV1_S2ToPosError";
    @preLayerName = "BinocularV1_S4";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToPosError_W.pvp";
};

TransposeConn "PosErrorToBinocularV1_S4" = {
    #include "PosErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToPosError";
};

CloneKernelConn "BinocularV1_S4ToPosRecon" = {
    #include "BinocularV1_S2ToPosRecon";
    @preLayerName = "BinocularV1_S4";
    @originalConnName = "BinocularV1_S4ToPosError";
};

ImprintConn "BinocularV1_S8ToPosError" = {
    #include "BinocularV1_S2ToPosError";
    @preLayerName = "BinocularV1_S8";
    //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/newErrSavedCheckpoint/BinocularV1S2ToPosError_W.pvp";
};

TransposeConn "PosErrorToBinocularV1_S8" = {
    #include "PosErrorToBinocularV1_S2";
    @postLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToPosError";
};

CloneKernelConn "BinocularV1_S8ToPosRecon" = {
    #include "BinocularV1_S2ToPosRecon";
    @preLayerName = "BinocularV1_S8";
    @originalConnName = "BinocularV1_S8ToPosError";
};

// Probes
//
//StatsProbe "LeftGanglionStatsFile" = {
//    targetLayer = "LeftGanglion";
//    probeOutputFile = "LeftGanglion_Stats.txt";
//};
//
//StatsProbe "LeftRescaleStatsFile" = {
//    targetLayer = "LeftRescale";
//    probeOutputFile = "LeftRescale_Stats.txt";
//};

StatsProbe "LeftErrorStatsFile" = {
    targetLayer = "LeftError";
    probeOutputFile = "LeftError_Stats.txt";
};

//StatsProbe "LeftReconStatsFile" = {
//    targetLayer = "LeftRecon";
//    probeOutputFile = "LeftRecon_Stats.txt";
//};
//
//StatsProbe "LeftDepthDownsampleStatsFile" = {
//   targetLayer = "LeftDepthDownsample";
//   probeOutputFile = "LeftDepthDownsample_Stats.txt";
//};
//
//StatsProbe "LeftDepthBinStatsFile" = {
//   targetLayer = "LeftDepthBin";
//   probeOutputFile = "LeftDepthBin_Stats.txt";
//};
//
//StatsProbe "LeftDepthRescaleStatsFile" = {
//   targetLayer = "LeftDepthRescale";
//   probeOutputFile = "LeftDepthRescale_Stats.txt";
//};
//
//StatsProbe "LeftDepthBufferStatsFile" = {
//   targetLayer = "LeftDepthBuffer";
//   probeOutputFile = "LeftDepthBuffer_Stats.txt";
//};

StatsProbe "LeftDepthErrorStatsFile" = {
    targetLayer = "LeftDepthError";
    probeOutputFile = "LeftDepthError_Stats.txt";
};

//StatsProbe "LeftDepthReconStatsFile" = {
//    targetLayer = "LeftDepthRecon";
//    probeOutputFile = "LeftDepthRecon_Stats.txt";
//};
//
//StatsProbe "RightGanglionStatsFile" = {
//    targetLayer = "RightGanglion";
//    probeOutputFile = "RightGanglion_Stats.txt";
//};
//
//StatsProbe "RightRescaleStatsFile" = {
//    targetLayer = "RightRescale";
//    probeOutputFile = "RightRescale_Stats.txt";
//};

StatsProbe "RightErrorStatsFile" = {
    targetLayer = "RightError";
    probeOutputFile = "RightError_Stats.txt";
};

//StatsProbe "RightReconStatsFile" = {
//    targetLayer = "RightRecon";
//    probeOutputFile = "RightRecon_Stats.txt";
//};
//
//StatsProbe "RightDepthDownsampleStatsFile" = {
//   targetLayer = "RightDepthDownsample";
//   probeOutputFile = "RightDepthDownsample_Stats.txt";
//};
//
//StatsProbe "RightDepthBinStatsFile" = {
//   targetLayer = "RightDepthBin";
//   probeOutputFile = "RightDepthBin_Stats.txt";
//};
//
//StatsProbe "RightDepthRescaleStatsFile" = {
//   targetLayer = "RightDepthRescale";
//   probeOutputFile = "RightDepthRescale_Stats.txt";
//};
//
//StatsProbe "RightDepthBufferStatsFile" = {
//   targetLayer = "RightDepthBuffer";
//   probeOutputFile = "RightDepthBuffer_Stats.txt";
//};

StatsProbe "RightDepthErrorStatsFile" = {
    targetLayer = "RightDepthError";
    probeOutputFile = "RightDepthError_Stats.txt";
};

//StatsProbe "RightDepthReconStatsFile" = {
//    targetLayer = "RightDepthRecon";
//    probeOutputFile = "RightDepthRecon_Stats.txt";
//};

StatsProbe "BinocularV1_S2StatsFile" = {
    targetLayer = "BinocularV1_S2";
    probeOutputFile = "BinocularV1_S2_Stats.txt";
};

StatsProbe "BinocularV1_S4StatsFile" = {
    targetLayer = "BinocularV1_S4";
    probeOutputFile = "BinocularV1_S4_Stats.txt";
};

StatsProbe "BinocularV1_S8StatsFile" = {
    targetLayer = "BinocularV1_S8";
    probeOutputFile = "BinocularV1_S8_Stats.txt";
};

//StatsProbe "PosDownsampleStatsFile" = {
//    targetLayer = "PosDownsample";
//    probeOutputFile = "PosDownsample_Stats.txt";
//};
//
//StatsProbe "PosRescaleStatsFile" = {
//    targetLayer = "PosRescale";
//    probeOutputFile = "PosRescale_Stats.txt";
//};

StatsProbe "PosErrorStatsFile" = {
    targetLayer = "PosError";
    probeOutputFile = "PosError_Stats.txt";
};

//StatsProbe "PosReconStatsFile" = {
//    targetLayer = "PosRecon";
//    probeOutputFile = "PosRecon_Stats.txt";
//};

