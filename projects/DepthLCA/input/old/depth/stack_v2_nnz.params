// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime= 200000000;
    progressStep = 100;
    outputPath = "/nh/compneuro/Data/Depth/LCA/stack_v2_nnz/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/stack_v2_nnz/Checkpoints";
    checkpointWriteStepInterval = 2000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/Depth/raw/image_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 400;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftBipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 1;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

ANNLayer "LeftGanglion" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    // 
    phase = 2;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

RescaleLayer "LeftRescale" = {
    restart                         = false;
    originalLayerName               = "LeftGanglion";
    nxScale                         = 1; 
    nyScale                         = 1; 
    nf                              = 1;
    mirrorBCflag                    = true;
    //
    writeStep                       = 400;
    initialWriteTime                = 400;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 4;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

ANNErrorLayer "LeftError" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/LeftError_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .5; //Normal is .2
    //
    phase = 5;  
};

// for visualization only, makes no output
ANNLayer "LeftReconS2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7;
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "LeftReconS4" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7;
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "LeftReconS8" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7;
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "LeftReconAll" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7;
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

//
// Right eye layers
//

Movie "RightImage" = {
    #include "LeftImage";
    @imageListPath = "/nh/compneuro/Data/Depth/raw/image_03.txt";
};

ANNLayer "RightBipolar" = {
    #include "LeftBipolar";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion" = {
    #include "LeftGanglion";
    @triggerLayerName = "RightImage";
};

RescaleLayer "RightRescale" = {
    #include "LeftRescale";
    @originalLayerName = "RightGanglion";
    @triggerLayerName = "RightImage";
};

ANNErrorLayer "RightError" = {
    #include "LeftError";
    //@InitVType = "ZeroV";
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/RightError_V.pvp";
};

// for visualization only, makes no output
ANNLayer "RightReconS2" = {
    #include "LeftReconAll";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightReconS4" = {
    #include "LeftReconAll";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightReconS8" = {
    #include "LeftReconAll";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightReconAll" = {
    #include "LeftReconAll";
    @triggerLayerName = "RightImage";
};

//
// Right depth eye layers
//

// binoclular layers

HyPerLCALayer "V1S2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 16; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .03; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S2_V.pvp";
    // 
    timeConstantTau = 500.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    dVThresh = .0001;
    VThresh = 0.025; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.025; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "V1S4" = {
    #include "V1S2";
    @nxScale = .25;
    @nyScale = .25;
    @nf = 64;
    //@VThresh = .04;
    //@VWidth  = .04;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S4_V.pvp";
};

HyPerLCALayer "V1S8" = {
    #include "V1S2";
    @nxScale = .125;
    @nyScale = .125;
    @nf = 256;
    //@VThresh = .04;
    //@VWidth  = .04;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S8_V.pvp";
};

//Stats probe for delta sparsity
SparsityLayerProbe "V1S2SparsityProbe" = {
    targetLayer = "V1S2";
    probeOutputFile = "V1S2Sparsity_Stats.txt";
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    initSparsityVal = .015; //This value is the target sparse value
    windowSize = 40000;
    calcNNZ = true;
};

SparsityLayerProbe "V1S4SparsityProbe" = {
    #include "V1S2SparsityProbe";
    @targetLayer = "V1S4";
    @probeOutputFile = "V1S4Sparsity_Stats.txt";
};

SparsityLayerProbe "V1S8SparsityProbe" = {
    #include "V1S2SparsityProbe";
    @targetLayer = "V1S8";
    @probeOutputFile = "V1S8Sparsity_Stats.txt";
};

//Depth layers

Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/Depth/raw/depth_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 400;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "DepthDownsample" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

BinningLayer "DepthBin" = {
    restart = 0;
    nxScale = .125; 
    nyScale = .125;
    nf = 32; 
    phase = 2;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 2;
    delay = 0;
    originalLayerName = "DepthDownsample";
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

//Need a buffer layer since binning layer does not have a v
ANNLayer "DepthBuffer" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = -1;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 3;  
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

RescaleLayer "DepthRescale" = {
    restart                         = false;
    originalLayerName               = "DepthBuffer";
    nxScale                         = .125; 
    nyScale                         = .125; 
    nf                              = 32;
    mirrorBCflag                    = true;
    writeStep                       = 400;
    initialWriteTime                = 400;
    writeSparseActivity             = false;
    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    valueBC = 0;
    phase                           = 4;
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

LabelErrorLayer "DepthError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 400;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/DepthError_V.pvp";
    VThresh = 0.001;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    errScale = .01; //Normal is .2
    isBinary = 0; //Depth isn't binary label
    phase = 5;  
};

ANNLayer "DepthReconS2" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 7; 
    //
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 1;
};

ANNLayer "DepthReconS4" = {
   #include "DepthReconS2";
};

ANNLayer "DepthReconS8" = {
   #include "DepthReconS2";
};

ANNLayer "DepthReconAll" = {
   #include "DepthReconS2";
};

ANNErrorLayer "V1S2Error" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 16;
    writeStep = 400;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S2Error_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .99; //Normal is .2
    //
    phase = 5;  
};

ANNErrorLayer "V1S4Error" = {
   #include "V1S2Error";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 64;
   //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S4Error_V.pvp";
};

ANNErrorLayer "V1S8Error" = {
   #include "V1S2Error";
   @nxScale = .125;
   @nyScale = .125;
   @nf = 256;
  // @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S8Error_V.pvp";
};

ANNLayer "V1S2Recon" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 16;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 7; 
    //
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "V1S4Recon" = {
   #include "V1S2Recon";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 64;
};

ANNLayer "V1S8Recon" = {
   #include "V1S2Recon";
   @nxScale = .125;
   @nyScale = .125;
   @nf = 256;
};

ANNLayer "V2V1S2LeftRecon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 8; 
    //
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "V2V1S4LeftRecon" = {
   #include "V2V1S2LeftRecon";
};

ANNLayer "V2V1S8LeftRecon" = {
   #include "V2V1S2LeftRecon";
};

ANNLayer "V2V1AllLeftRecon" = {
   #include "V2V1S2LeftRecon";
};

ANNLayer "V2V1S2RightRecon" = {
   #include "V2V1S2LeftRecon";
   @triggerLayerName = "RightImage";
};

ANNLayer "V2V1S4RightRecon" = {
   #include "V2V1S4LeftRecon";
   @triggerLayerName = "RightImage";
};

ANNLayer "V2V1S8RightRecon" = {
   #include "V2V1S8LeftRecon";
   @triggerLayerName = "RightImage";
};

ANNLayer "V2V1AllRightRecon" = {
   #include "V2V1AllLeftRecon";
   @triggerLayerName = "RightImage";
};

HyPerLCALayer "V2S2" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 16; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 400.0;
    initialWriteTime = 400.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .03; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S2_V.pvp";
    // 
    timeConstantTau = 500.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    dVThresh = .0001;
    VThresh = 0.025; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.025; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "V2S4" = {
    #include "V2S2";
    @nxScale = .125;
    @nyScale = .125;
    @nf = 64;
    @VThresh = 0.020;
    @VWidth = 0.020;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S4_V.pvp";
};

HyPerLCALayer "V2S8" = {
    #include "V2S2";
    @nxScale = .125;
    @nyScale = .125;
    @nf = 256;
    @VThresh = 0.015;
    @VWidth = 0.015;
    //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S8_V.pvp";
};
//Stats probe for delta sparsity
SparsityLayerProbe "V2S2SparsityProbe" = {
    targetLayer = "V2S2";
    probeOutputFile = "V2S2Sparsity_Stats.txt";
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    initSparsityVal = .015; //This value is the target sparse value
    windowSize = 40000;
    calcNNZ = true;
};

SparsityLayerProbe "V2S4SparsityProbe" = {
    #include "V2S2SparsityProbe";
    @targetLayer = "V2S4";
    @probeOutputFile = "V2S4Sparsity_Stats.txt";
};

SparsityLayerProbe "V2S8SparsityProbe" = {
    #include "V2S2SparsityProbe";
    @targetLayer = "V2S8";
    @probeOutputFile = "V2S8Sparsity_Stats.txt";
};

// connections

// Left eye connections

KernelConn "LeftImageToLeftBipolarCenter" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftBipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglionCenter" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglionSurround" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftRescaleToLeftError" = {
    preLayerName = "LeftRescale";
    postLayerName = "LeftError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    //////////////////////
    //TODO What to do here????
    //////////////////////
    weightInit = .0294;  // 1/sqrt(34*34);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

// Right eye connections

KernelConn "RightImageToRightBipolarCenter" = {
    #include "LeftImageToLeftBipolarCenter";
    @preLayerName = "RightImage";
    @postLayerName = "RightBipolar";
};

KernelConn "RightBipolarToRightGanglionCenter" = {
    #include "LeftBipolarToLeftGanglionCenter";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};

KernelConn "RightBipolarToRightGanglionSurround" = {
    #include "LeftBipolarToLeftGanglionSurround";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion";
};

KernelConn "RightRescaleToRightError" = {
    #include "LeftRescaleToLeftError";
    @preLayerName = "RightRescale";
    @postLayerName = "RightError";
};

// binocular connections
//Left binocular connections

ImprintConn "V1S2ToLeftError" = {
    preLayerName = "V1S2";
    postLayerName = "LeftError";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S2ToLeftError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 100.0;
    initialWeightUpdateTime = 99.0;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 100000; //Imprint if element has not been active in 1000 frames
};

ImprintConn "V1S4ToLeftError" = {
    #include "V1S2ToLeftError";
    @preLayerName = "V1S4";
    @nxp = 68;
    @nyp = 68;
    //
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S4ToLeftError_W.pvp";
};

ImprintConn "V1S8ToLeftError" = {
    #include "V1S2ToLeftError";
    @preLayerName = "V1S8";
    @nxp = 136;
    @nyp = 136;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S8ToLeftError_W.pvp";
};

TransposeConn "LeftErrorToV1S2" = {
    preLayerName = "LeftError";
    postLayerName = "V1S2";
    channelCode = 0;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftErrorToV1S4" = {
    #include "LeftErrorToV1S2";
    @postLayerName = "V1S4";
    @originalConnName = "V1S4ToLeftError";
};

TransposeConn "LeftErrorToV1S8" = {
    #include "LeftErrorToV1S2";
    @postLayerName = "V1S8";
    @originalConnName = "V1S8ToLeftError";
};

CloneKernelConn "V1S2ToLeftReconS2" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconS2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ToLeftReconS4" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S4";
    @postLayerName = "LeftReconS4";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ToLeftReconS8" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S8";
    @postLayerName = "LeftReconS8";
    @originalConnName = "V1S8ToLeftError";
};

CloneKernelConn "V1S2ToLeftReconAll" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconAll";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S4";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S8";
    @originalConnName = "V1S8ToLeftError";
};

//V2's recon from v1 weights
CloneKernelConn "V1S2ReconToV2V1S2LeftRecon" = {
   preLayerName = "V1S2Recon";
   postLayerName = "V2V1S2LeftRecon";
   channelCode = 0;
   writeStep = -1;
   originalConnName = "V1S2ToLeftError";
   selfFlag = false;
   delay = 0;
   preActivityIsNotRate = false;
   useWindowPost = false;
   updateGSynFromPostPerspective = false;
   pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ReconToV2V1S4LeftRecon" = {
    #include "V1S2ReconToV2V1S2LeftRecon";
    @preLayerName = "V1S4Recon";
    @postLayerName = "V2V1S4LeftRecon";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ReconToV2V1S8LeftRecon" = {
    #include "V1S2ReconToV2V1S2LeftRecon";
    @preLayerName = "V1S8Recon";
    @postLayerName = "V2V1S8LeftRecon";
    @originalConnName = "V1S8ToLeftError";
};

//Connection to all recons
CloneKernelConn "V1S2ReconToV2V1AllLeftRecon" = {
    #include "V1S2ReconToV2V1S2LeftRecon";
    @preLayerName = "V1S2Recon";
    @postLayerName = "V2V1AllLeftRecon";
    @originalConnName = "V1S2ToLeftError";
};

CloneKernelConn "V1S4ReconToV2V1AllLeftRecon" = {
    #include "V1S2ReconToV2V1S2LeftRecon";
    @preLayerName = "V1S4Recon";
    @postLayerName = "V2V1AllLeftRecon";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ReconToV2V1AllLeftRecon" = {
    #include "V1S2ReconToV2V1S2LeftRecon";
    @preLayerName = "V1S8Recon";
    @postLayerName = "V2V1AllLeftRecon";
    @originalConnName = "V1S8ToLeftError";
};

//Right binocular connections
ImprintConn "V1S2ToRightError" = {
    #include "V1S2ToLeftError";
    @postLayerName = "RightError";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S2ToRightError_W.pvp";
};

ImprintConn "V1S4ToRightError" = {
    #include "V1S4ToLeftError";
    @postLayerName = "RightError";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S4ToRightError_W.pvp";
};

ImprintConn "V1S8ToRightError" = {
    #include "V1S8ToLeftError";
    @postLayerName = "RightError";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V1S8ToRightError_W.pvp";
};

TransposeConn "RightErrorToV1S2" = {
    #include "LeftErrorToV1S2";
    @preLayerName = "RightError";
    @originalConnName = "V1S2ToRightError";
};

TransposeConn "RightErrorToV1S4" = {
    #include "LeftErrorToV1S4";
    @preLayerName = "RightError";
    @originalConnName = "V1S4ToRightError";
};

TransposeConn "RightErrorToV1S8" = {
    #include "LeftErrorToV1S8";
    @preLayerName = "RightError";
    @originalConnName = "V1S8ToRightError";
};

CloneKernelConn "V1S2ToRightReconS2" = {
    #include "V1S2ToLeftReconS2";
    @postLayerName = "RightReconS2";
    @originalConnName = "V1S2ToRightError";
};

CloneKernelConn "V1S4ToRightReconS4" = {
    #include "V1S4ToLeftReconS4";
    @postLayerName = "RightReconS4";
    @originalConnName = "V1S4ToRightError";
};

CloneKernelConn "V1S8ToRightReconS8" = {
    #include "V1S8ToLeftReconS8";
    @postLayerName = "RightReconS8";
    @originalConnName = "V1S8ToRightError";
};

CloneKernelConn "V1S2ToRightReconAll" = {
    #include "V1S2ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S2ToRightError";
};

CloneKernelConn "V1S4ToRightReconAll" = {
    #include "V1S4ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S4ToRightError";
};

CloneKernelConn "V1S8ToRightReconAll" = {
    #include "V1S8ToLeftReconAll";
    @postLayerName = "RightReconAll";
    @originalConnName = "V1S8ToRightError";
};

//V2's recon from v1 weights
CloneKernelConn "V1S2ReconToV2V1S2RightRecon" = {
   #include "V1S2ReconToV2V1S2LeftRecon";
   @postLayerName = "V2V1S2RightRecon";
   @originalConnName = "V1S2ToRightError";
};

CloneKernelConn "V1S4ReconToV2V1S4RightRecon" = {
    #include "V1S4ReconToV2V1S4LeftRecon";
    @postLayerName = "V2V1S4RightRecon";
    @originalConnName = "V1S4ToRightError";
};

CloneKernelConn "V1S8ReconToV2V1S8RightRecon" = {
    #include "V1S8ReconToV2V1S8LeftRecon";
    @postLayerName = "V2V1S8RightRecon";
    @originalConnName = "V1S8ToRightError";
};

//Connection to all recons
CloneKernelConn "V1S2ReconToV2V1AllRightRecon" = {
    #include "V1S2ReconToV2V1AllLeftRecon";
    @postLayerName = "V2V1AllRightRecon";
    @originalConnName = "V1S2ToRightError";
};

CloneKernelConn "V1S4ReconToV2V1AllRightRecon" = {
    #include "V1S4ReconToV2V1AllLeftRecon";
    @postLayerName = "V2V1AllRightRecon";
    @originalConnName = "V1S4ToRightError";
};

CloneKernelConn "V1S8ReconToV2V1AllRightRecon" = {
    #include "V1S8ReconToV2V1AllLeftRecon";
    @postLayerName = "V2V1AllRightRecon";
    @originalConnName = "V1S8ToRightError";
};

//Depth connections
KernelConn "DepthMovieToDepthDownsample" = {
    preLayerName = "DepthImage";
    postLayerName = "DepthDownsample";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

IdentConn "DepthBinToDepthBuffer" = {
    preLayerName = "DepthBin";
    postLayerName = "DepthBuffer";

    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "DepthRescaleToDepthError" = {
    preLayerName = "DepthRescale";
    postLayerName = "DepthError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .17677;  // 1/sqrt(1*1*32);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

//V1 To Error connections
KernelConn "V1S2ToV1S2Error" = {
    preLayerName = "V1S2";
    postLayerName = "V1S2Error";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 16;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = 1;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

KernelConn "V1S4ToV1S4Error" = {
   #include "V1S2ToV1S2Error";
   @preLayerName = "V1S4";
   @postLayerName = "V1S4Error";
   @nfp = 64;
};

KernelConn "V1S8ToV1S8Error" = {
   #include "V1S2ToV1S2Error";
   @preLayerName = "V1S8";
   @postLayerName = "V1S8Error";
   @nfp = 256;
};

//V2 to Error connections
ImprintConn "V2S2ToV1S2Error" = {
    preLayerName = "V2S2";
    postLayerName = "V1S2Error";
    channelCode = 1;
    nxp = 4; //TODO base this off the scale of v2
    nyp = 4;
    nfp = 16;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S2ToV1S2Error_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    // 
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 100000; //Imprint if element has not been active in 1000 frames
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
    //weightUpdatePeriod = 500.0;
    //initialWeightUpdateTime = 499.0;
};

ImprintConn "V2S4ToV1S4Error" = {
    #include "V2S2ToV1S2Error";
    @preLayerName = "V2S4";
    @postLayerName = "V1S4Error";
    @nxp = 2; //TODO base this off of size of v2
    @nyp = 2;
    @nfp = 64;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S4ToV1S4Error_W.pvp";
};

ImprintConn "V2S8ToV1S8Error" = {
    #include "V2S2ToV1S2Error";
    @preLayerName = "V2S8";
    @postLayerName = "V1S8Error";
    @nxp = 1; //TODO base this off of size of v2
    @nyp = 1;
    @nfp = 256;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S8ToV1S8Error_W.pvp";
};

TransposeConn "V1S2ErrorToV2S2" = {
    preLayerName = "V1S2Error";
    postLayerName = "V2S2";
    channelCode = 0;
    originalConnName = "V2S2ToV1S2Error";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "V1S4ErrorToV2S4" = {
    #include "V1S2ErrorToV2S2"; 
    @preLayerName = "V1S4Error";
    @postLayerName = "V2S4";
    @originalConnName = "V2S4ToV1S4Error";
};

TransposeConn "V1S8ErrorToV2S8" = {
    #include "V1S2ErrorToV2S2"; 
    @preLayerName = "V1S8Error";
    @postLayerName = "V2S8";
    @originalConnName = "V2S8ToV1S8Error";
};

CloneKernelConn "V2S2ToV1S2Recon" = {
    preLayerName = "V2S2";
    postLayerName = "V1S2Recon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V2S2ToV1S2Error";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V2S4ToV1S4Recon" = {
    #include "V2S2ToV1S2Recon";
    @preLayerName = "V2S4";
    @postLayerName = "V1S4Recon";
    @originalConnName = "V2S4ToV1S4Error";
};

CloneKernelConn "V2S8ToV1S8Recon" = {
    #include "V2S2ToV1S2Recon";
    @preLayerName = "V2S8";
    @postLayerName = "V1S8Recon";
    @originalConnName = "V2S8ToV1S8Error";
};

// Depth To V2 Connections
KernelConn "V2S2ToDepthError" = {
    preLayerName = "V2S2";
    postLayerName = "DepthError";
    channelCode = 1;
    nxp = 1; 
    nyp = 1; 
    nfp = 32;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S2ToDepthError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    //
    strength = 1; 
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 400;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    shrinkPatches = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 1;
    //weightUpdatePeriod = 200.0;
    //initialWeightUpdateTime = 199.0;
};

KernelConn "V2S4ToDepthError" = {
    #include "V2S2ToDepthError";
    @preLayerName = "V2S4";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S4ToDepthError_W.pvp";
};

KernelConn "V2S8ToDepthError" = {
    #include "V2S2ToDepthError";
    @preLayerName = "V2S8";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_v2/V2S8ToDepthError_W.pvp";
};

TransposeConn "DepthErrorToV2S2" = {
    preLayerName = "DepthError";
    postLayerName = "V2S2";
    channelCode = 0;
    originalConnName = "V2S2ToDepthError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    useWindowPost = true;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "DepthErrorToV2S4" = {
    #include "DepthErrorToV2S2";
    @postLayerName = "V2S4";
    @originalConnName = "V2S4ToDepthError";
};

TransposeConn "DepthErrorToV2S8" = {
    #include "DepthErrorToV2S2";
    @postLayerName = "V2S8";
    @originalConnName = "V2S8ToDepthError";
};

CloneKernelConn "V2S2ToDepthReconS2" = {
    preLayerName = "V2S2";
    postLayerName = "DepthReconS2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V2S2ToDepthError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V2S4ToDepthReconS4" = {
    #include "V2S2ToDepthReconS2";
    @preLayerName = "V2S4";
    @postLayerName = "DepthReconS4";
    @originalConnName = "V2S4ToDepthError";
};

CloneKernelConn "V2S8ToDepthReconS8" = {
    #include "V2S2ToDepthReconS2";
    @preLayerName = "V2S8";
    @postLayerName = "DepthReconS8";
    @originalConnName = "V2S8ToDepthError";
};

CloneKernelConn "V2S2ToDepthReconAll" = {
    #include "V2S2ToDepthReconS2";
    @preLayerName = "V2S2";
    @postLayerName = "DepthReconAll";
    @originalConnName = "V2S2ToDepthError";
};

CloneKernelConn "V2S4ToDepthReconAll" = {
    #include "V2S2ToDepthReconS2";
    @preLayerName = "V2S4";
    @postLayerName = "DepthReconAll";
    @originalConnName = "V2S4ToDepthError";
};

CloneKernelConn "V2S8ToDepthReconAll" = {
    #include "V2S2ToDepthReconS2";
    @preLayerName = "V2S8";
    @postLayerName = "DepthReconAll";
    @originalConnName = "V2S8ToDepthError";
};


// Probes
//
//StatsProbe "LeftGanglionStatsFile" = {
//    targetLayer = "LeftGanglion";
//    probeOutputFile = "LeftGanglion_Stats.txt";
//};
//
//StatsProbe "LeftRescaleStatsFile" = {
//    targetLayer = "LeftRescale";
//    probeOutputFile = "LeftRescale_Stats.txt";
//};
//
//StatsProbe "LeftErrorStatsFile" = {
//    targetLayer = "LeftError";
//    probeOutputFile = "LeftError_Stats.txt";
//};
//
//StatsProbe "LeftReconStatsFile" = {
//    targetLayer = "LeftRecon";
//    probeOutputFile = "LeftRecon_Stats.txt";
//};
//
//StatsProbe "LeftDepthDownsampleStatsFile" = {
//   targetLayer = "LeftDepthDownsample";
//   probeOutputFile = "LeftDepthDownsample_Stats.txt";
//};
//
//StatsProbe "LeftDepthBinStatsFile" = {
//   targetLayer = "LeftDepthBin";
//   probeOutputFile = "LeftDepthBin_Stats.txt";
//};
//
//StatsProbe "LeftDepthRescaleStatsFile" = {
//   targetLayer = "LeftDepthRescale";
//   probeOutputFile = "LeftDepthRescale_Stats.txt";
//};
//
//StatsProbe "LeftDepthBufferStatsFile" = {
//   targetLayer = "LeftDepthBuffer";
//   probeOutputFile = "LeftDepthBuffer_Stats.txt";
//};
//
//StatsProbe "LeftDepthErrorStatsFile" = {
//    targetLayer = "LeftDepthError";
//    probeOutputFile = "LeftDepthError_Stats.txt";
//};
//
//StatsProbe "LeftDepthReconStatsFile" = {
//    targetLayer = "LeftDepthRecon";
//    probeOutputFile = "LeftDepthRecon_Stats.txt";
//};
//
//StatsProbe "RightGanglionStatsFile" = {
//    targetLayer = "RightGanglion";
//    probeOutputFile = "RightGanglion_Stats.txt";
//};
//
//StatsProbe "RightRescaleStatsFile" = {
//    targetLayer = "RightRescale";
//    probeOutputFile = "RightRescale_Stats.txt";
//};
//
//StatsProbe "RightErrorStatsFile" = {
//    targetLayer = "RightError";
//    probeOutputFile = "RightError_Stats.txt";
//};
//
//StatsProbe "RightReconStatsFile" = {
//    targetLayer = "RightRecon";
//    probeOutputFile = "RightRecon_Stats.txt";
//};
//
//StatsProbe "RightDepthDownsampleStatsFile" = {
//   targetLayer = "RightDepthDownsample";
//   probeOutputFile = "RightDepthDownsample_Stats.txt";
//};
//
//StatsProbe "RightDepthBinStatsFile" = {
//   targetLayer = "RightDepthBin";
//   probeOutputFile = "RightDepthBin_Stats.txt";
//};
//
//StatsProbe "RightDepthRescaleStatsFile" = {
//   targetLayer = "RightDepthRescale";
//   probeOutputFile = "RightDepthRescale_Stats.txt";
//};
//
//StatsProbe "RightDepthBufferStatsFile" = {
//   targetLayer = "RightDepthBuffer";
//   probeOutputFile = "RightDepthBuffer_Stats.txt";
//};
//
//StatsProbe "RightDepthErrorStatsFile" = {
//    targetLayer = "RightDepthError";
//    probeOutputFile = "RightDepthError_Stats.txt";
//};
//
//StatsProbe "RightDepthReconStatsFile" = {
//    targetLayer = "RightDepthRecon";
//    probeOutputFile = "RightDepthRecon_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S2StatsFile" = {
//    targetLayer = "BinocularV1_S2";
//    probeOutputFile = "BinocularV1_S2_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S4StatsFile" = {
//    targetLayer = "BinocularV1_S4";
//    probeOutputFile = "BinocularV1_S4_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S8StatsFile" = {
//    targetLayer = "BinocularV1_S8";
//    probeOutputFile = "BinocularV1_S8_Stats.txt";
//};
//
//StatsProbe "PosDownsampleStatsFile" = {
//    targetLayer = "PosDownsample";
//    probeOutputFile = "PosDownsample_Stats.txt";
//};
//
//StatsProbe "PosRescaleStatsFile" = {
//    targetLayer = "PosRescale";
//    probeOutputFile = "PosRescale_Stats.txt";
//};
//
//StatsProbe "PosErrorStatsFile" = {
//    targetLayer = "PosError";
//    probeOutputFile = "PosError_Stats.txt";
//};
//
//StatsProbe "PosReconStatsFile" = {
//    targetLayer = "PosRecon";
//    probeOutputFile = "PosRecon_Stats.txt";
//};

