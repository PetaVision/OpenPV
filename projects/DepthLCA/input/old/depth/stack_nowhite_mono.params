// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime   = 200000000;
    progressStep = 1000;
    outputPath = "/nh/compneuro/Data/Depth/LCA/stack_mono_nowhite/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/stack_mono_nowhite/Checkpoints";
    checkpointWriteStepInterval = 10000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
    dtAdaptFlag = true;
    dtScaleMax = 5.0;
    dtScaleMin = 0.25;
    dtChangeMax = 0.05;
    dtChangeMin = 0.0;
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/Depth/raw/image_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 200;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftBuffer" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 1;

    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

RescaleLayer "LeftRescale" = {
    restart                         = false;
    originalLayerName               = "LeftBuffer";
    nxScale                         = 1; 
    nyScale                         = 1; 
    nf                              = 1;
    mirrorBCflag                    = true;
    //
    writeStep                       = 200;
    initialWriteTime                = 200;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 4;
    triggerFlag = true;
    triggerLayerName = "LeftImage";
};

ANNNormalizedErrorLayer "LeftError" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/LeftError_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = 1; //Normal is .2
    //
    phase = 5;  
};

// for visualization only, makes no output
ANNLayer "LeftReconS2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 200.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7; //Less than v1 phase
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "LeftReconS4" = {
    #include "LeftReconS2";
};

ANNLayer "LeftReconS8" = {
    #include "LeftReconS2";
};

ANNLayer "LeftReconAll" = {
    #include "LeftReconS2";
};

// binoclular layers

HyPerLCALayer "V1S2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 32; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 200.0;
    initialWriteTime = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .03; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S2_V.pvp";
    // 
    timeConstantTau = 200.0;
    slopeErrorStd = 0.01;
    // 
    dVThresh = 0;
    VThresh = 0.01; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.01; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "V1S4" = {
    #include "V1S2";
    @nxScale = .25;
    @nyScale = .25;
    @nf = 64;
    //@VThresh = .04;
    //@VWidth  = .04;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S4_V.pvp";
};

HyPerLCALayer "V1S8" = {
    #include "V1S2";
    @nxScale = .125;
    @nyScale = .125;
    @nf = 128;
    //@VThresh = .04;
    //@VWidth  = .04;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S8_V.pvp";
};

////Depth layers
//
//Movie "DepthImage" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    readPvpFile = false; 
//    imageListPath = "/nh/compneuro/Data/Depth/raw/depth_02.txt";
//    writeFrameToTimestamp = true;
//    nf = 1;
//    writeStep = -1;
//    writeSparseActivity = false;
//    displayPeriod = 200;
//    start_frame_index = 1;
//    skip_frame_index = 1;
//    echoFramePathnameFlag = false;
//    mirrorBCflag = true;
//    jitterFlag = 0;
//    useImageBCflag = false;
//    inverseFlag = false;
//    normalizeLuminanceFlag = false;
//    writeImages = false;
//    offsetX = 0;
//    offsetY = 0;
//    randomMovie = 0;
//    autoResizeFlag = 0;
//    phase = 0;
//    //useParamsImage = true;
//};
//
//ANNLayer "DepthDownsample" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 1;
//    writeStep = -1;
//    initialWriteTime = 199.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    InitVType = "ZeroV";
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    VWidth = 0;
//    //
//    phase = 1;  
//    triggerFlag = true;
//    triggerLayerName = "DepthImage";
//    triggerOffset = 0;
//};
//
//BinningLayer "DepthBin" = {
//    restart = 0;
//    nxScale = .125; 
//    nyScale = .125;
//    nf = 32; 
//    phase = 2;
//    writeStep = -1.0;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = false;
//    binMax = 1;
//    binMin = 0;
//    binSigma = 2;
//    delay = 0;
//    originalLayerName = "DepthDownsample";
//    triggerFlag = true;
//    triggerLayerName = "DepthImage";
//    triggerOffset = 0;
//};
//
////Need a buffer layer since binning layer does not have a v
//ANNLayer "DepthBuffer" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    writeStep = -1;
//    initialWriteTime = 999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    InitVType = "ZeroV";
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    VWidth = 0;
//    phase = 3;  
//    triggerFlag = true;
//    triggerLayerName = "DepthImage";
//    triggerOffset = 0;
//};
//
//RescaleLayer "DepthRescale" = {
//    restart                         = false;
//    originalLayerName               = "DepthBuffer";
//    nxScale                         = .125; 
//    nyScale                         = .125; 
//    nf                              = 32;
//    mirrorBCflag                    = true;
//    writeStep                       = 200;
//    initialWriteTime                = 200;
//    writeSparseActivity             = false;
//    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
//    targetMean                      = 0;
//    targetStd                       = 1;
//    valueBC = 0;
//    phase                           = 4;
//    triggerFlag = true;
//    triggerLayerName = "DepthImage";
//    triggerOffset = 0;
//};
//
//LabelErrorLayer "DepthError" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    writeStep = 200;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/DepthError_V.pvp";
//    VThresh = 0.001;
//    VMax =  infinity;
//    VMin = 0;
//    VShift = 0;
//    VWidth = 0;
//    valueBC = 0;
//    errScale = .05; //Normal is .2
//    isBinary = 0; //Depth isn't binary label
//    phase = 5;  
//};
//
//ANNLayer "DepthReconS2" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    writeStep = 200.0;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //
//    VThresh = -infinity;
//    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
//    VMin = -infinity; 
//    VShift = 0;
//    // 
//    phase = 7; 
//    //
//    triggerFlag = true;
//    triggerLayerName = "DepthImage";
//    triggerOffset = 1;
//};
//
//ANNLayer "DepthReconS4" = {
//   #include "DepthReconS2";
//};
//
//ANNLayer "DepthReconS8" = {
//   #include "DepthReconS2";
//};
//
//ANNLayer "DepthReconAll" = {
//   #include "DepthReconS2";
//};
//
//ANNNormalizedErrorLayer "V1S2Error" = {
//    restart = 0;
//    nxScale = .5;
//    nyScale = .5;
//    nf = 32;
//    writeStep = 200;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V1S2Error_V.pvp";
//    //
//    VThresh = 0.001; //Change this for efficiency
//    VMax =  infinity;
//    VMin = 0;
//    VShift = 0;
//    VWidth = 0;
//    valueBC = 0;
//    //
//    errScale = .95; //Normal is .2
//    //
//    phase = 5;  
//};
//
//ANNNormalizedErrorLayer "V1S4Error" = {
//   #include "V1S2Error";
//   @nxScale = .25;
//   @nyScale = .25;
//   @nf = 64;
//   //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V1S4Error_V.pvp";
//};
//
//ANNNormalizedErrorLayer "V1S8Error" = {
//   #include "V1S2Error";
//   @nxScale = .125;
//   @nyScale = .125;
//   @nf = 128;
//   //@Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V1S8Error_V.pvp";
//};
//
//ANNLayer "V1S2Recon" = {
//    restart = 0;
//    nxScale = .5;
//    nyScale = .5;
//    nf = 32;
//    writeStep = 200.0;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //
//    VThresh = -infinity;
//    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
//    VMin = -infinity; 
//    VShift = 0;
//    // 
//    phase = 7; 
//    //
//    triggerFlag = true;
//    triggerLayerName = "LeftImage";
//    triggerOffset = 1;
//};
//
//ANNLayer "V1S4Recon" = {
//   #include "V1S2Recon";
//   @nxScale = .25;
//   @nyScale = .25;
//   @nf = 64;
//};
//
//ANNLayer "V1S8Recon" = {
//   #include "V1S2Recon";
//   @nxScale = .125;
//   @nyScale = .125;
//   @nf = 128;
//};
//
//ANNLayer "V2V1S2LeftRecon" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 1;
//    writeStep = 200.0;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //
//    VThresh = -infinity;
//    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
//    VMin = -infinity; 
//    VShift = 0;
//    // 
//    phase = 8; 
//    //
//    triggerFlag = true;
//    triggerLayerName = "LeftImage";
//    triggerOffset = 1;
//};
//
//ANNLayer "V2V1S4LeftRecon" = {
//   #include "V2V1S2LeftRecon";
//};
//
//ANNLayer "V2V1S8LeftRecon" = {
//   #include "V2V1S2LeftRecon";
//};
//
//ANNLayer "V2V1AllLeftRecon" = {
//   #include "V2V1S2LeftRecon";
//};
//
//ANNLayer "V2V1S2RightRecon" = {
//   #include "V2V1S2LeftRecon";
//   @triggerLayerName = "RightImage";
//};
//
//ANNLayer "V2V1S4RightRecon" = {
//   #include "V2V1S4LeftRecon";
//   @triggerLayerName = "RightImage";
//};
//
//ANNLayer "V2V1S8RightRecon" = {
//   #include "V2V1S8LeftRecon";
//   @triggerLayerName = "RightImage";
//};
//
//ANNLayer "V2V1AllRightRecon" = {
//   #include "V2V1AllLeftRecon";
//   @triggerLayerName = "RightImage";
//};
//
//HyPerLCALayer "V2S2" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32; //2048 or 4096;
//    numChannels = 1;
//    numWindowX = 1;
//    numWindowY = 1;
//    writeStep = 200.0;
//    initialWriteTime = 200.0;
//    mirrorBCflag = 0;
//    writeSparseActivity = 1;
//    writeSparseValues   = 1;
//    //
//    //InitVType = "UniformRandomV";
//    //minV = -1.0;
//    //maxV = .03; //0.05 above VThresh
//    InitVType = "InitVFromFile";
//    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V2S2_V.pvp";
//    // 
//    timeConstantTau = 200.0;
//    slopeErrorStd = 0.01;
//    // 
//    dVThresh = 0;
//    VThresh = 0.015; //mean + 1 std of the positive input to error
//    VMax = infinity;
//    VMin = 0;
//    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
//    VWidth = 0.015; //Same as VThresh
//    //
//    phase = 6;
//};
//
//HyPerLCALayer "V2S4" = {
//    #include "V2S2";
//    @nxScale = .125;
//    @nyScale = .125;
//    @nf = 64;
//    //@VThresh = 0.020;
//    //@VWidth = 0.020;
//    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V2S4_V.pvp";
//};
//
//HyPerLCALayer "V2S8" = {
//    #include "V2S2";
//    @nxScale = .125;
//    @nyScale = .125;
//    @nf = 128;
//    //@VThresh = 0.015;
//    //@VWidth = 0.015;
//    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_nowhite/V2S8_V.pvp";
//};

// connections

// Left eye connections

IdentConn "LeftImageToLeftBuffer" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftBuffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "LeftRescaleToLeftError" = {
    preLayerName = "LeftRescale";
    postLayerName = "LeftError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    //////////////////////
    //TODO What to do here????
    //////////////////////
    weightInit = .0294;  // 1/sqrt(34*34);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

// binocular connections

ImprintConn "V1S2ToLeftError" = {
    preLayerName = "V1S2";
    postLayerName = "LeftError";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S2ToLeftError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 100000; //Imprint if element has not been active in 100 frames

    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ImprintConn "V1S4ToLeftError" = {
    #include "V1S2ToLeftError";
    @preLayerName = "V1S4";
    @nxp = 68;
    @nyp = 68;
    //
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S4ToLeftError_W.pvp";
};

ImprintConn "V1S8ToLeftError" = {
    #include "V1S2ToLeftError";
    @preLayerName = "V1S8";
    @nxp = 136;
    @nyp = 136;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mono_nowhite/V1S8ToLeftError_W.pvp";
};

TransposeConn "LeftErrorToV1S2" = {
    preLayerName = "LeftError";
    postLayerName = "V1S2";
    channelCode = 0;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftErrorToV1S4" = {
    #include "LeftErrorToV1S2";
    @postLayerName = "V1S4";
    @originalConnName = "V1S4ToLeftError";
};

TransposeConn "LeftErrorToV1S8" = {
    #include "LeftErrorToV1S2";
    @postLayerName = "V1S8";
    @originalConnName = "V1S8ToLeftError";
};

CloneKernelConn "V1S2ToLeftReconS2" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconS2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ToLeftReconS4" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S4";
    @postLayerName = "LeftReconS4";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ToLeftReconS8" = {
    #include "V1S2ToLeftReconS2";
    @preLayerName = "V1S8";
    @postLayerName = "LeftReconS8";
    @originalConnName = "V1S8ToLeftError";
};

CloneKernelConn "V1S2ToLeftReconAll" = {
    preLayerName = "V1S2";
    postLayerName = "LeftReconAll";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S2ToLeftError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S4ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S4";
    @originalConnName = "V1S4ToLeftError";
};

CloneKernelConn "V1S8ToLeftReconAll" = {
    #include "V1S2ToLeftReconAll";
    @preLayerName = "V1S8";
    @originalConnName = "V1S8ToLeftError";
};
//
// Probes
//
//StatsProbe "LeftGanglionStatsFile" = {
//    targetLayer = "LeftGanglion";
//    probeOutputFile = "LeftGanglion_Stats.txt";
//};
//
//StatsProbe "LeftRescaleStatsFile" = {
//    targetLayer = "LeftRescale";
//    probeOutputFile = "LeftRescale_Stats.txt";
//};
//
//StatsProbe "LeftErrorStatsFile" = {
//    targetLayer = "LeftError";
//    probeOutputFile = "LeftError_Stats.txt";
//};
//
//StatsProbe "LeftReconStatsFile" = {
//    targetLayer = "LeftRecon";
//    probeOutputFile = "LeftRecon_Stats.txt";
//};
//
//StatsProbe "LeftDepthDownsampleStatsFile" = {
//   targetLayer = "LeftDepthDownsample";
//   probeOutputFile = "LeftDepthDownsample_Stats.txt";
//};
//
//StatsProbe "LeftDepthBinStatsFile" = {
//   targetLayer = "LeftDepthBin";
//   probeOutputFile = "LeftDepthBin_Stats.txt";
//};
//
//StatsProbe "LeftDepthRescaleStatsFile" = {
//   targetLayer = "LeftDepthRescale";
//   probeOutputFile = "LeftDepthRescale_Stats.txt";
//};
//
//StatsProbe "LeftDepthBufferStatsFile" = {
//   targetLayer = "LeftDepthBuffer";
//   probeOutputFile = "LeftDepthBuffer_Stats.txt";
//};
//
//StatsProbe "LeftDepthErrorStatsFile" = {
//    targetLayer = "LeftDepthError";
//    probeOutputFile = "LeftDepthError_Stats.txt";
//};
//
//StatsProbe "LeftDepthReconStatsFile" = {
//    targetLayer = "LeftDepthRecon";
//    probeOutputFile = "LeftDepthRecon_Stats.txt";
//};
//
//StatsProbe "RightGanglionStatsFile" = {
//    targetLayer = "RightGanglion";
//    probeOutputFile = "RightGanglion_Stats.txt";
//};
//
//StatsProbe "RightRescaleStatsFile" = {
//    targetLayer = "RightRescale";
//    probeOutputFile = "RightRescale_Stats.txt";
//};
//
//StatsProbe "RightErrorStatsFile" = {
//    targetLayer = "RightError";
//    probeOutputFile = "RightError_Stats.txt";
//};
//
//StatsProbe "RightReconStatsFile" = {
//    targetLayer = "RightRecon";
//    probeOutputFile = "RightRecon_Stats.txt";
//};
//
//StatsProbe "RightDepthDownsampleStatsFile" = {
//   targetLayer = "RightDepthDownsample";
//   probeOutputFile = "RightDepthDownsample_Stats.txt";
//};
//
//StatsProbe "RightDepthBinStatsFile" = {
//   targetLayer = "RightDepthBin";
//   probeOutputFile = "RightDepthBin_Stats.txt";
//};
//
//StatsProbe "RightDepthRescaleStatsFile" = {
//   targetLayer = "RightDepthRescale";
//   probeOutputFile = "RightDepthRescale_Stats.txt";
//};
//
//StatsProbe "RightDepthBufferStatsFile" = {
//   targetLayer = "RightDepthBuffer";
//   probeOutputFile = "RightDepthBuffer_Stats.txt";
//};
//
//StatsProbe "RightDepthErrorStatsFile" = {
//    targetLayer = "RightDepthError";
//    probeOutputFile = "RightDepthError_Stats.txt";
//};
//
//StatsProbe "RightDepthReconStatsFile" = {
//    targetLayer = "RightDepthRecon";
//    probeOutputFile = "RightDepthRecon_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S2StatsFile" = {
//    targetLayer = "BinocularV1_S2";
//    probeOutputFile = "BinocularV1_S2_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S4StatsFile" = {
//    targetLayer = "BinocularV1_S4";
//    probeOutputFile = "BinocularV1_S4_Stats.txt";
//};
//
//StatsProbe "BinocularV1_S8StatsFile" = {
//    targetLayer = "BinocularV1_S8";
//    probeOutputFile = "BinocularV1_S8_Stats.txt";
//};
//
//StatsProbe "PosDownsampleStatsFile" = {
//    targetLayer = "PosDownsample";
//    probeOutputFile = "PosDownsample_Stats.txt";
//};
//
//StatsProbe "PosRescaleStatsFile" = {
//    targetLayer = "PosRescale";
//    probeOutputFile = "PosRescale_Stats.txt";
//};
//
//StatsProbe "PosErrorStatsFile" = {
//    targetLayer = "PosError";
//    probeOutputFile = "PosError_Stats.txt";
//};
//
//StatsProbe "PosReconStatsFile" = {
//    targetLayer = "PosRecon";
//    probeOutputFile = "PosRecon_Stats.txt";
//};

