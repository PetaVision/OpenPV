// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1226, one pixel cropped from both sides;  // KITTI synced value
    ny = 360;  //370, two pixels cropped from the top;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime = 100; //193 total testing, splitting into 100 training, 93 testing
    progressStep = 1;
    outputPath = "/nh/compneuro/Data/Depth/geoint/depthAve/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = false;
    checkpointWriteDir = "/home/ec2-user/mountData/benchmark/train/aws_rcorr_white_LCA/Checkpoints";
    checkpointWriteStepInterval = 50;
    deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
    dtAdaptFlag = false;
    dtScaleMax = 5.0;
    dtScaleMin = 0.25;
    dtChangeMax = 0.05;
    dtChangeMin = 0.0;
};

//
// layers
//

//Depth ground truth layers
Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/KITTI/list/benchmark_depth_disp_noc.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    sparseLayer = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetAnchor = "br"; //Offset anchor from bottom left
    offsetX = 0; //1 px offset from the left
    offsetY = 0; //offset 0 from bottom
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "DepthDownsample" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
};

ConstantLayer "Ones" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//This is the ground truth layer
//Binned of difference between average and actual
BinningLayer "DepthGT" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 128; //3 pixel error allowed, we may need to change this 
    writeStep = -1.0;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 3;
    InitVType = "ZeroV";
    zeroNeg = false; //Set negative gt values as -1
    zeroDCR = true; //Zero values from the buffer is set to 0
    normalDist = false; //Max value will always be 1 as opposed to normal distribution
    delay = 0;
    originalLayerName = "DepthDownsample";
    phase = 2;
};

//Reconstruction, should be able to see this in the checkpoint
ANNLayer "RCorrBuf" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 128;
    writeStep = -1.0;
    initialWriteTime = 1.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    phase = 3; //Same as other recons
};

//Visualization
WTALayer "RCorrRecon" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 1; 
    writeStep = 1.0;
    initialWriteTime = 1.0;
    mirrorBCflag = false;
    writeSparseActivity = false;
    delay = 0;
    originalLayerName = "RCorrBuf";
    phase = 4;
};

PoolingConn "DepthImageToDepthDownsample" = {
    preLayerName = "DepthImage";
    postLayerName = "DepthDownsample";
    channelCode = 0; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "maxpooling";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;
    useWindowPost = false;

    keepKernelsSynchronized             = true;
};

//Reverse correlation connections
BatchConn "OnesToDepthGT" = {
    preLayerName = "Ones";
    postLayerName = "DepthGT";
    channelCode = -1;
    nxp = 1;
    nyp = 1;
    nfp = 128;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_slp/V1S2ToDepthGT_W.pvp";
    weightInitType = "UniformWeight";
    weightInit = 0;
    //
    strength = 1; //.25/2  
    normalizeMethod = "none";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = -1;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;

    plasticityFlag = true;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;

    initialWriteTime = 0.0;
    dWMax = 1; //1/numimages
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";

    useMask = true;
    maskLayerName = "DepthDownsample";

    batchPeriod = 100;
    sharedWeights = false;
};

CloneConn "OnesToRCorrBuf" = {
    preLayerName = "Ones";
    postLayerName = "RCorrBuf";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "OnesToDepthGT";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

