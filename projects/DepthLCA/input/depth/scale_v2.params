// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime= 200000000;
    progressStep = 1000;
    outputPath = "/nh/compneuro/Data/Depth/LCA/scale_v2";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/depth_log_scale/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/scale_v2/Checkpoints";
    checkpointWriteStepInterval = 10000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/newDepth/image_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 500;
    start_frame_index = 980;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "LeftDownsample1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;  
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 0;
};

ANNLayer "LeftDownsample2" = {
    #include "LeftDownsample1";
    @nxScale = .25;
    @nyScale = .25;
};

ANNLayer "LeftDownsample3" = {
    #include "LeftDownsample1";
    @nxScale = .125;
    @nyScale = .125;
};

ANNLayer "LeftBipolar1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 2;
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 0;
};

ANNLayer "LeftBipolar2" = {
   #include "LeftBipolar1";
   @nxScale = .25;
   @nyScale = .25;
};

ANNLayer "LeftBipolar3" = {
   #include "LeftBipolar1";
   @nxScale = .125;
   @nyScale = .125;
};

ANNLayer "LeftGanglion1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 3;
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 0;
};

ANNLayer "LeftGanglion2" = {
    #include "LeftGanglion1";
    @nxScale = .25;
    @nyScale = .25;
};

ANNLayer "LeftGanglion3" = {
    #include "LeftGanglion1";
    @nxScale = .125;
    @nyScale = .125;
};

RescaleLayer "LeftRescale1" = {
    restart                         = false;
    originalLayerName               = "LeftGanglion1";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 1;
    mirrorBCflag                    = true;
    writeStep                       = 1000;
    initialWriteTime                = 999;
    writeSparseActivity             = false;
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    valueBC = 0;
    phase                           = 4;
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 0;
};

RescaleLayer "LeftRescale2" = {
    #include "LeftRescale1";
    @originalLayerName               = "LeftGanglion2";
    @nxScale                         = .25; 
    @nyScale                         = .25; 
};

RescaleLayer "LeftRescale3" = {
    #include "LeftRescale1";
    @originalLayerName               = "LeftGanglion3";
    @nxScale                         = .125; 
    @nyScale                         = .125; 
};

ANNErrorLayer "LeftError1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1000;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/LeftError1_V.pvp";
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    errScale = .5; //Normal is .2
    phase = 5;  
};

ANNErrorLayer "LeftError2" = {
    #include "LeftError1";
    @nxScale = .25;
    @nyScale = .25;
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/LeftError2_V.pvp";
};

ANNErrorLayer "LeftError3" = {
    #include "LeftError1";
    @nxScale = .125;
    @nyScale = .125;
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/LeftError3_V.pvp";
};

// for visualization only, makes no output
ANNLayer "LeftRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1000.0;
    initialWriteTime = 1000.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 7; //Less than v1 phase
    //
    triggerFlag = 1;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "LeftRecon2" = {
    #include "LeftRecon1";
    @nxScale = .25;
    @nyScale = .25;
};

ANNLayer "LeftRecon3" = {
    #include "LeftRecon1";
    @nxScale = .125;
    @nyScale = .125;
};



// Right eye layers
//

Movie "RightImage" = {
    #include "LeftImage";
    @imageListPath = "/nh/compneuro/Data/newDepth/image_03.txt";
};

ANNLayer "RightDownsample1" = {
    #include "LeftDownsample1";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightDownsample2" = {
    #include "LeftDownsample2";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightDownsample3" = {
    #include "LeftDownsample3";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightBipolar1" = {
    #include "LeftBipolar1";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightBipolar2" = {
    #include "LeftBipolar2";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightBipolar3" = {
    #include "LeftBipolar3";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion1" = {
    #include "LeftGanglion1";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion2" = {
    #include "LeftGanglion2";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightGanglion3" = {
    #include "LeftGanglion3";
    @triggerLayerName = "RightImage";
};

RescaleLayer "RightRescale1" = {
    #include "LeftRescale1";
    @originalLayerName = "RightGanglion1";
    @triggerLayerName = "RightImage";
};

RescaleLayer "RightRescale2" = {
    #include "LeftRescale2";
    @originalLayerName = "RightGanglion2";
    @triggerLayerName = "RightImage";
};

RescaleLayer "RightRescale3" = {
    #include "LeftRescale3";
    @originalLayerName = "RightGanglion3";
    @triggerLayerName = "RightImage";
};

ANNErrorLayer "RightError1" = {
    #include "LeftError1";
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/RightError1_V.pvp";
};

ANNErrorLayer "RightError2" = {
    #include "LeftError2";
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/RightError2_V.pvp";
};

ANNErrorLayer "RightError3" = {
    #include "LeftError3";
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/RightError3_V.pvp";
};

// for visualization only, makes no output
ANNLayer "RightRecon1" = {
    #include "LeftRecon1";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightRecon2" = {
    #include "LeftRecon2";
    @triggerLayerName = "RightImage";
};

ANNLayer "RightRecon3" = {
    #include "LeftRecon3";
    @triggerLayerName = "RightImage";
};

// binoclular layers

HyPerLCALayer "V1S1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.05; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.05; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "V1S2" = {
    #include "V1S1";
    @nxScale = .125;
    @nyScale = .125;
    @VThresh = 0.05;
    @VWidth = 0.05;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S2_V.pvp";
};

HyPerLCALayer "V1S3" = {
    #include "V1S1";
    @nxScale = .125;
    @nyScale = .125;
    @VThresh = 0.03;
    @VWidth = 0.03;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S3_V.pvp";
};


//V2 layers

Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/newDepth/depth_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 500;
    start_frame_index = 980;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "DepthDownsample" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

BinningLayer "DepthBin" = {
    restart = 0;
    nxScale = .125; 
    nyScale = .125;
    nf = 32; 
    phase = 2;
    writeStep = -1.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 2;
    delay = 0;
    originalLayerName = "DepthDownsample";
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

//Need a buffer layer since binning layer does not have a v
ANNLayer "DepthBuffer" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = -1;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 3;  
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

RescaleLayer "DepthRescale" = {
    restart                         = false;
    originalLayerName               = "DepthBuffer";
    nxScale                         = .125; 
    nyScale                         = .125; 
    nf                              = 32;
    mirrorBCflag                    = true;
    writeStep                       = 1000;
    initialWriteTime                = 999;
    writeSparseActivity             = false;
    rescaleMethod                   = "pointmeanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    valueBC = 0;
    phase                           = 4;
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 0;
};

LabelErrorLayer "DepthError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 1000;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/DepthError_V.pvp";
    VThresh = 0.001;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    errScale = .1; //Normal is .2
    isBinary = 0; //Depth isn't binary label
    phase = 5;  
};

ANNLayer "DepthRecon" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 1000.0;
    initialWriteTime = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 7; 
    //
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 1;
};

ANNErrorLayer "V2Error1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64;
    writeStep = 1000;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2Error1_V.pvp";
    //
    VThresh = 0.001; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .9; //Normal is .2
    //
    phase = 5;  
};

ANNErrorLayer "V2Error2" = {
   #include "V2Error1";
   @nxScale = .125;
   @nyScale = .125;
   @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2Error2_V.pvp";
};

ANNErrorLayer "V2Error3" = {
   #include "V2Error1";
   @nxScale = .125;
   @nyScale = .125;
   @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2Error3_V.pvp";
};

ANNLayer "V2Recon1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64;
    writeStep = 1000.0;
    initialWriteTime = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 7; 
    //
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "V2Recon2" = {
   #include "V2Recon1";
   @nxScale = .125;
   @nyScale = .125;
};

ANNLayer "V2Recon3" = {
   #include "V2Recon1";
   @nxScale = .125;
   @nyScale = .125;
};

ANNLayer "V2_1LeftRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1000.0;
    initialWriteTime = 1000.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 8; 
    //
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
};

ANNLayer "V2_1LeftRecon2" = {
   #include "V2_1LeftRecon1";
   @nxScale = .25;
   @nyScale = .25;
};

ANNLayer "V2_1LeftRecon3" = {
   #include "V2_1LeftRecon1";
   @nxScale = .125;
   @nyScale = .125;
};

ANNLayer "V2_1RightRecon1" = {
   #include "V2_1LeftRecon1";
   @triggerLayerName = "RightImage";
};

ANNLayer "V2_1RightRecon2" = {
   #include "V2_1LeftRecon2";
   @triggerLayerName = "RightImage";
};

ANNLayer "V2_1RightRecon3" = {
   #include "V2_1LeftRecon3";
   @triggerLayerName = "RightImage";
};

HyPerLCALayer "V2S1" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 64; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    writeSparseValues   = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.05; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.05; //Same as VThresh
    //
    phase = 6;
};

HyPerLCALayer "V2S2" = {
    #include "V2S1";
    @VThresh = 0.05;
    @VWidth = 0.05;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S2_V.pvp";
};

HyPerLCALayer "V2S3" = {
    #include "V2S1";
    @VThresh = 0.05;
    @VWidth = 0.05;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S3_V.pvp";
};


// connections

// Left eye connections

KernelConn "LeftImageToLeftDownsample1" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftDownsample1";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftImageToLeftDownsample2" = {
    #include "LeftImageToLeftDownsample1";
    @postLayerName = "LeftDownsample2";
    @rMax  = 8;
};

KernelConn "LeftImageToLeftDownsample3" = {
    #include "LeftImageToLeftDownsample1";
    @postLayerName = "LeftDownsample3";
    @rMax  = 8;
};

KernelConn "LeftDownsample1ToLeftBipolar1" = {
    preLayerName = "LeftDownsample1";
    postLayerName = "LeftBipolar1";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftDownsample2ToLeftBipolar2" = {
   #include "LeftDownsample1ToLeftBipolar1";
   @preLayerName = "LeftDownsample2";
   @postLayerName = "LeftBipolar2";
};

KernelConn "LeftDownsample3ToLeftBipolar3" = {
   #include "LeftDownsample1ToLeftBipolar1";
   @preLayerName = "LeftDownsample3";
   @postLayerName = "LeftBipolar3";
};

KernelConn "LeftBipolar1ToLeftGanglion1Center" = {
    preLayerName = "LeftBipolar1";
    postLayerName = "LeftGanglion1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolar1ToLeftGanglion1Surround" = {
    preLayerName = "LeftBipolar1";
    postLayerName = "LeftGanglion1";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftBipolar2ToLeftGanglion2Center" = {
    #include "LeftBipolar1ToLeftGanglion1Center";
    @preLayerName = "LeftBipolar2";
    @postLayerName = "LeftGanglion2";
    //@nxp = 3; 
    //@nyp = 3; 
    //@sigma = 3;
};

KernelConn "LeftBipolar2ToLeftGanglion2Surround" = {
    #include "LeftBipolar1ToLeftGanglion1Surround";
    @preLayerName = "LeftBipolar2";
    @postLayerName = "LeftGanglion2";
    //@nxp = 33; 
    //@nyp = 33; 
    //@sigma = 15.5;
    //@rMax  = 23;
};

KernelConn "LeftBipolar3ToLeftGanglion3Center" = {
    #include "LeftBipolar1ToLeftGanglion1Center";
    @preLayerName = "LeftBipolar3";
    @postLayerName = "LeftGanglion3";
    //@nxp = 3; 
    //@nyp = 3; 
    //@sigma = 3;
};


KernelConn "LeftBipolar3ToLeftGanglion3Surround" = {
    #include "LeftBipolar1ToLeftGanglion1Surround";
    @preLayerName = "LeftBipolar3";
    @postLayerName = "LeftGanglion3";
    //@nxp = 33; 
    //@nyp = 33; 
    //@sigma = 15.5;
    //@rMax  = 23;
};

KernelConn "LeftRescale1ToLeftError1" = {
    preLayerName = "LeftRescale1";
    postLayerName = "LeftError1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .0624;  // 1/sqrt(16*16);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

KernelConn "LeftRescale2ToLeftError2" = {
    #include "LeftRescale1ToLeftError1";
    @preLayerName = "LeftRescale2";
    @postLayerName = "LeftError2";
};

KernelConn "LeftRescale3ToLeftError3" = {
    #include "LeftRescale1ToLeftError1";
    @preLayerName = "LeftRescale3";
    @postLayerName = "LeftError3";
    @weightInit = .0588;  // 1/sqrt(17*17);
};



// Right eye connections

KernelConn "RightImageToRightDownsample1" = {
    #include "LeftImageToLeftDownsample1";
    @preLayerName = "RightImage";
    @postLayerName = "RightDownsample1";
};

KernelConn "RightImageToRightDownsample2" = {
    #include "LeftImageToLeftDownsample2";
    @preLayerName = "RightImage";
    @postLayerName = "RightDownsample2";
};

KernelConn "RightImageToRightDownsample3" = {
    #include "LeftImageToLeftDownsample3";
    @preLayerName = "RightImage";
    @postLayerName = "RightDownsample3";
};

KernelConn "RightDownsample1ToRightBipolar1" = {
    #include "LeftDownsample1ToLeftBipolar1";
    @preLayerName = "RightDownsample1";
    @postLayerName = "RightBipolar1";
};

KernelConn "RightDownsample2ToRightBipolar2" = {
    #include "LeftDownsample2ToLeftBipolar2";
    @preLayerName = "RightDownsample2";
    @postLayerName = "RightBipolar2";
};

KernelConn "RightDownsample3ToRightBipolar3" = {
    #include "LeftDownsample3ToLeftBipolar3";
    @preLayerName = "RightDownsample3";
    @postLayerName = "RightBipolar3";
};

KernelConn "RightBipolar1ToRightGanglion1Center" = {
    #include "LeftBipolar1ToLeftGanglion1Center";
    @preLayerName = "RightBipolar1";
    @postLayerName = "RightGanglion1";
};

KernelConn "RightBipolar1ToRightGanglion1Surround" = {
    #include "LeftBipolar1ToLeftGanglion1Surround";
    @preLayerName = "RightBipolar1";
    @postLayerName = "RightGanglion1";
};

KernelConn "RightBipolar2ToRightGanglion2Center" = {
    #include "LeftBipolar2ToLeftGanglion2Center";
    @preLayerName = "RightBipolar2";
    @postLayerName = "RightGanglion2";
};

KernelConn "RightBipolar2ToRightGanglion2Surround" = {
    #include "LeftBipolar2ToLeftGanglion2Surround";
    @preLayerName = "RightBipolar2";
    @postLayerName = "RightGanglion2";
};

KernelConn "RightBipolar3ToRightGanglion3Center" = {
    #include "LeftBipolar3ToLeftGanglion3Center";
    @preLayerName = "RightBipolar3";
    @postLayerName = "RightGanglion3";
};

KernelConn "RightBipolar3ToRightGanglion3Surround" = {
    #include "LeftBipolar3ToLeftGanglion3Surround";
    @preLayerName = "RightBipolar3";
    @postLayerName = "RightGanglion3";
};

KernelConn "RightRescale1ToRightError1" = {
    #include "LeftRescale1ToLeftError1";
    @preLayerName = "RightRescale1";
    @postLayerName = "RightError1";
};

KernelConn "RightRescale2ToRightError2" = {
    #include "LeftRescale2ToLeftError2";
    @preLayerName = "RightRescale2";
    @postLayerName = "RightError2";
};

KernelConn "RightRescale3ToRightError3" = {
    #include "LeftRescale3ToLeftError3";
    @preLayerName = "RightRescale3";
    @postLayerName = "RightError3";
};

// binocular connections

ImprintConn "V1S1ToLeftError1" = {
    preLayerName = "V1S1";
    postLayerName = "LeftError1";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S1ToLeftError1_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = .90;
    //
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 1000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 500000; //Imprint if element has not been active in 1000 frames
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;

};

ImprintConn "V1S2ToLeftError2" = {
    #include "V1S1ToLeftError1";
    @preLayerName = "V1S2";
    @postLayerName = "LeftError2";
    //
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S2ToLeftError2_W.pvp";
};

ImprintConn "V1S3ToLeftError3" = {
    #include "V1S1ToLeftError1";
    @preLayerName = "V1S3";
    @postLayerName = "LeftError3";
    @nxp = 17;
    @nyp = 17;
    @nxpShrunken = 17;
    @nypShrunken = 17;
    //
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S3ToLeftError3_W.pvp";
};

TransposeConn "LeftError1ToV1S1" = {
    preLayerName = "LeftError1";
    postLayerName = "V1S1";
    channelCode = 0;
    originalConnName = "V1S1ToLeftError1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftError2ToV1S2" = {
    #include "LeftError1ToV1S1";
    @preLayerName = "LeftError2";
    @postLayerName = "V1S2";
    @originalConnName = "V1S2ToLeftError2";
};

TransposeConn "LeftError3ToV1S3" = {
    #include "LeftError1ToV1S1";
    @preLayerName = "LeftError3";
    @postLayerName = "V1S3";
    @originalConnName = "V1S3ToLeftError3";
};

CloneKernelConn "V1S1ToLeftRecon1" = {
    preLayerName = "V1S1";
    postLayerName = "LeftRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S1ToLeftError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V1S2ToLeftRecon2" = {
    #include "V1S1ToLeftRecon1";
    @preLayerName = "V1S2";
    @postLayerName = "LeftRecon2";
    @originalConnName = "V1S2ToLeftError2";
};

CloneKernelConn "V1S3ToLeftRecon3" = {
    #include "V1S1ToLeftRecon1";
    @preLayerName = "V1S3";
    @postLayerName = "LeftRecon3";
    @originalConnName = "V1S3ToLeftError3";
};

//V1 recon recon
CloneKernelConn "V2Recon1ToV2_1LeftRecon1" = {
    preLayerName = "V2Recon1";
    postLayerName = "V2_1LeftRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1S1ToLeftError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V2Recon2ToV2_1LeftRecon2" = {
    #include "V2Recon1ToV2_1LeftRecon1";
    @preLayerName = "V2Recon2";
    @postLayerName = "V2_1LeftRecon2";
    @originalConnName = "V1S2ToLeftError2";
};

CloneKernelConn "V2Recon3ToV2_1LeftRecon3" = {
    #include "V2Recon1ToV2_1LeftRecon1";
    @preLayerName = "V2Recon3";
    @postLayerName = "V2_1LeftRecon3";
    @originalConnName = "V1S3ToLeftError3";
};

ImprintConn "V1S1ToRightError1" = {
    #include "V1S1ToLeftError1";
    @postLayerName = "RightError1";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S1ToRightError1_W.pvp";
};

ImprintConn "V1S2ToRightError2" = {
    #include "V1S2ToLeftError2";
    @preLayerName = "V1S2";
    @postLayerName = "RightError2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S2ToRightError2_W.pvp";
};

ImprintConn "V1S3ToRightError3" = {
    #include "V1S3ToLeftError3";
    @preLayerName = "V1S3";
    @postLayerName = "RightError3";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V1S3ToRightError3_W.pvp";
};

TransposeConn "RightError1ToV1S1" = {
    #include "LeftError1ToV1S1";
    @preLayerName = "RightError1";
    @originalConnName = "V1S1ToRightError1";
};

TransposeConn "RightError2ToV1S2" = {
    #include "LeftError2ToV1S2";
    @preLayerName = "RightError2";
    @originalConnName = "V1S2ToRightError2";
};

TransposeConn "RightError3ToV1S3" = {
    #include "LeftError3ToV1S3";
    @preLayerName = "RightError3";
    @originalConnName = "V1S3ToRightError3";
};

CloneKernelConn "V1S1ToRightRecon1" = {
    #include "V1S1ToLeftRecon1";
    @postLayerName = "RightRecon1";
    @originalConnName = "V1S1ToRightError1";
};

CloneKernelConn "V1S2ToRightRecon2" = {
    #include "V1S2ToLeftRecon2";
    @postLayerName = "RightRecon2";
    @originalConnName = "V1S2ToRightError2";
};

CloneKernelConn "V1S3ToRightRecon3" = {
    #include "V1S3ToLeftRecon3";
    @postLayerName = "RightRecon3";
    @originalConnName = "V1S3ToRightError3";
};

//V1 recon recon
CloneKernelConn "V2Recon1ToV2_1RightRecon1" = {
    #include "V2Recon1ToV2_1LeftRecon1";
    @postLayerName = "V2_1RightRecon1";
    @originalConnName = "V1S1ToRightError1";
};

CloneKernelConn "V2Recon2ToV2_1RightRecon2" = {
    #include "V2Recon2ToV2_1LeftRecon2";
    @postLayerName = "V2_1RightRecon2";
    @originalConnName = "V1S2ToRightError2";
};

CloneKernelConn "V2Recon3ToV2_1RightRecon3" = {
    #include "V2Recon3ToV2_1LeftRecon3";
    @postLayerName = "V2_1RightRecon3";
    @originalConnName = "V1S3ToRightError3";
};


//v2 connections
// Left depth connections

KernelConn "DepthMovieToDepthDownsample" = {
    preLayerName = "DepthImage";
    postLayerName = "DepthDownsample";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

IdentConn "DepthBinToDepthBuffer" = {
    preLayerName = "DepthBin";
    postLayerName = "DepthBuffer";

    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "DepthRescaleToDepthError" = {
    preLayerName = "DepthRescale";
    postLayerName = "DepthError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .17677;  // 1/sqrt(1*1*32);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

//V1 connections
KernelConn "V1S1ToV2Error1" = {
    preLayerName = "V1S1";
    postLayerName = "V2Error1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 64;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = 1;
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

KernelConn "V1S2ToV2Error2" = {
   #include "V1S1ToV2Error1";
   @preLayerName = "V1S2";
   @postLayerName = "V2Error2";
};

KernelConn "V1S3ToV2Error3" = {
   #include "V1S1ToV2Error1";
   @preLayerName = "V1S3";
   @postLayerName = "V2Error3";
};

//V2 to Error connections
ImprintConn "V2S1ToV2Error1" = {
    preLayerName = "V2S1";
    postLayerName = "V2Error1";
    channelCode = 1;
    nxp = 2;
    nyp = 2;
    nfp = 64;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S1ToV2Error1_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    // 
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 1000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    //TODO
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
    imprintTimeThresh = 500000; //Imprint if element has not been active in 1000 frames
    triggerFlag = true;
    triggerLayerName = "LeftImage";
    triggerOffset = 1;
    //weightUpdatePeriod = 500.0;
    //initialWeightUpdateTime = 499.0;
};

ImprintConn "V2S2ToV2Error2" = {
    #include "V2S1ToV2Error1";
    @preLayerName = "V2S2";
    @postLayerName = "V2Error2";
    @nxp = 1;
    @nyp = 1;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S2ToV2Error2_W.pvp";
};

ImprintConn "V2S3ToV2Error3" = {
    #include "V2S1ToV2Error1";
    @preLayerName = "V2S3";
    @postLayerName = "V2Error3";
    @nxp = 1;
    @nyp = 1;
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S3ToV2Error3_W.pvp";
};

TransposeConn "V2Error1ToV2S1" = {
    preLayerName = "V2Error1";
    postLayerName = "V2S1";
    channelCode = 0;
    originalConnName = "V2S1ToV2Error1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "V2Error2ToV2S2" = {
    #include "V2Error1ToV2S1"; 
    @preLayerName = "V2Error2";
    @postLayerName = "V2S2";
    @originalConnName = "V2S2ToV2Error2";
};

TransposeConn "V2Error3ToV2S3" = {
    #include "V2Error1ToV2S1"; 
    @preLayerName = "V2Error3";
    @postLayerName = "V2S3";
    @originalConnName = "V2S3ToV2Error3";
};

CloneKernelConn "V2S1ToV2Recon1" = {
    preLayerName = "V2S1";
    postLayerName = "V2Recon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V2S1ToV2Error1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V2S2ToV2Recon2" = {
    #include "V2S1ToV2Recon1";
    @preLayerName = "V2S2";
    @postLayerName = "V2Recon2";
    @originalConnName = "V2S2ToV2Error2";
};

CloneKernelConn "V2S3ToV2Recon3" = {
    #include "V2S1ToV2Recon1";
    @preLayerName = "V2S3";
    @postLayerName = "V2Recon3";
    @originalConnName = "V2S3ToV2Error3";
};

// Depth Binocular Connections
KernelConn "V2S1ToDepthError" = {
    preLayerName = "V2S1";
    postLayerName = "DepthError";
    channelCode = 1;
    nxp = 1; 
    nyp = 1; 
    nfp = 32;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S1ToDepthError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    //
    strength = 1; 
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 1000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    shrinkPatches = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
    triggerFlag = true;
    triggerLayerName = "DepthImage";
    triggerOffset = 1;
    //weightUpdatePeriod = 200.0;
    //initialWeightUpdateTime = 199.0;
};

KernelConn "V2S2ToDepthError" = {
    #include "V2S1ToDepthError";
    @preLayerName = "V2S2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S2ToDepthError_W.pvp";
};

KernelConn "V2S3ToDepthError" = {
    #include "V2S1ToDepthError";
    @preLayerName = "V2S3";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_v2/V2S3ToDepthError_W.pvp";
};

TransposeConn "DepthErrorToV2S1" = {
    preLayerName = "DepthError";
    postLayerName = "V2S1";
    channelCode = 0;
    originalConnName = "V2S1ToDepthError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    useWindowPost = true;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "DepthErrorToV2S2" = {
    #include "DepthErrorToV2S1";
    @postLayerName = "V2S2";
    @originalConnName = "V2S2ToDepthError";
};

TransposeConn "DepthErrorToV2S3" = {
    #include "DepthErrorToV2S1";
    @postLayerName = "V2S3";
    @originalConnName = "V2S3ToDepthError";
};

CloneKernelConn "V2S1ToDepthRecon" = {
    preLayerName = "V2S1";
    postLayerName = "DepthRecon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V2S1ToDepthError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "V2S2ToDepthRecon" = {
    #include "V2S1ToDepthRecon";
    @preLayerName = "V2S2";
    @originalConnName = "V2S2ToDepthError";
};

CloneKernelConn "V2S3ToDepthRecon" = {
    #include "V2S1ToDepthRecon";
    @preLayerName = "V2S3";
    @originalConnName = "V2S3ToDepthError";
};

