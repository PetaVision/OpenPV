
///////////////////////////
// created by garkenyon, 06/12/15
//
//  strips out everything but the deconvolutional neural network portion (DCNN)
//
// implements a 3 layer multi-strided, multi-scale, multi-temporal deep sparse convolutional neural network (dSCANN) with symmetrical bottom-up and top-down connectivity
//   designed to minimize an energy function that penalizes reconstruction error of the form:
//    E = E_DCNN + E_DBN + E_Task + S(S1) + S(S2) + S(S3)
//      = ||I - W1*S1 - W1*W2*S2 - W1*W2*W3*S3||^2 + ||S1 - V2*S2||^2 + ||S2 - V3*S3||^2 + ||GT - T*S3||^2
//   the eq. of motion for d(S2)/dt is of the form:
//      W2^T * W1^T * [I - W1*S1 - W1*W2*S2 - W1*W2*W3*S3] + V2^T * [S1 - V2*S2] - [S2 - V3*S3]
//   which in terms of class names defined below becomes:
//      S1DeconErrorToS2 * ImageDeconErrorToS1 * ImageDeconError + S1ReconS2ErrorToS2 * S1ReconS2Error
//   where
//      ImageDeconError = Image - ImageDecon = Image - S1ToImageDeconError * [S1 + S2ToS1DeconError * [S2 + S3ToS2DeconError * S3]]  
//   the top-level S3 reconstructs PASCAL ground truth
//   stride_S3 = 2*stride_S2 = 4*stride_S1
//   nxp_S3 = 2*nxp_S2 = 4*nxp_S1 {18X18 -> 36X36 -> 72X72}
//   S(A) = integral{T(A) - u}dA
//
///////////////////////////
// // Based on HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).



debugParsing = true;

//
// layers
//

HyPerCol "column" = {
    startTime                           = 0;
    dt                                  = 1;
    dtAdaptFlag                         = true;
    dtScaleMax                          = 1; //8;
    dtScaleMin                          = 0.01; //0.1;
    dtChangeMax                         = 0.01; //0.025;
    dtChangeMin                         = 0.0; //0;
    dtMinToleratedTimeScale             = 0.0001;
    stopTime                            = 19060800; //15884*1200
    progressInterval                    = 1200;
    writeProgressToErr                  = true;
    verifyWrites                        = false;
    outputPath                          = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1";
    printParamsFilename                 = "KITTI_S1_128_S2_256_S3_512_DCA_KITTI_train1.params";
    randomSeed                          = 1234567890;
    // need dimensions to be divisible by 8*number of mpi rows or columns
    nx                                  = 512; //1226; // original width
    ny                                  = 152; //160 //370; // original height
    filenamesContainLayerNames          = 2;
    filenamesContainConnectionNames     = 2;
    initializeFromCheckpointDir         = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint";
    defaultInitializeFromCheckpointFlag = false;
    checkpointWrite                     = true;
    checkpointWriteDir                  = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints";
    checkpointWriteTriggerMode          = "step";
    checkpointWriteStepInterval         = 12000;
    deleteOlderCheckpoints              = false;
    suppressNonplasticCheckpoints       = false;
    writeTimescales                     = true;
    errorOnNotANumber                   = false;
};

// Image layers

Movie "ImageLeft" = {
  nxScale                             = 1;
  nyScale                             = 1;
    nf                                  = 3;
    phase                               = 0;
    mirrorBCflag                        = true;
    initializeFromCheckpointFlag        = false;
    writeStep                           = 1200; //4800;
    initialWriteTime                    = 1200; //4800;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    offsetAnchor                        = "tl";
    offsetX                             = 0; //3;
    offsetY                             = 0; //10;
    writeImages                         = 0;
    useImageBCflag                      = false;
  autoResizeFlag                      = true; //false;
    inverseFlag                         = false;
    normalizeLuminanceFlag              = true;
    normalizeStdDev                     = true;
    jitterFlag                          = 0;
    padValue                            = 0;
    inputPath                           = "/nh/compneuro/Data/KITTI/list/image_02.txt";
    displayPeriod                       = 1200;
    echoFramePathnameFlag               = true;
    start_frame_index                   = 0;
    skip_frame_index                    = 0;
    writeFrameToTimestamp               = true;
    flipOnTimescaleError                = true;
    resetToStartOnLoop                  = false;
};

Movie "ImageRight" = {
#include "ImageLeft";
  @inputPath                           = "/nh/compneuro/Data/KITTI/list/image_03.txt";
};

ANNLayer "ImageLeftDecon" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 11;
    triggerLayerName                    = NULL;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ZeroV";
    writeStep                           = 1200; //4800;
    initialWriteTime                    = 1200; //4800;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
};

ANNLayer "ImageRightDecon" = {
#include "ImageLeftDecon";
};

//ANNLayer "ImageLeftRecon" = {
//#include "ImageLeftDecon";
//  triggerLayerName                    = "ImageLeft";
//  triggerOffset                       = 0;
//  @phase                               = 11;
//};

ANNNormalizedErrorLayer "ImageLeftDeconError" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 1;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1200;
    initialWriteTime                    = 1200;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    VThresh                             = 0;
    AMin                                = 0;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
    errScale                            = 1;
};

ANNNormalizedErrorLayer "ImageRightDeconError" = {
#include  "ImageLeftDeconError";
};

//ANNErrorLayer "ImageLeftReconError" = {
//    nxScale                             = 1;
//    nyScale                             = 1;
//    nf                                  = 3;
//    phase                               = 1;
//    mirrorBCflag                        = false;
//    valueBC                             = 0;
//    initializeFromCheckpointFlag        = false;
//    InitVType                           = "ZeroV";
//    triggerLayerName                    = "ImageLeft";
//    triggerOffset                       = 0;
//    writeStep                           = 4800;
//    initialWriteTime                    = 4800;
//    sparseLayer                         = false;
//    updateGpu                           = false;
//    dataType                            = NULL;
//    VThresh                             = 0.0; //0.00025;
//    AMin                                = 0;
//    AMax                                = 3.40282e+38;
//    AShift                              = 0;
//    VWidth                              = 0;
//    clearGSynInterval                   = 0;
//    errScale                            = 1;
//};


// S1 layers

ANNErrorLayer "S1DeconError" = {
  nxScale                             = 0.5;
  nyScale                             = 0.5;
  nf                                  = 128;
  phase                               = 2;
  mirrorBCflag                        = false;
  valueBC                             = 0;
  initializeFromCheckpointFlag        = false;
  InitVType                           = "ZeroV";
  triggerLayerName                    = NULL;
  writeStep                           = -4800;
  initialWriteTime                    = -4800;
  sparseLayer                         = false;
  updateGpu                           = false;
  dataType                            = NULL;
  VThresh                             = 0.0; //0.00025;
  AMin                                = 0;
  AMax                                = 3.40282e+38;
  AShift                              = 0;
  VWidth                              = 0;
  clearGSynInterval                   = 0;
  errScale                            = 1;
};

ANNErrorLayer "S1LeftDeconError" = {
#include "S1DeconError";
};

ANNErrorLayer "S1RightDeconError" = {
#include "S1DeconError";
};

//ConstantLayer "ConstantS1" = {
//    nxScale                             = 0.5;
//    nyScale                             = 0.5;
//    nf                                  = 128;
//    phase                               = 0;
//    mirrorBCflag                        = false;
//    valueBC                             = 0;
//    initializeFromCheckpointFlag        = false;
//    InitVType                           = "ConstantV";
//    valueV                              = 0.003125; //0.00625; //;
//    writeStep                           = -1;
//    sparseLayer                         = false;
//    updateGpu                           = false;
//    VThresh                             = -3.40282e+38;
//    AMin                                = -3.40282e+38;
//    AMax                                = 3.40282e+38;
//    AShift                              = 0;
//    VWidth                              = 0;
//};


HyPerLCALayer "S1" = {
  nxScale                             = 0.5;
  nyScale                             = 0.5;
  nf                                  = 128;
  phase                               = 3;
  mirrorBCflag                        = false;
  valueBC                             = 0;
  initializeFromCheckpointFlag        = false;
  //InitVType                           = "InitVFromFile";
  //Vfilename                           = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1_V.pvp";
  //InitVType                           = "ConstantV";
  //valueV                              = 0.003125;
  InitVType                           = "UniformRandomV";
  minV                                = -1.0;
  maxV                                = .05; //0.05 above VThresh    
  triggerLayerName                    = NULL; //"ImageLeft";
  //triggerBehavior                     = "resetStateOnTrigger";
  //triggerResetLayerName               = "ConstantS1";
  //triggerOffset                       = 0;
  writeStep                           = 1200;
  initialWriteTime                    = 1200;
  sparseLayer                         = true;
  writeSparseValues                   = true;
  updateGpu                           = true;
  dataType                            = NULL;
  VThresh                             = 0.003125; // 0.00625; // 0.0125; //0.025; //
  AMin                                = 0;
  AMax                                = 3.40282e+38;
  AShift                              = 0;
  VWidth                              = 10;
  clearGSynInterval                   = 0;
  //numChannels                         = 2;
  timeConstantTau                     = 400;
  numWindowX                          = 1;
  numWindowY                          = 1;
  selfInteract                        = true;
};

HyPerLCALayer "S1Left" = {
#include "S1";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1Left_V.pvp";
};

HyPerLCALayer "S1Right" = {
#include "S1";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1Right_V.pvp";
};

ANNLayer "ImageLeftDeconS1" = {
#include "ImageLeftDecon";
  @phase                               = 4; 
};

ANNLayer "ImageLeftDeconS1Left" = {
#include "ImageLeftDeconS1";
};

ANNLayer "ImageRightDeconS1" = {
#include "ImageRightDecon";
  @phase                               = 4; 
};

ANNLayer "ImageRightDeconS1Right" = {
#include "ImageRightDeconS1";
};

//ANNLayer "ImageLeftReconS1" = {
//#include "ImageLeftRecon";
//  @phase                               = 4; 
//};


// S2 layers

//ANNErrorLayer "S1ReconS2Error" = {
//#include "S1DeconError";
//  @phase                               = 4;
//};

ANNErrorLayer "S2DeconError" = {
#include "S1DeconError";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256;
  @phase                               = 4;
};

ANNErrorLayer "S2LeftDeconError" = {
#include "S2DeconError";
};

ANNErrorLayer "S2RightDeconError" = {
#include "S2DeconError";
};

//ConstantLayer "ConstantS2" = {
//#include "ConstantS1";
//  @nxScale                             = 0.25;
//  @nyScale                             = 0.25;
//  @nf                                  = 256;
//  @valueV                              = 0.0125; //;
//};


HyPerLCALayer "S2" = {
#include "S1";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256; 
  @timeConstantTau                     = 800; //400; 
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2_V.pvp";
  //@valueV                              = 0.0125;
  @VThresh                             =  0.0125; // 0.025; //
  @phase                               = 5;  
  //@triggerResetLayerName               = "ConstantS2";
};

HyPerLCALayer "S2Left" = {
#include "S2";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2Left_V.pvp";
};

HyPerLCALayer "S2Right" = {
#include "S2";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2Right_V.pvp";
};

//ANNLayer "S1ReconS2" = {
//#include "ImageLeftDecon";
//  @nxScale                             = 0.5;
//  @nyScale                             = 0.5;
//  @nf                                  = 128;
//  @initialWriteTime                    = -1;
//  @writeStep                           = -1;
//  @phase                               = 6;  
//};

ANNLayer "S1DeconS2" = {
#include "ImageLeftDecon";
  @nxScale                             = 0.5;
  @nyScale                             = 0.5;
  @nf                                  = 128;
  @initialWriteTime                    = -1;
  @writeStep                           = -1;
  @phase                               = 6;  
};

ANNLayer "S1LeftDeconS2" = {
#include "S1DeconS2";
};

ANNLayer "S1RightDeconS2" = {
#include "S1DeconS2";
};

ANNLayer "S1LeftDeconS2Left" = {
#include "S1DeconS2";
};

ANNLayer "S1RightDeconS2Right" = {
#include "S1DeconS2";
};

ANNLayer "ImageLeftDeconS2" = {
#include "ImageLeftDecon";
  @phase                               = 7;  
};

ANNLayer "ImageLeftDeconS2Left" = {
#include "ImageLeftDeconS2";
};

ANNLayer "ImageRightDeconS2" = {
#include "ImageRightDecon";
  @phase                               = 7;  
};

ANNLayer "ImageRightDeconS2Right" = {
#include "ImageRightDeconS2";
};

//ANNLayer "ImageLeftReconS2" = {
//#include "ImageLeftRecon";
//  @phase                               = 7;  
//};



// S3 layers

//ANNErrorLayer "S2ReconS3Error" = {
//#include "S1ReconS2Error";
//  @nxScale                             = 0.25;
//  @nyScale                             = 0.25;
//  @nf                                  = 256;
//  @phase                               = 6;  
//};

ANNErrorLayer "S3DeconError" = {
#include "S2DeconError";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 512;
  @phase                               = 5;
};

ANNErrorLayer "S3LeftDeconError" = {
#include "S3DeconError";
};

ANNErrorLayer "S3RightDeconError" = {
#include "S3DeconError";
};

//ConstantLayer "ConstantS3" = {
//#include "ConstantS2";
//  @nxScale                             = 0.125;
//  @nyScale                             = 0.125;
//  @nf                                  = 512;
//  @valueV                              = 0.05; //0.00625; //;
//};


HyPerLCALayer "S3" = {
#include "S2";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 512; 
  @timeConstantTau                     = 1200; //400; 
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3_V.pvp";
  //@valueV                              = 0.05;
  @VThresh                             = 0.05; //0.025; //
  @phase                               = 7;  
  //@triggerResetLayerName               = "ConstantS3";
};

HyPerLCALayer "S3Left" = {
#include "S3";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3Left_V.pvp";
};

HyPerLCALayer "S3Right" = {
#include "S3";
  //@Vfilename = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3Right_V.pvp";
};


//ANNLayer "S2ReconS3" = {
//#include "S1ReconS2";
//  @nxScale                             = 0.25;
//  @nyScale                             = 0.25;
//  @nf                                  = 256;
//  @phase                               = 8;  
//};

ANNLayer "S2DeconS3" = {
#include "S1DeconS2";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256;
  @phase                               = 8;  
};

ANNLayer "S2LeftDeconS3" = {
#include "S2DeconS3";
};

ANNLayer "S2RightDeconS3" = {
#include "S2DeconS3";
};

ANNLayer "S2LeftDeconS3Left" = {
#include "S2DeconS3";
};

ANNLayer "S2RightDeconS3Right" = {
#include "S2DeconS3";
};


//ANNLayer "S1ReconS3" = {
//#include "S2ReconS3";
//  @nxScale                             = 0.5;
//  @nyScale                             = 0.5;
//  @nf                                  = 128;
//  @phase                               = 9;  
//};

ANNLayer "S1DeconS3" = {
#include "S2DeconS3";
  @nxScale                             = 0.5;
  @nyScale                             = 0.5;
  @nf                                  = 128;
  @phase                               = 9;  
};

ANNLayer "S1LeftDeconS3" = {
#include "S1DeconS3";
};

ANNLayer "S1RightDeconS3" = {
#include "S1DeconS3";
};

ANNLayer "S1LeftDeconS3Left" = {
#include "S1DeconS3";
};

ANNLayer "S1RightDeconS3Right" = {
#include "S1DeconS3";
};

//ANNLayer "ImageLeftReconS3" = {
//#include "ImageLeftReconS2";
//  @phase                               = 10;  
//};

ANNLayer "ImageLeftDeconS3" = {
#include "ImageLeftDeconS2";
  @phase                               = 10;  
};

ANNLayer "ImageLeftDeconS3Left" = {
#include "ImageLeftDeconS3";
};

//ANNLayer "ImageLeftDeconS3Left" = {
//#include "ImageLeftDeconS3";
//};
//
ANNLayer "ImageRightDeconS3" = {
#include "ImageRightDeconS2";
  @phase                               = 10;  
};

ANNLayer "ImageRightDeconS3Right" = {
#include "ImageRightDeconS3";
};



// Ground Truth

Movie "GroundTruthPixels" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 1;
    sparseLayer                         = false;
    writeStep                           = -1;
    initialWriteTime                    = -1;
    writeSparseValues                   = false;
    autoResizeFlag                      = true; //false;
    normalizeLuminanceFlag              = false;
    inputPath                           = "/home/gkenyon/KITTI/list/depth.txt";
    readPvpFile                         = false;
    phase                               = 0;
    mirrorBCflag                        = true;
    initializeFromCheckpointFlag        = false;
    updateGpu                           = false;
    dataType                            = NULL;
    offsetAnchor                        = "tl";
    offsetX                             = 0;
    offsetY                             = 0;
    writeImages                         = 0;
    useImageBCflag                      = false;
    inverseFlag                         = false;
    normalizeStdDev                     = false;
    jitterFlag                          = 0;
    padValue                            = 0;
    displayPeriod                       = 1200;
    echoFramePathnameFlag               = true;
    start_frame_index                   = 0;
    skip_frame_index                    = 0;
    writeFrameToTimestamp               = true;
    flipOnTimescaleError                = true;
    resetToStartOnLoop                  = false;
};

ANNLayer "GroundTruthDownsample" = {
#include "ImageLeftDecon";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 1;
  @phase                               = 1;
  @triggerLayerName                    = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                       = 0;
  @writeStep                           = -1;
  @initialWriteTime                    = -1;
};

BinningLayer "GroundTruth" = {
    restart = 0;
    nxScale = .125; 
    nyScale = .125;
    nf = 32; //3 pixel error allowed, we may need to change this 
    mirrorBCflag = false;
    writeSparseActivity = false;
    binMax = 1;
    binMin = 0;
    binSigma = 1;
    InitVType = "ZeroV";
    zeroNeg = false; //Set negative gt values as -1
    zeroDCR = true; //Zero values from the buffer is set to 0
    normalDist = false; //Max value will always be 1 as opposed to normal distribution
    delay = 0;
    originalLayerName = "GroundTruthDownsample";
    phase = 2;
  triggerLayerName                    = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                       = 0;
  writeStep                           = 1200; //4800.0;
  initialWriteTime                    = 1200; //4800.0;
};

ANNErrorLayer "GroundTruthReconS3Error" = {
#include "S1DeconError";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 32;
  @phase                               = 10;
  @writeStep                           = 1200; //4800.0;.0;
  @initialWriteTime                    = 1200; //4800.0;.0;
  @triggerLayerName                     = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                        = 1;
};

ANNLayer "GroundTruthReconS3" = {
#include "ImageLeftDecon";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 32;
  @phase                               = 9;
  @writeStep                           = 1200; //4800.0;.0;
  @initialWriteTime                    = 1200; //4800.0;.0;
  @triggerLayerName                     = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                        = 1;
};

ConstantLayer "BiasS3" = {
    nxScale                             = 0.125;
    nyScale                             = 0.125;
    nf                                  = 1;
    phase                               = 0;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ConstantV";
    valueV                              = 1;
    writeStep                           = -1;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
};

ANNLayer "S3MaxPooled" = {
#include "GroundTruthReconS3";
  @nf                                  = 512;
  @phase                               = 8;
  @writeStep                           = -1;
};

ANNErrorLayer "GroundTruthReconS2Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS2" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS2" = {
#include "BiasS3";
};

ANNLayer "S2MaxPooled" = {
#include "S3MaxPooled";
  @nf                                  = 256;
};

ANNErrorLayer "GroundTruthReconS1Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS1" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS1" = {
#include "BiasS3";
};

ANNLayer "S1MaxPooled" = {
#include "S3MaxPooled";
  @nf                                  = 128;
};

ANNErrorLayer "GroundTruthReconS1S2S3Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS1S2S3" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS1S2S3" = {
#include "BiasS3";
};





//
//Connections
//

//  Image connections

HyPerConn "ImageLeftToImageLeftDeconError" = {
    preLayerName                        = "ImageLeft";
    postLayerName                       = "ImageLeftDeconError";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    weightInitType                      = "OneToOneWeights";
    initWeightsFile                     = NULL;
    weightInit                          = 0.032075;
    initializeFromCheckpointFlag        = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    nxp                                 = 1;
    nyp                                 = 1;
    shrinkPatches                       = false;
    normalizeMethod                     = "none";
};

HyPerConn "ImageRightToImageRightDeconError" = {
#include "ImageLeftToImageLeftDeconError";
};

//HyPerConn "ImageLeftToImageLeftReconError" = {
//#include "ImageLeftToImageLeftDeconError";
//  @postLayerName                       = "ImageLeftReconError";
//};

IdentConn "ImageLeftDeconToImageLeftDeconError" = {
    preLayerName                        = "ImageLeftDecon";
    postLayerName                       = "ImageLeftDeconError";
    channelCode                         = 1;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageRightDeconToImageRightDeconError" = {
    preLayerName                        = "ImageRightDecon";
    postLayerName                       = "ImageRightDeconError";
    channelCode                         = 1;
    delay                               = 0;
    writeStep                           = -1;
};

//IdentConn "ImageLeftReconToImageLeftReconError" = {
//    preLayerName                        = "ImageLeftRecon";
//    postLayerName                       = "ImageLeftReconError";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S1 Connections

MomentumConn "S1ToImageLeftDeconError" = {
    preLayerName                        = "S1";
    postLayerName                       = "ImageLeftDeconError";
    channelCode                         = -1;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = true;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    //weightInitType                      = "FileWeight";
    //initWeightsFile                     = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1ToImageLeftDeconError_W.pvp";
    //useListOfArborFiles                 = false;
    //combineWeightFiles                  = false;
    weightInitType                      = "UniformRandomWeight";
    wMinInit                            = -1.0;
    wMaxInit                            = 1.0;
    sparseFraction                      = .90;
    initializeFromCheckpointFlag        = false;
    triggerFlag                         = true;
    triggerLayerName                    = "ImageLeft";
    triggerOffset                       = 1;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    nxp                                 = 18;
    nyp                                 = 18;
    shrinkPatches                       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;
    normalizeOnWeightUpdate             = true;
    rMinX                               = 0;
    rMinY                               = 0;
    nonnegativeConstraintFlag           = false;
    normalize_cutoff                    = 0;
    normalizeFromPostPerspective        = false;
    minL2NormTolerated                  = 0;
    dWMax                               = 10.0; //1.0; //0.5; //0.1;
    keepKernelsSynchronized             = true;
    useMask                             = false;
    momentumTau                         = 400;
    momentumMethod                      = "viscosity";
    momentumDecay                       = 0;
};

MomentumConn "S1LeftToImageLeftDeconError" = {
#include "S1ToImageLeftDeconError";
  @preLayerName                        = "S1Left";
  @postLayerName                       = "ImageLeftDeconError";
  //@initWeightsFile                     = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1LeftToImageLeftDeconError_W.pvp";
};

MomentumConn "S1ToImageRightDeconError" = {
#include  "S1ToImageLeftDeconError";
  @postLayerName                        = "ImageRightDeconError";
  @normalizeMethod                      = "normalizeGroup";
  normalizeGroupName                   = "S1ToImageLeftDeconError";
  //@initWeightsFile                     = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1ToImageRightDeconError_W.pvp";
};

MomentumConn "S1RightToImageRightDeconError" = {
#include "S1ToImageRightDeconError";
  @preLayerName                        = "S1Right";
  @postLayerName                       = "ImageRightDeconError";
  //@initWeightsFile                     = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1RightToImageRightDeconError_W.pvp";
};

TransposeConn "ImageLeftDeconErrorToS1DeconError" = {
    preLayerName                        = "ImageLeftDeconError";
    postLayerName                       = "S1DeconError";
    channelCode                         = 0;
    delay                               = [0.000000];
    convertRateToSpikeCount             = false;
    receiveGpu                          = true;
    updateGSynFromPostPerspective       = true;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    gpuGroupIdx                         = -1;
    originalConnName                    = "S1ToImageLeftDeconError";
};

TransposeConn "ImageLeftDeconErrorToS1LeftDeconError" = {
#include "ImageLeftDeconErrorToS1DeconError";
  @postLayerName                       = "S1LeftDeconError";
  @originalConnName                    = "S1LeftToImageLeftDeconError";
};

TransposeConn "ImageRightDeconErrorToS1DeconError" = {
#include "ImageLeftDeconErrorToS1DeconError";
  @preLayerName                        = "ImageRightDeconError";
  @originalConnName                    = "S1ToImageRightDeconError";
};

TransposeConn "ImageRightDeconErrorToS1RightDeconError" = {
#include "ImageRightDeconErrorToS1DeconError";
  @postLayerName                       = "S1RightDeconError";
  @originalConnName                    = "S1RightToImageRightDeconError";
};

IdentConn "S1DeconErrorToS1" = {
    preLayerName                        = "S1DeconError";
    postLayerName                       = "S1";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "S1LeftDeconErrorToS1Left" = {
    preLayerName                        = "S1LeftDeconError";
    postLayerName                       = "S1Left";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "S1RightDeconErrorToS1Right" = {
    preLayerName                        = "S1RightDeconError";
    postLayerName                       = "S1Right";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

CloneConn "S1ToImageLeftDeconS1" = {
    preLayerName                        = "S1";
    postLayerName                       = "ImageLeftDeconS1";
    channelCode                         = 0;
    delay                               = [0.000000];
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    originalConnName                    = "S1ToImageLeftDeconError";
};

CloneConn "S1LeftToImageLeftDeconS1Left" = {
#include "S1ToImageLeftDeconS1";
  @preLayerName                        = "S1Left";
  @postLayerName                       = "ImageLeftDeconS1Left";
  @originalConnName                    = "S1LeftToImageLeftDeconError";
};

CloneConn "S1ToImageRightDeconS1" = {
#include "S1ToImageLeftDeconS1";
  @postLayerName                       = "ImageRightDeconS1";
  @originalConnName                    = "S1ToImageRightDeconError";
};

CloneConn "S1RightToImageRightDeconS1Right" = {
#include "S1ToImageRightDeconS1";
  @preLayerName                        = "S1Right";
  @postLayerName                       = "ImageRightDeconS1Right";
  @originalConnName                    = "S1RightToImageRightDeconError";
};

//CloneConn "S1ToImageLeftReconS1" = {
//#include "S1ToImageLeftDeconS1";
//    @postLayerName                       = "ImageLeftReconS1";
//};

IdentConn "ImageLeftDeconS1ToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS1";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageLeftDeconS1LeftToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS1Left";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageRightDeconS1ToImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS1";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageRightDeconS1TRightoImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS1Right";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

//IdentConn "ImageLeftReconS1ToImageLeftRecon" = {
//    preLayerName                        = "ImageLeftReconS1";
//    postLayerName                       = "ImageLeftRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S2 connections

// deep belief "Recon" pathway

//IdentConn "S1ToS1ReconS2Error" = {
//    preLayerName                        = "S1";
//    postLayerName                       = "S1ReconS2Error";
//    channelCode                         = 0;
//    delay = 0;
//    writeStep                           = -1;
//};

//MomentumConn "S2ToS1ReconS2Error" = {
//#include "S1ToImageLeftDeconError";
//  @preLayerName                         = "S2";
//  @postLayerName                        = "S1ReconS2Error";
//  @nxp                                  = 10;
//  @nyp                                  = 10;
//  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2ToS1ReconS2Error_W.pvp";
//};


//TransposeConn "S1ReconS2ErrorToS2" = {
//#include "ImageLeftDeconErrorToS1DeconError";
//  @preLayerName                         = "S1ReconS2Error";
//  @postLayerName                        = "S2";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//CloneConn "S2ToS1ReconS2" = {
//#include "S1ToImageLeftDeconS1";
//  @preLayerName                         = "S2";
//  @postLayerName                        = "S1ReconS2";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//IdentConn "S1ReconS2ToS1ReconS2Error" = {
//    preLayerName                        = "S1ReconS2";
//    postLayerName                       = "S1ReconS2Error";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//CloneConn "S1ReconS2ToImageLeftReconS2" = {
//#include "S1ToImageLeftReconS1";
//  @preLayerName                         = "S1ReconS2";
//  @postLayerName                        = "ImageLeftReconS2";
//  @originalConnName                     = "S1ToImageLeftDeconError";
//};

//IdentConn "ImageLeftReconS2ToImageLeftRecon" = {
//    preLayerName                        = "ImageLeftReconS2";
//    postLayerName                       = "ImageLeftRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S2 deconvolutional "Decon" pathway

MomentumConn "S2ToS1DeconError" = {
#include "S1ToImageLeftDeconError";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1DeconError";
  @nxp                                  = 10;
  @nyp                                  = 10;
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2ToS1DeconError_W.pvp";
  //@dWMax                                = 1.0;
  //@normalizeMethod                      = "normalizeGroup";
  //normalizeGroupName                    = "S2ToS1ReconS2Error";
};

MomentumConn "S2ToS1LeftDeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1LeftDeconError";
  @normalizeMethod                      = "normalizeGroup";
  normalizeGroupName                    = "S2ToS1DeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2ToS1LeftDeconError_W.pvp";
};


MomentumConn "S2ToS1RightDeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1RightDeconError";
  @normalizeMethod                      = "normalizeGroup";
  normalizeGroupName                    = "S2ToS1DeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2ToS1RightDeconError_W.pvp";
};


MomentumConn "S2LeftToS1LeftDeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S2Left";
  @postLayerName                        = "S1LeftDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2LeftToS1LeftDeconError_W.pvp";
};


MomentumConn "S2RightToS1RightDeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S2Right";
  @postLayerName                        = "S1RightDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2RightToS1RightDeconError_W.pvp";
};


TransposeConn "S1DeconErrorToS2DeconError" = {
#include "ImageLeftDeconErrorToS1DeconError";
  @preLayerName                         = "S1DeconError";
  @postLayerName                        = "S2DeconError";
  @originalConnName                     = "S2ToS1DeconError";
};

TransposeConn "S1LeftDeconErrorToS2DeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S1LeftDeconError";
  @postLayerName                        = "S2DeconError";
  @originalConnName                     = "S2ToS1LeftDeconError";
};

TransposeConn "S1RightDeconErrorToS2DeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S1RightDeconError";
  @postLayerName                        = "S2DeconError";
  @originalConnName                     = "S2ToS1RightDeconError";
};

TransposeConn "S1LeftDeconErrorToS2LeftDeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S1LeftDeconError";
  @postLayerName                        = "S2LeftDeconError";
  @originalConnName                     = "S2LeftToS1LeftDeconError";
};

TransposeConn "S1RightDeconErrorToS2RightDeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S1RightDeconError";
  @postLayerName                        = "S2RightDeconError";
  @originalConnName                     = "S2RightToS1RightDeconError";
};

IdentConn "S2DeconErrorToS2" = {
  preLayerName                          = "S2DeconError";
  postLayerName                         = "S2";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

IdentConn "S2LeftDeconErrorToS2Left" = {
  preLayerName                          = "S2LeftDeconError";
  postLayerName                         = "S2Left";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

IdentConn "S2RightDeconErrorToS2Right" = {
  preLayerName                          = "S2RightDeconError";
  postLayerName                         = "S2Right";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

CloneConn "S2ToS1DeconS2" = {
#include "S1ToImageLeftDeconS1";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1DeconS2";
  @originalConnName                     = "S2ToS1DeconError";
};

CloneConn "S2ToS1LeftDeconS2" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1LeftDeconS2";
  @originalConnName                     = "S2ToS1LeftDeconError";
};

CloneConn "S2ToS1RightDeconS2" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1RightDeconS2";
  @originalConnName                     = "S2ToS1RightDeconError";
};

CloneConn "S2LeftToS1LeftDeconS2Left" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S2Left";
  @postLayerName                        = "S1LeftDeconS2Left";
  @originalConnName                     = "S2LeftToS1LeftDeconError";
};

CloneConn "S2RightToS1RightDeconS2Right" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S2Right";
  @postLayerName                        = "S1RightDeconS2Right";
  @originalConnName                     = "S2RightToS1RightDeconError";
};


CloneConn "S1DeconS2ToImageLeftDeconS2" = {
#include "S1ToImageLeftDeconS1";
  @preLayerName                         = "S1DeconS2";
  @postLayerName                        = "ImageLeftDeconS2";
  @originalConnName                     = "S1ToImageLeftDeconError";
  @receiveGpu                          = true;
  @updateGSynFromPostPerspective       = true;
};

CloneConn "S1LeftDeconS2ToImageLeftDeconS2" = {
#include "S1DeconS2ToImageLeftDeconS2";
  @preLayerName                         = "S1LeftDeconS2";
  @postLayerName                        = "ImageLeftDeconS2";
  @originalConnName                     = "S1LeftToImageLeftDeconError";
};

CloneConn "S1LeftDeconS2LeftToImageLeftDeconS2Left" = {
#include "S1DeconS2ToImageLeftDeconS2";
  @preLayerName                         = "S1LeftDeconS2Left";
  @postLayerName                        = "ImageLeftDeconS2Left";
  @originalConnName                     = "S1LeftToImageLeftDeconError";
};

CloneConn "S1DeconS2ToImageRightDeconS2" = {
#include "S1ToImageRightDeconS1";
  @preLayerName                         = "S1DeconS2";
  @postLayerName                        = "ImageRightDeconS2";
  @originalConnName                     = "S1ToImageRightDeconError";
  @receiveGpu                          = true;
  @updateGSynFromPostPerspective       = true;
};

CloneConn "S1RightDeconS2ToImageRightDeconS2" = {
#include "S1DeconS2ToImageRightDeconS2";
  @preLayerName                         = "S1RightDeconS2";
  @postLayerName                        = "ImageRightDeconS2";
  @originalConnName                     = "S1RightToImageRightDeconError";
};

CloneConn "S1RightDeconS2RightToImageRightDeconS2Right" = {
#include "S1DeconS2ToImageRightDeconS2";
  @preLayerName                         = "S1RightDeconS2Right";
  @postLayerName                        = "ImageRightDeconS2Right";
  @originalConnName                     = "S1RightToImageRightDeconError";
};

//TransposeConn "S1DeconS2ToImageLeftDeconS2" = {
//#include "S1DeconErrorToS2DeconError";
//  @preLayerName                         = "S1DeconS2";
//  @postLayerName                        = "ImageLeftDeconS2";
//  @originalConnName                     = "ImageLeftDeconErrorToS1DeconError";
//};

IdentConn "ImageLeftDeconS2ToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS2";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


IdentConn "ImageLeftDeconS2LeftToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS2Left";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


IdentConn "ImageRightDeconS2ToImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS2";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageRightDeconS2RightToImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS2Right";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


// generative
//IdentConn "S1ReconS2ErrorToS1" = {
//    preLayerName                        = "S1ReconS2Error";
//    postLayerName                       = "S1";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};




// S3 connections

// deep belief "Recon" pathway

//IdentConn "S2ToS2ReconS3Error" = {
//    preLayerName                        = "S2";
//    postLayerName                       = "S2ReconS3Error";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//MomentumConn "S3ToS2ReconS3Error" = {
//#include "S2ToS1ReconS2Error";
//  @preLayerName                         = "S3";
//  @postLayerName                        = "S2ReconS3Error";
//  @nxp                                  = 10;
//  @nyp                                  = 10;
//  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3ToS2ReconS3Error_W.pvp";
//};

//TransposeConn "S2ReconS3ErrorToS3" = {
//#include "S1ReconS2ErrorToS2";
//  @preLayerName                         = "S2ReconS3Error";
//  @postLayerName                        = "S3";
//  @originalConnName                     = "S3ToS2ReconS3Error";
//};

//CloneConn "S3ToS2ReconS3" = {
//#include "S2ToS1ReconS2";
//  @preLayerName                         = "S3";
//  @postLayerName                        = "S2ReconS3";
//  @originalConnName                     = "S3ToS2ReconS3Error";
//};

//IdentConn "S2ReconS3ToS2ReconS3Error" = {
//    preLayerName                        = "S2ReconS3";
//    postLayerName                       = "S2ReconS3Error";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//CloneConn "S2ReconS3ToS1ReconS3" = {
//#include "S1ReconS2ToImageLeftReconS2";
//  @preLayerName                         = "S2ReconS3";
//  @postLayerName                        = "S1ReconS3";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//CloneConn "S1ReconS3ToImageLeftReconS3" = {
//#include "S1ReconS2ToImageLeftReconS2";
//  @preLayerName                         = "S1ReconS3";
//  @postLayerName                        = "ImageLeftReconS3";
//  @originalConnName                     = "S1ToImageLeftDeconError";
//};

//IdentConn "ImageLeftReconS3ToImageLeftRecon" = {
//    preLayerName                        = "ImageLeftReconS3";
//    postLayerName                       = "ImageLeftRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S3 deconvolutional neural net "Decon" pathway

MomentumConn "S3ToS2DeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2DeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3ToS2DeconError_W.pvp";
  //@dWMax                                = 1.0;
  //@normalizeMethod                      = "normalizeGroup";
  //@normalizeGroupName                    = "S3ToS2ReconS3Error";
};

MomentumConn "S3ToS2LeftDeconError" = {
#include "S3ToS2DeconError";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2LeftDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3ToS2LeftDeconError_W.pvp";
  @normalizeMethod                      = "normalizeGroup";
  normalizeGroupName                    = "S3ToS2DeconError";
};

MomentumConn "S3ToS2RightDeconError" = {
#include "S3ToS2DeconError";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2RightDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3ToS2RightDeconError_W.pvp";
  @normalizeMethod                      = "normalizeGroup";
  normalizeGroupName                    = "S3ToS2DeconError";
};

MomentumConn "S3LeftToS2LeftDeconError" = {
#include "S3ToS2DeconError";
  @preLayerName                         = "S3Left";
  @postLayerName                        = "S2LeftDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3LeftToS2LeftDeconError_W.pvp";
};

MomentumConn "S3RightToS2RightDeconError" = {
#include "S3ToS2DeconError";
  @preLayerName                         = "S3Right";
  @postLayerName                        = "S2RightDeconError";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3RightToS2RightDeconError_W.pvp";
};

TransposeConn "S2DeconErrorToS3DeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S2DeconError";
  @postLayerName                        = "S3DeconError";
  @originalConnName                     = "S3ToS2DeconError";
};

TransposeConn "S2LeftDeconErrorToS3DeconError" = {
#include "S2DeconErrorToS3DeconError";
  @preLayerName                         = "S2LeftDeconError";
  @postLayerName                        = "S3DeconError";
  @originalConnName                     = "S3ToS2LeftDeconError";  
};

TransposeConn "S2RightDeconErrorToS3DeconError" = {
#include "S2DeconErrorToS3DeconError";
  @preLayerName                         = "S2RightDeconError";
  @postLayerName                        = "S3DeconError";
  @originalConnName                     = "S3ToS2RightDeconError";  
};

TransposeConn "S2LeftDeconErrorToS3LeftDeconError" = {
#include "S2DeconErrorToS3DeconError";
  @preLayerName                         = "S2LeftDeconError";
  @postLayerName                        = "S3LeftDeconError";
  @originalConnName                     = "S3LeftToS2LeftDeconError";  
};

TransposeConn "S2RightDeconErrorToS3RightDeconError" = {
#include "S2DeconErrorToS3DeconError";
  @preLayerName                         = "S2RightDeconError";
  @postLayerName                        = "S3RightDeconError";
  @originalConnName                     = "S3RightToS2RightDeconError";  
};

IdentConn "S3DeconErrorToS3" = {
  preLayerName                          = "S3DeconError";
  postLayerName                         = "S3";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

IdentConn "S3LeftDeconErrorToS3Left" = {
  preLayerName                          = "S3LeftDeconError";
  postLayerName                         = "S3Left";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

IdentConn "S3RightDeconErrorToS3Right" = {
  preLayerName                          = "S3RightDeconError";
  postLayerName                         = "S3Right";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

CloneConn "S3ToS2DeconS3" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2DeconS3";
  @originalConnName                     = "S3ToS2DeconError";
};

CloneConn "S3ToS2LeftDeconS3" = {
#include "S3ToS2DeconS3";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2LeftDeconS3";
  @originalConnName                     = "S3ToS2LeftDeconError";
};

CloneConn "S3ToS2RightDeconS3" = {
#include "S3ToS2DeconS3";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2RightDeconS3";
  @originalConnName                     = "S3ToS2RightDeconError";
};

CloneConn "S3LeftToS2LeftDeconS3Left" = {
#include "S3ToS2DeconS3";
  @preLayerName                         = "S3Left";
  @postLayerName                        = "S2LeftDeconS3Left";
  @originalConnName                     = "S3LeftToS2LeftDeconError";
};

CloneConn "S3RightToS2RightDeconS3Right" = {
#include "S3ToS2DeconS3";
  @preLayerName                         = "S3Right";
  @postLayerName                        = "S2RightDeconS3Right";
  @originalConnName                     = "S3RightToS2RightDeconError";
};


CloneConn "S2DeconS3ToS1DeconS3" = {
#include "S1DeconS2ToImageLeftDeconS2";
  @preLayerName                         = "S2DeconS3";
  @postLayerName                        = "S1DeconS3";
  @originalConnName                     = "S2ToS1DeconError";
};

CloneConn "S2LeftDeconS3ToS1LeftDeconS3" = {
#include "S2DeconS3ToS1DeconS3";
  @preLayerName                         = "S2LeftDeconS3";
  @postLayerName                        = "S1LeftDeconS3";
  @originalConnName                     = "S2LeftToS1LeftDeconError";
};

CloneConn "S2RightDeconS3ToS1RightDeconS3" = {
#include "S2DeconS3ToS1DeconS3";
  @preLayerName                         = "S2RightDeconS3";
  @postLayerName                        = "S1RightDeconS3";
  @originalConnName                     = "S2RightToS1RightDeconError";
};

CloneConn "S2LeftDeconS3LeftToS1LeftDeconS3Left" = {
#include "S2DeconS3ToS1DeconS3";
  @preLayerName                         = "S2LeftDeconS3Left";
  @postLayerName                        = "S1LeftDeconS3Left";
  @originalConnName                     = "S2LeftToS1LeftDeconError";
};

CloneConn "S2RightDeconS3RightToS1RightDeconS3Right" = {
#include "S2DeconS3ToS1DeconS3";
  @preLayerName                         = "S2RightDeconS3Right";
  @postLayerName                        = "S1RightDeconS3Right";
  @originalConnName                     = "S2RightToS1RightDeconError";
};

//TransposeConn "S2DeconS3ToS1DeconS3" = {
//#include "S2DeconErrorToS3DeconError";
//  @preLayerName                         = "S2DeconS3";
//  @postLayerName                        = "S1DeconS3";
//  @originalConnName                     = "S1DeconErrorToS2DeconError";
//};

CloneConn "S1DeconS3ToImageLeftDeconS3" = {
#include "S1DeconS2ToImageLeftDeconS2";
  @preLayerName                         = "S1DeconS3";
  @postLayerName                        = "ImageLeftDeconS3";
  @originalConnName                     = "S1ToImageLeftDeconError";
};

CloneConn "S1LeftDeconS3ToImageLeftDeconS3" = {
#include "S1DeconS3ToImageLeftDeconS3";
  @preLayerName                         = "S1LeftDeconS3";
  @postLayerName                        = "ImageLeftDeconS3";
  @originalConnName                     = "S1LeftToImageLeftDeconError";
};

CloneConn "S1LeftDeconS3LeftToImageLeftDeconS3Left" = {
#include "S1DeconS3ToImageLeftDeconS3";
  @preLayerName                         = "S1LeftDeconS3Left";
  @postLayerName                        = "ImageLeftDeconS3Left";
  @originalConnName                     = "S1LeftToImageLeftDeconError";
};

CloneConn "S1DeconS3ToImageRightDeconS3" = {
#include "S1DeconS2ToImageRightDeconS2";
  @preLayerName                         = "S1DeconS3";
  @postLayerName                        = "ImageRightDeconS3";
  @originalConnName                     = "S1ToImageRightDeconError";
};

CloneConn "S1RightDeconS3ToImageRightDeconS3" = {
#include "S1DeconS3ToImageRightDeconS3";
  @preLayerName                         = "S1RightDeconS3";
  @postLayerName                        = "ImageRightDeconS3";
  @originalConnName                     = "S1RightToImageRightDeconError";
};

CloneConn "S1RightDeconS3RightToImageRightDeconS3Right" = {
#include "S1DeconS3ToImageRightDeconS3";
  @preLayerName                         = "S1RightDeconS3Right";
  @postLayerName                        = "ImageRightDeconS3Right";
  @originalConnName                     = "S1RightToImageRightDeconError";
};

//TransposeConn "S1DeconS3ToImageLeftDeconS3" = {
//#include "S2DeconErrorToS3DeconError";
//  @preLayerName                         = "S1DeconS3";
//  @postLayerName                        = "ImageLeftDeconS3";
//  @originalConnName                     = "ImageLeftDeconErrorToS1DeconError";
//};

IdentConn "ImageLeftDeconS3ToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS3";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageLeftDeconS3LeftToImageLeftDecon" = {
    preLayerName                        = "ImageLeftDeconS3Left";
    postLayerName                       = "ImageLeftDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


IdentConn "ImageRightDeconS3ToImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS3";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

IdentConn "ImageRightDeconS3RightToImageRightDecon" = {
    preLayerName                        = "ImageRightDeconS3Right";
    postLayerName                       = "ImageRightDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

// generative
//IdentConn "S2ReconS3ErrorToS2" = {
//    preLayerName                        = "S2ReconS3Error";
//    postLayerName                       = "S2";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// Ground Truth connections

PoolingConn "GroundTruthPixelsToGroundTruthDownsample" = {
    preLayerName                        = "GroundTruthPixels";
    postLayerName                       = "GroundTruthDownsample";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    initializeFromCheckpointFlag        = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "maxpooling";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    nxp                                 = 1;
    nyp                                 = 1;
    shrinkPatches                       = false;
    needPostIndexLayer                  = false;
};

IdentConn "GroundTruthToGroundTruthReconS3Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS3Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS2Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS2Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS1Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS1Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS1S2S3Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS1S2S3Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

PoolingConn "S3ToS3MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthDownsample";
  @preLayerName                        = "S3";
  @postLayerName                       = "S3MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};

PoolingConn "S2ToS2MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthDownsample";
  @preLayerName                        = "S2";
  @postLayerName                       = "S2MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};

PoolingConn "S1ToS1MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthDownsample";
  @preLayerName                        = "S1";
  @postLayerName                       = "S1MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};


HyPerConn "S3MaxPooledToGroundTruthReconS3Error" = {
  preLayerName                        = "S3MaxPooled";
  postLayerName                       = "GroundTruthReconS3Error";
  nxp                                 = 1;
  nyp                                 = 1;
  //weightInitType                      = "FileWeight";
  //initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3MaxPooledToGroundTruthReconS3Error_W.pvp";
  weightInitType                      = "UniformRandomWeight";
  initWeightsFile                     = NULL;
  wMinInit                            = -0.0;
  wMaxInit                            = 0.0;
  normalizeMethod                    = "none";
  dWMax                              = 1.0; //2.0; //1.0;
    channelCode                         = -1;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = true;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    initializeFromCheckpointFlag        = false;
    triggerFlag                         = true;
    triggerLayerName                    = "ImageLeft";
    triggerOffset                       = 1;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    shrinkPatches                       = false;
    keepKernelsSynchronized             = true;
    useMask                             = false;
};

HyPerConn "S2MaxPooledToGroundTruthReconS2Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS2Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2MaxPooledToGroundTruthReconS2Error_W.pvp";
};

HyPerConn "S1MaxPooledToGroundTruthReconS1Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1MaxPooledToGroundTruthReconS1Error_W.pvp";
};

HyPerConn "S1MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S1MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
};

HyPerConn "S2MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S1MaxPooledToGroundTruthReconS1S2S3Error";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S2MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
};

HyPerConn "S3MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S1MaxPooledToGroundTruthReconS1S2S3Error";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/S3MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
};

HyPerConn "BiasS3ToGroundTruthReconS3Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS3";
  @postLayerName                       = "GroundTruthReconS3Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/BiasS3ToGroundTruthReconS3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
  @dWMax                              = 0.01;
  //@momentumMethod                     = "viscosity";
  //@momentumTau                        = 1;
};

HyPerConn "BiasS2ToGroundTruthReconS2Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS2";
  @postLayerName                       = "GroundTruthReconS2Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/BiasS2ToGroundTruthReconS2Error_W.pvp";
};

HyPerConn "BiasS1ToGroundTruthReconS1Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS1";
  @postLayerName                       = "GroundTruthReconS1Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/BiasS1ToGroundTruthReconS1Error_W.pvp";
};

HyPerConn "BiasS1S2S3ToGroundTruthReconS1S2S3Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS1S2S3";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  //@initWeightsFile = "/home/gkenyon/KITTI/KITTI_S1_128_S2_256_S3_512_DCA/KITTI_train1/Checkpoints/Checkpoint9549600/BiasS1S2S3ToGroundTruthReconS1S2S3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
};

CloneConn "S3MaxPooledToGroundTruthReconS3" = {
#include "S3ToS2DeconS3";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS3";
  @originalConnName                    = "S3MaxPooledToGroundTruthReconS3Error";
};

CloneConn "S2MaxPooledToGroundTruthReconS2" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS2";
  @originalConnName                    = "S2MaxPooledToGroundTruthReconS2Error";
};

CloneConn "S1MaxPooledToGroundTruthReconS1" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1";
  @originalConnName                    = "S1MaxPooledToGroundTruthReconS1Error";
};

CloneConn "S1MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S1MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "S2MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S2MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "S3MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S3MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "BiasS3ToGroundTruthReconS3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS3";
  @postLayerName                       = "GroundTruthReconS3";
  @originalConnName                    = "BiasS3ToGroundTruthReconS3Error";
};

CloneConn "BiasS2ToGroundTruthReconS2" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS2";
  @postLayerName                       = "GroundTruthReconS2";
  @originalConnName                    = "BiasS2ToGroundTruthReconS2Error";
};

CloneConn "BiasS1ToGroundTruthReconS1" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS1";
  @postLayerName                       = "GroundTruthReconS1";
  @originalConnName                    = "BiasS1ToGroundTruthReconS1Error";
};

CloneConn "BiasS1S2S3ToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS1S2S3";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "BiasS1S2S3ToGroundTruthReconS1S2S3Error";
};

IdentConn "GroundTruthReconS3ToGroundTruthReconS3Error" = {
    preLayerName                        = "GroundTruthReconS3";
    postLayerName                       = "GroundTruthReconS3Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS2ToGroundTruthReconS2Error" = {
    preLayerName                        = "GroundTruthReconS2";
    postLayerName                       = "GroundTruthReconS2Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS1ToGroundTruthReconS1Error" = {
    preLayerName                        = "GroundTruthReconS1";
    postLayerName                       = "GroundTruthReconS1Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS1S2S3ToGroundTruthReconS1S2S3Error" = {
    preLayerName                        = "GroundTruthReconS1S2S3";
    postLayerName                       = "GroundTruthReconS1S2S3Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};


