//
// MLPTest.params
//
// created by slundquist: Mar 21, 2014
//

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 1920;  
   ny = 1080;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 5000; //180000001; //200000;
   progressInterval = 1.0; //Program will output its progress at each progressStep
   writeProgressToErr = false;  
   outputPath = "/nh/compneuro/Data/MLPLCA/LCA/heli_train_smaller/";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   checkpointRead = false;  
   checkpointWrite = true;
   checkpointWriteDir = "/nh/compneuro/Data/MLPLCA/LCA/heli_train/Checkpoints/";
   checkpointWriteStepInterval = 10000;
   deleteOlderCheckpoints = false;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
   suppressLastOutput = false;
};

//
// layers
//

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//The input layer of data
Movie "InputV1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/TrainingPlusFormative/heli_DPT/a6_V2.pvp";
    nf = 96;
    writeStep = -1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "OrigRecon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1.0;
    initialWriteTime = 1.0; //1 + writestep
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    phase = 1;
};

ANNLayer "MaskedRecon" = {
   #include "OrigRecon";
   @phase = 17;
};

ANNLayer "V1Buffer" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 96;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;
    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

RescaleLayer "V1Rescale" = {
    restart                         = false;
    originalLayerName               = "V1Buffer";
    nxScale                         = .25; 
    nyScale                         = .25; 
    nf                              = 96;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    //initialWriteTime                = ;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 2;

    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

MLPForwardLayer "ForwardLayer1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 50;
    writeStep = -1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    dropoutChance = 0;
    potentialScale = 2;
    phase = 3;
};

MLPSigmoidLayer "HiddenLayer1" = {  // 2
    nxScale           = .25;
    nyScale           = .25;
    nf                = 50;
    originalLayerName = "ForwardLayer1";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = -1;
    writeNonspikingActivity = false;
    phase = 4;
};

MLPForwardLayer "ForwardLayer2" = {
   #include "ForwardLayer1";
   @nxScale = .25;
   @nyScale = .25;
   @nf      = 10;
   @phase = 5;
};

MLPSigmoidLayer "HiddenLayer2" = {  // 2
    #include "HiddenLayer1";
    @nxScale           = .25;
    @nyScale           = .25;
    @nf                = 10;
    @originalLayerName = "ForwardLayer2";
    @phase = 6;
};

MLPForwardLayer "ForwardLayerFinal" = {
   #include "ForwardLayer1";
   @nxScale = .25;
   @nyScale = .25;
   @nf      = 1; //For binary classification
   //@dropoutChance = 0;
   @phase = 7;
};

MLPOutputLayer "OutputLayer" = {  // 2
    nxScale           = .25; //Doing 2 by 2 since this will test multiprocess as well
    nyScale           = .25;
    nf                = 1;
    originalLayerName = "ForwardLayerFinal";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = 1;
    writeNonspikingActivity = false;
    //Local target in training will be different than local target in testing: this will test that each x/y network gets the same answer
    localTarget = true; //Reducing across all output layers
    statProgressPeriod = 100;
    gtLayername = "GroundTruth";
    phase = 8;
};

HeliGTLayer "GroundTruth" = {
    restart = 0;
    nxScale = .25; 
    nyScale = .25;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ZeroV";
    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    startFrame = 1; //TODO fix this
    dataDir = "/nh/compneuro/Data/repo/neovision-data-training-heli";
    timestampFilename = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/TrainingPlusFormative/heli_DPT/timestamps/Image.txt";
    phase = 7;
};

MLPErrorLayer "ErrorFinal" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    linAlpha            = 0.1;
    ForwardLayername = "ForwardLayerFinal";
    InitVType = "ZeroV";
    VThresh = -infinity;
    finalError = true;
    phase = 9;
};

MLPErrorLayer "Error2" = {
   #include "ErrorFinal";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 10;
   @ForwardLayername = "ForwardLayer2";
   @finalError = false;
   @phase = 10;
};

MLPErrorLayer "Error1" = {
   #include "ErrorFinal";
   @nxScale = .25;
   @nyScale = .25;
   @nf = 50;
   @ForwardLayername = "ForwardLayer1";
   @finalError = false;
   @phase = 11;
};

//Connections
IdentConn "InputV1ToV1Buffer" = {
    preLayerName = "InputV1";
    postLayerName = "V1Buffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "W1V1" = {
    preLayerName = "V1Rescale";
    postLayerName = "Error1";
    channelCode = 2; //Prev layer to next err is on inhib b
    nxp = 5; 
    nyp = 5; 
    nfp = 50;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.035; //sqrt(3/2400)
    wMaxInit = .035;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .0049; //sqrt(2400)
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "W1V1Clone" = {
    preLayerName = "V1Rescale";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W1V1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "B1V1" = {
    preLayerName = "onesLayer";
    postLayerName = "Error1";
    channelCode = 2; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 50;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.035; //sqrt(3/9408)
    wMaxInit = .035;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .0097; //sqrt(9408)/10000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B1V1Clone" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "B1V1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W2" = {
   #include "W1V1";
   @nxp = 3;
   @nyp = 3;
   @nfp = 10;
   @preLayerName = "HiddenLayer1";
   @postLayerName = "Error2";
   @wMinInit = -.0816; //sqrt(3/450)
   @wMaxInit = .0816;
   @dWMax = .0021; //sqrt(450)/100000
};

CloneKernelConn "W2Clone" = {
   #include "W1V1Clone";
   @preLayerName = "HiddenLayer1";
   @postLayerName = "ForwardLayer2";
   @originalConnName = "W2";
};

TransposeConn "W2T" = {
    preLayerName = "Error2";
    postLayerName = "Error1";
    channelCode = 0; //On excitatory channel
    originalConnName = "W2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

KernelConn "B2" = {
   #include "B1V1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "onesLayer";
   @postLayerName = "Error2";
   @wMinInit = -.0816; //sqrt(3/9800)
   @wMaxInit = .0816;
   @dWMax = .0021; //sqrt(9800)/100000
};

CloneKernelConn "B2Clone" = {
   #include "B1V1Clone";
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayer2";
   @originalConnName = "B2";
};

KernelConn "W3" = {
   #include "W1V1";
   @nxp = 3;
   @nyp = 3;
   @nfp = 1;
   @preLayerName = "HiddenLayer2";
   @postLayerName = "ErrorFinal";
   @wMinInit = -.1825; //sqrt(3/90)
   @wMaxInit = .1825;
   @dWMax = .0009; //sqrt(90)/100000
};

CloneKernelConn "W3Clone" = {
   #include "W1V1Clone";
   @preLayerName = "HiddenLayer2";
   @postLayerName = "ForwardLayerFinal";
   @originalConnName = "W3";
};

TransposeConn "W3T" = {
    #include "W2T";
    @preLayerName = "ErrorFinal";
    @postLayerName = "Error2";
    @originalConnName = "W3";
};

KernelConn "B3" = {
   #include "B1V1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 1;
   @preLayerName = "onesLayer";
   @postLayerName = "ErrorFinal";
   @wMinInit = -.1825; //sqrt(3/90)
   @wMaxInit = .1825;
   @dWMax = .0009; //sqrt(90)/100000
};

CloneKernelConn "B3Clone" = {
   #include "B1V1Clone";
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayerFinal";
   @originalConnName = "B3";
};

IdentConn "GroundTruthToErrorFinal" = {
    preLayerName = "GroundTruth";
    postLayerName = "ErrorFinal";
    channelCode = 0; //Excitatory Channel
    writeStep = -1;    
    delay = 0;
};

IdentConn "OutputLayerToErrorFinal" = {
    preLayerName = "OutputLayer";
    postLayerName = "ErrorFinal";
    channelCode = 1; //Inhibitory Channel
    writeStep = -1;    
    delay = 0;
};

//Connections for recon
KernelConn "InputS1ToOrigRecon" = {
    preLayerName                        = "InputS1";
    postLayerName                       = "OrigRecon";
    channelCode                         = 0;
    weightInitType                      = "FileWeight";
    initWeightsFile                     = "/nh/compneuro/Data/CIFAR/LCA/data_batch_all15/Checkpoint20000000/S1ToError_W.pvp";
    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    triggerFlag                         = false;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    delay                               = 0.000000;
    nxp                                 = 18;
    nyp                                 = 18;
    nxpShrunken                         = 16;
    nypShrunken                         = 16;
    nfp                                 = 3;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    rMinX                               = 0;
    rMinY                               = 0;
    normalize_cutoff                    = 0;
    symmetrizeWeights                   = false;
    normalizeFromPostPerspective        = false;
    normalizeArborsIndividually         = false;
    minL2NormTolerated                  = 0;
    dWMax                               = 0.1;
    keepKernelsSynchronized             = true;
};

CloneKernelConn "MaskedInputToMaskedRecon" = {
    preLayerName = "MaskedInput";
    postLayerName = "MaskedRecon";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "InputS1ToOrigRecon";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};
