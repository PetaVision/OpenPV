//
// MLPTest.params
//
// created by slundquist: Mar 21, 2014
//

debugParsing = true;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 32; //Actual tile size based off of the csv  
   ny = 32;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 1687; //1687 for training to match up with vlfeat;
   progressInterval = 1.0; //Program will output its progress at each progressStep
   writeProgressToErr = false;  
   outputPath = "/nh/compneuro/Data/MLPLCA/LCA/lambda_100_DPT/";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   checkpointRead = false;  
   checkpointWrite = true;
   checkpointWriteDir = "/nh/compneuro/Data/MLPLCA/LCA/lambda_100_DPT/Checkpoints/";
   checkpointWriteStepInterval = 100;
   deleteOlderCheckpoints = false;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
   suppressLastOutput = false;
};

//
// layers
//

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = .03125; 
    nyScale = .03125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//The input layer of data
HeliTileMovie "InputV1" = {
    restart = 0;
    nxScale = 1; //Scale of the v1 input
    nyScale = 1;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/Challenge/026/output_18x18x48_10x10x96_lambda_001X100_DPT/a2_V1.pvp";
    targetCSV = "/nh/compneuro/Data/VLFEAT/vlfeat-0.9.18/apps/data/NeoVis/challenge/Tiles/Car/targets.csv";
    distractorCSV = "/nh/compneuro/Data/VLFEAT/vlfeat-0.9.18/apps/data/NeoVis/challenge/Tiles/distractors/distractors.csv";
    timestampFile = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/Challenge/026/output_18x18x48_10x10x96_lambda_001X100_DPT/timestamps/Image.txt";
    csvXScale = .5;
    csvYScale = .5;

    //This is what this layer is adjusting to fit the tiles
    //offsetX = 0; 
    //offsetY = 0;

    nf = 48;
    writeStep = -1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    randomMovie = 0;
    autoResizeFlag = false;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "V1Buffer" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 48;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;
};

RescaleLayer "V1Rescale" = {
    restart                         = false;
    originalLayerName               = "V1Buffer";
    nxScale                         = 1; 
    nyScale                         = 1; 
    nf                              = 48;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    //initialWriteTime                = ;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 2;
};

HeliTileMovie "InputV2" = {
    restart = 0;
    nxScale = .5; //Scale of the v1 input
    nyScale = .5;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/Challenge/026/output_18x18x48_10x10x96_lambda_001X100_DPT/a6_V2.pvp";
    targetCSV = "/nh/compneuro/Data/VLFEAT/vlfeat-0.9.18/apps/data/NeoVis/challenge/Tiles/Car/targets.csv";
    distractorCSV = "/nh/compneuro/Data/VLFEAT/vlfeat-0.9.18/apps/data/NeoVis/challenge/Tiles/distractors/distractors.csv";
    timestampFile = "/nh/compneuro/Data/repo/neovision-programs-petavision/LCA/Heli/Challenge/026/output_18x18x48_10x10x96_lambda_001X100_DPT/timestamps/Image.txt";
    csvXScale = .25;
    csvYScale = .25;

    //This is what this layer is adjusting to fit the tiles
    //offsetX = 0; 
    //offsetY = 0;

    nf = 96;
    writeStep = -1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    randomMovie = 0;
    autoResizeFlag = false;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "V2Buffer" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 96;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;
};

RescaleLayer "V2Rescale" = {
    restart                         = false;
    originalLayerName               = "V2Buffer";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 96;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    //initialWriteTime                = ;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 2;
};

MLPForwardLayer "ForwardLayer1" = {
    restart = 0;
    nxScale = .03125;
    nyScale = .03125;
    nf = 10000;
    writeStep = -1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    dropoutChance = 0;
    phase = 3;
};

MLPSigmoidLayer "HiddenLayer1" = {  // 2
    nxScale           = .03125;
    nyScale           = .03125;
    nf                = 10000;
    originalLayerName = "ForwardLayer1";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = -1;
    writeNonspikingActivity = false;
    phase = 4;
};

MLPForwardLayer "ForwardLayer2" = {
   #include "ForwardLayer1";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf      = 1000;
   @phase = 5;
};

MLPSigmoidLayer "HiddenLayer2" = {  // 2
    #include "HiddenLayer1";
    @nxScale           = .03125;
    @nyScale           = .03125;
    @nf                = 1000;
    @originalLayerName = "ForwardLayer2";
    @phase = 6;
};

MLPForwardLayer "ForwardLayer3" = {
   #include "ForwardLayer1";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf      = 10;
   @phase = 7;
};

MLPSigmoidLayer "HiddenLayer3" = {  // 2
    #include "HiddenLayer1";
    @nxScale           = .03125;
    @nyScale           = .03125;
    @nf                = 10;
    @originalLayerName = "ForwardLayer3";
    @phase = 8;
};

MLPForwardLayer "ForwardLayerFinal" = {
   #include "ForwardLayer1";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf      = 1; //For 10 categories
   @phase = 9;
};

MLPOutputLayer "OutputLayer" = {  // 2
    nxScale           = .03125;
    nyScale           = .03125;
    nf                = 1;
    originalLayerName = "ForwardLayerFinal";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = 1;
    writeNonspikingActivity = false;
    //Local target in training will be different than local target in testing: this will test that each x/y network gets the same answer
    localTarget = false; //Reducing across all output layers
    statProgressPeriod = 10;
    gtLayername = "GroundTruth";
    phase = 10;
};

HeliTileGTLayer "GroundTruth" = {
    restart = 0;
    nxScale = .03125; 
    nyScale = .03125;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ZeroV";
    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    inputTileLayer = "InputV1"; //Timestamp file of the run, will grab class from that file
    phase = 9;
};

MLPErrorLayer "ErrorFinal" = {
    restart = 0;
    nxScale = .03125;
    nyScale = .03125;
    nf = 1;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    linAlpha            = 0.1;
    ForwardLayername = "ForwardLayerFinal";
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 11;
};

MLPErrorLayer "Error3" = {
   #include "ErrorFinal";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf = 10;
   @ForwardLayername = "ForwardLayer3";
   @phase = 12;
};

MLPErrorLayer "Error2" = {
   #include "ErrorFinal";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf = 1000;
   @ForwardLayername = "ForwardLayer2";
   @phase = 13;
};

MLPErrorLayer "Error1" = {
   #include "ErrorFinal";
   @nxScale = .03125;
   @nyScale = .03125;
   @nf = 10000;
   @ForwardLayername = "ForwardLayer1";
   @phase = 14;
};

//Connections
IdentConn "InputV1ToV1Buffer" = {
    preLayerName = "InputV1";
    postLayerName = "V1Buffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

IdentConn "InputV2ToV2Buffer" = {
    preLayerName = "InputV2";
    postLayerName = "V2Buffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "W1V1" = {
    preLayerName = "V1Rescale";
    postLayerName = "Error1";
    channelCode = 2; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 10000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.00781; //sqrt(3/49152)
    wMaxInit = .00781;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .0011; //sqrt(49152)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "W1V1Clone" = {
    preLayerName = "V1Rescale";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W1V1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W1V2" = {
    #include "W1V1";
    @preLayerName = "V2Rescale";
    @wMinInit = -.01105; //sqrt(3/24576)
    @wMaxInit = .01105;
    @dWMax = .00076; //sqrt(24576)/100000
};

CloneKernelConn "W1V2Clone" = {
    #include "W1V1Clone";
    @preLayerName = "V2Rescale";
    @originalConnName = "W1V2";
};

KernelConn "B1" = {
    preLayerName = "onesLayer";
    postLayerName = "Error1";
    channelCode = 2; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 10000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.00639; //sqrt(3/73728)
    wMaxInit = .00639;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .00135; //sqrt(73728)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B1Clone" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "B1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W2" = {
   #include "W1V1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 1000;
   @preLayerName = "HiddenLayer1";
   @postLayerName = "Error2";
   @wMinInit = -.01732; //sqrt(3/10000)
   @wMaxInit = .01732;
   @dWMax = .0005; //sqrt(10000)/100000
};

CloneKernelConn "W2Clone" = {
   #include "W1V1Clone";
   @preLayerName = "HiddenLayer1";
   @postLayerName = "ForwardLayer2";
   @originalConnName = "W2";
};

TransposeConn "W2T" = {
    preLayerName = "Error2";
    postLayerName = "Error1";
    channelCode = 0; //On excitatory channel
    originalConnName = "W2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

KernelConn "B2" = {
   #include "B1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 1000;
   @preLayerName = "onesLayer";
   @postLayerName = "Error2";
   @wMinInit = -.01732; //sqrt(3/10000)
   @wMaxInit = .01732;
   @dWMax = .0005; //sqrt(10000)/100000
};

CloneKernelConn "B2Clone" = {
   #include "B1Clone";
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayer2";
   @originalConnName = "B2";
};

KernelConn "W3" = {
   #include "W1V1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "HiddenLayer2";
   @postLayerName = "Error3";
   @wMinInit = -.05477; //sqrt(3/1000)
   @wMaxInit = .05477;
   @dWMax = .00015; //sqrt(1000)/100000
};

CloneKernelConn "W3Clone" = {
   #include "W1V1Clone";
   @preLayerName = "HiddenLayer2";
   @postLayerName = "ForwardLayer3";
   @originalConnName = "W3";
};

TransposeConn "W3T" = {
    #include "W2T";
    @preLayerName = "Error3";
    @postLayerName = "Error2";
    @originalConnName = "W3";
};

KernelConn "B3" = {
   #include "B1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "onesLayer";
   @postLayerName = "Error3";
   @wMinInit = -.05477; //sqrt(3/1000)
   @wMaxInit = .05477;
   @dWMax = .00015; //sqrt(1000)/100000
};

CloneKernelConn "B3Clone" = {
   #include "B1Clone";
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayer3";
   @originalConnName = "B3";
};

KernelConn "W4" = {
   #include "W1V1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 1;
   @preLayerName = "HiddenLayer3";
   @postLayerName = "ErrorFinal";
   @wMinInit = -.5477; //sqrt(3/10)
   @wMaxInit = .5477;
   @dWMax = .00001; //sqrt(10)/100000
};

CloneKernelConn "W4Clone" = {
   #include "W1V1Clone";
   @preLayerName = "HiddenLayer3";
   @postLayerName = "ForwardLayerFinal";
   @originalConnName = "W4";
};

TransposeConn "W4T" = {
    #include "W2T";
    @preLayerName = "ErrorFinal";
    @postLayerName = "Error3";
    @originalConnName = "W4";
};

KernelConn "B4" = {
   #include "B1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 1;
   @preLayerName = "onesLayer";
   @postLayerName = "ErrorFinal";
   @wMinInit = -.5477; //sqrt(3/10)
   @wMaxInit = .5477;
   @dWMax = .00001; //sqrt(10)/100000
};

CloneKernelConn "B4Clone" = {
   #include "B1Clone";
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayerFinal";
   @originalConnName = "B4";
};

IdentConn "GroundTruthToErrorFinal" = {
    preLayerName = "GroundTruth";
    postLayerName = "ErrorFinal";
    channelCode = 0; //Excitatory Channel
    writeStep = -1;    
    delay = 0;
};

IdentConn "OutputLayerToErrorFinal" = {
    preLayerName = "OutputLayer";
    postLayerName = "ErrorFinal";
    channelCode = 1; //Inhibitory Channel
    writeStep = -1;    
    delay = 0;
};

