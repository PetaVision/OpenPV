
///////////////////////////
// created by garkenyon, 06/12/15
//
//  strips out everything but the deconvolutional neural network portion (DCNN)
//
// implements a 3 layer multi-strided, multi-scale, multi-temporal deep sparse convolutional neural network (dSCANN) with symmetrical bottom-up and top-down connectivity
//   designed to minimize an energy function that penalizes reconstruction error of the form:
//    E = E_DCNN + E_DBN + E_Task + S(S1) + S(S2) + S(S3)
//      = ||I - W1*S1 - W1*W2*S2 - W1*W2*W3*S3||^2 + ||S1 - V2*S2||^2 + ||S2 - V3*S3||^2 + ||GT - T*S3||^2
//   the eq. of motion for d(S2)/dt is of the form:
//      W2^T * W1^T * [I - W1*S1 - W1*W2*S2 - W1*W2*W3*S3] + V2^T * [S1 - V2*S2] - [S2 - V3*S3]
//   which in terms of class names defined below becomes:
//      S1DeconErrorToS2 * ImageDeconErrorToS1 * ImageDeconError + S1ReconS2ErrorToS2 * S1ReconS2Error
//   where
//      ImageDeconError = Image - ImageDecon = Image - S1ToImageDeconError * [S1 + S2ToS1DeconError * [S2 + S3ToS2DeconError * S3]]  
//   the top-level S3 reconstructs PASCAL ground truth
//   stride_S3 = 2*stride_S2 = 4*stride_S1
//   nxp_S3 = 2*nxp_S2 = 4*nxp_S1 {18X18 -> 36X36 -> 72X72}
//   S(A) = integral{T(A) - u}dA
//
///////////////////////////
// // Based on HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).



debugParsing = true;

//
// layers
//

HyPerCol "column" = {
    startTime                           = 0;
    dt                                  = 1;
    dtAdaptFlag                         = true;
    useAdaptMethodExp1stOrder           = true;
    dtAdaptController                   = "EnergyProbe";
    dtAdaptTriggerLayerName             = "Image";
    dtScaleMax                          = 0.05; //0.1; //;    // base value for maximum time scale, actual maximum can increase
    dtScaleMin                          = 0.01; // default time scale
    dtChangeMax                         = 0.05; //0.1;  // percentage of tau effective used to set time scale
    dtChangeMin                         = 0.005; //0.01; // rate at which maximum time scale increases whenever time scale reaches the current maximum value 
    dtMinToleratedTimeScale             = 0.0001;
    stopTime                            = 9549600; //3.1832e+06;
    progressInterval                    = 1200;
    writeProgressToErr                  = true;
    verifyWrites                        = false;
    outputPath                          = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape12";
    printParamsFilename                 = "PASCAL_S1_128_S2_256_S3_512_DCA_VOC2007_landscape12.params";
    randomSeed                          = 1234567890;
    nx                                  = 256;
    ny                                  = 192;
    filenamesContainLayerNames          = 2;
    filenamesContainConnectionNames     = 2;
    initializeFromCheckpointDir         = ""; // "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape8/Checkpoints/Checkpoint9549600";
    defaultInitializeFromCheckpointFlag = false;
    checkpointWrite                     = true;
    checkpointWriteDir                  = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape12/Checkpoints";
    checkpointWriteTriggerMode          = "step";
    checkpointWriteStepInterval         = 48000;
    deleteOlderCheckpoints              = false;
    suppressNonplasticCheckpoints       = false;
    writeTimescales                     = true;
    errorOnNotANumber                   = false;
};

// Image layers

Movie "Image" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 0;
    mirrorBCflag                        = true;
    initializeFromCheckpointFlag        = false;
    writeStep                           = 1200; //4800;
    initialWriteTime                    = 1200; //4800;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    offsetAnchor                        = "tl";
    offsetX                             = 0;
    offsetY                             = 0;
    writeImages                         = 0;
    useImageBCflag                      = false;
    autoResizeFlag                      = false;
    inverseFlag                         = false;
    normalizeLuminanceFlag              = true;
    normalizeStdDev                     = true;
    jitterFlag                          = 0;
    padValue                            = 0;
    inputPath                           = "/shared/VOC2007/VOC2007_landscape_192X256_list.txt";
    displayPeriod                       = 1200;
    echoFramePathnameFlag               = true;
    start_frame_index                   = 0;
    skip_frame_index                    = 0;
    writeFrameToTimestamp               = true;
    flipOnTimescaleError                = true;
    resetToStartOnLoop                  = false;
};

ANNLayer "ImageDecon" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 11;
    triggerLayerName                    = NULL;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ZeroV";
    writeStep                           = 1200; //4800;
    initialWriteTime                    = 1200; //4800;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
};


//ANNLayer "ImageRecon" = {
//#include "ImageDecon";
//  triggerLayerName                    = "Image";
//  triggerOffset                       = 0;
//  @phase                               = 11;
//};

ANNErrorLayer "ImageDeconError" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 1;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1200;
    initialWriteTime                    = 1200;
    sparseLayer                         = false;
    updateGpu                           = false;
    dataType                            = NULL;
    VThresh                             = 0;
    AMin                                = 0;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
    errScale                            = 1;
};

//ANNErrorLayer "ImageReconError" = {
//    nxScale                             = 1;
//    nyScale                             = 1;
//    nf                                  = 3;
//    phase                               = 1;
//    mirrorBCflag                        = false;
//    valueBC                             = 0;
//    initializeFromCheckpointFlag        = false;
//    InitVType                           = "ZeroV";
//    triggerLayerName                    = "Image";
//    triggerOffset                       = 0;
//    writeStep                           = 4800;
//    initialWriteTime                    = 4800;
//    sparseLayer                         = false;
//    updateGpu                           = false;
//    dataType                            = NULL;
//    VThresh                             = 0.0; //0.00025;
//    AMin                                = 0;
//    AMax                                = 3.40282e+38;
//    AShift                              = 0;
//    VWidth                              = 0;
//    clearGSynInterval                   = 0;
//    errScale                            = 1;
//};


// S1 layers

ANNErrorLayer "S1DeconError" = {
  nxScale                             = 0.5;
  nyScale                             = 0.5;
  nf                                  = 128;
  phase                               = 2;
  mirrorBCflag                        = false;
  valueBC                             = 0;
  initializeFromCheckpointFlag        = false;
  InitVType                           = "ZeroV";
  triggerLayerName                    = NULL;
  writeStep                           = -4800;
  initialWriteTime                    = -4800;
  sparseLayer                         = false;
  updateGpu                           = false;
  dataType                            = NULL;
  VThresh                             = 0.0; //0.00025;
  AMin                                = 0;
  AMax                                = 3.40282e+38;
  AShift                              = 0;
  VWidth                              = 0;
  clearGSynInterval                   = 0;
  errScale                            = 1;
};

ConstantLayer "ConstantS1" = {
    nxScale                             = 0.5;
    nyScale                             = 0.5;
    nf                                  = 128;
    phase                               = 0;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "InitVFromFile";
    Vfilename                           = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S1_V.pvp";
    //InitVType                           = "ConstantV";
    //valueV                              = 0.003125; //0.00625; //;
    writeStep                           = -1;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
};


HyPerLCALayer "S1" = {
  nxScale                             = 0.5;
  nyScale                             = 0.5;
  nf                                  = 128;
  phase                               = 3;
  mirrorBCflag                        = false;
  valueBC                             = 0;
  initializeFromCheckpointFlag        = false;
  InitVType                           = "InitVFromFile";
  Vfilename                           = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S1_V.pvp";
  //InitVType                           = "ConstantV";
  //valueV                              = 0.003125;
  //InitVType                           = "UniformRandomV";
  //minV                                = -1.0;
  //maxV                                = .05; //0.05 above VThresh    
  triggerLayerName                    = NULL; //"Image";
  triggerBehavior                     = "resetStateOnTrigger";
  triggerResetLayerName               = "ConstantS1";
  triggerOffset                       = 0;
  writeStep                           = 1200;
  initialWriteTime                    = 1200;
  sparseLayer                         = true;
  writeSparseValues                   = true;
  updateGpu                           = true;
  dataType                            = NULL;
  VThresh                             = 0.003125; //0.00625; //0.0125; //0.025; //
  AMin                                = 0;
  AMax                                = 3.40282e+38;
  AShift                              = 0;
  VWidth                              = 10;
  clearGSynInterval                   = 0;
  //numChannels                         = 2;
  timeConstantTau                     = 400;
  numWindowX                          = 1;
  numWindowY                          = 1;
  selfInteract                        = true;
};

ANNLayer "ImageDeconS1" = {
#include "ImageDecon";
  @phase                               = 4; 
};

//ANNLayer "ImageReconS1" = {
//#include "ImageRecon";
//  @phase                               = 4; 
//};


// S2 layers

//ANNErrorLayer "S1ReconS2Error" = {
//#include "S1DeconError";
//  @phase                               = 4;
//};

ANNErrorLayer "S2DeconError" = {
#include "S1DeconError";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256;
  @phase                               = 4;
};


ConstantLayer "ConstantS2" = {
#include "ConstantS1";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256;
  @Vfilename = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2_V.pvp";
  //@valueV                              = 0.0125; //;
};


HyPerLCALayer "S2" = {
#include "S1";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256; 
  @timeConstantTau                     = 800; //400; 
  @Vfilename = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2_V.pvp";
  //@valueV                              = 0.0125;
  @VThresh                             = 0.0125; //0.025; //
  @phase                               = 5;  
  @triggerResetLayerName               = "ConstantS2";
};


//ANNLayer "S1ReconS2" = {
//#include "ImageDecon";
//  @nxScale                             = 0.5;
//  @nyScale                             = 0.5;
//  @nf                                  = 128;
//  @initialWriteTime                    = -1;
//  @writeStep                           = -1;
//  @phase                               = 6;  
//};

ANNLayer "S1DeconS2" = {
#include "ImageDecon";
  @nxScale                             = 0.5;
  @nyScale                             = 0.5;
  @nf                                  = 128;
  @initialWriteTime                    = -1;
  @writeStep                           = -1;
  @phase                               = 6;  
};

ANNLayer "ImageDeconS2" = {
#include "ImageDecon";
  @phase                               = 7;  
};

//ANNLayer "ImageReconS2" = {
//#include "ImageRecon";
//  @phase                               = 7;  
//};



// S3 layers

//ANNErrorLayer "S2ReconS3Error" = {
//#include "S1ReconS2Error";
//  @nxScale                             = 0.25;
//  @nyScale                             = 0.25;
//  @nf                                  = 256;
//  @phase                               = 6;  
//};

ANNErrorLayer "S3DeconError" = {
#include "S2DeconError";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 512;
  @phase                               = 5;
};


ConstantLayer "ConstantS3" = {
#include "ConstantS2";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 512;
  @Vfilename = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3_V.pvp";
  //@valueV                              = 0.05; //0.00625; //;
};


HyPerLCALayer "S3" = {
#include "S2";
  @nxScale                             = 0.125;
  @nyScale                             = 0.125;
  @nf                                  = 512; 
  @timeConstantTau                     = 1200; //400; 
  @Vfilename = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3_V.pvp";
  //@valueV                              = 0.05;
  @VThresh                             = 0.05; //0.025; //
  @phase                               = 7;  
  @triggerResetLayerName               = "ConstantS3";
};

//ANNLayer "S2ReconS3" = {
//#include "S1ReconS2";
//  @nxScale                             = 0.25;
//  @nyScale                             = 0.25;
//  @nf                                  = 256;
//  @phase                               = 8;  
//};

ANNLayer "S2DeconS3" = {
#include "S1DeconS2";
  @nxScale                             = 0.25;
  @nyScale                             = 0.25;
  @nf                                  = 256;
  @phase                               = 8;  
};

//ANNLayer "S1ReconS3" = {
//#include "S2ReconS3";
//  @nxScale                             = 0.5;
//  @nyScale                             = 0.5;
//  @nf                                  = 128;
//  @phase                               = 9;  
//};

ANNLayer "S1DeconS3" = {
#include "S2DeconS3";
  @nxScale                             = 0.5;
  @nyScale                             = 0.5;
  @nf                                  = 128;
  @phase                               = 9;  
};

//ANNLayer "ImageReconS3" = {
//#include "ImageReconS2";
//  @phase                               = 10;  
//};

ANNLayer "ImageDeconS3" = {
#include "ImageDeconS2";
  @phase                               = 10;  
};



// Ground Truth

MoviePvp "GroundTruthPixels" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 20;
    sparseLayer                         = true;
    writeStep                           = -1;
    initialWriteTime                    = -1;
    writeSparseValues                   = false;
    autoResizeFlag                      = false;
    normalizeLuminanceFlag              = false;
    inputPath                       = "/shared/VOC2007/VOC2007_landscape_192X256.pvp";
    readPvpFile                         = true;
    phase                               = 0;
    mirrorBCflag                        = true;
    initializeFromCheckpointFlag        = false;
    updateGpu                           = false;
    dataType                            = NULL;
    offsetAnchor                        = "tl";
    offsetX                             = 0;
    offsetY                             = 0;
    writeImages                         = 0;
    useImageBCflag                      = false;
    inverseFlag                         = false;
    normalizeStdDev                     = true;
    jitterFlag                          = 0;
    padValue                            = 0;
    displayPeriod                       = 1200;
    echoFramePathnameFlag               = true;
    start_frame_index                   = 0;
    skip_frame_index                    = 0;
    writeFrameToTimestamp               = true;
    flipOnTimescaleError                = true;
    resetToStartOnLoop                  = false;
};

ANNLayer "GroundTruthNoBackground" = {
#include "ImageDecon";
  @nxScale                             = 0.015625;
  @nyScale                             = 0.015625;
  @nf                                  = 20;
  @phase                               = 1;
  @triggerLayerName                    = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                       = 0;
  @sparseLayer                         = true;
  writeSparseValues                   = false;
  @writeStep                           = -1;
  @initialWriteTime                    = -1;
};

BackgroundLayer "GroundTruth" = {
  nxScale                             = 0.015625;
  nyScale                             = 0.015625;
  nf                                  = 21; //One more than input * rep
  writeStep                           = 1200; //4800.0;
  initialWriteTime                    = 1200; //4800.0;
  mirrorBCflag                        = false;
  valueBC                             = 0.0;
  sparseLayer                         = true;
  writeSparseValues                   = false;
  //
  InitVType                           = "ZeroV";
  //repFeatureNum = 4; //Replicating each feature 4 times
  // 
  phase                               = 2; 
  triggerLayerName                    = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                       = 0;
  originalLayerName                   = "GroundTruthNoBackground";
};

ANNErrorLayer "GroundTruthReconS3Error" = {
#include "S1DeconError";
  @nxScale                             = 0.015625;
  @nyScale                             = 0.015625;
  @nf                                  = 21;
  @phase                               = 10;
  @writeStep                           = 1200; //4800.0;.0;
  @initialWriteTime                    = 1200; //4800.0;.0;
  @triggerLayerName                     = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                        = 1;
};

ANNLayer "GroundTruthReconS3" = {
#include "ImageDecon";
  @nxScale                             = 0.015625;
  @nyScale                             = 0.015625;
  @nf                                  = 21;
  @phase                               = 9;
  @writeStep                           = 1200; //4800.0;.0;
  @initialWriteTime                    = 1200; //4800.0;.0;
  @triggerLayerName                     = "GroundTruthPixels";
  triggerBehavior                     = "updateOnlyOnTrigger";
  triggerOffset                        = 1;
};

ConstantLayer "BiasS3" = {
    nxScale                             = 0.015625;
    nyScale                             = 0.015625;
    nf                                  = 1;
    phase                               = 0;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    initializeFromCheckpointFlag        = false;
    InitVType                           = "ConstantV";
    valueV                              = 1;
    writeStep                           = -1;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
};

ANNLayer "S3MaxPooled" = {
#include "GroundTruthReconS3";
  @nf                                  = 512;
  @phase                               = 8;
  @writeStep                           = -1;
};

ANNErrorLayer "GroundTruthReconS2Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS2" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS2" = {
#include "BiasS3";
};

ANNLayer "S2MaxPooled" = {
#include "S3MaxPooled";
  @nf                                  = 256;
};

ANNErrorLayer "GroundTruthReconS1Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS1" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS1" = {
#include "BiasS3";
};

ANNLayer "S1MaxPooled" = {
#include "S3MaxPooled";
  @nf                                  = 128;
};

ANNErrorLayer "GroundTruthReconS1S2S3Error" = {
#include "GroundTruthReconS3Error";
};

ANNLayer "GroundTruthReconS1S2S3" = {
#include "GroundTruthReconS3";
};

ConstantLayer "BiasS1S2S3" = {
#include "BiasS3";
};





//
//Connections
//

//  Image connections

HyPerConn "ImageToImageDeconError" = {
    preLayerName                        = "Image";
    postLayerName                       = "ImageDeconError";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    weightInitType                      = "OneToOneWeights";
    initWeightsFile                     = NULL;
    weightInit                          = 0.032075;
    initializeFromCheckpointFlag        = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    nxp                                 = 1;
    nyp                                 = 1;
    shrinkPatches                       = false;
    normalizeMethod                     = "none";
};

//HyPerConn "ImageToImageReconError" = {
//#include "ImageToImageDeconError";
//  @postLayerName                       = "ImageReconError";
//};

IdentConn "ImageDeconToImageDeconError" = {
    preLayerName                        = "ImageDecon";
    postLayerName                       = "ImageDeconError";
    channelCode                         = 1;
    delay                               = 0;
    writeStep                           = -1;
};

//IdentConn "ImageReconToImageReconError" = {
//    preLayerName                        = "ImageRecon";
//    postLayerName                       = "ImageReconError";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S1 Connections

MomentumConn "S1ToImageDeconError" = {
    preLayerName                        = "S1";
    postLayerName                       = "ImageDeconError";
    channelCode                         = -1;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = true;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    weightInitType                      = "FileWeight";
    initWeightsFile                     = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S1ToImageDeconError_W.pvp";
    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    //weightInitType                      = "UniformRandomWeight";
    //wMinInit                            = -1.0;
    //wMaxInit                            = 1.0;
    //sparseFraction                      = .90;
    initializeFromCheckpointFlag        = false;
    triggerFlag                         = true;
    triggerLayerName                    = "Image";
    triggerOffset                       = 1;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    nxp                                 = 18;
    nyp                                 = 18;
    shrinkPatches                       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;
    normalizeOnWeightUpdate             = true;
    rMinX                               = 0;
    rMinY                               = 0;
    nonnegativeConstraintFlag           = false;
    normalize_cutoff                    = 0;
    normalizeFromPostPerspective        = false;
    minL2NormTolerated                  = 0;
    dWMax                               = 10.0; //1.0; //0.5; //0.1;
    keepKernelsSynchronized             = true;
    useMask                             = false;
    momentumTau                         = 400;
    momentumMethod                      = "viscosity";
    momentumDecay                       = 0;
};

TransposeConn "ImageDeconErrorToS1DeconError" = {
    preLayerName                        = "ImageDeconError";
    postLayerName                       = "S1DeconError";
    channelCode                         = 0;
    delay                               = [0.000000];
    convertRateToSpikeCount             = false;
    receiveGpu                          = true;
    updateGSynFromPostPerspective       = true;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    gpuGroupIdx                         = -1;
    originalConnName                    = "S1ToImageDeconError";
};


IdentConn "S1DeconErrorToS1" = {
    preLayerName                        = "S1DeconError";
    postLayerName                       = "S1";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

CloneConn "S1ToImageDeconS1" = {
    preLayerName                        = "S1";
    postLayerName                       = "ImageDeconS1";
    channelCode                         = 0;
    delay                               = [0.000000];
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    originalConnName                    = "S1ToImageDeconError";
};

//CloneConn "S1ToImageReconS1" = {
//#include "S1ToImageDeconS1";
//    @postLayerName                       = "ImageReconS1";
//};

IdentConn "ImageDeconS1ToImageDecon" = {
    preLayerName                        = "ImageDeconS1";
    postLayerName                       = "ImageDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};

//IdentConn "ImageReconS1ToImageRecon" = {
//    preLayerName                        = "ImageReconS1";
//    postLayerName                       = "ImageRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S2 connections

// deep belief "Recon" pathway

//IdentConn "S1ToS1ReconS2Error" = {
//    preLayerName                        = "S1";
//    postLayerName                       = "S1ReconS2Error";
//    channelCode                         = 0;
//    delay = 0;
//    writeStep                           = -1;
//};

//MomentumConn "S2ToS1ReconS2Error" = {
//#include "S1ToImageDeconError";
//  @preLayerName                         = "S2";
//  @postLayerName                        = "S1ReconS2Error";
//  @nxp                                  = 10;
//  @nyp                                  = 10;
//  //@initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2ToS1ReconS2Error_W.pvp";
//};


//TransposeConn "S1ReconS2ErrorToS2" = {
//#include "ImageDeconErrorToS1DeconError";
//  @preLayerName                         = "S1ReconS2Error";
//  @postLayerName                        = "S2";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//CloneConn "S2ToS1ReconS2" = {
//#include "S1ToImageDeconS1";
//  @preLayerName                         = "S2";
//  @postLayerName                        = "S1ReconS2";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//IdentConn "S1ReconS2ToS1ReconS2Error" = {
//    preLayerName                        = "S1ReconS2";
//    postLayerName                       = "S1ReconS2Error";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//CloneConn "S1ReconS2ToImageReconS2" = {
//#include "S1ToImageReconS1";
//  @preLayerName                         = "S1ReconS2";
//  @postLayerName                        = "ImageReconS2";
//  @originalConnName                     = "S1ToImageDeconError";
//};

//IdentConn "ImageReconS2ToImageRecon" = {
//    preLayerName                        = "ImageReconS2";
//    postLayerName                       = "ImageRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S2 deconvolutional "Decon" pathway

MomentumConn "S2ToS1DeconError" = {
#include "S1ToImageDeconError";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1DeconError";
  @nxp                                  = 10;
  @nyp                                  = 10;
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2ToS1DeconError_W.pvp";
  //@dWMax                                = 1.0;
  //@normalizeMethod                      = "normalizeGroup";
  //normalizeGroupName                    = "S2ToS1ReconS2Error";
};


TransposeConn "S1DeconErrorToS2DeconError" = {
#include "ImageDeconErrorToS1DeconError";
  @preLayerName                         = "S1DeconError";
  @postLayerName                        = "S2DeconError";
  @originalConnName                     = "S2ToS1DeconError";
};

IdentConn "S2DeconErrorToS2" = {
  preLayerName                          = "S2DeconError";
  postLayerName                         = "S2";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

CloneConn "S2ToS1DeconS2" = {
#include "S1ToImageDeconS1";
  @preLayerName                         = "S2";
  @postLayerName                        = "S1DeconS2";
  @originalConnName                     = "S2ToS1DeconError";
};

CloneConn "S1DeconS2ToImageDeconS2" = {
#include "S1ToImageDeconS1";
  @preLayerName                         = "S1DeconS2";
  @postLayerName                        = "ImageDeconS2";
  @originalConnName                     = "S1ToImageDeconError";
  @receiveGpu                          = true;
  @updateGSynFromPostPerspective       = true;
};

//TransposeConn "S1DeconS2ToImageDeconS2" = {
//#include "S1DeconErrorToS2DeconError";
//  @preLayerName                         = "S1DeconS2";
//  @postLayerName                        = "ImageDeconS2";
//  @originalConnName                     = "ImageDeconErrorToS1DeconError";
//};

IdentConn "ImageDeconS2ToImageDecon" = {
    preLayerName                        = "ImageDeconS2";
    postLayerName                       = "ImageDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


// generative
//IdentConn "S1ReconS2ErrorToS1" = {
//    preLayerName                        = "S1ReconS2Error";
//    postLayerName                       = "S1";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};




// S3 connections

// deep belief "Recon" pathway

//IdentConn "S2ToS2ReconS3Error" = {
//    preLayerName                        = "S2";
//    postLayerName                       = "S2ReconS3Error";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//MomentumConn "S3ToS2ReconS3Error" = {
//#include "S2ToS1ReconS2Error";
//  @preLayerName                         = "S3";
//  @postLayerName                        = "S2ReconS3Error";
//  @nxp                                  = 10;
//  @nyp                                  = 10;
//  //@initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3ToS2ReconS3Error_W.pvp";
//};

//TransposeConn "S2ReconS3ErrorToS3" = {
//#include "S1ReconS2ErrorToS2";
//  @preLayerName                         = "S2ReconS3Error";
//  @postLayerName                        = "S3";
//  @originalConnName                     = "S3ToS2ReconS3Error";
//};

//CloneConn "S3ToS2ReconS3" = {
//#include "S2ToS1ReconS2";
//  @preLayerName                         = "S3";
//  @postLayerName                        = "S2ReconS3";
//  @originalConnName                     = "S3ToS2ReconS3Error";
//};

//IdentConn "S2ReconS3ToS2ReconS3Error" = {
//    preLayerName                        = "S2ReconS3";
//    postLayerName                       = "S2ReconS3Error";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};

//CloneConn "S2ReconS3ToS1ReconS3" = {
//#include "S1ReconS2ToImageReconS2";
//  @preLayerName                         = "S2ReconS3";
//  @postLayerName                        = "S1ReconS3";
//  @originalConnName                     = "S2ToS1ReconS2Error";
//};

//CloneConn "S1ReconS3ToImageReconS3" = {
//#include "S1ReconS2ToImageReconS2";
//  @preLayerName                         = "S1ReconS3";
//  @postLayerName                        = "ImageReconS3";
//  @originalConnName                     = "S1ToImageDeconError";
//};

//IdentConn "ImageReconS3ToImageRecon" = {
//    preLayerName                        = "ImageReconS3";
//    postLayerName                       = "ImageRecon";
//    channelCode                         = 0;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// S3 deconvolutional neural net "Decon" pathway

MomentumConn "S3ToS2DeconError" = {
#include "S2ToS1DeconError";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2DeconError";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3ToS2DeconError_W.pvp";
  //@dWMax                                = 1.0;
  //@normalizeMethod                      = "normalizeGroup";
  //@normalizeGroupName                    = "S3ToS2ReconS3Error";
};


TransposeConn "S2DeconErrorToS3DeconError" = {
#include "S1DeconErrorToS2DeconError";
  @preLayerName                         = "S2DeconError";
  @postLayerName                        = "S3DeconError";
  @originalConnName                     = "S3ToS2DeconError";
};

IdentConn "S3DeconErrorToS3" = {
  preLayerName                          = "S3DeconError";
  postLayerName                         = "S3";
  channelCode                           = 0;
  delay                                 = 0;
  writeStep                             = -1;
};

CloneConn "S3ToS2DeconS3" = {
#include "S2ToS1DeconS2";
  @preLayerName                         = "S3";
  @postLayerName                        = "S2DeconS3";
  @originalConnName                     = "S3ToS2DeconError";
};

CloneConn "S2DeconS3ToS1DeconS3" = {
#include "S1DeconS2ToImageDeconS2";
  @preLayerName                         = "S2DeconS3";
  @postLayerName                        = "S1DeconS3";
  @originalConnName                     = "S2ToS1DeconError";
};

//TransposeConn "S2DeconS3ToS1DeconS3" = {
//#include "S2DeconErrorToS3DeconError";
//  @preLayerName                         = "S2DeconS3";
//  @postLayerName                        = "S1DeconS3";
//  @originalConnName                     = "S1DeconErrorToS2DeconError";
//};

CloneConn "S1DeconS3ToImageDeconS3" = {
#include "S1DeconS2ToImageDeconS2";
  @preLayerName                         = "S1DeconS3";
  @postLayerName                        = "ImageDeconS3";
  @originalConnName                     = "S1ToImageDeconError";
};

//TransposeConn "S1DeconS3ToImageDeconS3" = {
//#include "S2DeconErrorToS3DeconError";
//  @preLayerName                         = "S1DeconS3";
//  @postLayerName                        = "ImageDeconS3";
//  @originalConnName                     = "ImageDeconErrorToS1DeconError";
//};

IdentConn "ImageDeconS3ToImageDecon" = {
    preLayerName                        = "ImageDeconS3";
    postLayerName                       = "ImageDecon";
    channelCode                         = 0;
    delay                               = 0;
    writeStep                           = -1;
};


// generative
//IdentConn "S2ReconS3ErrorToS2" = {
//    preLayerName                        = "S2ReconS3Error";
//    postLayerName                       = "S2";
//    channelCode                         = 1;
//    delay                               = 0;
//    writeStep                           = -1;
//};


// Ground Truth connections

PoolingConn "GroundTruthPixelsToGroundTruthNoBackground" = {
    preLayerName                        = "GroundTruthPixels";
    postLayerName                       = "GroundTruthNoBackground";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    initializeFromCheckpointFlag        = false;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "maxpooling";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    nxp                                 = 1;
    nyp                                 = 1;
    shrinkPatches                       = false;
    needPostIndexLayer                  = false;
};

IdentConn "GroundTruthToGroundTruthReconS3Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS3Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS2Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS2Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS1Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS1Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthToGroundTruthReconS1S2S3Error" = {
    preLayerName                        = "GroundTruth";
    postLayerName                       = "GroundTruthReconS1S2S3Error";
    channelCode                         = 0;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

PoolingConn "S3ToS3MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthNoBackground";
  @preLayerName                        = "S3";
  @postLayerName                       = "S3MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};

PoolingConn "S2ToS2MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthNoBackground";
  @preLayerName                        = "S2";
  @postLayerName                       = "S2MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};

PoolingConn "S1ToS1MaxPooled" = {
#include "GroundTruthPixelsToGroundTruthNoBackground";
  @preLayerName                        = "S1";
  @postLayerName                       = "S1MaxPooled";
  @nxp                                 = 1;
  @nyp                                 = 1;
};


HyPerConn "S3MaxPooledToGroundTruthReconS3Error" = {
  preLayerName                        = "S3MaxPooled";
  postLayerName                       = "GroundTruthReconS3Error";
  nxp                                 = 1;
  nyp                                 = 1;
  weightInitType                      = "FileWeight";
  initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3MaxPooledToGroundTruthReconS3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
  normalizeMethod                    = "none";
  dWMax                              = 1.0; //2.0; //1.0;
    channelCode                         = -1;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = true;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;
    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    initializeFromCheckpointFlag        = false;
    triggerFlag                         = true;
    triggerLayerName                    = "Image";
    triggerOffset                       = 1;
    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    shrinkPatches                       = false;
    keepKernelsSynchronized             = true;
    useMask                             = false;
};

HyPerConn "S2MaxPooledToGroundTruthReconS2Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS2Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2MaxPooledToGroundTruthReconS2Error_W.pvp";
};

HyPerConn "S1MaxPooledToGroundTruthReconS1Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S1MaxPooledToGroundTruthReconS1Error_W.pvp";
};

HyPerConn "S1MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S1MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
};

HyPerConn "S2MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S1MaxPooledToGroundTruthReconS1S2S3Error";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S2MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
};

HyPerConn "S3MaxPooledToGroundTruthReconS1S2S3Error" = {
#include "S1MaxPooledToGroundTruthReconS1S2S3Error";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/S3MaxPooledToGroundTruthReconS1S2S3Error_W.pvp";
};

HyPerConn "BiasS3ToGroundTruthReconS3Error" = {
#include "S3MaxPooledToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS3";
  @postLayerName                       = "GroundTruthReconS3Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/BiasS3ToGroundTruthReconS3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
  @dWMax                              = 0.01;
  //@momentumMethod                     = "viscosity";
  //@momentumTau                        = 1;
};

HyPerConn "BiasS2ToGroundTruthReconS2Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS2";
  @postLayerName                       = "GroundTruthReconS2Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/BiasS2ToGroundTruthReconS2Error_W.pvp";
};

HyPerConn "BiasS1ToGroundTruthReconS1Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS1";
  @postLayerName                       = "GroundTruthReconS1Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/BiasS1ToGroundTruthReconS1Error_W.pvp";
};

HyPerConn "BiasS1S2S3ToGroundTruthReconS1S2S3Error" = {
#include "BiasS3ToGroundTruthReconS3Error";
  @preLayerName                        = "BiasS1S2S3";
  @postLayerName                       = "GroundTruthReconS1S2S3Error";
  @initWeightsFile = "/home/gkenyon/PASCAL_VOC/PASCAL_S1_128_S2_256_S3_512_DCA/VOC2007_landscape11/Checkpoints/Checkpoint9549600/BiasS1S2S3ToGroundTruthReconS1S2S3Error_W.pvp";
  //@weightInitType                      = "UniformRandomWeight";
  //@initWeightsFile                     = NULL;
  //wMinInit                            = -0.0;
  //wMaxInit                            = 0.0;
};

CloneConn "S3MaxPooledToGroundTruthReconS3" = {
#include "S3ToS2DeconS3";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS3";
  @originalConnName                    = "S3MaxPooledToGroundTruthReconS3Error";
};

CloneConn "S2MaxPooledToGroundTruthReconS2" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS2";
  @originalConnName                    = "S2MaxPooledToGroundTruthReconS2Error";
};

CloneConn "S1MaxPooledToGroundTruthReconS1" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1";
  @originalConnName                    = "S1MaxPooledToGroundTruthReconS1Error";
};

CloneConn "S1MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S1MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S1MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "S2MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S2MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S2MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "S3MaxPooledToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "S3MaxPooled";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "S3MaxPooledToGroundTruthReconS1S2S3Error";
};

CloneConn "BiasS3ToGroundTruthReconS3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS3";
  @postLayerName                       = "GroundTruthReconS3";
  @originalConnName                    = "BiasS3ToGroundTruthReconS3Error";
};

CloneConn "BiasS2ToGroundTruthReconS2" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS2";
  @postLayerName                       = "GroundTruthReconS2";
  @originalConnName                    = "BiasS2ToGroundTruthReconS2Error";
};

CloneConn "BiasS1ToGroundTruthReconS1" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS1";
  @postLayerName                       = "GroundTruthReconS1";
  @originalConnName                    = "BiasS1ToGroundTruthReconS1Error";
};

CloneConn "BiasS1S2S3ToGroundTruthReconS1S2S3" = {
#include "S3MaxPooledToGroundTruthReconS3";
  @preLayerName                        = "BiasS1S2S3";
  @postLayerName                       = "GroundTruthReconS1S2S3";
  @originalConnName                    = "BiasS1S2S3ToGroundTruthReconS1S2S3Error";
};

IdentConn "GroundTruthReconS3ToGroundTruthReconS3Error" = {
    preLayerName                        = "GroundTruthReconS3";
    postLayerName                       = "GroundTruthReconS3Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS2ToGroundTruthReconS2Error" = {
    preLayerName                        = "GroundTruthReconS2";
    postLayerName                       = "GroundTruthReconS2Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS1ToGroundTruthReconS1Error" = {
    preLayerName                        = "GroundTruthReconS1";
    postLayerName                       = "GroundTruthReconS1Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};

IdentConn "GroundTruthReconS1S2S3ToGroundTruthReconS1S2S3Error" = {
    preLayerName                        = "GroundTruthReconS1S2S3";
    postLayerName                       = "GroundTruthReconS1S2S3Error";
    channelCode                         = 1;
    delay                               = [0.000000];
    initWeightsFile                     = NULL;
    writeStep                           = -1;
};


// energy probe

ColumnEnergyProbe "EnergyProbe" = {
    probeOutputFile = "EnergyProbe.txt";
};

L2NormProbe "ImageDeconErrorL2NormEnergyProbe" = {
    textOutputFlag = true;
    targetLayer = "ImageDeconError";
    probeOutputFile = "ImageDeconErrorL2NormEnergyProbe.txt";
    coefficient = 0.5;
    energyProbe = "EnergyProbe";
    exponent = 2;
};

FirmThresholdCostFnLCAProbe "S1FirmThresholdCostFnLCAProbe" = {
    textOutputFlag = true;
    targetLayer = "S1";
    probeOutputFile = "S1FirmThresholdCostFnLCAProbe.txt";
    energyProbe = "EnergyProbe";
};

FirmThresholdCostFnLCAProbe "S2FirmThresholdCostFnLCAProbe" = {
    textOutputFlag = true;
    targetLayer = "S2";
    probeOutputFile = "S2FirmThresholdCostFnLCAProbe.txt";
    energyProbe = "EnergyProbe";
};

FirmThresholdCostFnLCAProbe "S3FirmThresholdCostFnLCAProbe" = {
    textOutputFlag = true;
    targetLayer = "S3";
    probeOutputFile = "S3FirmThresholdCostFnLCAProbe.txt";
    energyProbe = "EnergyProbe";
};

