//
// HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//

// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).

debugParsing = true;

HyPerCol "column" = {
   nx = 256; 
   ny = 256; 
   dt = 1.0;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   numSteps = 20; 
   progressStep = 1;
   outputPath = "/nh/compneuro/Data/AnimalDB/LCA/shuffleOutput/";
   filenamesContainLayerNames = true;
   filenamesContainConnectionNames = true;
   checkpointRead = false;
   checkpointReadDir = "Checkpoints";
   checkpointReadDirIndex = 704004;
   checkpointWrite = true;
   checkpointWriteDir = "/nh/compneuro/Data/AnimalDB/LCA/shuffleOutput/Checkpoints/";
   checkpointWriteStepInterval = 10000;
   deleteOlderCheckpoints = false;
   suppressLastOutput = false;  // only used if not checkpointWrite == false
   writeProgressToErr = true;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

Movie "Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    imageListPath = "/nh/compneuro/Data/AnimalDB/List.txt";
    nf = 1;
    marginWidth = 0;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1000;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
    useParamsImage = true; // only read if booting from checkpoint
};

ANNErrorLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 6;
    writeStep = 1000;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0.1;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 1;  
};

ANNLayer "Recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 3; 
};

HyPerLCALayer "V1" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 512; //2048 or 4096;
    numChannels = 2;
    marginWidth = 4;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = 0.15; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    // 
    VThresh = .1; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 2;
};

ShuffleLayer "ShuffleV1" = {
    restart                         = false;
    originalLayerName               = "V1";
    nxScale                         = .25; 
    nyScale                         = .25; 
    nf                              = 512;
    marginWidth                     = 4;
    mirrorBCflag                    = false;

    phase                           = 2;

    writeStep                       = 1000;
    initialWriteTime                = 999;
    writeSparseActivity             = false;

    shuffleMethod                   = "random"; //only random implemented
};

// connections

//  eye connections

IdentConn "MovieToError" = {
    preLayerName = "Image";
    postLayerName = "Error";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

KernelConn "V1ToError" = {
    preLayerName = "V1";
    postLayerName = "Error";
    channelCode = 1;
    nxp = 12;
    nyp = 12;
    nfp = 1;
    shrinkPatches = false;
    //nypShrunken = 8;

    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = 1; 
    normalizeMethod = "normalizeL2";
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 1000;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 50.0;
    initialWeightUpdateTime = 1999.0;
    initialWriteTime = 0.0;
    dWMax = 0.1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    stochasticReleaseFlag = false;
};

TransposeConn "ErrorToV1" = {
    preLayerName = "Error";
    postLayerName = "V1";
    channelCode = 0;
    originalConnName = "V1ToError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    stochasticReleaseFlag = false;
};

CloneKernelConn "V1ToRecon" = {
    preLayerName = "V1";
    postLayerName = "Recon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "V1ToError";
    selfFlag = false;
    stochasticReleaseFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
};

// Probes

StatsProbe "ErrorStatsFile" = {
    targetLayer = "Error";
    probeOutputFile = "Error_Stats.txt";
};

StatsProbe "ReconStatsFile" = {
    targetLayer = "Recon";
    probeOutputFile = "Recon_Stats.txt";
};

StatsProbe "V1StatsFile" = {
    targetLayer = "V1";
    probeOutputFile = "V1_Stats.txt";
};
