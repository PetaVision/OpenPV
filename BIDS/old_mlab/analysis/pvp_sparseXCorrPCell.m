function ...
      [mass_xcorr, ...
       mass_autocorr, ...
       mass_xcorr_mean, ...
       mass_xcorr_std, ...
       xcorr_array, ...
       xcorr_dist ] = ...
      pvp_sparseXCorrPCell(layer, ...
			   epoch_struct, ...
			   layer_struct, ...
			   target_struct, ...
			   xcorr_struct, ...
			   mass_xcorr, ...
			   mass_autocorr, ...
			   mass_xcorr_mean, ...
			   mass_xcorr_std, ...
			   xcorr_array, ...
			   xcorr_dist)


  global BIN_STEP_SIZE DELTA_T
  global pvp_order
  global NUM_PROCS

  stim_steps = ...
      epoch_struct.stim_begin_step(layer) : epoch_struct.stim_end_step(layer);
  stim_bins = ...
      epoch_struct.stim_begin_bin(layer) : epoch_struct.stim_end_bin(layer);

  %% init data structures
  for i_mode = 1 : xcorr_struct.num_modes
    mass_xcorr{i_mode,layer} = ...
	zeros( 2 * xcorr_struct.max_lag + 1, 1 );
    mass_autocorr{i_mode,layer} = ...
	zeros( 2 * xcorr_struct.max_lag + 1, 1 );
    xcorr_array{i_mode,layer} = ...
        zeros( xcorr_struct.num_power_mask(layer, i_mode) );
  endfor %%  %i_mode

  %% start loop over epochs
  for i_epoch = 1 : epoch_struct.num_epochs
    disp(['i_epoch = ', num2str(i_epoch)]);
    
    %% read spike train for this epoch
    [spike_array] = ...
        pvp_readSparseSpikes(layer, ...
			     i_epoch, ...
			     epoch_struct, ...
			     layer_struct, ...
			     pvp_order);
    if isempty(spike_array)
      continue;
    endif %%

    %% compute/accumulate xcorr
    %% extract scalar pairwise correlations
    for i_mode = 1 : xcorr_struct.num_modes  % 1 = peak, 2 = mean
      
      disp( ['computing xcorr', ...
             '(', ...
               num2str(layer), ...
               ',', ...
               num2str(i_mode), ...
               ')'] );

      xcorr_flag = 1;
      is_auto = 1;


      %% set up cell arrays for parcellfun
      %%disp(["setting up parcellfun"]);
      mask_ndx_tmp = ...
	  xcorr_struct.power_mask{layer, i_mode};
      num_mask_neurons_tmp = ...
	  xcorr_struct.num_power_mask(layer, i_mode);
      num_per_proc = num_mask_neurons_tmp / NUM_PROCS;
      pcell_ndx = cell(NUM_PROCS, 1);
      pcell_first = ones(NUM_PROCS, 1);
      pcell_last = repmat(round(num_per_proc), NUM_PROCS, 1);
      for i_pcell = 1 : NUM_PROCS
	pcell_first(i_pcell) = ...
	    1 + round( num_per_proc * ( i_pcell - 1 ) );
	pcell_first(i_pcell) = ...
	    pcell_first(i_pcell) + ...
	    (pcell_first(i_pcell) == pcell_last(i_pcell));
	pcell_last(i_pcell) = ...
	    round( num_per_proc * i_pcell );
	pcell_ndx{i_pcell, 1} = ...
	    mask_ndx_tmp(pcell_first(i_pcell):pcell_last(i_pcell));
      endfor
      xcorr_struct_tmp = xcorr_struct;
      xcorr_struct = struct;
      xcorr_struct.max_lag = xcorr_struct_tmp.max_lag;
      xcorr_struct.min_freq_ndx = xcorr_struct_tmp.min_freq_ndx;
      xcorr_struct.max_freq_ndx = xcorr_struct_tmp.max_freq_ndx;

      pcell_pre_train = cell(NUM_PROCS);
      pcell_post_train = cell(NUM_PROCS);
      pcell_xcorr_struct = cell(NUM_PROCS);
      pcell_pre_ndx = cell(NUM_PROCS);
      pcell_size_pre = cell(NUM_PROCS);
      pcell_post_ndx = cell(NUM_PROCS);
      pcell_size_post = cell(NUM_PROCS);
      pcell_is_auto = cell(NUM_PROCS);
      pcell_xcorr_flag = cell(NUM_PROCS);      
      for pre_pcell = 1 : NUM_PROCS
	for post_pcell = 1 : NUM_PROCS
	  pcell_pre_train{pre_pcell, post_pcell} = ...
	      spike_array(stim_steps, ...
			  pcell_ndx{pre_pcell, 1});
	  pcell_post_train{pre_pcell, post_pcell} = ...
	      spike_array(stim_steps, ...
			  pcell_ndx{post_pcell, 1});
	  pcell_xcorr_struct{pre_pcell, post_pcell} = ...
	      xcorr_struct;
	  pcell_pre_ndx{pre_pcell, post_pcell} = ...
	      pcell_ndx{pre_pcell, 1};
	  pcell_size_pre{pre_pcell, post_pcell} = ...
	      layer_struct.size_layer{layer};
	  pcell_post_ndx{pre_pcell, post_pcell} = ...
	      pcell_ndx{post_pcell, 1};
	  pcell_size_post{pre_pcell, post_pcell} = ...
	      layer_struct.size_layer{layer};
	  pcell_is_auto{pre_pcell, post_pcell} = ...
	      is_auto && (pre_pcell == post_pcell);
	  pcell_xcorr_flag{pre_pcell, post_pcell} = ...
	      xcorr_flag;
	endfor
      endfor
      xcorr_struct = xcorr_struct_tmp;
      
      %% execute pvp_xcorr2 in parallel using parcellfun
      debug_flag = 0;
      if debug_flag
	disp(["calling parcellfun @pvp_xcorr2"]);
	disp(["size(pcell_pre_train) = ", num2str(size(pcell_pre_train))]);
	disp(["size(pcell_post_train) = ", num2str(size(pcell_post_train))]);
	disp(["size(pcell_xcorr_struct) = ", num2str(size(pcell_xcorr_struct))]);
	disp(["size(pcell_pre_ndx) = ", num2str(size(pcell_pre_ndx))]);
	disp(["size(pcell_size_pre) = ", num2str(size(pcell_size_pre))]);
	disp(["size(pcell_post_ndx) = ", num2str(size(pcell_post_ndx))]);
	disp(["size(pcell_size_post) = ", num2str(size(pcell_size_post))]);
	disp(["size(pcell_is_auto) = ", num2str(size(pcell_is_auto))]);
	disp(["size(pcell_xcorr_flag) = ", num2str(size(pcell_xcorr_flag))]);
	[error_common_size, common_size_args] = ...
	    common_size(pcell_pre_train, ...
			pcell_post_train, ...
			pcell_xcorr_struct, ...
			pcell_pre_ndx, ...
			pcell_size_pre, ...
			pcell_post_ndx, ...
			pcell_size_post, ...
			pcell_is_auto, ...
			pcell_xcorr_flag);
	disp(["error_common_size = ", num2str(error_common_size)]);
      endif

      test_parcellfun = 0;
      if test_parcellfun
	for pre_pcell = 1 : NUM_PROCS
	  for post_pcell = 1 : NUM_PROCS
	    [pcell_mass_xcorr{pre_pcell, post_pcell}, ...
	     pcell_mass_autocorr{pre_pcell, post_pcell}, ...
	     pcell_mass_xcorr_mean, ...
	     pcell_mass_xcorr_std] = ...
		feval(@pvp_xcorr2, ...
		      pcell_pre_train{pre_pcell, post_pcell}, ...
		      pcell_post_train{pre_pcell, post_pcell}, ...
		      pcell_xcorr_struct{pre_pcell, post_pcell}, ...
		      pcell_pre_ndx{pre_pcell, post_pcell}, ...
		      pcell_size_pre{pre_pcell, post_pcell}, ...
		      pcell_post_ndx{pre_pcell, post_pcell}, ...
		      pcell_size_post{pre_pcell, post_pcell}, ...
		      pcell_is_auto{pre_pcell, post_pcell}, ...
		      pcell_xcorr_flag{pre_pcell, post_pcell});
	  endfor
	endfor
      else
	[pcell_mass_xcorr, ...
	 pcell_mass_autocorr, ...
	 pcell_mass_xcorr_mean, ...
	 pcell_mass_xcorr_std, ...
	 pcell_xcorr_array, ...
	 pcell_xcorr_dist] = ...
	    parcellfun(NUM_PROCS, ...
		       @pvp_xcorr2, ...
		       pcell_pre_train, ...
		       pcell_post_train, ...
		       pcell_xcorr_struct, ...
		       pcell_pre_ndx, ...
		       pcell_size_pre, ...
		       pcell_post_ndx, ...
		       pcell_size_post, ...
		       pcell_is_auto, ...
		       pcell_xcorr_flag, ...
		       "UniformOutput", false);
      endif
      %% ,"VerboseLevel", 2);
      for pre_pcell = 1 : NUM_PROCS
	for post_pcell = 1 : NUM_PROCS
	  mass_xcorr{i_mode, layer} = ...
	      mass_xcorr{i_mode, layer} + ...
              pcell_mass_xcorr{pre_pcell, post_pcell};
	  mass_autocorr{i_mode, layer} = ...
	      mass_autocorr{i_mode, layer} + ...
              pcell_mass_autocorr{pre_pcell, post_pcell};
	  first_pre = pcell_first(pre_pcell, 1);
	  last_pre = pcell_last(pre_pcell,1); 	  
	  first_post = pcell_first(post_pcell, 1);
	  last_post = pcell_last(post_pcell,1); 	  
	  xcorr_array{i_mode, layer}(first_pre:last_pre, 
				     first_post:last_post) = ...
              pcell_xcorr_array{pre_pcell, post_pcell}(:,:,i_mode);
	endfor
      endfor
      mass_xcorr{i_mode, layer} = ...
	  mass_xcorr{i_mode, layer} / (NUM_PROCS*NUM_PROCS);
      mass_autocorr{i_mode, layer} = ...
	  mass_autocorr{i_mode, layer} / (NUM_PROCS*NUM_PROCS);

    endfor %% % i_mode
    
  endfor %% % i_epoch
  
  
