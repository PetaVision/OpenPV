// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
   nx                              = 13;  // Num chars per word
   ny                              = 200; // Num words
   dt                              = 1.0;
   randomSeed                      = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   numSteps                        = 1000000;       
   progressStep                    = 10;
   outputPath                      = "/Users/dpaiton/Documents/Work/LANL/workspace/textAnalysis/output";
   filenamesContainLayerNames      = true;
   filenamesContainConnectionNames = true;
   checkpointRead                  = false;
   //checkpointReadDir               = "/Users/dpaiton/Documents/Work/LANL/workspace/textAnalysis/output/checkpoints";
   //checkpointReadDirIndex          = 1200000;
   checkpointWrite                 = true;
   checkpointWriteDir              = "/Users/dpaiton/Documents/Work/LANL/workspace/textAnalysis/output/checkpoints";
   checkpointWriteStepInterval     = 500000;
   deleteOlderCheckpoints          = false;
   //suppressLastOutput              = false;
   writeProgressToErr              = true;
   outputNamesOfLayersAndConns     = "LayerAndConnNames.txt";
};

//
// layers
//

TextStream "Text" = {
    restart                = 0;
    textInputPath          = "~/Documents/Work/LANL/workspace/textAnalysis/input/sample_input.txt";
    marginWidth            = 0;
    writeStep              = -1;
    writeSparseActivity    = false;
    displayPeriod          = 5;
    textOffset             = 0;
    valueBC                = 0;     // For outside of the text file
                            //
    useCapitalization      = true;
    loopInput              = false;
    textBCFlag             = false;
                            //
    phase                  = 0;
};

ANNLayer "Recon" = {
    restart             = 0;
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 97;
    marginWidth         = 0;
    initialWriteTime    = 4999.0;
    writeStep           = -1;//500.0;
    mirrorBCflag        = 1;
    writeSparseActivity = 0;
    //
    InitVType           = "ZeroV";
    //
    VThresh             = -infinity;
    VMax                = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin                = -infinity; 
    VShift              = 0;
    // 
    phase               = 4; 
};

ANNLayer "Error" = {
    restart             = 0;
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 97; // With Capitalization on
    marginWidth         = 4;
    initialWriteTime    = 4999.0;
    writeStep           = -1;//5000;
    mirrorBCflag        = 0;
    valueBC             = 0;     // For outside of the text file
    writeSparseActivity = 0;
    //
    InitVType           = "ZeroV";
    //
    VThresh             = -infinity;
    VMax                =  infinity;
    VMin                = -infinity;
    VShift              = 0;
    //
    phase               = 2;  
};

HyPerLCALayer "V1" = {
    restart             = 0;
    nxScale             = 1;
    nyScale             = 0.25;
    nf                  = 2048; 
    marginWidth         = 1;
    // 
    initialWriteTime    = 0;
    writeStep           = -1;//500.0;
    mirrorBCflag        = 1;
    writeSparseActivity = 1;
    //
    InitVType           = "UniformRandomV";
    minV                = -1.0;
    maxV                = .15; //0.05 above VThresh
    // 
    timeConstantTau     = 100.0;
    // 
    VThresh             = 0.1; // 0.05;
    VMax                = infinity;
    VMin                = 0;
    VShift              = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase               = 3;
};

// connections

IdentConn "TextToError" = {
    preLayerName  = "Text";
    postLayerName = "Error";
    channelCode   = 0;
    delay         = 0;
    writeStep     = -1;
};

KernelConn "V1ToError" = {
    preLayerName                 = "V1";
    postLayerName                = "Error";
    channelCode                  = 1;
                                       //
    nxp                          = 1;  // Should always be 1
    nyp                          = 4;//12; // y is num words in window
    //nxpShrunken                  = 1;
    //nypShrunken                  = 8;  // Patch will be shrunken to this size
                                       //
    nfp                          = 97; // for Capitalization (71 if no caps)
    numAxonalArbors              = 1;
    initFromLastFlag             = 0;
                                       //
    weightInitType               = "UniformRandomWeight";
    wMinInit                     = -1.0;
    wMaxInit                     = 1.0;
    sparseFraction               = .90;
                                       //
    strength                     = 1.0;  
    normalizeMethod              = "normalizeL2";
    minL2NormTolerated           = 0;
    normalizeArborsIndividually  = 0;
    normalize_cutoff             = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights            = false;
                                       //
    preActivityIsNotRate         = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized      = true; 
    combine_dW_with_W_flag       = false; 
                                       //
    writeStep                    = -1;//100;
    writeCompressedWeights       = false;
    writeCompressedCheckpoints   = false;
    plasticityFlag               = true;
    weightUpdatePeriod           = 20.0;
    initialWeightUpdateTime      = 4999.0;
    initialWriteTime             = 0.0;
    dWMax                        = 1.0;
    selfFlag                     = false;
    shmget_flag                  = false;
                                       //
    delay                        = 0;
                                       //
    stochasticReleaseFlag        = false;
    shrinkPatches                = false;
};

TransposeConn "ErrorToV1" = {
	preLayerName               = "Error";
	postLayerName              = "V1";
	channelCode                = 0;

	originalConnName           = "V1ToError";
	    
	selfFlag                   = false;
	preActivityIsNotRate       = false;  // should help make response more indepenent of time step size dt
                                        //
	writeStep                  = -1;
	writeCompressedCheckpoints = false;
	shmget_flag                = false;
                                        //
	delay                      = 0;
	
	stochasticReleaseFlag      = false;
};

CloneKernelConn "V1ToRecon" = {
   preLayerName               = "V1";
   postLayerName              = "Recon";
   channelCode                = 0;
   writeStep                  = -1;
   originalConnName           = "V1ToError";
   selfFlag                   = false;
   stochasticReleaseFlag      = false;
   delay                      = 0;
   preActivityIsNotRate       = false;
   writeCompressedCheckpoints = false;
};




// Probes

//StatsProbe "RetinaStats" = {
//    targetLayer = "Retina";
//};
//
//StatsProbe "GanglionStats" = {
//    targetLayer = "Ganglion";
//};
//
//StatsProbe "ReconStats" = {
//    targetLayer = "Recon";
//};
//
//StatsProbe "ErrorStats" = {
//    targetLayer = "Error";
//};
//
//StatsProbe "V1Stats" = {
//    targetLayer = "V1";
//};
//
//StatsProbe "RetinaStatsFile" = {
//    targetLayer = "Retina";
//    probeOutputFile = "Retina_Stats.txt";
//};
//
//StatsProbe "GanglionStatsFile" = {
//    targetLayer = "Ganglion";
//    probeOutputFile = "Ganglion_Stats.txt";
//};
//

TextStreamProbe "Text Probe" = {
    targetLayer = "Text";
    displayPeriod = 5;
    probeOutputFile = "Text_Probe.txt";
};

TextStreamProbe "Recon Probe" = {
    targetLayer = "Recon";
    displayPeriod = 5;
    probeOutputFile = "Recon_Probe.txt";
};
//
//StatsProbe "ReconStatsFile" = {
//    targetLayer = "Recon";
//    probeOutputFile = "Recon_Stats.txt";
//};
//
//StatsProbe "ErrorStatsFile" = {
//    targetLayer = "Error";
//    probeOutputFile = "Error_Stats.txt";
//};
//
//StatsProbe "V1StatsFile" = {
//    targetLayer = "V1";
//    probeOutputFile = "V1_Stats.txt";
//};