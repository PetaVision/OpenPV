---
layout: post
title:  "New Parameter File Framework"
date:   2015-5-5 23:01:55
author: Sheng Lundquist
categories: jekyll update
---

Hi all,

I have implemented a new parameter file generator framework that I would like to introduce. Lua is a scripting language that was first designed as configuration file syntax that has expanded to be a full fledged programming language. Why Lua?

Pros:
Lua is common. I found it on all systems I run on, while never explicitly installing Lua.
Lua was designed with configuration files in mind. Therefore, there is quite a bit of syntactic sugar that makes Lua parameter files look pretty much identical to current parameter files.
Lua interfacing with C++ is excellent. They provide an api to run Lua files from within C code.
Lua is extremely simple. There exists only 1 data type (tables, which is a associative memory data structure, similar to dictionaries in Python), but that data type is very flexible in implementation details.
Lua is well documented. This, along with the simplicity of Lua, allowed me to learn the language enough to implement all of this in an afternoon.
Lua is a full programming language. That means I can define variables that can replace parameter values, do arithmetic operations on those variables, or concatenate string variables together. I can implement flow control and loops within a parameter file. You can also write functions if you want to get really fancy.
Cons:
Added complexity to parameter files.
There are some language properties you need to be aware of when programming in Lua. For example, table assignments are BY REFERENCE, not by value. I have provided a deepCopy interface that allows to copy by value. Example of this is below:

{% highlight lua %}
--By reference
table1 = {mykey = "myvalue"}
table2 = table1
table2["mykey"] = "mynewvalue"
print(table1["mykey"]) --Will print "mynewvalue"

--By value
pv = require "PVModule" -- Load module
table3 = {mykey = "myvalue"}
table4 = pv.deepCopy(table3)
table4["mykey"] = "mynewvalue"
print(table3["mykey"]) --Will print "myvalue"
{% endhighlight %}

I invite you to try the Lua tool out. An examples of the tool can be found in *<PetaVision_trunk>/parameterWrapper/example_params.lua*. The generated parameter file is ran with the command lua *example_params.lua > generated.params*. The *generated_pretty.params* is the final parameter file that was fed through PetaVision.

Furthermore, PetaVision now prints out a fully contained .lua file when printing parameters as well. Running your current parameter file through PetaVision should give you a corresponding Lua file in the output directory.

Currently, the only way to run from a Lua file is to call PVModule.printConsole(), which will print a PetaVision friendly parameter file out to stdout. We hope to integrate Lua fully into PetaVision soon to skip the step of converting a Lua parameter file to an old parameter file to be then fed through PetaVision.

Please let me know if you have any questions/concerns.

Sheng


Zack Kenyon
5/6/15

I think the Lua scripting will be easier if instead of storing all of the objects in an array, it uses a table, and generates the keys with the autogenerated group name and an interator separated by a reserved character when petavision creates the lua params file. 

This is a stylistic preference, and I also think that the word group should be changed to something more descriptive. 

otherwise, nice tool. and I am going to enjoy bulding on top of it.


Sheng Lundquist
5/6/15

The reason why I wanted to use an array as opposed to a table in Lua was twofold:

1. Tables have no ordering. This shouldn't be that big of an issue, since PetaVision shouldn't care about ordering in theory, but currently, PV requires the HyPerCol be the first group in a params file.
2. Lua will silently overwrite a value if a duplicate key is specified. For example, if we allowed the groupName to be the key:

{% highlight lua %}
myParamGroup = {
myLayerName = {groupType = "ANNLayer";}
myLayerName = {groupType = "Image";} -- This will clobber the previous key of myLayerName
}
{% endhighlight %}

I believe this silent clobbering can lead to hard to find bugs in the Lua file. A workaround would be to restrict allowing direct access to myParamGroup, and only specify the addGroup function as an interface. The other option is to allow for clobbering and depend on the user to make sure not to overwrite key values.

Sheng


Zack Kenyon
5/6/15

yeah, that's why I suggested adding an iterator to the key name. 
There's already an implicit collision problem in the search by groupname though, and it can't be that hard to rewrite addgroup to at least notify on overwrite if not just fail. 

My hope though is that lua allows for much MUCH DRYer params files, and those kinds of errors should mostly go away anyway.


Sheng Lundquist
5/7/15

Hi All,

I've made modifications to the Lua file structure based on Zack's suggestions. Please double check *<PVTrunk>/parameterWrapper/example_params.lua* file for the new structure.

Sheng





