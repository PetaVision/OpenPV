// params-4x4topdown.pv
//     input parameters file for training generative model with pooling
//     and log lateral competition, on world of four horizontal and four
//     vertical lines

HyPerCol "column" = {
    nx = 4;
    ny = 4;
    dt = 1;
    randomSeed = 1;
    numSteps = 2000;
    outputPath = "./output/fourbyfourlineworld-topdowntest/";
};

// 13 layers:  Slideshow
//           1 Reconstructed Image
//           2 AnaRetina
//           3 Layer A
//           4 Pooling AnaLayer A
//           5 Arrow AnaLayer A
//           6 Flat AnaLayer A
//           7 Flat CataLayer B
//           8 Arrow CataLayer B
//           9 Pooling CataLayer B
//          10 Layer B
//          11 Energy AnaLayer A (used in computing energy)
//          12 Energy CataLayer B (used in computing energy)

ANNLayer "Slideshow" = {
    // dummy layer to keep the layer numbering I've learned
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = -1;
    mirrorBCflag = 0;
    spikingFlag = 0;
    writeNonspikingActivity = -1;

    Vrest = 0.0;

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};

LogLatWTAGenLayer "Reconstructed Image" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeNonspikingActivity = 1;
    Vrest = 0.0;

    VMax = infinity;
    VThresh = 0;
    VMin = 0;

    relaxation = 1E-1;
    activityThreshold = 0;
    auxChannelCoeff = 0.5;
    persistence = 0;
    
    sparsityTermCoefficient = 0;
};

ANNLayer "AnaRetina" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeNonspikingActivity = -1;

    Vrest = 0.0;

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};

LogLatWTAGenLayer "Layer A" = {
    restart = 0;
    nxScale = 0.25;
    nyScale = 0.25;
    nf = 8;
    marginWidth = 0;
    writeStep = 1.0;
    mirrorBCflag = 1;
    spikingFlag = 0;
    writeNonspikingActivity = 1;
    Vrest = 0.0;

    VMax = infinity;
    VThresh = 0;
    VMin = 0;

    relaxation = 1E-1;
    activityThreshold = 0;
    auxChannelCoeff = 0.5;
    persistence = 0;
    
    sparsityTermCoefficient = 0.25;
};

PoolingANNLayer "Pooling AnaLayer A" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 8;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    
    bias = 0;
};

PoolingANNLayer "Arrow AnaLayer A" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 8;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    
    bias = 1;
};

ANNLayer "Flat AnaLayer A" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 8;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};

ANNLayer "Flat CataLayer B" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 2;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};

PoolingANNLayer "Arrow CataLayer B" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 2;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    
    bias = 1;
};

PoolingANNLayer "Pooling CataLayer B" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 2;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    
    bias = 0;
};

TrainingLayer "Layer B" = {
    trainingLabelsPath = "./input/fourbyfourlineworld-topdowntest/topdowntestlabels.txt";

    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 2;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;
    
    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
    
    displayPeriod = 1000;
    distToData = 0;          
};

PtwiseProductLayer "Energy AnaLayer A" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 8;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};

PtwiseProductLayer "Energy CataLayer B" = {
    restart = 0;        
    nxScale = 0.25;     
    nyScale = 0.25;     
    nf = 2;             
    marginWidth = 0;    
    writeStep = 1.0;
    mirrorBCflag = 1;   
    spikingFlag = 0;    
    writeNonspikingActivity = -1;
        
    Vrest = 0.0;        

    VMax = infinity;
    VThresh = -infinity;
    VMin = -infinity;
};


// 24 connections:
//  AnaRetina to Reconstructed Image                      IdentConn         +
//  Retina to AnaRetina                                   IdentConn         +
//  AnaRetina to Layer A                                  GenerativeConn    + (weights A)
//  Layer A to AnaRetina Feedback                         FeedbackConn      - (weights A^T)
//
//  Layer A to Pooling AnaLayer A                         IdentConn         +
//  Pooling AnaLayer A to Layer A                         IdentConn         -
//  Layer A to Flat AnaLayer A                            IdentConn         +
//  Layer A to Arrow AnaLayer A                           IdentConn         +
//  Flat AnaLayer A to Pooling AnaLayer A                 IdentConn         -
//  Flat AnaLayer A to Arrow AnaLayer A                   IdentConn         -
//
//  Layer B to Pooling CataLayer B                        IdentConn         +
//  Pooling CataLayer B to Layer B                        IdentConn         -
//  Layer B to Flat CataLayer B                           IdentConn         +
//  Layer B to Arrow CataLayer B                          IdentConn         +
//  Flat CataLayer B to Pooling CataLayer B               IdentConn         -
//  Flat CataLayer B to Arrow CataLayer B                 IdentConn         -
//
//  Arrow AnaLayer A to Layer B                           PoolingGenConn    aux (weights B)
//  Layer A to Flat CataLayer B                           CloneKernelConn   - (weights B)
//  Arrow CataLayer B to Layer A                          TransposeConn     aux (weights B^T)
//  Layer B to Flat AnaLayer A                            CloneKernelConn   - (weights B^T)
//
//  Layer A to Energy AnaLayer A                          IdentConn         +
//  Flat AnaLayer A to Energy AnaLayer A                  IdentConn         -
//  Layer B to Energy CataLayer B                         IdentConn         +
//  Flat CataLayer B to Energy CataLayer B                IdentConn         -

IdentConn "AnaRetina to Reconstructed Image" = {
    preLayerName = "AnaRetina";
    postLayerName = "Reconstructed Image";

    channelCode = 1;    
    
    nxp = 1;            
    nyp = 1;            
    nfp = 1;            

    writeStep = -1;
    writeCompressedWeights = true;
    
    delay = 0;          
};

IdentConn "Reconstructed Image to AnaRetina" = {
    preLayerName = "Reconstructed Image";
    postLayerName = "AnaRetina";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;
    
    delay = 0;          
};

KernelConn "AnaRetina to Layer A" = {
    initWeightsFile = "output/fourbyfourlineworld-train/w2_last.pvp";
    preLayerName = "AnaRetina";
    postLayerName = "Layer A";

    channelCode = 0;    
    
    nxp = 1;            
    nyp = 1;            
    nfp = 8;            

    writeStep = -1;    
    writeCompressedWeights = false;
    
    delay = 0;          

    normalize = 0;      
    
    symmetrizeWeights = 0; 
};

FeedbackConn "Layer A to AnaRetina Feedback" = {
    originalConnName = "AnaRetina to Layer A";

    channelCode = 1;    

    writeStep = -1;    
    writeCompressedWeights = false;

    delay = 0;          
};

IdentConn "Layer A to Pooling AnaLayer A" = {
    preLayerName = "Layer A";
    postLayerName = "Pooling AnaLayer A";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Pooling AnaLayer A to Layer A" = {
    preLayerName = "Pooling AnaLayer A";
    postLayerName = "Layer A";

    channelCode = 1;    

    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;    
};

IdentConn "Layer A to Flat AnaLayer A" = {
    preLayerName = "Layer A";
    postLayerName = "Flat AnaLayer A";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Layer A to Arrow AnaLayer A" = {
    preLayerName = "Layer A";
    postLayerName = "Arrow AnaLayer A";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat AnaLayer A to Pooling AnaLayer A" = {
    preLayerName = "Flat AnaLayer A";
    postLayerName = "Pooling AnaLayer A";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat AnaLayer A to Arrow AnaLayer A" = {
    preLayerName = "Flat AnaLayer A";
    postLayerName = "Arrow AnaLayer A";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Layer B to Pooling CataLayer B" = {
    preLayerName = "Layer B";
    postLayerName = "Pooling CataLayer B";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Pooling CataLayer B to Layer B" = {
    preLayerName = "Pooling CataLayer B";
    postLayerName = "Layer B";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Layer B to Flat CataLayer B" = {
    preLayerName = "Layer B";
    postLayerName = "Flat CataLayer B";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Layer B to Arrow CataLayer B" = {
    preLayerName = "Layer B";
    postLayerName = "Arrow CataLayer B";

    channelCode = 0;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat CataLayer B to Pooling CataLayer B" = {
    preLayerName = "Flat CataLayer B";
    postLayerName = "Pooling CataLayer B";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat CataLayer B to Arrow CataLayer B" = {
    preLayerName = "Flat CataLayer B";
    postLayerName = "Arrow CataLayer B";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

KernelConn "Arrow AnaLayer A to Layer B" = {
    initWeightsFile = "output/fourbyfourlineworld-train/w16_last.pvp";
    preLayerName = "Arrow AnaLayer A";
    postLayerName = "Layer B";

    channelCode = 2;    
    
    nxp = 1;            
    nyp = 1;            
    nfp = 2;            

    writeStep = -1;    
    writeCompressedWeights = false;

    delay = 0;          
    normalize = 0;      
    
    symmetrizeWeights = 0; 
};

CloneKernelConn "Layer A to Flat CataLayer B" = {
    preLayerName = "Layer A";
    postLayerName = "Flat CataLayer B";
    
    originalConnName = "Arrow AnaLayer A to Layer B";

    channelCode = 1;    

    writeStep = -1;    
    writeCompressedWeights = false;

    delay = 0;          
};

TransposeConn "Arrow CataLayer B to Layer A" = {
    preLayerName = "Arrow CataLayer B";
    postLayerName = "Layer A";

    originalConnName = "Arrow AnaLayer A to Layer B";

    channelCode = 2;    
    
    writeStep = -1;    
    writeCompressedWeights = false;

    delay = 0;   
};

CloneKernelConn "Layer B to Flat AnaLayer A" = {
    preLayerName = "Layer B";
    postLayerName = "Flat AnaLayer A";

    originalConnName = "Arrow CataLayer B to Layer A";

    channelCode = 1;    
    
    writeStep = -1;    
    writeCompressedWeights = false;
};

IdentConn "Layer A to Energy AnaLayer A" = {
    preLayerName = "Layer A";
    postLayerName = "Energy AnaLayer A";

    channelCode = 0;    

    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat AnaLayer A to Energy AnaLayer A" = {
    preLayerName = "Flat AnaLayer A";
    postLayerName = "Energy AnaLayer A";

    channelCode = 1;    

    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Layer B to Energy CataLayer B" = {
    preLayerName = "Layer B";
    postLayerName = "Energy CataLayer B";

    channelCode = 0;    

    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

IdentConn "Flat CataLayer B to Energy CataLayer B" = {
    preLayerName = "Flat CataLayer B";
    postLayerName = "Energy CataLayer B";

    channelCode = 1;    

    writeStep = -1;    
    writeCompressedWeights = true;

    delay = 0;          
};

GenColProbe "Total Energy Probe" = {
    probeOutputFile = "TotalEnergy.txt";
};

L2NormProbe "AnaRetina Energy" = {
    targetLayer = "AnaRetina";
    parentGenColProbe = "Total Energy Probe";
    coeff = 1;
    probeOutputFile = "AnaRetina_Energy.txt";
};

L2NormProbe "AnaLayer A Energy" = {
    targetLayer = "Energy AnaLayer A";
    parentGenColProbe = "Total Energy Probe";
    coeff = 0.5;
    probeOutputFile = "AnaLayer_A_Energy.txt";
};

L2NormProbe "CataLayer B Energy" = {
    targetLayer = "Energy CataLayer B";
    parentGenColProbe = "Total Energy Probe";
    coeff = 0.5;
    probeOutputFile = "CataLayer_B_Energy.txt";
};

LogLatWTAProbe "Layer A Lateral Competition Penalty" = {
    targetLayer = "Layer A";
    parentGenColProbe = "Total Energy Probe";
    coeff = 0.25;
    probeOutputFile = "Layer_A_LatCompPenalty.txt";
};

LogLatWTAProbe "Layer B Lateral Competition Penalty" = {
    targetLayer = "Layer B";
    parentGenColProbe = "Total Energy Probe";
    coeff = 1.0;
    probeOutputFile = "Layer_B_LatCompPenalty.txt";
};

ChannelProbe "Reconstructed Image ChannelProbe" = {
    targetLayer = "Reconstructed Image";
    probeOutputFile = "Reconstructed_Image_Channel1.txt";
    channelCode = 1;
};
