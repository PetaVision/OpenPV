debugParsing = false;

HyPerCol "column" = {
    startTime                           = 0;
    dt                                  = 1;
    stopTime                            = 6;
    progressInterval                    = 10;
    writeProgressToErr                  = false;
    verifyWrites                        = true;
    outputPath                          = "outputTime";
    printParamsFilename                 = "pv1.params";
    randomSeed                          = 1860277205;
    nx                                  = 8;
    ny                                  = 8;
    initializeFromCheckpointDir         = "";
    checkpointWrite                     = false;
    deleteOlderCheckpoints              = false;
    suppressNonplasticCheckpoints       = false;
    errorOnNotANumber                   = false;
    nbatch                              = 1; 
};

PvpLayer "pre" = {
    nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    inputPath = "input/pre.pvp";
    nf = 3; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = false;
    mirrorBCflag = false;    //board condition flag
    useInputBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    offsetX = 0;  //No offsets, as this layer is exactly the size of the image
    offsetY = 0;
    offsetAnchor = "tl";
    batchMethod = "byImage";
    displayPeriod = 1;
};

PvpLayer "post" = {
    nxScale = .5;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = .5;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    inputPath = "input/post.pvp";
    nf = 6; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = false;
    mirrorBCflag = false;    //board condition flag
    useInputBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    offsetX = 0;  //No offsets, as this layer is exactly the size of the image
    offsetY = 0;
    offsetAnchor = "tl";
    batchMethod = "byImage";
    displayPeriod = 1;
};

//Momentum conn currently is the only connection with time batch
MomentumConn "plasticConn" = {
    preLayerName                        = "pre";
    postLayerName                       = "post";
    channelCode                         = -1;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    plasticityFlag                      = true;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    sharedWeights                       = true;

    useListOfArborFiles                 = false;
    combineWeightFiles                  = false;
    weightInitType                      = "UniformWeight";
    weightInit                          = 0;

    initializeFromCheckpointFlag        = false;

    //triggerLayerName                   = "pre";
    //triggerOffset                      = 0;
    initialWeightUpdateTime              = 2;
    weightUpdatePeriod                   = 1;

    updateGSynFromPostPerspective       = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    nxp                                 = 3;
    nyp                                 = 3;
    shrinkPatches                       = false;

    normalizeMethod                     = "none";
    strength                            = 1;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;
    normalizeOnWeightUpdate             = true;
    rMinX                               = 0;
    rMinY                               = 0;
    nonnegativeConstraintFlag           = false;
    normalize_cutoff                    = 0;
    normalizeFromPostPerspective        = false;
    minL2NormTolerated                  = 0;
    keepKernelsSynchronized             = true;
    useMask                             = false;

    dWMax                               = 0.1;
    momentumTau                         = 1;
    momentumMethod                      = "viscosity";
    momentumDecay                       = 0;

    batchPeriod                         = 5;
};



