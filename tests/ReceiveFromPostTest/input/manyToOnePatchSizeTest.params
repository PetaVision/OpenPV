debugParsing = false;

HyPerCol "column" = {
    nx = 32; //1242;  // KITTI synced value
    ny = 32;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0.0;
    stopTime = 10.0;       // Depends on number of VINE video frames
    progressInterval = 1.0;
    //Change this
    outputPath = "output/manyToOnePatchSizeTest";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointWrite = false;
    // deleteOlderCheckpoints = false;
    suppressLastOutput = true;
    writeProgressToErr = true;
};

ConstantLayer "input" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = true;
    sparseLayer = 0;
    //
    //InitVType = "ConstantV";
    //valueV    = 1;
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    phase = 1; 
};

//Image "input" = {
//    nxScale = .5;
//    nyScale = .5;
//    imagePath = "input/oneval_3_3_small.pvp";
//    nf = 1;
//    phase = 0;
//    writeStep = -1;
//    sparseLayer = false;
//    mirrorBCflag = false; 
//    valueBC = 0.0;
//    useImageBCflag = false;
//    inverseFlag = false; 
//    normalizeLuminanceFlag = false;
//    autoResizeFlag = false;
//    writeImages = false;
//    offsetAnchor = "tl";
//    offsetX = 0;  // offset for crop, when the input size is smaller than the size of image
//    offsetY = 0;
//    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.
//    padValue = false;
//};

ANNLayer "outputRecvPre" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 10;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecvPost" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 10;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputTest" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 10;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

HyPerConn "origConn" = {
    preLayerName = "input";
    postLayerName = "outputRecvPre";
    channelCode = 0; //Inhib b, doing nothing to input
    nxp = 2; 
    nyp = 2; 
    numAxonalArbors = 1;
    writeStep = 1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;

    sharedWeights = true;
    
    //weightInitType = "UniformWeight";
    //weightInit = 1;
    weightInitType = "UniformRandomWeight";
    wMinInit = -1;
    wMaxInit = 1;
    sparseFraction = 0;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    dWMax = .01;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;
};

//TransposeConn "firstTranspose" = {
//    preLayerName = "outputRecvPre";
//    postLayerName = "input";
//    channelCode = -1; //Does nothing to the input layer
//    originalConnName = "origConn";
//    selfFlag = false;
//    convertRateToSpikeCount = false;
//    writeStep = -1;
//    delay = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = false;
//};
//
//TransposeConn "secondTranspose" = {
//    preLayerName = "input";
//    postLayerName = "outputRecvPost";
//    channelCode = 0;
//    originalConnName = "firstTranspose";
//    selfFlag = false;
//    convertRateToSpikeCount = false;
//    writeStep = -1.0;
//    delay = 0;
//    pvpatchAccumulateType = "convolve";
//    updateGSynFromPostPerspective = true;
//    receiveGpu = false;
//};

CloneConn "clone" = {
    preLayerName = "input";
    postLayerName = "outputRecvPost";
    channelCode = 0;
    originalConnName = "origConn";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1.0;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
    receiveGpu = false;
};

IdentConn "RecvPostTest" = {
    preLayerName = "outputRecvPost";
    postLayerName = "outputTest";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvPreTest" = {
    preLayerName = "outputRecvPre";
    postLayerName = "outputTest";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

ReceiveFromPostProbe "testProbe" = {
   targetLayer = "outputTest";
   message = "testProbe ";
   tolerance = 3e-3; // covers worst case with roundoff error 2^-24 and 3456 inputs 
};

//RequireAllZeroActivityProbe "testProbe" = {
//    targetLayer = "outputTest";
//    nnzThreshold = 1e-6;
//};
