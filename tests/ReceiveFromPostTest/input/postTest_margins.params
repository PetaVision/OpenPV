debugParsing = true;

HyPerCol "column" = {
    nx = 32; //1242;  // KITTI synced value
    ny = 32;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0.0;
    stopTime = 10.0;       // Depends on number of VINE video frames
    progressInterval = 1.0;
    //Change this
    outputPath = "output/postTest_margins";
    checkpointWrite = false;
    // deleteOlderCheckpoints = false;
    suppressLastOutput = true;
    writeProgressToErr = true;
};

ConstantLayer "originput" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    phase = 1; 
};

ANNLayer "inputPre" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 1; 
    triggerLayerName = NULL;
};

ANNLayer "inputPost" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 1; 
    triggerLayerName = NULL;
};

ANNLayer "inputKnown" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 1; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecvPre" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecvPost" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecvKnown" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputTestPrePost" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

ANNLayer "outputTestPreKnown" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

ANNLayer "outputTestPostKnown" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

IdentConn "OrigInputToInputPre" = {
   preLayerName                        = "originput";
   postLayerName                       = "inputPre";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "OrigInputToInputPost" = {
   preLayerName                        = "originput";
   postLayerName                       = "inputPost";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

IdentConn "OrigInputToInputKnown" = {
   preLayerName                        = "originput";
   postLayerName                       = "inputKnown";
   channelCode                         = 0;
   delay                               = [0.000000];
   // initWeightsFile                     was set to (NULL);
   writeStep                           = -1;
};

HyPerConn "origConnPrePost" = {
    preLayerName = "outputRecvPost"; //Change this
    postLayerName = "inputPost";
    channelCode = -1; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 6; 
    nyp = 6; 
    numAxonalArbors = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1;
    //wMaxInit = 1;
    //sparseFraction = 0;

    weightInitType = "UniformWeight";
    weightInit = 1;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;
};

TransposeConn "preTransposeConn" = {
    preLayerName = "inputPre";
    postLayerName = "outputRecvPre";
    channelCode = 0; //Does nothing to the input layer
    originalConnName = "origConnPrePost";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "postTransposeConn" = {
    preLayerName = "inputPost";
    postLayerName = "outputRecvPost";
    channelCode = 0;
    originalConnName = "origConnPrePost";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1.0;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
};

HyPerConn "origConnKnown" = {
    preLayerName = "outputRecvKnown"; //Change this
    postLayerName = "inputKnown";
    channelCode = -1; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 6; 
    nyp = 6; 
    numAxonalArbors = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1;
    //wMaxInit = 1;
    //sparseFraction = 0;

    weightInitType = "UniformWeight";
    weightInit = 1;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;
};

TransposeConn "knownTransposeConn" = {
    preLayerName = "inputKnown";
    postLayerName = "outputRecvKnown";
    channelCode = 0;
    originalConnName = "origConnKnown";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1.0;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
};

//Fake connection to make input2 margins bigger
HyPerConn "fakeConn" = {
    preLayerName = "inputPost"; //Change this
    postLayerName = "originput";
    channelCode = -1; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 9; 
    nyp = 9; 
    numAxonalArbors = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    weightInitType = "UniformRandomWeight";
    wMinInit = -1;
    wMaxInit = 1;
    sparseFraction = 0;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;
};

IdentConn "PrePostConn1" = {
    preLayerName = "outputRecvPost";
    postLayerName = "outputTestPrePost";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "PrePostConn2" = {
    preLayerName = "outputRecvPre";
    postLayerName = "outputTestPrePost";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "PreKnownConn1" = {
    preLayerName = "outputRecvPre";
    postLayerName = "outputTestPreKnown";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "PreKnownConn2" = {
    preLayerName = "outputRecvKnown";
    postLayerName = "outputTestPreKnown";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "PostKnownConn1" = {
    preLayerName = "outputRecvPost";
    postLayerName = "outputTestPostKnown";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "PostKnownConn2" = {
    preLayerName = "outputRecvKnown";
    postLayerName = "outputTestPostKnown";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

ReceiveFromPostProbe "PrePostProbe" = {
   targetLayer = "outputTestPrePost";
   message = "PrePost ";
   tolerance = 3e-3; // covers worst case with roundoff error 2^-24 and 3456 inputs 
};

ReceiveFromPostProbe "PreKnownProbe" = {
   targetLayer = "outputTestPreKnown";
   message = "PreKnown ";
   tolerance = 3e-3; // covers worst case with roundoff error 2^-24 and 3456 inputs 
};

ReceiveFromPostProbe "PostPKnownProbe" = {
   targetLayer = "outputTestPostKnown";
   message = "PostKnown ";
   tolerance = 3e-3; // covers worst case with roundoff error 2^-24 and 3456 inputs 
};

//RequireAllZeroActivityProbe "testProbe" = {
//    targetLayer = "outputTest";
//    nnzThreshold = 1e-6;
//};
