//
// LCATest.params
//
// created by peteschultz: Aug 15, 2014
//

//  A test of LCA in the GenericSystemTest paradigm
//  An input->error<->V1 LCA module, using random initial weights
//  and a correct-values movie being compared to the Reconstruction layer.
//

debugParsing = false;

HyPerCol "column" = {
   nx = 60;
   ny = 60;
   nbatch = 4;
   dt = 1.0;
   dtAdaptController = NULL;
   writeTimescales = true;
   randomSeed = 1234567890;
   startTime = 0.0;
   stopTime = 10.0;  
   progressInterval = 1.0;
   errorOnNotANumber = false;
   writeProgressToErr = false;  
   verifyWrites = true;
   outputPath = "output/";
   printParamsFilename = "pv.params";
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   checkpointWriteDir = "checkpoints";
   checkpointWriteTriggerMode = "step";
   checkpointWriteStepInterval = 1;
   deleteOlderCheckpoints = false;
   suppressNonplasticCheckpoints = false;
   // suppressLastOutput = false;
   checkpointIndexWidth = -1;
};

//
// layers
//

ImagePvp "Input" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = 1;
    sparseLayer = false;
    updateGpu = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    padValue = 0.0;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = .5; 
    nyScale = .5;
    nf = 32;
    writeStep = 1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = .5;
    phase = 0;
};

ANNErrorLayer "Residual" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1;
    phase = 1;
    mirrorBCflag = true;
    triggerLayerName = NULL;
    writeStep = 1;
    initialWriteTime = 0;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    clearGSynInterval = 0;
    
    errScale = 1.0;
};

HyPerLCALayer "V1" = {
    nxScale                             = 0.5;
    nyScale                             = 0.5;
    nf                                  = 32;
    phase                               = 2;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType = "ConstantV";
    valueV    = .5;

    triggerLayerName                    = "Residual";
    triggerBehavior                     = "resetStateOnTrigger";
    triggerResetLayerName               = "onesLayer";
    
    writeStep                           = 1;
    initialWriteTime                    = 0; // 1.44e+06;
    sparseLayer                         = true;
    writeSparseValues                   = true;
    updateGpu                           = false;
    VThresh                             = 0.025;
    AMin                                = 0;
    AMax                                = infinity;
    AShift                              = 0;
    VWidth                              = 0.025;
    clearGSynInterval                   = 0;
    timeConstantTau                     = 100;
    selfInteract                        = true;
};

ANNErrorLayer "ResidualGpu" = {
    #include "Residual";
};

HyPerLCALayer "V1Gpu" = {
    #include "V1";
    @updateGpu                           = true;
};

ANNLayer "Comparison" = {
    nxScale                             = .5;
    nyScale                             = .5;
    nf                                  = 32;
    phase                               = 3;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1.0;
    initialWriteTime                    = 1.0;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -infinity;
    AMin                                = -infinity;
    AMax                                = infinity;
    AShift                              = 0;
    VWidth                              = 0;
    clearGSynInterval                   = 0;
};

// connections

IdentConn "InputToResidual" = {
    preLayerName = "Input";
    postLayerName = "Residual";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "InputToResidualGpu" = {
    preLayerName = "Input";
    postLayerName = "ResidualGpu";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

HyPerConn "V1ToResidual" = {
    preLayerName                        = "V1";
    postLayerName                       = "Residual";
    channelCode                         = 1;
    sharedWeights                       = true;
    weightInitType                      = "UniformRandomWeight";
    // initWeightsFile                     was set to (NULL);
    wMinInit                            = -1;
    wMaxInit                            = 1;
    sparseFraction                      = 0.9;
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = 1;
    initialWriteTime                    = 0;
    writeCompressedWeights              = false;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    nxp                                 = 18;
    nyp                                 = 18;
    nfp                                 = 1;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    normalizeFromPostPerspective        = false;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;
    normalizeOnWeightUpdate             = true;
    rMinX                               = 0;
    rMinY                               = 0;
    nonnegativeConstraintFlag           = false;
    normalize_cutoff                    = 0;
    minL2NormTolerated                  = 0;
};

CloneConn "V1GpuToResidualGpu" = {
    preLayerName                        = "V1Gpu";
    postLayerName                       = "ResidualGpu";
    channelCode                         = 1;
    pvpatchAccumulateType               = "convolve";
    selfFlag                            = false;
    delay                               = [0.0];
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    updateGSynFromPostPerspective       = false;
    originalConnName                    = "V1ToResidual";
};

TransposeConn "ResidualToV1" = {
    preLayerName                        = "Residual";
    postLayerName                       = "V1";
    channelCode                         = 0;
    pvpatchAccumulateType               = "convolve";
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    convertRateToSpikeCount             = false;
    receiveGpu                          = false;
    updateGSynFromPostPerspective       = true;
    originalConnName                    = "V1ToResidual";
};

TransposeConn "ResidualGpuToV1Gpu" = {
    #include "ResidualToV1";
    @preLayerName = "ResidualGpu";
    @postLayerName = "V1Gpu";
    @originalConnName                    = "V1GpuToResidualGpu";
};

IdentConn "V1ToComparison" = {
    preLayerName = "V1";
    postLayerName = "Comparison";
    channelCode = 0;
    writeStep = -1;
    delay = 0;
};

IdentConn "V1GpuToComparison" = {
    preLayerName = "V1Gpu";
    postLayerName = "Comparison";
    channelCode = 1;
    writeStep = -1;
    delay = 0;
};

RequireAllZeroActivityProbe "ComparisonTest" = {
    targetLayer = "Comparison";
    exitOnFailure = true;
    immediateExitOnFailure = true;
    nnzThreshold = 1e-6;
};

