//
// BasicSystemTest.params
//
// created by peteschultz: Nov 10, 2011
//

//  A params file for a simple simulation: two layers, one connection.
//  It serves as the basic template for systems tests, and tests the
//  basic functionality
//

debugParsing = true;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 256;   //size of the whole networks
   ny = 256;
   nbatch = 1;
   startTime = 0.0;
   stopTime = 10.0;
   dt = 1.0;  //time step in ms.	     
   dtAdaptController = NULL;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   progressInterval = 1.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;  
   outputPath = "output/";
   verifyWrites = true;
   printParamsFilename = "pv.params";
   checkpointWrite = false;
   initializeFromCheckpointDir = "";
   suppressLastOutput = false; //Save the last output as checkpoint.
   errorOnNotANumber = false;
};

//
// layers
//

//All layers are subclasses of hyperlayer


// this is a input layer
ImagePvp "Input" = {
    nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    inputPath = "input/sampleimage.pvp"; // it's a 32*32 image
    nf = 1; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = false; //only write weights which are not 0
    updateGpu = false;
    mirrorBCflag = false;    //board condition flag
    valueBC = 0.0;
    useImageBCflag = false;
    padValue = 0;
    pvpFrameIdx = 0;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;  // offset for crop, when the input size is smaller than the size of image
    offsetY = 0;
    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.
};

ANNLayer "Output" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
};

CloneVLayer "Clone" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 2;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    originalLayerName = "Output";
};

ANNLayer "CheckClone" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 3;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
};

SigmoidLayer "Sigmoid" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 2;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    originalLayerName = "Output";
    
    Vrest = 0.2;
    VthRest = 0.4;
    InverseFlag = false;
    SigmoidFlag = false;
    SigmoidAlpha = 0.25;
};

ANNLayer "DuplicateSigmoid" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 2;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    VThresh = 1.0;   
    AMin = 0.0;
    AMax = 1.0;
    AShift = 1.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
};

ANNLayer "CheckSigmoid" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 3;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
};

//this is a layer for connection

HyPerConn "InputToOutput" = {
    preLayerName = "Input";
    postLayerName = "Output";
    channelCode = 0;
    sharedWeights = true;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 7;
    nyp = 7;
    nfp = 8; 
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
      
    strength = 4.0;  // 1.0 x post->num_neurons / pre->num_neurons
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    rMinX = 0;
    rMinY = 0;
    nonnegativeConstraintFlag = false;
    normalize_cutoff = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    convertRateToSpikeCount = false;
    receiveGpu = false;
    selfFlag = false;  // conntect to itself

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve" for ordinary convolution connections; "Stochastic" to have connections release stochastically; "Maxpooling" for the accumulation to use max over the patch instead of sum 
    shrinkPatches = false; //if only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
};

HyPerConn "OutputToDuplicateSigmoid" = {
    preLayerName = "Output";
    postLayerName = "DuplicateSigmoid";
    channelCode = 0;
    sharedWeights = true;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 1;
    nyp = 1;
    nfp = 8; 
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "OneToOneWeights";
    weightInit = 5.0;
      
    normalizeMethod = "none";

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    convertRateToSpikeCount = false;
    receiveGpu = false;
    selfFlag = false;  // conntect to itself
    convertRateToSpikeCount = false;

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve" for ordinary convolution connections; "Stochastic" to have connections release stochastically; "Maxpooling" for the accumulation to use max over the patch instead of sum
    shrinkPatches = false; //if only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
};

IdentConn "OutputToCheckClone" = {
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "CloneToCheckClone" = {
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "DuplicateSigmoidToCheckSigmoid" = {
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "SigmoidToCheckSigmoid" = {
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};
