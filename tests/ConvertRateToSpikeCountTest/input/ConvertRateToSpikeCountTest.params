//
// ConvertRateToSpikeCountTest.params
//
// created by peteschultz: Jan 8, 2015
//

//  A params file to test the convertRateToSpikeCountTest parameter.
//  A nonspiking input layer is connected to two output layers, using two different
//  connections.  One is connection has convertRateToSpikeCountTest=false,
//  and is normalized with the same value as HyPerCol's dt.
//  The other has convertRateToSpikeCountTest=true, and is normalized with the value 1.
//  The resulting output layers should be the same, so a comparison layer takes their
//  difference and the test fails if the comparison layer has a nonzero value that is
//  bigger than roundoff error.
//
//  The run does a parameter sweep where dt = 1, 1/2, 1/4, 1/8; and the convertRate=false connection
//  has strength that is equal to dt.
//

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 32;   //size of the whole networks
   ny = 32;
   // dt // parameter sweep
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 10.0;  
   errorOnNotANumber = true;
   verifyWrites = true;
   progressInterval = 10.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;  
   outputPath = "output/";
   printParamsFilename = "pv.params"; // A record of the parameters used, including defaults and excluding unused params, will be written to this file.
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   suppressLastOutput = false; //If true, save the last output as checkpoint.
};

//
// layers
//

//All layers are subclasses of hyperlayer


// this is a input layer
ImagePvp "input" = {
    nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    inputPath = "input/inputimage.pvp"; // it's a 32*32 image
    nf = 3; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    sparseLayer = false; //only write weights which are not 0
    mirrorBCflag = false;    //border condition flag
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;  // offset for crop, when the input size is smaller than the size of image
    offsetY = 0;
    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.
    padValue = 0;
};

ANNLayer "output_noconversion" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    triggerLayerName = NULL; // If set to another layer, this layer updates in response to the trigger layer updating.
    writeStep = -1;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "output_withconversion" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    triggerLayerName = NULL; // If set to another layer, this layer updates in response to the trigger layer updating.
    writeStep = -1;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "comparison" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    triggerLayerName = NULL; // If set to another layer, this layer updates in response to the trigger layer updating.
    writeStep = -1;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

//HyPerConns are connections between two layers

HyPerConn "input_to_output_noconversion" = {
    preLayerName = "input";
    postLayerName = "output_noconversion";
    channelCode = 0;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 7;
    nyp = 7;
    nfp = 8; 
    numAxonalArbors = 1;
    sharedWeights = true;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
    // strength // parameter sweep

    normalizeMethod = "none";

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;  // connect to itself

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve", "Stochastic", or "Maxpooling" (case-insensitive)
    shrinkPatches = false; // If only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
    convertRateToSpikeCount = false;
};

HyPerConn "input_to_output_withconversion" = {
    preLayerName = "input";
    postLayerName = "output_withconversion";
    channelCode = 0;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 7;
    nyp = 7;
    nfp = 8; 
    numAxonalArbors = 1;
    sharedWeights = true;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
      
    strength = 1.0;
    normalizeMethod = "none";

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;  // connect to itself

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve", "Stochastic", or "Maxpooling" (case-insensitive)
    shrinkPatches = false; // If only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
    convertRateToSpikeCount = true;
};

IdentConn "output_noconversion_to_comparison" = {
   preLayerName = "output_noconversion";
   postLayerName = "comparison";
   channelCode = 0;
   delay = 0;
   writeStep = -1;
};

IdentConn "output_withconversion_to_comparison" = {
   preLayerName = "output_withconversion";
   postLayerName = "comparison";
   channelCode = 1;
   delay = 0;
   writeStep = -1;
};

// Probe

RequireAllZeroActivityProbe "probe" = {
   targetLayer = "comparison";
   triggerLayerName = NULL;
   nnzThreshold = 0;
};

ParameterSweep "column":outputPath = { "output1000"; "output0500"; "output0250"; "output0125"; };
ParameterSweep "column":dt = { 1.0; 0.5; 0.25; 0.125; };
ParameterSweep "input_to_output_noconversion":strength = { 1.0; 0.5; 0.25; 0.125; };
