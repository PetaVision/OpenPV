//
// LayerPhaseTest.params
//
// created by peteschultz: Feb 1, 2013
//

//  A params file for testing layer phases.
//  There are four layers: retina, reconstruction, error and V1.
//  retina is constantly 1.
//  reconstruction = V1
//  error = retina-reconstruction
//  V1 = error+V1.
//  This system has a unique steady state reconst. = 1, error = 0, V1 = 1.
//  However, an iterative scheme may not achieve the steady state.
//
//  If all phases are equal to zero, each update must use the values of its
//  inputs at the last timestep.  Accordingly the evolution is as follows.
//  t   retina  recons. error   V1
//  0    1       0       0       0
//  1    1       0       1       0
//  2    1       0       1       1
//  3    1       1       1       2
//  4    1       2       0       3
//  5    1       3      -1       3
//  6    1       3      -2       2
//  7    1       2      -2       0
//  8    1       0      -1      -2
//  9    1      -2       1      -3
// 10    1      -3       3      -2
// 11    1      -2       4       1
// 12    1       1       3       5
// 13    1       5       0       8
// 14    1       8      -4       8
// 15    1       8      -7       4
// 16    1       4      -7      -3
// 17    1      -3      -3     -10
// 18    1     -10       4     -13
// 19    1     -13      11      -9

// However, if retina has phase 0, reconstruction has phase 1,
// error has phase 2, and V1 has phase 3, then error and V1 can use
// values of the present timestep when updating.
//  0    1       0       0       0
//  1    1       0       1       1
//  2    1       1       0       1
//  3    1       1       0       1
//  4    1       1       0       1
//  5    1       1       0       1
// etc.

debugParsing = false;

HyPerCol "column" = {
   nx = 32;   
   ny = 32;
   dt = 1.0;
   dtAdaptController = NULL;
   randomSeed = 505557946;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 20;
   progressInterval = 1;
   outputPath = "output";
   printParamsFilename = "pv.params";
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   // checkpointWriteDir = "checkpoints";
   // checkpointWriteStepInterval = 1;
   suppressLastOutput = false;
   writeProgressToErr = true;
   verifyWrites = true;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
   errorOnNotANumber = false;
   nbatch = 2;
};

//
// layers
//

ConstantLayer "Retina" = {
    restart = 0;
    nxScale = 1; 
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    sparseLayer = false;
    InitVType = "ConstantV";
    valueV    = 1;
    phase = 0;
};

//Retina "Retina" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    nf = 1;
//    writeStep = -1.0;
//    mirrorBCflag = 1;
//    triggerLayerName = NULL;
//    spikingFlag = 0;
//    sparseLayer = 0;
//
//    foregroundRate = 1000;
//    backgroundRate = 1000;
//    burstFreq = 1;
//    burstDuration = 1000;
//
//    beginStim = 0;
//    endStim = 1000;
//    
//    phase = 0;
//};

ANNLayer "Reconstruction" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    mirrorBCflag = 1;
    triggerLayerName = NULL;
    sparseLayer = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
    
    phase = 1;
};

ANNLayer "Error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    mirrorBCflag = 1;
    triggerLayerName = NULL;
    sparseLayer = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
    
    phase = 2;
};

ANNLayer "V1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    mirrorBCflag = 1;
    triggerLayerName = NULL;
    sparseLayer = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0;
    VWidth = 0;
    
    phase = 3;
};

//
// Connections
//


IdentConn "RetinaToError" = {
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};


IdentConn "ErrorToV1" = {
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};


IdentConn "V1ToReconstruction" = {
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};


IdentConn "ReconstructionToError" = {
    channelCode = 1;
    writeStep = -1;    
    delay = 0;
};

IdentConn "V1ToV1" = {
    channelCode = 0;
    writeStep = -1;
    delay = 0;
};

//
// Probes
//

LayerPhaseTestProbe "ReconstructionProbe" = {
    targetLayer = "Reconstruction";
    probeOutputFile = "recon_stats.txt";
    triggerLayerName = NULL;
    nnzThreshold = 0.0;
    message = "reconstruction probe     ";
    equilibriumValue = 1.0;
    equilibriumTime = 2.0;
};

LayerPhaseTestProbe "ErrorProbe" = {
    targetLayer = "Error";
    probeOutputFile = "error_stats.txt";
    triggerLayerName = NULL;
    nnzThreshold = 0.0;
    message = "error probe              ";
    equilibriumValue = 0.0;
    equilibriumTime = 2.0;
};

LayerPhaseTestProbe "V1Probe" = {
    targetLayer = "V1";
    probeOutputFile = "V1_stats.txt";
    triggerLayerName = NULL;
    nnzThreshold = 0.0;
    message = "V1 probe                 ";
    equilibriumValue = 1.0;
    equilibriumTime = 1.0;
};

