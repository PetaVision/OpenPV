//
// NormalizeSystemTest.params
//
// created by peteschultz April 15, 2013
//

// A params file for testing the ability to define a NormalizeBase subclass outside of trunk.
// An 1-pixel input goes through a 16x16x4 connection that has been
// normalized using a custom class, NormalizeL3, which normalizes based on the L3 norm.
// The activity of the output layer has the property that the sum of the cubes of activities
// is the cube of the strength of the normalized connection.
// We use pointwise multiplication layers to get a layer whose values are the pointwise cubes;
// hence its activities should sum to one.
// Then a non-normalized all-to-one connection with weights all one goes from the 16x16x4
// layer to a one-pixel layer.
// If normalizeL3 is working correctly, the output layer's value is the strength of the
// normalized connection

debugParsing = false;

HyPerCol "column" = {
   nx = 16;
   ny = 16;
   dt = 1.0;
   randomSeed = 1337540566;
   startTime = 0.0;
   stopTime = 5.0;
   progressInterval = 10.0;
   writeProgressToErr = false;
   outputPath = "output";
   filenamesContainLayerNames = 2;
   filenamesContainConnectionNames = 2;
   checkpointWrite = false;
   suppressLastOutput = false;
};

//
// layers
//

Retina "input" = {
   nxScale = 0.0625;
   nyScale = 0.0625;
   nf = 1;
   phase = 0;
   mirrorBCflag = false;
   valueBC = 0.0;
   writeStep = 1;
   initialWriteTime = 0;
   sparseLayer = false;
   
   spikingFlag = true;
   foregroundRate = 1000;
   backgroundRate = 1000;
   beginStim = 0;
   endStim = infinity;
   burstFreq = 1;
   burstDuration = 1000;
   refractoryPeriod = 0;
   absRefractoryPeriod = 0;
};

ANNLayer "normalizeL3 output" = {
   nxScale = 1;
   nyScale = 1;
   nf = 4;
   phase = 1;
   mirrorBCflag = false;
   valueBC = 0.0;
   writeStep = 1;
   initialWriteTime = 0;
   sparseLayer = false;
   InitVType = "ZeroV";
   
   AMax = infinity;
   AMin = -infinity;
   VThresh = -infinity;
   AShift = 0.0;
   VWidth = 0.0;
   clearGSynInterval = 0.0;
};

PtwiseProductLayer "output squared" = {
   nxScale = 1;
   nyScale = 1;
   nf = 4;
   phase = 2;
   mirrorBCflag = false;
   valueBC = 0.0;
   writeStep = 1;
   initialWriteTime = 0;
   sparseLayer = false;
   InitVType = "ZeroV";
   
   AMax = infinity;
   AMin = -infinity;
   VThresh = -infinity;
   AShift = 0.0;
   VWidth = 0.0;
   clearGSynInterval = 0.0;
};

PtwiseProductLayer "output cubed" = {
   nxScale = 1;
   nyScale = 1;
   nf = 4;
   phase = 3;
   mirrorBCflag = false;
   valueBC = 0.0;
   writeStep = 1;
   initialWriteTime = 0;
   sparseLayer = false;
   InitVType = "ZeroV";
   
   AMax = infinity;
   AMin = -infinity;
   VThresh = -infinity;
   AShift = 0.0;
   VWidth = 0.0;
   clearGSynInterval = 0.0;
};

ANNLayer "normalizeL3 check" = {
   nxScale = 0.0625;
   nyScale = 0.0625;
   nf = 1;
   phase = 4;
   mirrorBCflag = false;
   valueBC = 0.0;
   writeStep = 1;
   initialWriteTime = 0;
   sparseLayer = false;
   InitVType = "ZeroV";
   
   AMax = infinity;
   AMin = -infinity;
   VThresh = -infinity;
   AShift = 0.0;
   VWidth = 0.0;
   clearGSynInterval = 0.0;
};

//
// Connections
//

HyPerConn "normalizeL3 connection" = {
   preLayerName = "input";
   postLayerName = "normalizeL3 output";
   channelCode = 0;
   numAxonalArbors = 1;
   delay = 0;
   plasticityFlag = false;
   sharedWeights = true;
   pvpatchAccumulateType = "convolve";
   convertRateToSpikeCount = false;
   writeStep = 1.0;
   initialWriteTime = 0.0;
   writeCompressedWeights = false;
   writeCompressedCheckpoints = false;
   selfFlag = false;
   nxp = 16;
   nyp = 16;
   nfp = 4;
   shrinkPatches = false;
   updateGSynFromPostPerspective = false;

   weightInitType = "Gauss2DWeight";
   strength = 2.5;
   aspect = 2.0;
   sigma = 0.8;
   rMax = 8;
   rMin = 0;
   deltaThetaMax = 6.28318530717959;
   thetaMax = 1.0;
   numFlanks = 1.0;
   flankShift = 0.0;
   rotate = false;
   bowtieFlag = false;
   numOrientationsPost = 4;

   normalizeMethod = "normalizeL3";
   normalize_cutoff = false;
   symmetrizeWeights = false;
   normalizeFromPostPerspective = false;
   normalizeArborsIndividually = false;
   minL3NormTolerated = 0;
};

IdentConn "normalizeL3 output to output squared on channel 0" = {
   preLayerName = "normalizeL3 output";
   postLayerName = "output squared";
   channelCode = 0;
   delay = 0;
};

IdentConn "normalizeL3 output to output squared on channel 1" = {
   preLayerName = "normalizeL3 output";
   postLayerName = "output squared";
   channelCode = 1;
   delay = 1;
};

IdentConn "normalizeL3 output to output cubed" = {
   preLayerName = "normalizeL3 output";
   postLayerName = "output cubed";
   channelCode = 0;
   delay = 0;
};

IdentConn "output squared to output cubed" = {
   preLayerName = "output squared";
   postLayerName = "output cubed";
   channelCode = 1;
   delay = 1;
};

HyPerConn "normalizeL3 check connection" = {
   preLayerName = "output cubed";
   postLayerName = "normalizeL3 check";
   channelCode = 0;
   numAxonalArbors = 1;
   delay = 0;
   plasticityFlag = false;
   sharedWeights = true;
   pvpatchAccumulateType = "convolve";
   convertRateToSpikeCount = false;
   writeStep = 1.0;
   initialWriteTime = 0.0;
   writeCompressedWeights = false;
   writeCompressedCheckpoints = false;
   selfFlag = false;
   nxp = 1;
   nyp = 1;
   nfp = 1;
   shrinkPatches = false;
   updateGSynFromPostPerspective = false;
   
   weightInitType = "UniformWeight";
   weightInit = 1;
   
   normalizeMethod = "none";
};
