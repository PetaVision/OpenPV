//
// CheckpointWeightTest.params
//
// created by peteschultz: Oct 19, 2016.
//

//  A params file defining an input layer, an output layer, and a connection. The connection is
//  used to test the CheckpointEntryWeightPvp class.

debugParsing = false;

HyPerCol "column" = {
   nx = 32;
   ny = 32;
   nbatch = 1;
   dt = 1.0;
   randomSeed = 1234567890;
   stopTime = 10.0;  
   errorOnNotANumber = true;
   progressInterval = 10.0;
   writeProgressToErr = false;
   verifyWrites = false;
   outputPath = "output/";
   printParamsFilename = "pv.params";
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   lastCheckpointDir = "output/Last";
};

PvpLayer "Input" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/petavisionLogo32x32.pvp";
    nf = 3;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useInputBCflag = false;
    updateGpu = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    padValue = false;
};

ANNLayer "Output" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8;
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";


    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

HyPerConn "InputToOutput" = {
    preLayerName = "Input";
    postLayerName = "Output";
    channelCode = 0;
    nxp = 7;
    nyp = 7;
    nfp = 8; 
    numAxonalArbors = 1;
    sharedWeights = false;
    writeStep = -1;
    weightInitType = "Gauss2DWeight";
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
    numOrientationsPre = 3;
    strength = 4.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    normalize_cutoff = 0;
    convertRateToSpikeCount = false;
    receiveGpu = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;
    nonnegativeConstraintFlag = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    delay = 0;
    pvpatchAccumulateType = "Convolve";
    updateGSynFromPostPerspective = false;
};
