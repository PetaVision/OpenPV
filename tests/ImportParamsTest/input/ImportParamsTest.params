//
// BasicSystemTest.params
//
// created by peteschultz: Nov 10, 2011
//

//  A params file for a simple simulation: two layers, one connection.
//  It serves as the basic template for systems tests, and tests the
//  basic functionality
//

debugParsing = true;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 32;   //size of the whole networks
   ny = 32;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 10.0;  
   progressInterval = 10.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;  
   outputPath = "output/";
   filenamesContainLayerNames = false;  
   filenamesContainConnectionNames = false;
   checkpointWrite = false;
   suppressLastOutput = false; //Save the last output as checkpoint.
};

//
// layers
//

//All layers are subclasses of hyperlayer

//The origional layer to be included
ImportParamsLayer "orig" = {
    restart = 0;
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 8 outputs 
    phase = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "InitVFromFile";
    Vfilename = "input/a0.pvp";
    

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

//The layer doing the inclusion
ImportParamsLayer "copy" = {
    #include "orig";
    //parameter_def test
    @nxScale = 2;
    //parameter_filename_test test
    @Vfilename = "input/a1.pvp";
};

//An output layer for the connection tests
ANNLayer "output" = {
    restart = 0;
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 8 outputs 
    phase = 1;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ImportParamsConn "origConn" = {
    preLayerName = "orig";
    postLayerName = "output";
    channelCode = 0;
    sharedWeights = true;
    nxp = 7;
    nyp = 7;
    nfp = 1; 
    numAxonalArbors = 2;
    writeStep = -1;
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
    strength = 4.0;  // 1.0 x post->num_neurons / pre->num_neurons
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;  // conntect to itself
    pvpatchAccumulateType = "Convolve"; // "Convolve", "Stochastic", or "Maxpooling" (case-insensitive)
    shrinkPatches = false; // If only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)

    //testing arrays with delays
    delay = [0,1];
};

ImportParamsConn "copyConn" = {
   #include "origConn";
   //parameter_string_def test
   @preLayerName = "copy";
   @numAxonalArbors = 3;
   //parameter array test
   @delay = [3,4,5];
};
