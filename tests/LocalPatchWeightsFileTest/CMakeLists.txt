# This CMakeLists.txt file bypasses pv_add_test because
# it uses config files instead of setting the configuration
# on the command line, as pv_add_test has been assuming.
# TODO: cmake/PVAddTest.cmake needs to be config-file aware

if (PV_SYSTEM_TEST_MPIBLOCK)
  set(SRC_CPP
    src/LocalPatchWeightsFileTest.cpp
  )
  set(SRC_HPP
    src/ConnectionSpecs.hpp
  )

  get_filename_component(TEST_BASE_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  set(TEST_BINARY "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${TEST_BASE_NAME}")
  set(TEST_TOP_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  set(TEST_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")

  include_directories("${TEST_TOP_DIR}/../Shared")
  pv_add_executable(
    ${TEST_BASE_NAME}
    SRC ${SRC_CPP} ${SRC_HPP}
    OUTPUT_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}")
  add_dependencies(${TEST_BASE_NAME} pv)
  if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
    set(TEST_SOURCE_INPUT "${CMAKE_CURRENT_SOURCE_DIR}/input")
    if (EXISTS "${TEST_SOURCE_INPUT}")
      set(TEST_BINARY_INPUT "${CMAKE_CURRENT_BINARY_DIR}/input")
      execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${TEST_SOURCE_INPUT} ${TEST_BINARY_INPUT})
    endif (EXISTS "${TEST_SOURCE_INPUT}")
  endif()

  set(TEST_DESC "1")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  if(PV_MPI_SINGLE_PROCESS_TEST)
    set(PV_MPI_SINGLE_COMMAND "${MPIEXEC}")
    set(PV_MPI_SINGLE_OPTIONS "${MPIEXEC_NUMPROC_FLAG};1")
  else()
    set(PV_MPI_SINGLE_COMMAND)
    set(PV_MPI_SINGLE_OPTIONS)
  endif()
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${PV_MPI_SINGLE_COMMAND} ${PV_MPI_SINGLE_OPTIONS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "4flat")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 4 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "4MtoN")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 4 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "4MtoNbatch")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 4 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "16flat")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 16 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "16MtoN")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 16 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")

  set(TEST_DESC "16MtoNbatch")
  set(TEST_CONFIG_FILE "input/config_${TEST_DESC}.txt")
  set(TEST_NAME "${TEST_BASE_NAME}_${TEST_DESC}")
  add_test(
    NAME ${TEST_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 16 ${PV_MPI_OPTIONS_EXTRA} ${MPIEXEC_PREFLAGS} ${PV_SYSTEM_TEST_COMMAND} ${TEST_BINARY} "${TEST_CONFIG_FILE}")
endif (PV_SYSTEM_TEST_MPIBLOCK)
