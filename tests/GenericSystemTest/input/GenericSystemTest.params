//
// GenericSystemTest.params
//
// created by peteschultz: Mar 25, 2014
//

//  A params file for a simple simulation: two layers, one connection.
//  It serves as the basic template for systems tests, and tests the
//  basic functionality
//

debugParsing = false; // Print a message every time something in params file is parsed

HyPerCol "column" = {
   nx = 32;   //size of the whole networks
   ny = 32;
   nbatch = 1;
   dt = 1.0;  //time step in ms.	     
   dtAdaptController = NULL;
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 10.0;  
   progressInterval = 10.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;  
   verifyWrites = true;
   errorOnNotANumber = false;
   outputPath = "output1/";
   printParamsFilename = "pv.params";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   checkpointWrite = true;
   initializeFromCheckpointDir = "";
   checkpointWriteDir = "checkpoints";
   checkpointWriteTriggerMode = "step";
   checkpointWriteStepInterval = 1;
   deleteOlderCheckpoints = false;
   // suppressLastOutput = false; //Save the last output as checkpoint.
   suppressNonplasticCheckpoints = false;
   checkpointIndexWidth = -1;
};

//
// layers
//

//All layers are subclasses of hyperlayer


// this is an input layer
MoviePvp "input" = {
    nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
    inputPath = "input/imagefiles.pvp";
    nf = 1; //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = 1;  //-1 means doesn't write for log
    initialWriteTime = 0;
    sparseLayer = false; //only write weights which are not 0
    updateGpu = false;
    mirrorBCflag = false;    //border condition flag
    valueBC = 0.0;
    useImageBCflag = false;
    padValue = 0.0;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;  // offset for crop, when the input size is smaller than the size of image
    offsetY = 0;
    jitterFlag = false; // moving around like an eyeball. our eyeballs are not still even when we are gazing at something.

    displayPeriod = 1;
    batchMethod = "bySpecified";
    echoFramePathnameFlag = true;
    start_frame_index = 0;
    skip_frame_index = 0;
    writeFrameToTimestamp = true;
    flipOnTimescaleError = false;
    resetToStartOnLoop = false;
};

//an output layer
ANNLayer "output" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    mirrorBCflag = true;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 1.0;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0;
};

MoviePvp "correct" = {
    nxScale = 1;
    nyScale = 1;
    nf = 8;
    phase = 1;
    mirrorBCflag = false;
    valueBC = 0.0;
    writeStep = 1.0;
    initialWriteTime = 1.0;
    sparseLayer = false;
    updateGpu = false;

    inputPath = "input/correct.pvp";
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    writeImages = false;
    useImageBCflag = false;
    padValue = 0.0;
    autoResizeFlag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    jitterFlag = false;

    displayPeriod = 1;
    batchMethod = "bySpecified";
    start_frame_index = 0;
    skip_frame_index = 1;
    writeFrameToTimestamp = true;
    flipOnTimescaleError = false;
    resetToStartOnLoop = false;
};

ANNLayer "comparison" = {
    nxScale = 1;
    nyScale = 1;
    nf = 8; // 8 outputs
    phase = 2;
    mirrorBCflag = true;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 1.0;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0;
};

// connections

HyPerConn "input_to_output" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    sharedWeights = true;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 7;
    nyp = 7;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    deltaThetaMax = 6.283185;
    thetaMax = 1.0;
    numFlanks = 1;
    flankShift = 0;
    rotate = false;
    bowtieFlag = false;
    aspect = 3;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
    numOrientationsPost = 8;
      
    strength = 4.0;  // 1.0 x post->num_neurons / pre->num_neurons
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    normalize_cutoff = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;
    nonnegativeConstraintFlag = false;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    convertRateToSpikeCount = false;
    receiveGpu = false;
    selfFlag = false;  // connect to itself

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve", "Stochastic", or "Maxpooling" (case-insensitive)
    shrinkPatches = false; // If only a small part of connections whose weights are non-zero, then we could shrink the whole networks
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
};

IdentConn "output_to_comparison" = {
    preLayerName = "output";
    postLayerName = "comparison";
    channelCode = 0;
    writeStep = -1;
    delay = 0;
};

IdentConn "correct_to_comparison" = {
    preLayerName = "correct";
    postLayerName = "comparison";
    channelCode = 1;
    writeStep = -1;
    delay = 0;
};

// Probe

RequireAllZeroActivityProbe "comparison_test" = {
    targetLayer = "comparison";
    textOutputFlag = true;
    probeOutputFile = "comparison_test.txt";
    triggerLayerName = NULL;
    nnzThreshold = 1e-6;
    exitOnFailure = false; // exit-hook function will test for failures in source code
};
