#ifndef CHECKVALUE_HPP_
#define CHECKVALUE_HPP_

#include "include/pv_common.h"
#include "utils/PVLog.hpp"

#include <cstdlib>
#include <stdexcept>
#include <string>

namespace PV {

/**
 * The checkValue function template provides a way to check if a given value agrees with
 * a specified correct value, within a specified tolerance. If the difference is outside
 * the tolerance, it generates an error message and throws a runtime_error exception with
 * the message. The calling routine can then pass the message to ErrorLog() or Fatal() if
 * desired. The reason for having the calling routine call ErrorLog() as opposed to having
 * checkValue() call it is so that the file and line information generated by ErrorLog
 * is more meaningful.
 *
 * Note that the generated error message ends in a linefeed character.
 *
 * The template parameter T can be any arithmetic type. More specifically, it must:
 * have a subtraction operation
 * have a greater-than relation
 * be acceptable as an argument to std::abs, with std::abs(T) returning T
 * be acceptable as an argument to std::to_string, with std::to_string(T) returning std::string
 */
template <typename T>
void checkValue(
      std::string const &baseDescription,
      std::string const &valueDescription,
      T observed,
      T correct,
      T tolerance) {
   T discrepancy = observed - correct;
   if (std::abs(discrepancy) > tolerance) {
      std::string message(baseDescription + ": incorrect " + valueDescription + " ");
      message.append(std::to_string(observed));
      message.append("; should be ");
      message.append(std::to_string(correct));
      message.append(" (discrepancy ");
      message.append(std::to_string(discrepancy));
      message.append(")\n");
      throw std::runtime_error(message);
   }
}

} // namespace PV
#endif // CHECKVALUE_HPP_
