//
// DryRunFlagTest.params
//
// created by peteschultz: Feb 19, 2015
//

//  A params file to test the command-line dry run flag "-n".
//  This params file is deliberately poorly formatted, has superfluous
//  parameters, and purposefully omits several parameters for which the
//  defaults will be used.
//
//  The test begins by creating the PV_Init object with the -n flag set, to
//  create a new, cleaned up params file ("output/pv.params") with unneeded
//  parameters removed, missing parameters filled in with defaults, and
//  formatted cleanly.  The AlwaysFailsLayer fails anytime updateState is
//  called, to verify that no timesteps are executed when the -n flag is set.
//
//  The test then compares the generated output/pv.params file to
//  input/correct.params, by creating a PVParams object from each file
//  and comparing them.
//
//  Note that this test will fail any time that a parameter is added
//  or removed by any of the classes whose keywords are used in this
//  params file.  If this happens, the correct.params file will need
//  to be updated accordingly.
//
//  TODO: How does processParams interact with parameter sweeps?

debugParsing = true;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   extraParameter = 75; // Will be ignored and will not appear in cleaned-up file
   nx = 32;   //size of the whole networks
   ny = 32; nbatch = 1; dt =
1.0;  //time step in ms.
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   stopTime
=                           10.0;  errorOnNotANumber = // Comment at end of line, even though it's in the middle of a declaration
     true;
   progressInterval = 10.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;
   verifyWrites = false;
   outputPath = "output/";
   printParamsFilename = "pv.params"; // A record of the parameters used, including defaults and excluding unused params, will be written to this file.
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   lastCheckpointDir = "output/Last"; //If true, save the last output as checkpoint.
};

//
// layers
//

//All layers are subclasses of hyperlayer


// this is a input layer
PvpLayer
"Input"
= { nxScale = 1;  // this must be 2^n, n = ...,-2,-1,0,1,2,... 
    nyScale = 1;  // the scale is to decide how much area will be used as input. For exampel, nx * nxScale = 32. The size of input
    	      	  // cannot be larger than the input image size.
                                                   inputPath = "input/petavisionLogo32x32.pvp";
    nf = 3;
 //number of features. For a grey image, it's 1. For a color image, it could be either 1 or 3.
    phase = 0; //phase defines an order in which layers should be executed.
    writeStep = -1;  //-1 means doesn't write for log
    mirrorBCflag = false;    //border condition flag
    unneededParameter = "unneeded";
    valueBC = 0.0;
    useInputBCflag = false; updateGpu
= false;
 inverseFlag = false; 
  normalizeLuminanceFlag = false;
   autoResizeFlag = false;
    	displayPeriod                       = 0; offsetAnchor =
"tl"; offsetX =
0;  // offset for crop, when the input size is smaller than the size of image
				          offsetY = 0;
    padValue = false;
    pvpFrameIdx = 0; };

//an output layer
ANNLayer "OutputBase" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8; // 8 outputs 
    phase = 1;
    triggerLayerName = NULL; // If set to another layer, this layer updates in response to the trigger layer updating.
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;
    updateGpu = false;

    InitVType = "ZeroV";

    //define a linear relation between its input and output, with some hard cut-off.
    //VThresh = -infinity;   
    //AMax = infinity;
    //AMin = -infinity;
    //AShift = 0.0;
    //VWidth = 0.0;
    unnecessaryParameter = [1, 2, 3];

}; ANNLayer "OutputImported"




= {
        #include "OutputBase";
	@nf = 6;
};

//HyPerConns are connections between two layers

HyPerConn "InputToOutputBase" = {
    preLayerName = "Input";
    postLayerName = "OutputBase";
    channelCode = 0;

// we have a 32*32 image, an input layer with nf = 1 and an output layer with nf = 8. So we have 32*32*8 outputs.
// the connection layer defines nxp * nyp (i.e. 7*7) edges from each pixel in input layer to 7*7 vertexs of 1 out of 8 images
// and these vertexs are chosen from the nearest ones around the pixel
    nxp = 7;
    nyp = 7;
    nfp = 8; 
    numAxonalArbors = 1;
    sharedWeights = true;
    writeStep = -1;
    
weightInitType = "Gauss2DWeight";
 deltaThetaMax = 6.283185;
  thetaMax = 1.0;
    numFlanks = 1;
     flankShift = 0;
      rotate = false;
     bowtieFlag = false;
    aspect = 3;
   sigma = 1;
  rMax  = infinity;
 rMin = 0;
numOrientationsPost = 8;
      
    strength = 4.0       ;  // 1.0 x post->num_neurons / pre->num_neurons
    normalizeMethod = "normalizeSum"
;
    normalizeArborsIndividually =



false; normalizeOnInitialize



= true; normalizeOnWeightUpdate = true; normalize_cutoff = 0; convertRateToSpikeCount = false; receiveGpu =
false; minSumTolerated = 0.0;
    normalizeFromPostPerspective =




false;
    rMinX = 0.0;
    rMinY = 0.0;
    nonnegativeConstraintFlag = false;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;

    delay = 0;

    pvpatchAccumulateType = "Convolve"; // "Convolve", "Stochastic", or "Maxpooling" (case-insensitive)
    updateGSynFromPostPerspective = false; // Whether receiving synaptic input should loop over pre-synaptic neurons (false) or post-synaptic neurons (true)
};

HyPerConn "InputToOutputImported" = { #include
"InputToOutputBase"; @postLayerName =
   "OutputImported"; @nfp =
6;			};

AlwaysFailsLayer "AlwaysFails" = {};
