//
// TotalEnergyTest.params
//
// created by peteschultz: Nov 10, 2015
//

//  A test of LCA using total energy as the adaptive time controller.
//  An input->error<->V1 LCA module, using random initial weights
//  and a correct-values movie being compared to the reconstruction layer.

debugParsing = false;

HyPerCol "column" = {
   nx = 60;
   ny = 60;
   dt = 1.0;
   dtAdaptController = "TimeScale";
   dtScaleMax = 5;
   dtScaleMin = 0.125;
   dtChangeMax = 0.05;
   dtChangeMin = 0;
   dtMinToleratedTimeScale = 0.0001;
   writeTimescales = true;
   randomSeed = 1234567890;
   startTime = 0.0;
   stopTime = 10.0;  
   progressInterval = 1.0;
   errorOnNotANumber = false;
   writeProgressToErr = false;  
   outputPath = "output/";
   printParamsFilename = "pv.params";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   initializeFromCheckpointDir = "";
   checkpointWrite = true;
   checkpointWriteDir = "checkpoints";
   checkpointWriteTriggerMode = "step";
   checkpointWriteStepInterval = 1;
   deleteOlderCheckpoints = false;
   // suppressLastOutput = false;
   checkpointIndexWidth = -1;
};

//
// layers
//

ImagePvp "input" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;

    displayPeriod = 1;
    randomMovie = false;
    readPvpFile = false;
    echoFramePathnameFlag = true;
    start_frame_index = 0;
    skip_frame_index = 0;
    writeFrameToTimestamp = true;
};

ANNErrorLayer "residual" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1;
    phase = 1;
    mirrorBCflag = true;
    triggerLayerName = NULL;
    writeStep = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
    
    errScale = 1.0;
};

HyPerLCALayer "V1" = {
    nxScale                             = 0.5;
    nyScale                             = 0.5;
    nf                                  = 32;
    phase                               = 2;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "UniformRandomV";
    minV                                = -1;
    maxV                                = 0.1;
    triggerLayerName                    = NULL;
    writeStep                           = 1;
    initialWriteTime                    = 0; // 1.44e+06;
    sparseLayer                         = true;
    writeSparseValues                   = true;
    VThresh                             = 0.025;
    AMin                                = 0;
    AMax                                = infinity;
    AShift                              = 0;
    VWidth                              = 0.025;
    timeConstantTau                     = 100;
    timeConstantTauMinimum              = 10;
    numWindowX                          = 1;
    numWindowY                          = 1;
    slopeErrorStd                       = 0.01;
    selfInteract                        = true;
    dVThresh                            = 0;
};

ANNLayer "reconstruction" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 1;
    phase                               = 3;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1.0;
    initialWriteTime                    = 1.0;
    sparseLayer                         = false;
    VThresh                             = -infinity;
    AMin                                = -infinity;
    AMax                                = infinity;
    AShift                              = 0;
    VWidth                              = 0;
};

// connections

IdentConn "input_to_residual" = {
    preLayerName = "input";
    postLayerName = "residual";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

HyPerConn "V1_to_residual" = {
    preLayerName                        = "V1";
    postLayerName                       = "residual";
    channelCode                         = 1;
    sharedWeights                       = true;
    weightInitType                      = "UniformRandomWeight";
    // initWeightsFile                     was set to (NULL);
    wMinInit                            = -1;
    wMaxInit                            = 1;
    sparseFraction                      = 0.9;
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;
    pvpatchAccumulateType               = "convolve";
    convertRateToSpikeCount                = false;
    writeStep                           = 1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    delay                               = [0.0];
    nxp                                 = 18;
    nyp                                 = 18;
    nfp                                 = 1;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    normalizeMethod                     = "normalizeL2";
    strength                            = 1;
    rMinX                               = 0;
    rMinY                               = 0;
    normalize_cutoff                    = 0;
    symmetrizeWeights                   = false;
    normalizeFromPostPerspective        = false;
    normalizeArborsIndividually         = false;
    minL2NormTolerated                  = 0;
    dWMax                               = 10.0;
    keepKernelsSynchronized             = true;
};

TransposeConn "residual_to_V1" = {
    preLayerName                        = "residual";
    postLayerName                       = "V1";
    channelCode                         = 0;
    pvpatchAccumulateType               = "convolve";
    convertRateToSpikeCount                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    updateGSynFromPostPerspective       = true;
    originalConnName                    = "V1_to_residual";
};

CloneConn "V1_to_reconstruction" = {
    preLayerName                        = "V1";
    postLayerName                       = "reconstruction";
    channelCode                         = 0;
    pvpatchAccumulateType               = "convolve";
    convertRateToSpikeCount                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    updateGSynFromPostPerspective       = false;
    originalConnName                    = "V1_to_residual";

};

// Compare reconstruction to what it should be

MoviePvp "correct" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 1;
    mirrorBCflag = false;
    valueBC = 0.0;
    writeStep = 1.0;
    initialWriteTime = 1.0;
    sparseLayer = false;

    inputPath = "input/correct.pvp";
    offsetX = 0;
    offsetY = 0;
    writeImages = false;
    useImageBCflag = false;
    autoResizeFlag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    jitterFlag = false;

    displayPeriod = 1;
    start_frame_index = 0;
    skip_frame_index = 1;
    writeFrameToTimestamp = true;
    flipOnTimescaleError = true;
};

ANNLayer "comparison" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 4;
    mirrorBCflag = true;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 1.0;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

IdentConn "reconstruction_to_comparison" = {
    preLayerName = "reconstruction";
    postLayerName = "comparison";
    channelCode = 0;
    writeStep = -1;
    delay = 0;
};

IdentConn "correct_to_comparison" = {
    preLayerName = "correct";
    postLayerName = "comparison";
    channelCode = 1;
    writeStep = -1;
    delay = 0;
};

// Total energy probe

ColumnEnergyProbe "TotalEnergyProbe" = {
    probeOutputFile                     = "total_energy.txt";
};

L2NormProbe "ReconstructionErrorProbe" = {
    targetLayer                         = "residual";
    message                             = NULL;
    probeOutputFile                     = "recon_error_l2norm.txt";
    triggerLayerName                    = NULL;
    energyProbe                         = "TotalEnergyProbe";
    coefficient                         = 0.5;
    exponent                            = 2.0;
};

FirmThresholdCostFnLCAProbe "CostFunctionProbe" = {
    targetLayer                         = "V1";
    message                             = NULL;
    probeOutputFile                     = "cost_function.txt";
    triggerLayerName                    = NULL;
    energyProbe                         = "TotalEnergyProbe";
    // VThresh inherited from targetLayer
    // VWidth inherited from targetLayer
};

// Quotient probe to scale TotalEnergyProbe by input energy

QuotientColProbe "TimeScale" = {
    numerator                           = "InputEnergyColProbe";
    denominator                         = "TotalEnergyProbe";
    probeOutputFile                     = "timescale.txt";
    valueDescription                    = "TimeScale";
};

ColumnEnergyProbe "InputEnergyColProbe" = {
    probeOutputFile                     = "input_energy.txt";
};

L2NormProbe "InputL2NormProbe" = {
    targetLayer                         = "input";
    message                             = NULL;
    probeOutputFile                     = "input_l2norm.txt";
    triggerLayerName                    = NULL;
    energyProbe                         = "InputEnergyColProbe";
    coefficient                         = 0.5;
    exponent                            = 2.0;
};

// Probe to set a flag if activity in "comparison" is ever nonzero.

RequireAllZeroActivityProbe "ComparisonTest" = {
    targetLayer = "comparison";
    probeOutputFile = "comparison_test.txt";
    nnzThreshold = 1e-6;
    exitOnFailure = false; // exit-hook function will test for failures in source code
};
