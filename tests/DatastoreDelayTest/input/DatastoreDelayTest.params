//
// DatastoreDelayTest.params
//
// created by pschultz: November 2, 2011
//

//  - input parameters for DatastoreDelayTest for testing the datastore with various delays
//

debugParsing = false;

HyPerCol "column" = {
   nx = 16;   
   ny = 16;
   dt = 1.0;
   randomSeed = 30926100951;  // if not set here,  clock time is used to generate seed
   stopTime = 20.0;
   progressInterval = 20.0;
   writeProgressToErr = false;
   outputPath = "output/";
   checkpointWrite = true;
   checkpointWriteDir = "checkpoints/";
   checkpointWriteStepInterval = 1;
   deleteOlderCheckpoints = false;
   nbatch = 2;
};

//
// layers
//

DatastoreDelayTestLayer "input" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = false;
    
    InitVType = "ZeroV";
};

HyPerLayer "output" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = false;
    
    InitVType = "ZeroV";
};

HyPerLayer "outputArbor" = {
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    phase = 0;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = false;
    
    InitVType = "ZeroV";
};

// Connections

IdentConn "delay0" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 0;
};

IdentConn "delay1" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 1;
};

IdentConn "delay2" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 2;
};

IdentConn "delay3" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 3;
};

IdentConn "delay4" = {
    preLayerName = "input";
    postLayerName = "output";
    channelCode = 0;
    delay = 4;
};

HyPerConn "delayArbor" = {
    preLayerName = "input";
    postLayerName = "outputArbor";
    
    channelCode = 0;
    sharedWeights = true;
    nxp         = 1;
    nyp         = 1;
    nfp         = 1;
    //Set delay from 0 to 4
    delay       = [0, 1, 2, 3, 4];
    
    numAxonalArbors  = 5;
    writeStep        = -1;

    weightInitType = "OneToOneWeights";
    weightInit = 1.0;
      
    normalizeMethod        = "none";
    plasticityFlag         = false;
    pvpatchAccumulateType  = "convolve";
    writeCompressedCheckpoints = true;
    updateGSynFromPostPerspective = false;
};

DatastoreDelayTestProbe "probe" = {
    targetLayer = "output";
    message = "probe           ";
    textOutputFlag = true;
    probeOutputFile = "probe.txt";
    nnzThreshold = 0.0;
};

DatastoreDelayTestProbe "probeArbor" = {
    targetLayer = "outputArbor";
    message = "probeArbor      ";
    textOutputFlag = true;
    probeOutputFile = "probeArbor.txt";
    nnzThreshold = 0.0;
};
