//
// MarginWidthTest.params
//
// created by peteschultz: Aug 15, 2014
//

//  A params file to test automatic resizing of margin widths

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 256;
   ny = 256;
   dt = 1.0;
   randomSeed = 1149986818;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 1.0;  
   progressInterval = 1;
   errorOnNotANumber = false;
   writeProgressToErr = false;  
   outputPath = "output/";
   printParamsFilename = "pv.params";
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   suppressLastOutput = false;
};

//
// layers
//

ImagePvp "MarginsEqualImage" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ANNLayer "MarginsEqualResult" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 1 feature 
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ImagePvp "XMarginLargerImage" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ANNLayer "XMarginLargerResult" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 1 feature 
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ImagePvp "YMarginLargerImage" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ANNLayer "YMarginLargerResult" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 1 feature 
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ImagePvp "MultipleConnImage" = {
    nxScale = 1;
    nyScale = 1;
    inputPath = "input/testimage.pvp";
    nf = 1;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ANNLayer "MultipleConnResult" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 1; // 1 feature 
    phase = 1;
    triggerLayerName = NULL;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

//
// connections
//

HyPerConn "MarginsEqual" = {
    preLayerName = "MarginsEqualImage";
    postLayerName = "MarginsEqualResult";
    channelCode = 0;
    sharedWeights = true;

    nxp = 5;
    nyp = 5;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
      
    strength = 1.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = false;
};

HyPerConn "XMarginLarger" = {
    preLayerName = "XMarginLargerImage";
    postLayerName = "XMarginLargerResult";
    channelCode = 0;
    sharedWeights = true;

    nxp = 7;
    nyp = 3;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
      
    strength = 1.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = false;
};

HyPerConn "YMarginLarger" = {
    preLayerName = "YMarginLargerImage";
    postLayerName = "YMarginLargerResult";
    channelCode = 0;
    sharedWeights = true;

    nxp = 3;
    nyp = 7;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
      
    strength = 1.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;  // Whether the connection should be treated as connecting a layer to itself

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = false;
};

HyPerConn "YLargerConnInMultiple" = {
    preLayerName = "MultipleConnImage";
    postLayerName = "MultipleConnResult";
    channelCode = 0;
    sharedWeights = true;

    nxp = 3;
    nyp = 7;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
      
    strength = 1.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = false;
};

HyPerConn "XLargerConnInMultiple" = {
    preLayerName = "MultipleConnImage";
    postLayerName = "MultipleConnResult";
    channelCode = 1;
    sharedWeights = true;

    nxp = 7;
    nyp = 3;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = infinity;
    rMin = 0;
      
    strength = 1.0;
    normalizeMethod = "normalizeSum";
    normalizeArborsIndividually = false;
    normalize_cutoff = 0;
    symmetrizeWeights = 0;
    convertRateToSpikeCount = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "convolve";
    shrinkPatches = false;
    
    updateGSynFromPostPerspective = false;
};
