debugParsing = false;

HyPerCol "column" = {
    nx = 8; //1242;  // KITTI synced value
    ny = 8;  //218;
    dt = 1.0;
    dtAdaptController = NULL;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0.0;
    stopTime = 10.0;       // Depends on number of VINE video frames
    progressInterval = 1.0;
    outputPath = "output/";
    printParamsFilename = "pv.params";
    initializeFromCheckpointDir = "";
    checkpointWrite = false;
    // deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
    verifyWrites = false;
    errorOnNotANumber = false;
};

// this is a input layer
InputLayer "input" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 4;
    writeStep = -1.0;
    // initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
    // 
    phase = 0; 
    triggerLayerName = NULL;
};

MoviePvp "errInput" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    readPvpFile = true;
    inputPath = "input/errInput.pvp";
    writeFrameToTimestamp = true;
    writeStep = -1;
    sparseLayer = false;
    displayPeriod = 1;
    start_frame_index = 0;
    skip_frame_index = 1;
    // echoFramePathnameFlag = true;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    padValue = 0.0;
    flipOnTimescaleError = true;
    resetToStartOnLoop = true;
};

ANNLayer "error" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = -1.0;
    // initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
    // 
    phase = 1; 
    triggerLayerName = NULL;
};

TestLayer "recon" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    valueBC = 0.0;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0.0;
    VWidth = 0.0;
    clearGSynInterval = 0.0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

IdentConn "errInputToError" = {
   preLayerName = "errInput";
   postLayerName = "error";
   channelCode = 0;
   writeStep = -1;
   delay = 0;
};

ImprintConn "imprintConnection" = {
    preLayerName = "input";
    postLayerName = "error";
    channelCode = -1; //doing nothing to input
    nxp = 4; 
    nyp = 4; 
    numAxonalArbors = 1;
    writeStep = -1;
    
    weightInitType = "UniformWeight";
    connectOnlySameFeatures = true;
    triggerLayerName = NULL;
    weightInit = .5; //Shouldn't matter what we initialize it to
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;
    //normalizeArborsIndividually = false;
    //normalizeFromPostPerspective = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;
    dWMax = 1;

    weightUpdatePeriod = 1;
    initialWeightUpdateTime = 0;
    
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;

    imprintTimeThresh = 5;
};

CloneConn "reconConnection" = {
   preLayerName = "input";
   postLayerName = "recon";
   channelCode = 0;
   writeStep = -1;
   writeCompressedCheckpoints = false;
   originalConnName = "imprintConnection";
   selfFlag = false;
   delay = 0;
   convertRateToSpikeCount = false;
   updateGSynFromPostPerspective = false;
   pvpatchAccumulateType = "convolve";
};
