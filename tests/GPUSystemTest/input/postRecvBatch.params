//
// BasicSystemTest.params
//
// created by peteschultz: Nov 10, 2011
//

//  A params file for a simple simulation: two layers, one connection.
//  It serves as the basic template for systems tests, and tests the
//  basic functionality
//

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 64;   //size of the whole networks
   ny = 64;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 5.0;  
   nbatch = 16;
   threadBatch = 0;
   progressInterval = 1.0; //Program will output its progress at each progressInterval
   writeProgressToErr = false;  
   outputPath = "output/";
   filenamesContainLayerNames = false;  
   filenamesContainConnectionNames = false;
   checkpointWrite = false;
   suppressLastOutput = false; //Save the last output as checkpoint.
};

//
// layers
//

//All layers are subclasses of hyperlayer


// this is a input layer
ConstantLayer "input" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;

    phase = 1; 
};

ANNLayer "outputRecv" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 1; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecvGpu" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputTest" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

HyPerConn "conn" = {
    preLayerName = "input";
    postLayerName = "outputRecv";
    channelCode = 0;
    sharedWeights = true;
    nxp = 9; 
    nyp = 9; 
    numAxonalArbors = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    weightInitType = "UniformRandomWeight";
    wMinInit = -1;
    wMaxInit = 1;
    sparseFraction = 0;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;

    minL2NormTolerated                  = 0;

    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    keepKernelsSynchronized             = true;

    updateGSynFromPostPerspective = true;
    receiveGpu = false;
};

CloneConn "gpuconn" = {
    preLayerName = "input";
    postLayerName = "outputRecvGpu";
    originalConnName = "conn";
    sharedWeights = true;

    channelCode = 0;

    writeStep = 1.0;
    initialWriteTime = 0.0;

    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    selfFlag = false;
    convertRateToSpikeCount = false;

    delay = 0;
    
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
    receiveGpu = true;
};

IdentConn "RecvGPUTest" = {
    preLayerName = "outputRecvGpu";
    postLayerName = "outputTest";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest" = {
    preLayerName = "outputRecv";
    postLayerName = "outputTest";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

GPUSystemTestProbe "testProbe" = {
   targetLayer = "outputTest";
   message = "testProbe ";
};



