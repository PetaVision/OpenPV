debugParsing = false;

HyPerCol "column" = {
    nx = 64; //1242;  // KITTI synced value
    ny = 64;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0.0;
    stopTime = 10.0;       // Depends on number of VINE video frames
    progressInterval = 1.0;
    //Change this
    outputPath = "output/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointWrite = false;
    // deleteOlderCheckpoints = false;
    suppressLastOutput = false;
    writeProgressToErr = true;
};

ConstantLayer "input" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 3;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    
    InitVType = "UniformRandomV";
    minV = 0;
    maxV = 1;
    //InitVType = "ConstantV";
    //valueV = 1;
    

    phase = 1; 
};

ANNLayer "outputRecv1_1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 2; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecv1_2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 3; 
    triggerLayerName = NULL;
};

ANNLayer "outputRecv2_1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 4; 
    triggerLayerName = NULL;
};

ANNLayer "Test1_1AndTest1_2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 5; 
    triggerLayerName = NULL;
};

ANNLayer "Test1_1AndTest2_1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 5; 
    triggerLayerName = NULL;
};

ANNLayer "Test1_2AndTest2_1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 64;
    writeStep = -1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    sparseLayer = 0;
    //
    InitVType = "ZeroV";
    VThresh = -infinity;
    AMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin = -infinity; 
    AShift = 0;
    // 
    phase = 5; 
    triggerLayerName = NULL;
};

HyPerConn "origConn_1" = {
    preLayerName = "outputRecv1_2";
    postLayerName = "input";
    channelCode = -1; //Inhib b, doing nothing to input
    sharedWeights = true;
    nxp = 18; 
    nyp = 18; 
    numAxonalArbors = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    writeCompressedWeights = false;
    
    weightInitType = "FileWeight";
    initWeightsFile = "input/weights.pvp";

    //weightInitType = "UniformWeight";
    //weightInit = 1;
        
    normalizeMethod                     = "none";
    //strength                            = 1;
    //rMinX                               = 1.5;
    //rMinY                               = 1.5;
    //normalize_cutoff                    = 0;

    normalizeArborsIndividually = false;
    normalizeFromPostPerspective = false;

    minL2NormTolerated                  = 0;

    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
     
    delay = 0;
     
    convertRateToSpikeCount = false;
    selfFlag = false;

    updateGSynFromPostPerspective = false;

    keepKernelsSynchronized             = true;
};

TransposeConn "TransposeConn1_1" = {
    preLayerName = "input";
    postLayerName = "outputRecv1_1";
    channelCode = 0; 
    originalConnName = "origConn_1";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
    receiveGpu = true;
    preDataLocal = false;
};

TransposeConn "TransposeConn1_2" = {
    preLayerName = "input";
    postLayerName = "outputRecv1_2";
    channelCode = 0;
    originalConnName = "origConn_1";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1.0;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
    receiveGpu = true;
    preDataLocal = false;
};

HyPerConn "origConn_2" = {
   #include "origConn_1";
   @preLayerName = "outputRecv2_1";
};

TransposeConn "TransposeConn2_1" = {
    preLayerName = "input";
    postLayerName = "outputRecv2_1";
    channelCode = 0; 
    originalConnName = "origConn_2";
    selfFlag = false;
    convertRateToSpikeCount = false;
    writeStep = -1;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = true;
    receiveGpu = true;
    preDataLocal = false;
};

IdentConn "RecvTest1_1" = {
    preLayerName = "outputRecv1_1";
    postLayerName = "Test1_1AndTest1_2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest1_2" = {
    preLayerName = "outputRecv1_2";
    postLayerName = "Test1_1AndTest1_2";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest2_1" = {
    preLayerName = "outputRecv1_1";
    postLayerName = "Test1_1AndTest2_1";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest2_2" = {
    preLayerName = "outputRecv2_1";
    postLayerName = "Test1_1AndTest2_1";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest3_1" = {
    preLayerName = "outputRecv1_2";
    postLayerName = "Test1_2AndTest2_1";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

IdentConn "RecvTest3_2" = {
    preLayerName = "outputRecv2_1";
    postLayerName = "Test1_2AndTest2_1";
    channelCode = 1;
    delay = 0;
    writeStep = -1;
};

//GPUSystemTestProbe "probe1_1" = {
//   targetLayer = "outputRecv1_1";
//   message = "VAL 1_1 ";
//};
//
//GPUSystemTestProbe "probe1_2" = {
//   targetLayer = "outputRecv1_2";
//   message = "VAL 1_2 ";
//};
//
//GPUSystemTestProbe "probe2_1" = {
//   targetLayer = "outputRecv2_1";
//   message = "VAL 2_1 ";
//};

GPUSystemTestProbe "testProbe1_1And1_2" = {
   targetLayer = "Test1_1AndTest1_2";
   message = "DIFF 1_1And1_2 ";
};

GPUSystemTestProbe "testProbe1_1And2_1" = {
   targetLayer = "Test1_1AndTest2_1";
   message = "DIFF 1_1And2_1 ";
};

GPUSystemTestProbe "testProbe1_2And2_1" = {
   targetLayer = "Test1_2AndTest2_1";
   message = "DIFF 1_2And2_1 ";
};
