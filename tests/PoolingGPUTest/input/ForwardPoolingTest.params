// Params file for the ForwardPoolingTest part of PoolingGPUTest
// The params define a parameter sweep of size 6.
// For each of the three pooling methods (max, sum, avg), the test is
// performed with a one-to-one PoolingConn, and a many-to-one PoolingConn
// where the post-layer has nxScale, nyScale=0.5.
//
// The pooling is performed two ways, once on the CPU and once on the GPU.
// The CPU output is taken to be ground truth (PoolingConns on the CPU are
// verified in other tests). The CPU and GPU results are subtracted, and
// the relative error of the GPU result is computed as
//               (OutputGPU - OutputCPU) / OutputCPU.
// For maxpooling, this error should be zero, since the pooling selects
// from a set of values.
// For average pooling or sum pooling, there is the potential for
// floating-point discrepancies. The nnzThreshold parameter in the probe
// sets a value consistent with an error in the least-significant bit
// of a single-precision floating point value.

debugParsing = false;

HyPerCol "Column" = {
    dt                                  = 1;
    stopTime                            = 5;
    progressInterval                    = 1;
    writeProgressToErr                  = false;
    verifyWrites                        = true;
    // outputPath is set in parameter sweep
    printParamsFilename                 = "pv.params";
    randomSeed                          = 1470694687;
    nx                                  = 8;
    ny                                  = 8;
    nbatch                              = 1;
    initializeFromCheckpointDir         = "";
    checkpointWrite                     = false;
    errorOnNotANumber                   = false;
};

// Input layer

PvpLayer "Input" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 4;
    phase                               = 0;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    writeStep                           = 1;
    initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
    inputPath                           = "input/input.pvp";
    offsetAnchor                        = "tl";
    offsetX                             = 0;
    offsetY                             = 0;
    autoResizeFlag                      = false;
    inverseFlag                         = false;
    normalizeLuminanceFlag              = false;
    useInputBCflag                      = false;
    padValue                            = 0;
	displayPeriod                       = 0;
};

// Test pooling with nxScale, nyScale = 1.0

HyPerLayer "OutputCPU" = {
    // nxScale is set in parameter sweep
    // nyScale is set in parameter sweep
    nf                                  = 4;
    phase                               = 1;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1;
    initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
};

HyPerLayer "OutputGPU" = {
    #include "OutputCPU";
};

PoolingConn "InputToOutputCPU" = {
    preLayerName                        = "Input";
    postLayerName                       = "OutputCPU";
    channelCode                         = 0;
    delay                               = [0.000000];
    numAxonalArbors                     = 1;
    receiveGpu                          = false;
    sharedWeights                       = true;
    updateGSynFromPostPerspective       = true;
    // pvpatchAccumulateType is set in ParameterSweep
    nxp                                 = 3;
    nyp                                 = 3;
    nfp                                 = 4;
    needPostIndexLayer                  = false;
};

PoolingConn "InputToOutputGPU" = {
    #include "InputToOutputCPU";
    @postLayerName                      = "OutputGPU";
    @receiveGpu                         = true;
};

IdentConn "OutputGPUToComparison" = {
    channelCode                         = 0;
    delay                               = [0.000000];
};

IdentConn "OutputCPUToComparison" = {
    channelCode                         = 1;
    delay                               = [0.000000];
};

HyPerLayer "Comparison" = {
    // nxScale is set in parameter sweep
    // nyScale is set in parameter sweep
    nf                                  = 4;
    phase                               = 2;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1;
    initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
};

IdentConn "ComparisonToRelativeDiscrepancy" = {
    channelCode                         = 0;
    delay                               = [0.000000];
};

IdentConn "OutputCPUToRelativeDiscrepancy" = {
    channelCode                         = 1;
    delay                               = [0.000000];
};

PtwiseQuotientLayer "RelativeDiscrepancy" = {
    // nxScale is set in parameter sweep
    // nyScale is set in parameter sweep
    nf                                  = 4;
    phase                               = 3;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerLayerName                    = NULL;
    writeStep                           = 1;
    initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
};

// Evaluation probe.  Fails if activity in "Comparison" is ever above threshold.
RequireAllZeroActivityProbe "Verify" = {
    targetLayer = "RelativeDiscrepancy";
    textOutputFlag = true;
    probeOutputFile = "RelativeDiscrepancy.txt";
    // nnzThreshold is set in parameter sweep
    exitOnFailure = true;
    immediateExitOnFailure = false;
};

ParameterSweep "Column":outputPath = {
    "output/maxpooling-samescale";
    "output/maxpooling-smallerscale";
    "output/sumpooling-samescale";
    "output/sumpooling-smallerscale";
    "output/avgpooling-samescale";
    "output/avgpooling-smallerscale";
};


ParameterSweep "Column":lastCheckpointDir = {
    "maxpooling-samescale/Last";
    "maxpooling-smallerscale/Last";
    "sumpooling-samescale/Last";
    "sumpooling-smallerscale/Last";
    "avgpooling-samescale/Last";
    "avgpooling-smallerscale/Last";
};

ParameterSweep "OutputCPU":nxScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "OutputCPU":nyScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "OutputGPU":nxScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "OutputGPU":nyScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "InputToOutputCPU":pvpatchAccumulateType = {
    "maxpooling";
    "maxpooling";
    "sumpooling";
    "sumpooling";
    "avgpooling";
    "avgpooling";
};

ParameterSweep "InputToOutputGPU":pvpatchAccumulateType = {
    "maxpooling";
    "maxpooling";
    "sumpooling";
    "sumpooling";
    "avgpooling";
    "avgpooling";
};

ParameterSweep "Comparison":nxScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "Comparison":nyScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "RelativeDiscrepancy":nxScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "RelativeDiscrepancy":nyScale = {
    1.0; 0.5; 1.0; 0.5; 1.0; 0.5;
};

ParameterSweep "Verify":nnzThreshold = {
    0.0; 0.0; 1.2e-7; 1.2e-7; 1.2e-7; 1.2e-7;
};
