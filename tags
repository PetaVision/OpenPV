!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSTRACTNORMPROBE_HPP_	src/probes/AbstractNormProbe.hpp	9;"	d
ABS_REFRACTORY_PERIOD	src/include/default_params.h	44;"	d
ACCUMULATE_FUNCTION_HPP_	src/connections/accumulate_functions.hpp	2;"	d
ADAPTIVETIMESCALECONTROLLER_HPP_	src/components/AdaptiveTimeScaleController.hpp	9;"	d
ADAPTIVETIMESCALEPROBE_HPP_	src/probes/AdaptiveTimeScaleProbe.hpp	9;"	d
ALLCONSTANTVALUEPROBE_HPP_	tests/GroupNormalizationTest/src/AllConstantValueProbe.hpp	8;"	d
ALWAYSFAILSLAYER_HPP_	tests/DryRunFlagTest/src/AlwaysFailsLayer.hpp	2;"	d
AMax	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float AMax;$/;"	m	struct:PVCuda::ISTAParams
AMax	src/layers/ANNLayer.hpp	/^   float AMax    = FLT_MAX; \/\/ maximum membrane potential, larger values are set to AMax$/;"	m	class:PV::ANNLayer
AMin	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float AMin;$/;"	m	struct:PVCuda::ISTAParams
AMin	src/layers/ANNLayer.hpp	/^   float AMin    = -FLT_MAX; \/\/ minimum membrane potential, smaller values are set to AMin$/;"	m	class:PV::ANNLayer
ANNERRORLAYER_HPP_	src/layers/ANNErrorLayer.hpp	9;"	d
ANNErrorLayer	src/layers/ANNErrorLayer.cpp	/^ANNErrorLayer::ANNErrorLayer() { initialize_base(); }$/;"	f	class:PV::ANNErrorLayer
ANNErrorLayer	src/layers/ANNErrorLayer.cpp	/^ANNErrorLayer::ANNErrorLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNErrorLayer
ANNErrorLayer	src/layers/ANNErrorLayer.hpp	/^class ANNErrorLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ANNErrorLayer_update_state	src/layers/ANNErrorLayer.cpp	/^void ANNErrorLayer_update_state($/;"	f
ANNLAYER_HPP_	src/layers/ANNLayer.hpp	9;"	d
ANNLayer	src/layers/ANNLayer.cpp	/^ANNLayer::ANNLayer() { initialize_base(); }$/;"	f	class:PV::ANNLayer
ANNLayer	src/layers/ANNLayer.cpp	/^ANNLayer::ANNLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNLayer
ANNLayer	src/layers/ANNLayer.hpp	/^class ANNLayer : public HyPerLayer {$/;"	c	namespace:PV
ANNLayer_threshminmax_update_state	src/layers/ANNLayer.cpp	/^void ANNLayer_threshminmax_update_state($/;"	f
ANNLayer_vertices_update_state	src/layers/ANNLayer.cpp	/^void ANNLayer_vertices_update_state($/;"	f
ANNSQUAREDLAYER_HPP_	src/layers/ANNSquaredLayer.hpp	9;"	d
ANNSquaredLayer	src/layers/ANNSquaredLayer.cpp	/^ANNSquaredLayer::ANNSquaredLayer() { initialize_base(); }$/;"	f	class:PV::ANNSquaredLayer
ANNSquaredLayer	src/layers/ANNSquaredLayer.cpp	/^ANNSquaredLayer::ANNSquaredLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNSquaredLayer
ANNSquaredLayer	src/layers/ANNSquaredLayer.hpp	/^class ANNSquaredLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ANNSquaredLayer_update_state	src/layers/ANNSquaredLayer.cpp	/^void ANNSquaredLayer_update_state($/;"	f
ANNWHITENEDLAYER_HPP_	src/layers/ANNWhitenedLayer.hpp	9;"	d
ANNWhitenedLayer	src/layers/ANNWhitenedLayer.cpp	/^ANNWhitenedLayer::ANNWhitenedLayer() { initialize_base(); }$/;"	f	class:PV::ANNWhitenedLayer
ANNWhitenedLayer	src/layers/ANNWhitenedLayer.cpp	/^ANNWhitenedLayer::ANNWhitenedLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNWhitenedLayer
ANNWhitenedLayer	src/layers/ANNWhitenedLayer.hpp	/^class ANNWhitenedLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ANNWhitenedLayer_update_state	src/layers/ANNWhitenedLayer.cpp	/^void ANNWhitenedLayer_update_state($/;"	f
ARGUMENTS_HPP_	src/columns/Arguments.hpp	9;"	d
ASPECT_RATIO	src/include/default_params.h	29;"	d
ASSERTZEROSPROBE_HPP_	tests/SegmentTest/src/AssertZerosProbe.hpp	7;"	d
AShift	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float AShift;$/;"	m	struct:PVCuda::ISTAParams
AShift	src/layers/ANNLayer.hpp	/^   float AShift =$/;"	m	class:PV::ANNLayer
AVERAGERATECONN_HPP_	tests/LIFTest/src/AverageRateConn.hpp	9;"	d
AVG	src/connections/PoolingConn.hpp	/^   enum AccumulateType { UNDEFINED, MAX, SUM, AVG };$/;"	e	enum:PV::PoolingConn::AccumulateType
AVGPOOLTESTINPUTLAYER_HPP_	tests/AvgPoolTest/src/AvgPoolTestInputLayer.hpp	2;"	d
AVGPOOLTESTLAYER_HPP_	tests/AvgPoolTest/src/AvgPoolTestLayer.hpp	2;"	d
AbstractNormProbe	src/probes/AbstractNormProbe.cpp	/^AbstractNormProbe::AbstractNormProbe() : LayerProbe() { initAbstractNormProbe_base(); }$/;"	f	class:PV::AbstractNormProbe
AbstractNormProbe	src/probes/AbstractNormProbe.cpp	/^AbstractNormProbe::AbstractNormProbe(const char *probeName, HyPerCol *hc) : LayerProbe() {$/;"	f	class:PV::AbstractNormProbe
AbstractNormProbe	src/probes/AbstractNormProbe.hpp	/^class AbstractNormProbe : public LayerProbe {$/;"	c	namespace:PV
AccumulateType	src/connections/HyPerConn.hpp	/^   enum AccumulateType { UNDEFINED, CONVOLVE, STOCHASTIC };$/;"	g	class:PV::HyPerConn
AccumulateType	src/connections/PoolingConn.hpp	/^   enum AccumulateType { UNDEFINED, MAX, SUM, AVG };$/;"	g	class:PV::PoolingConn
ActivityHeader	src/utils/BufferUtilsPvp.hpp	/^struct ActivityHeader {$/;"	s	namespace:PV::BufferUtils
AdaptTimestepMessage	src/columns/Messages.hpp	/^   AdaptTimestepMessage() { setMessageType("AdaptTimestep"); }$/;"	f	class:PV::AdaptTimestepMessage
AdaptTimestepMessage	src/columns/Messages.hpp	/^class AdaptTimestepMessage : public BaseMessage {$/;"	c	namespace:PV
AdaptiveTimeScaleController	src/components/AdaptiveTimeScaleController.cpp	/^AdaptiveTimeScaleController::AdaptiveTimeScaleController($/;"	f	class:PV::AdaptiveTimeScaleController
AdaptiveTimeScaleController	src/components/AdaptiveTimeScaleController.hpp	/^class AdaptiveTimeScaleController : public CheckpointerDataInterface {$/;"	c	namespace:PV
AdaptiveTimeScaleProbe	src/probes/AdaptiveTimeScaleProbe.cpp	/^AdaptiveTimeScaleProbe::AdaptiveTimeScaleProbe() {}$/;"	f	class:PV::AdaptiveTimeScaleProbe
AdaptiveTimeScaleProbe	src/probes/AdaptiveTimeScaleProbe.cpp	/^AdaptiveTimeScaleProbe::AdaptiveTimeScaleProbe(char const *name, HyPerCol *hc) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
AdaptiveTimeScaleProbe	src/probes/AdaptiveTimeScaleProbe.hpp	/^class AdaptiveTimeScaleProbe : public ColProbe {$/;"	c	namespace:PV
AllConstantValueProbe	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^AllConstantValueProbe::AllConstantValueProbe() { initialize_base(); }$/;"	f	class:PV::AllConstantValueProbe
AllConstantValueProbe	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^AllConstantValueProbe::AllConstantValueProbe(char const *probeName, HyPerCol *hc) {$/;"	f	class:PV::AllConstantValueProbe
AllConstantValueProbe	tests/GroupNormalizationTest/src/AllConstantValueProbe.hpp	/^class AllConstantValueProbe : public StatsProbe {$/;"	c	namespace:PV
AllocateDataMessage	src/columns/Messages.hpp	/^   AllocateDataMessage() { setMessageType("AllocateDataStructures"); }$/;"	f	class:PV::AllocateDataMessage
AllocateDataMessage	src/columns/Messages.hpp	/^class AllocateDataMessage : public BaseMessage {$/;"	c	namespace:PV
AlwaysFailsLayer	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^AlwaysFailsLayer::AlwaysFailsLayer() { initialize_base(); }$/;"	f	class:PV::AlwaysFailsLayer
AlwaysFailsLayer	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^AlwaysFailsLayer::AlwaysFailsLayer(char const *name, HyPerCol *hc) {$/;"	f	class:PV::AlwaysFailsLayer
AlwaysFailsLayer	tests/DryRunFlagTest/src/AlwaysFailsLayer.hpp	/^class AlwaysFailsLayer : public HyPerLayer {$/;"	c	namespace:PV
Anchor	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	g	class:PV::Buffer
ArborTestForOnesProbe	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^ArborTestForOnesProbe::ArborTestForOnesProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::ArborTestForOnesProbe
ArborTestForOnesProbe	tests/ArborSystemTest/src/ArborTestForOnesProbe.hpp	/^class ArborTestForOnesProbe : public PV::StatsProbe {$/;"	c	namespace:PV
ArborTestForOnesProbe_HPP_	tests/ArborSystemTest/src/ArborTestForOnesProbe.hpp	9;"	d
ArborTestProbe	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^ArborTestProbe::ArborTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::ArborTestProbe
ArborTestProbe	tests/ArborSystemTest/src/ArborTestProbe.hpp	/^class ArborTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
ArborTestProbe_HPP_	tests/ArborSystemTest/src/ArborTestProbe.hpp	9;"	d
Arguments	src/columns/Arguments.cpp	/^Arguments::Arguments(std::istream &configStream, bool allowUnrecognizedArguments) {$/;"	f	class:PV::Arguments
Arguments	src/columns/Arguments.hpp	/^   Arguments() { initialize_base(); }$/;"	f	class:PV::Arguments
Arguments	src/columns/Arguments.hpp	/^class Arguments {$/;"	c	namespace:PV
AssertZerosProbe	tests/SegmentTest/src/AssertZerosProbe.cpp	/^AssertZerosProbe::AssertZerosProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::AssertZerosProbe
AssertZerosProbe	tests/SegmentTest/src/AssertZerosProbe.hpp	/^class AssertZerosProbe : public PV::StatsProbe {$/;"	c	namespace:PV
AverageRateConn	tests/LIFTest/src/AverageRateConn.cpp	/^AverageRateConn::AverageRateConn() { initialize_base(); }$/;"	f	class:PV::AverageRateConn
AverageRateConn	tests/LIFTest/src/AverageRateConn.cpp	/^AverageRateConn::AverageRateConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::AverageRateConn
AverageRateConn	tests/LIFTest/src/AverageRateConn.hpp	/^class AverageRateConn : public IdentConn {$/;"	c	namespace:PV
AvgPoolTestInputLayer	tests/AvgPoolTest/src/AvgPoolTestInputLayer.cpp	/^AvgPoolTestInputLayer::AvgPoolTestInputLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::AvgPoolTestInputLayer
AvgPoolTestInputLayer	tests/AvgPoolTest/src/AvgPoolTestInputLayer.hpp	/^class AvgPoolTestInputLayer : public PV::ANNLayer {$/;"	c	namespace:PV
AvgPoolTestLayer	tests/AvgPoolTest/src/AvgPoolTestLayer.cpp	/^AvgPoolTestLayer::AvgPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::AvgPoolTestLayer
AvgPoolTestLayer	tests/AvgPoolTest/src/AvgPoolTestLayer.hpp	/^class AvgPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
BACKGROUNDLAYER_HPP_	src/layers/BackgroundLayer.hpp	11;"	d
BASECONNECTIONPROBE_HPP_	src/probes/BaseConnectionProbe.hpp	9;"	d
BASECONNECTION_HPP_	src/connections/BaseConnection.hpp	14;"	d
BASEHYPERCONNPROBE_HPP_	src/probes/BaseHyPerConnProbe.hpp	9;"	d
BASEINITV_HPP_	src/initv/BaseInitV.hpp	9;"	d
BASELAYER_HPP_	src/layers/BaseLayer.hpp	9;"	d
BASEMESSAGE_HPP_	src/observerpattern/BaseMessage.hpp	12;"	d
BASEOBJECT_HPP_	src/columns/BaseObject.hpp	24;"	d
BASEPROBE_HPP_	src/probes/BaseProbe.hpp	8;"	d
BATCHSWEEPTESTPROBE_HPP_	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	9;"	d
BBFINDCONFREMAPLAYER_HPP_	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	9;"	d
BBFINDCONFREMAPPROBE_HPP_	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	9;"	d
BBFIND_HPP_	demos/HeatMapLocalization/src/BBFind.hpp	2;"	d
BBFind	demos/HeatMapLocalization/src/BBFind.hpp	/^class BBFind$/;"	c
BBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^BBFindConfRemapLayer::BBFindConfRemapLayer() {$/;"	f	class:BBFindConfRemapLayer
BBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^BBFindConfRemapLayer::BBFindConfRemapLayer(char const * name, PV::HyPerCol * hc) {$/;"	f	class:BBFindConfRemapLayer
BBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^class BBFindConfRemapLayer: public PV::HyPerLayer {$/;"	c
BBFindConfRemapProbe	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^BBFindConfRemapProbe::BBFindConfRemapProbe() {$/;"	f	class:BBFindConfRemapProbe
BBFindConfRemapProbe	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^BBFindConfRemapProbe::BBFindConfRemapProbe(const char * name, PV::HyPerCol * hc) {$/;"	f	class:BBFindConfRemapProbe
BBFindConfRemapProbe	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^class BBFindConfRemapProbe: public PV::LayerProbe {$/;"	c
BICUBIC	src/utils/BufferUtilsRescale.hpp	/^enum InterpolationMethod { NEAREST, BICUBIC };$/;"	e	enum:PV::BufferUtils::InterpolationMethod
BINNINGLAYER_HPP_	src/layers/BinningLayer.hpp	2;"	d
BINNINGTESTLAYER_HPP_	tests/BinningLayerTest/src/BinningTestLayer.hpp	2;"	d
BORDEREXCHANGE_HPP_	src/utils/BorderExchange.hpp	6;"	d
BUILDANDRUN_HPP_	src/columns/buildandrun.hpp	9;"	d
BYFILE	src/components/BatchIndexer.hpp	/^   enum BatchMethod { BYFILE, BYLIST, BYSPECIFIED, RANDOM };$/;"	e	enum:PV::BatchIndexer::BatchMethod
BYLIST	src/components/BatchIndexer.hpp	/^   enum BatchMethod { BYFILE, BYLIST, BYSPECIFIED, RANDOM };$/;"	e	enum:PV::BatchIndexer::BatchMethod
BYSPECIFIED	src/components/BatchIndexer.hpp	/^   enum BatchMethod { BYFILE, BYLIST, BYSPECIFIED, RANDOM };$/;"	e	enum:PV::BatchIndexer::BatchMethod
BYTE	src/utils/BufferUtilsPvp.hpp	/^   BYTE                  = 1,$/;"	e	enum:PV::BufferUtils::HeaderDataTypeEnum
BackgroundLayer	src/layers/BackgroundLayer.cpp	/^BackgroundLayer::BackgroundLayer() { initialize_base(); }$/;"	f	class:PV::BackgroundLayer
BackgroundLayer	src/layers/BackgroundLayer.cpp	/^BackgroundLayer::BackgroundLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BackgroundLayer
BackgroundLayer	src/layers/BackgroundLayer.hpp	/^class BackgroundLayer : public CloneVLayer {$/;"	c	namespace:PV
BaseConnection	src/connections/BaseConnection.cpp	/^BaseConnection::BaseConnection() { initialize_base(); }$/;"	f	class:PV::BaseConnection
BaseConnection	src/connections/BaseConnection.hpp	/^class BaseConnection : public BaseObject {$/;"	c	namespace:PV
BaseConnectionProbe	src/probes/BaseConnectionProbe.cpp	/^BaseConnectionProbe::BaseConnectionProbe() { initialize_base(); }$/;"	f	class:PV::BaseConnectionProbe
BaseConnectionProbe	src/probes/BaseConnectionProbe.cpp	/^BaseConnectionProbe::BaseConnectionProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BaseConnectionProbe
BaseConnectionProbe	src/probes/BaseConnectionProbe.hpp	/^class BaseConnectionProbe : public BaseProbe {$/;"	c	namespace:PV
BaseHyPerConnProbe	src/probes/BaseHyPerConnProbe.cpp	/^BaseHyPerConnProbe::BaseHyPerConnProbe() { initialize_base(); }$/;"	f	class:PV::BaseHyPerConnProbe
BaseHyPerConnProbe	src/probes/BaseHyPerConnProbe.cpp	/^BaseHyPerConnProbe::BaseHyPerConnProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BaseHyPerConnProbe
BaseHyPerConnProbe	src/probes/BaseHyPerConnProbe.hpp	/^class BaseHyPerConnProbe : public BaseConnectionProbe {$/;"	c	namespace:PV
BaseInitV	src/initv/BaseInitV.cpp	/^BaseInitV::BaseInitV() { initialize_base(); }$/;"	f	class:PV::BaseInitV
BaseInitV	src/initv/BaseInitV.cpp	/^BaseInitV::BaseInitV(char const *name, HyPerCol *hc) {$/;"	f	class:PV::BaseInitV
BaseInitV	src/initv/BaseInitV.hpp	/^class BaseInitV : public BaseObject {$/;"	c	namespace:PV
BaseInputDeprecatedError	src/layers/InputLayer.cpp	/^BaseInputDeprecatedError::BaseInputDeprecatedError(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BaseInputDeprecatedError
BaseInputDeprecatedError	src/layers/InputLayer.hpp	/^class BaseInputDeprecatedError : public BaseObject {$/;"	c	namespace:PV
BaseLayer	src/layers/BaseLayer.cpp	/^BaseLayer::BaseLayer() {}$/;"	f	class:PV::BaseLayer
BaseLayer	src/layers/BaseLayer.hpp	/^class BaseLayer : public BaseObject {$/;"	c	namespace:PV
BaseMessage	src/observerpattern/BaseMessage.hpp	/^   BaseMessage() {}$/;"	f	class:PV::BaseMessage
BaseMessage	src/observerpattern/BaseMessage.hpp	/^class BaseMessage {$/;"	c	namespace:PV
BaseObject	src/columns/BaseObject.cpp	/^BaseObject::BaseObject() {$/;"	f	class:PV::BaseObject
BaseObject	src/columns/BaseObject.hpp	/^class BaseObject : public Observer, public CheckpointerDataInterface {$/;"	c	namespace:PV
BaseProbe	src/probes/BaseProbe.cpp	/^BaseProbe::BaseProbe() {$/;"	f	class:PV::BaseProbe
BaseProbe	src/probes/BaseProbe.hpp	/^class BaseProbe : public BaseObject {$/;"	c	namespace:PV
BatchIndexer	src/components/BatchIndexer.cpp	/^BatchIndexer::BatchIndexer($/;"	f	class:PV::BatchIndexer
BatchIndexer	src/components/BatchIndexer.hpp	/^class BatchIndexer : public CheckpointerDataInterface {$/;"	c	namespace:PV
BatchMethod	src/components/BatchIndexer.hpp	/^   enum BatchMethod { BYFILE, BYLIST, BYSPECIFIED, RANDOM };$/;"	g	class:PV::BatchIndexer
BatchSweepTestProbe	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^BatchSweepTestProbe::BatchSweepTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BatchSweepTestProbe
BatchSweepTestProbe	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	/^class BatchSweepTestProbe : public StatsProbe {$/;"	c	namespace:PV
BinningLayer	src/layers/BinningLayer.cpp	/^BinningLayer::BinningLayer() {$/;"	f	class:PV::BinningLayer
BinningLayer	src/layers/BinningLayer.cpp	/^BinningLayer::BinningLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BinningLayer
BinningLayer	src/layers/BinningLayer.hpp	/^class BinningLayer : public PV::HyPerLayer {$/;"	c	namespace:PV
BinningTestLayer	tests/BinningLayerTest/src/BinningTestLayer.cpp	/^BinningTestLayer::BinningTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BinningTestLayer
BinningTestLayer	tests/BinningLayerTest/src/BinningTestLayer.hpp	/^class BinningTestLayer : public PV::BinningLayer {$/;"	c	namespace:PV
BorderExchange	src/utils/BorderExchange.cpp	/^BorderExchange::BorderExchange(MPIBlock const &mpiBlock, PVLayerLoc const &loc) {$/;"	f	class:PV::BorderExchange
BorderExchange	src/utils/BorderExchange.hpp	/^class BorderExchange {$/;"	c	namespace:PV
BufActivity	src/probes/LayerProbe.hpp	/^typedef enum { BufV, BufActivity } PVBufType;$/;"	e	enum:PV::__anon3
BufV	src/probes/LayerProbe.hpp	/^typedef enum { BufV, BufActivity } PVBufType;$/;"	e	enum:PV::__anon3
Buffer	src/structures/Buffer.hpp	/^class Buffer {$/;"	c	namespace:PV
BufferUtils	src/io/randomstateio.cpp	/^namespace BufferUtils {$/;"	n	namespace:PV	file:
BufferUtils	src/utils/BufferUtilsMPI.hpp	/^namespace BufferUtils {$/;"	n	namespace:PV
BufferUtils	src/utils/BufferUtilsPvp.hpp	/^namespace BufferUtils {$/;"	n	namespace:PV
BufferUtils	src/utils/BufferUtilsRescale.cpp	/^namespace BufferUtils {$/;"	n	namespace:PV	file:
BufferUtils	src/utils/BufferUtilsRescale.hpp	/^namespace BufferUtils {$/;"	n	namespace:PV
CASE	src/io/stb_image.h	1346;"	d
CASE	src/io/stb_image.h	1378;"	d
CASE	src/io/stb_image.h	4483;"	d
CASE	src/io/stb_image.h	4510;"	d
CASE	src/io/stb_image.h	4515;"	d
CASE	src/io/stb_image.h	4543;"	d
CC	tools/Makefile	/^CC = gcc$/;"	m
CENTER	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
CHANNEL_EXC	src/include/pv_types.h	/^   CHANNEL_EXC      = 0,$/;"	e	enum:ChannelType
CHANNEL_EXC	src/layers/updateStateFunctions.h	32;"	d
CHANNEL_GAP	src/include/pv_types.h	/^   CHANNEL_GAP      = 3,$/;"	e	enum:ChannelType
CHANNEL_GAP	src/layers/updateStateFunctions.h	35;"	d
CHANNEL_INH	src/include/pv_types.h	/^   CHANNEL_INH      = 1,$/;"	e	enum:ChannelType
CHANNEL_INH	src/layers/updateStateFunctions.h	33;"	d
CHANNEL_INHB	src/include/pv_types.h	/^   CHANNEL_INHB     = 2,$/;"	e	enum:ChannelType
CHANNEL_INHB	src/layers/updateStateFunctions.h	34;"	d
CHANNEL_NORM	src/include/pv_types.h	/^   CHANNEL_NORM     = 4,$/;"	e	enum:ChannelType
CHANNEL_NORM	src/layers/LCALIFLayer.cpp	397;"	d	file:
CHANNEL_NOUPDATE	src/include/pv_types.h	/^   CHANNEL_NOUPDATE = -1$/;"	e	enum:ChannelType
CHECKPOINTENTRYDATASTORE_HPP_	src/checkpointing/CheckpointEntryDataStore.hpp	9;"	d
CHECKPOINTENTRYDATASTORE_HPP_	src/checkpointing/CheckpointEntryWeightPvp.hpp	9;"	d
CHECKPOINTENTRYDATA_HPP_	src/checkpointing/CheckpointEntryData.hpp	9;"	d
CHECKPOINTENTRYPVPBUFFER_HPP_	src/checkpointing/CheckpointEntryPvpBuffer.hpp	9;"	d
CHECKPOINTENTRYPVP_HPP_	src/checkpointing/CheckpointEntryPvp.hpp	9;"	d
CHECKPOINTENTRYRANDSTATE_HPP_	src/checkpointing/CheckpointEntryRandState.hpp	9;"	d
CHECKPOINTENTRY_HPP_	src/checkpointing/CheckpointEntry.hpp	9;"	d
CHECKPOINTER_HPP_	src/checkpointing/Checkpointer.hpp	9;"	d
CLOCK_HPP_	src/utils/Clock.hpp	9;"	d
CLONECONN_HPP_	src/connections/CloneConn.hpp	9;"	d
CLONEKERNELCONNTESTPROBE_HPP_	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.hpp	9;"	d
CLONEKERNELCONNTESTPROBE_HPP_	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.hpp	9;"	d
CLONEKERNELCONN_HPP_	src/connections/CloneKernelConn.hpp	9;"	d
CLONEVLAYER_HPP_	src/layers/CloneVLayer.hpp	9;"	d
CL_RANDOM_H_	src/utils/cl_random.h	9;"	d
CL_RANDOM_MAX	src/utils/cl_random.h	16;"	d
COLPROBE_HPP_	src/probes/ColProbe.hpp	9;"	d
COLUMNARCHIVE_HPP_	tests/Shared/ColumnArchive.hpp	9;"	d
COLUMNENERGYPROBE_HPP_	src/probes/ColumnEnergyProbe.hpp	9;"	d
COMBO	src/io/stb_image.h	1345;"	d
COMMANDLINEARGUMENTS_HPP_	src/columns/CommandLineArguments.hpp	9;"	d
COMMNAME_MAXLENGTH	src/columns/Communicator.hpp	17;"	d
COMMUNICATOR_HPP_	src/columns/Communicator.hpp	6;"	d
COMPARISONLAYER_HPP_	tests/BackgroundLayerTest/src/ComparisonLayer.hpp	2;"	d
CONDUCTANCE_PRINT_FORMAT	src/probes/PointLIFProbe.cpp	15;"	d	file:
CONFIGFILEARGUMENTS_HPP_	src/columns/ConfigFileArguments.hpp	9;"	d
CONFIGPARSER_HPP_	src/io/ConfigParser.hpp	2;"	d
CONFIGURATION_HPP_	src/io/Configuration.hpp	2;"	d
CONFIG_BOOL	src/io/Configuration.hpp	/^      CONFIG_BOOL,$/;"	e	enum:PV::Configuration::ConfigurationType
CONFIG_INT	src/io/Configuration.hpp	/^      CONFIG_INT,$/;"	e	enum:PV::Configuration::ConfigurationType
CONFIG_INT_OPTIONAL	src/io/Configuration.hpp	/^      CONFIG_INT_OPTIONAL$/;"	e	enum:PV::Configuration::ConfigurationType
CONFIG_STRING	src/io/Configuration.hpp	/^      CONFIG_STRING,$/;"	e	enum:PV::Configuration::ConfigurationType
CONFIG_UNRECOGNIZED	src/io/Configuration.hpp	/^      CONFIG_UNRECOGNIZED,$/;"	e	enum:PV::Configuration::ConfigurationType
CONFIG_UNSIGNED	src/io/Configuration.hpp	/^      CONFIG_UNSIGNED,$/;"	e	enum:PV::Configuration::ConfigurationType
CONSTANTLAYER_HPP_	src/layers/ConstantLayer.hpp	9;"	d
CONSTANTV_HPP_	src/initv/ConstantV.hpp	9;"	d
CONVERSIONS_H_	src/utils/conversions.h	9;"	d
CONVOLVE	src/connections/HyPerConn.hpp	/^   enum AccumulateType { UNDEFINED, CONVOLVE, STOCHASTIC };$/;"	e	enum:PV::HyPerConn::AccumulateType
CONVTABLEHEADERSIZE	demos/HeatMapLocalization/src/ConvertFromTable.cpp	9;"	d	file:
COORDINATE_METHOD	src/probes/BaseConnectionProbe.hpp	/^enum PatchIDMethod { INDEX_METHOD, COORDINATE_METHOD };$/;"	e	enum:PatchIDMethod
COPYCONN_HPP_	src/connections/CopyConn.hpp	9;"	d
CORRECTSTATE_HPP_	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	9;"	d
CORRECTSTATE_HPP_	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	9;"	d
CORRECTSTATE_HPP_	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	9;"	d
CORRECTSTATE_HPP_	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	9;"	d
CORRECT_PVP_NF	tests/GenericSystemTest/src/main.cpp	12;"	d	file:
CORRECT_PVP_NF	tests/LCATest/src/main.cpp	12;"	d	file:
CORRECT_PVP_NF	tests/MomentumLCATest/src/main.cpp	12;"	d	file:
CORRECT_PVP_NF	tests/TotalEnergyTest/src/main.cpp	12;"	d	file:
CORRECT_PVP_NF	tests/WriteSparseFileTest/src/main.cpp	12;"	d	file:
CORRECT_PVP_NX	tests/GenericSystemTest/src/main.cpp	10;"	d	file:
CORRECT_PVP_NX	tests/LCATest/src/main.cpp	10;"	d	file:
CORRECT_PVP_NX	tests/MomentumLCATest/src/main.cpp	10;"	d	file:
CORRECT_PVP_NX	tests/TotalEnergyTest/src/main.cpp	10;"	d	file:
CORRECT_PVP_NX	tests/WriteSparseFileTest/src/main.cpp	10;"	d	file:
CORRECT_PVP_NY	tests/GenericSystemTest/src/main.cpp	11;"	d	file:
CORRECT_PVP_NY	tests/LCATest/src/main.cpp	11;"	d	file:
CORRECT_PVP_NY	tests/MomentumLCATest/src/main.cpp	11;"	d	file:
CORRECT_PVP_NY	tests/TotalEnergyTest/src/main.cpp	11;"	d	file:
CORRECT_PVP_NY	tests/WriteSparseFileTest/src/main.cpp	11;"	d	file:
CPTESTINPUTLAYER_HPP_	tests/Shared/CPTestInputLayer.hpp	9;"	d
CPTEST_UPDATESTATEFUNCTIONS_H_	tests/Shared/CPTest_updateStateFunctions.h	11;"	d
CPTestInputLayer	tests/Shared/CPTestInputLayer.cpp	/^CPTestInputLayer::CPTestInputLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::CPTestInputLayer
CPTestInputLayer	tests/Shared/CPTestInputLayer.hpp	/^class CPTestInputLayer : public ANNLayer {$/;"	c	namespace:PV
CPTestInputLayer_update_state	tests/Shared/CPTestInputLayer.cpp	/^void CPTestInputLayer_update_state($/;"	f
CROP	src/utils/BufferUtilsRescale.hpp	/^enum RescaleMethod { CROP, PAD };$/;"	e	enum:PV::BufferUtils::RescaleMethod
CUDABUFFER_HPP_	src/arch/cuda/CudaBuffer.hpp	9;"	d
CUDADEVICE_HPP_	src/arch/cuda/CudaDevice.hpp	9;"	d
CUDAKERNEL_HPP_	src/arch/cuda/CudaKernel.hpp	9;"	d
CUDAPOOLINGDELIVERKERNEL_HPP_	src/cudakernels/CudaPoolingDeliverKernel.hpp	9;"	d
CUDARECVPOST_HPP_	src/cudakernels/CudaRecvPost.hpp	9;"	d
CUDARECVPRE_HPP_	src/cudakernels/CudaRecvPre.hpp	9;"	d
CUDATIMER_HPP_	src/arch/cuda/CudaTimer.hpp	8;"	d
CUDATRANSPOSEPOOLINGDELIVERKERNEL_HPP_	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	9;"	d
CUDAUPDATESTATEFUNCTION_HPP_	src/cudakernels/CudaUpdateStateFunctions.hpp	9;"	d
CUDA_UTIL_HPP_	src/arch/cuda/cuda_util.hpp	2;"	d
CYCLE_TIMER	src/utils/Clock.hpp	26;"	d
ChannelType	src/include/pv_types.h	/^enum ChannelType {$/;"	g
CheckpointEntry	src/checkpointing/CheckpointEntry.hpp	/^   CheckpointEntry($/;"	f	class:PV::CheckpointEntry
CheckpointEntry	src/checkpointing/CheckpointEntry.hpp	/^   CheckpointEntry(std::string const &name, MPIBlock const *mpiBlock)$/;"	f	class:PV::CheckpointEntry
CheckpointEntry	src/checkpointing/CheckpointEntry.hpp	/^class CheckpointEntry {$/;"	c	namespace:PV
CheckpointEntryData	src/checkpointing/CheckpointEntryData.hpp	/^   CheckpointEntryData($/;"	f	class:PV::CheckpointEntryData
CheckpointEntryData	src/checkpointing/CheckpointEntryData.hpp	/^class CheckpointEntryData : public CheckpointEntry {$/;"	c	namespace:PV
CheckpointEntryDataStore	src/checkpointing/CheckpointEntryDataStore.hpp	/^   CheckpointEntryDataStore($/;"	f	class:PV::CheckpointEntryDataStore
CheckpointEntryDataStore	src/checkpointing/CheckpointEntryDataStore.hpp	/^class CheckpointEntryDataStore : public CheckpointEntryPvp<float> {$/;"	c	namespace:PV
CheckpointEntryPvp	src/checkpointing/CheckpointEntryPvp.hpp	/^class CheckpointEntryPvp : public CheckpointEntry {$/;"	c	namespace:PV
CheckpointEntryPvpBuffer	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   CheckpointEntryPvpBuffer($/;"	f	class:PV::CheckpointEntryPvpBuffer
CheckpointEntryPvpBuffer	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^class CheckpointEntryPvpBuffer : public CheckpointEntryPvp<T> {$/;"	c	namespace:PV
CheckpointEntryRandState	src/checkpointing/CheckpointEntryRandState.hpp	/^   CheckpointEntryRandState($/;"	f	class:PV::CheckpointEntryRandState
CheckpointEntryRandState	src/checkpointing/CheckpointEntryRandState.hpp	/^class CheckpointEntryRandState : public CheckpointEntry {$/;"	c	namespace:PV
CheckpointEntryTimeScaleInfo	src/components/AdaptiveTimeScaleController.hpp	/^   CheckpointEntryTimeScaleInfo($/;"	f	class:PV::CheckpointEntryTimeScaleInfo
CheckpointEntryTimeScaleInfo	src/components/AdaptiveTimeScaleController.hpp	/^class CheckpointEntryTimeScaleInfo : public CheckpointEntry {$/;"	c	namespace:PV
CheckpointEntryWeightPvp	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   CheckpointEntryWeightPvp($/;"	f	class:PV::CheckpointEntryWeightPvp
CheckpointEntryWeightPvp	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^class CheckpointEntryWeightPvp : public CheckpointEntry {$/;"	c	namespace:PV
CheckpointWriteTriggerMode	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode { NONE, STEP, SIMTIME, WALLCLOCK };$/;"	g	class:PV::Checkpointer
CheckpointableFileStream	src/checkpointing/CheckpointableFileStream.cpp	/^CheckpointableFileStream::CheckpointableFileStream($/;"	f	class:PV::CheckpointableFileStream
CheckpointableFileStream	src/checkpointing/CheckpointableFileStream.hpp	/^class CheckpointableFileStream : public FileStream,$/;"	c	namespace:PV
Checkpointer	src/checkpointing/Checkpointer.cpp	/^Checkpointer::Checkpointer($/;"	f	class:PV::Checkpointer
Checkpointer	src/checkpointing/Checkpointer.hpp	/^class Checkpointer : public Subject {$/;"	c	namespace:PV
CheckpointerDataInterface	src/checkpointing/Checkpointer.hpp	/^class CheckpointerDataInterface {$/;"	c	namespace:PV
CleanupMessage	src/columns/Messages.hpp	/^   CleanupMessage() { setMessageType("Cleanup"); }$/;"	f	class:PV::CleanupMessage
CleanupMessage	src/columns/Messages.hpp	/^class CleanupMessage : public BaseMessage {$/;"	c	namespace:PV
Clock	src/utils/Clock.hpp	/^class Clock {$/;"	c	namespace:PV
CloneConn	src/connections/CloneConn.cpp	/^CloneConn::CloneConn() { initialize_base(); }$/;"	f	class:PV::CloneConn
CloneConn	src/connections/CloneConn.cpp	/^CloneConn::CloneConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CloneConn
CloneConn	src/connections/CloneConn.hpp	/^class CloneConn : public HyPerConn {$/;"	c	namespace:PV
CloneHyPerConnTestProbe	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.cpp	/^CloneHyPerConnTestProbe::CloneHyPerConnTestProbe(const char *probeName, HyPerCol *hc)$/;"	f	class:PV::CloneHyPerConnTestProbe
CloneHyPerConnTestProbe	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.hpp	/^class CloneHyPerConnTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
CloneKernelConn	src/connections/CloneKernelConn.cpp	/^CloneKernelConn::CloneKernelConn() : CloneConn() {}$/;"	f	class:PV::CloneKernelConn
CloneKernelConn	src/connections/CloneKernelConn.cpp	/^CloneKernelConn::CloneKernelConn(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::CloneKernelConn
CloneKernelConn	src/connections/CloneKernelConn.hpp	/^class CloneKernelConn : public CloneConn {$/;"	c	namespace:PV
CloneKernelConnTestProbe	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.cpp	/^CloneKernelConnTestProbe::CloneKernelConnTestProbe(const char *probeName, HyPerCol *hc)$/;"	f	class:PV::CloneKernelConnTestProbe
CloneKernelConnTestProbe	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.hpp	/^class CloneKernelConnTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
CloneVLayer	src/layers/CloneVLayer.cpp	/^CloneVLayer::CloneVLayer() {$/;"	f	class:PV::CloneVLayer
CloneVLayer	src/layers/CloneVLayer.cpp	/^CloneVLayer::CloneVLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CloneVLayer
CloneVLayer	src/layers/CloneVLayer.hpp	/^class CloneVLayer : public PV::HyPerLayer {$/;"	c	namespace:PV
Col	python/param_draw.py	/^class Col(object):$/;"	c
ColProbe	src/probes/ColProbe.cpp	/^ColProbe::ColProbe() { \/\/ Default constructor to be called by derived classes.$/;"	f	class:PV::ColProbe
ColProbe	src/probes/ColProbe.cpp	/^ColProbe::ColProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ColProbe
ColProbe	src/probes/ColProbe.hpp	/^class ColProbe : public BaseProbe {$/;"	c	namespace:PV
ColumnArchive	tests/Shared/ColumnArchive.hpp	/^   ColumnArchive() {}$/;"	f	class:ColumnArchive
ColumnArchive	tests/Shared/ColumnArchive.hpp	/^   ColumnArchive(PV::HyPerCol *hc, float layerTolerance, float connTolerance) {$/;"	f	class:ColumnArchive
ColumnArchive	tests/Shared/ColumnArchive.hpp	/^class ColumnArchive {$/;"	c
ColumnEnergyProbe	src/probes/ColumnEnergyProbe.cpp	/^ColumnEnergyProbe::ColumnEnergyProbe()$/;"	f	class:PV::ColumnEnergyProbe
ColumnEnergyProbe	src/probes/ColumnEnergyProbe.cpp	/^ColumnEnergyProbe::ColumnEnergyProbe(const char *probename, HyPerCol *hc) : ColProbe() {$/;"	f	class:PV::ColumnEnergyProbe
ColumnEnergyProbe	src/probes/ColumnEnergyProbe.hpp	/^class ColumnEnergyProbe : public ColProbe {$/;"	c	namespace:PV
CommandLineArguments	src/columns/CommandLineArguments.cpp	/^CommandLineArguments::CommandLineArguments($/;"	f	class:PV::CommandLineArguments
CommandLineArguments	src/columns/CommandLineArguments.hpp	/^class CommandLineArguments : public Arguments {$/;"	c	namespace:PV
CommunicateInitInfoMessage	src/columns/Messages.hpp	/^   CommunicateInitInfoMessage(std::map<std::string, Observer *> const &hierarchy) {$/;"	f	class:PV::CommunicateInitInfoMessage
CommunicateInitInfoMessage	src/columns/Messages.hpp	/^class CommunicateInitInfoMessage : public BaseMessage {$/;"	c	namespace:PV
Communicator	src/columns/Communicator.cpp	/^Communicator::Communicator(Arguments *argumentList) {$/;"	f	class:PV::Communicator
Communicator	src/columns/Communicator.hpp	/^class Communicator {$/;"	c	namespace:PV
ComparisonLayer	tests/BackgroundLayerTest/src/ComparisonLayer.cpp	/^ComparisonLayer::ComparisonLayer(const char *name, HyPerCol *hc) { ANNLayer::initialize(name, hc); }$/;"	f	class:PV::ComparisonLayer
ComparisonLayer	tests/BackgroundLayerTest/src/ComparisonLayer.hpp	/^class ComparisonLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ConfigFileArguments	src/columns/ConfigFileArguments.cpp	/^ConfigFileArguments::ConfigFileArguments($/;"	f	class:PV::ConfigFileArguments
ConfigFileArguments	src/columns/ConfigFileArguments.hpp	/^class ConfigFileArguments : public Arguments {$/;"	c	namespace:PV
ConfigParser	src/io/ConfigParser.cpp	/^ConfigParser::ConfigParser(std::istream &configStream, bool allowUnrecognizedArguments) {$/;"	f	class:PV::ConfigParser
ConfigParser	src/io/ConfigParser.hpp	/^class ConfigParser {$/;"	c	namespace:PV
Configuration	src/io/Configuration.cpp	/^Configuration::Configuration() {$/;"	f	class:PV::Configuration
Configuration	src/io/Configuration.hpp	/^class Configuration {$/;"	c	namespace:PV
ConfigurationType	src/io/Configuration.hpp	/^   enum ConfigurationType {$/;"	g	class:PV::Configuration
Conn	python/param_draw.py	/^class Conn(Col):$/;"	c
ConnArchive	tests/Shared/ColumnArchive.hpp	/^struct ConnArchive {$/;"	s
ConnectionFinalizeUpdateMessage	src/columns/Messages.hpp	/^   ConnectionFinalizeUpdateMessage(double simTime, double deltaTime) {$/;"	f	class:PV::ConnectionFinalizeUpdateMessage
ConnectionFinalizeUpdateMessage	src/columns/Messages.hpp	/^class ConnectionFinalizeUpdateMessage : public BaseMessage {$/;"	c	namespace:PV
ConnectionOutputMessage	src/columns/Messages.hpp	/^   ConnectionOutputMessage(double simTime) {$/;"	f	class:PV::ConnectionOutputMessage
ConnectionOutputMessage	src/columns/Messages.hpp	/^class ConnectionOutputMessage : public BaseMessage {$/;"	c	namespace:PV
ConnectionUpdateMessage	src/columns/Messages.hpp	/^   ConnectionUpdateMessage(double simTime, double deltaTime) {$/;"	f	class:PV::ConnectionUpdateMessage
ConnectionUpdateMessage	src/columns/Messages.hpp	/^class ConnectionUpdateMessage : public BaseMessage {$/;"	c	namespace:PV
ConstantLayer	src/layers/ConstantLayer.cpp	/^ConstantLayer::ConstantLayer() { initialize_base(); }$/;"	f	class:PV::ConstantLayer
ConstantLayer	src/layers/ConstantLayer.cpp	/^ConstantLayer::ConstantLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ConstantLayer
ConstantLayer	src/layers/ConstantLayer.hpp	/^class ConstantLayer : public PV::HyPerLayer {$/;"	c	namespace:PV
ConstantV	src/initv/ConstantV.cpp	/^ConstantV::ConstantV() { initialize_base(); }$/;"	f	class:PV::ConstantV
ConstantV	src/initv/ConstantV.cpp	/^ConstantV::ConstantV(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ConstantV
ConstantV	src/initv/ConstantV.hpp	/^class ConstantV : public BaseInitV {$/;"	c	namespace:PV
ConvertFromTable	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^ConvertFromTable::ConvertFromTable() {$/;"	f	class:ConvertFromTable
ConvertFromTable	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^ConvertFromTable::ConvertFromTable(char const * name, PV::HyPerCol * hc) {$/;"	f	class:ConvertFromTable
ConvertFromTable	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^class ConvertFromTable: public PV::CloneVLayer {$/;"	c
CopyConn	src/connections/CopyConn.cpp	/^CopyConn::CopyConn() { initialize_base(); }$/;"	f	class:PV::CopyConn
CopyConn	src/connections/CopyConn.cpp	/^CopyConn::CopyConn(char const *name, HyPerCol *hc) {$/;"	f	class:PV::CopyConn
CopyConn	src/connections/CopyConn.hpp	/^class CopyConn : public HyPerConn {$/;"	c	namespace:PV
CopyInitialStateToGPUMessage	src/columns/Messages.hpp	/^   CopyInitialStateToGPUMessage() { setMessageType("CopyInitialStateToGPU"); }$/;"	f	class:PV::CopyInitialStateToGPUMessage
CopyInitialStateToGPUMessage	src/columns/Messages.hpp	/^class CopyInitialStateToGPUMessage : public BaseMessage {$/;"	c	namespace:PV
CorrectState	tests/HyPerConnCheckpointerTest/src/CorrectState.cpp	/^CorrectState::CorrectState($/;"	f	class:CorrectState
CorrectState	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^class CorrectState {$/;"	c
CorrectState	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.cpp	/^CorrectState::CorrectState($/;"	f	class:CorrectState
CorrectState	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^class CorrectState {$/;"	c
CorrectState	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.cpp	/^CorrectState::CorrectState($/;"	f	class:CorrectState
CorrectState	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^class CorrectState {$/;"	c
CorrectState	tests/PoolingConnCheckpointerTest/src/CorrectState.cpp	/^CorrectState::CorrectState($/;"	f	class:CorrectState
CorrectState	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^class CorrectState {$/;"	c
CudaBuffer	src/arch/cuda/CudaBuffer.cpp	/^CudaBuffer::CudaBuffer() {$/;"	f	class:PVCuda::CudaBuffer
CudaBuffer	src/arch/cuda/CudaBuffer.cpp	/^CudaBuffer::CudaBuffer(size_t inSize, CudaDevice *inDevice, cudaStream_t stream) {$/;"	f	class:PVCuda::CudaBuffer
CudaBuffer	src/arch/cuda/CudaBuffer.hpp	/^class CudaBuffer {$/;"	c	namespace:PVCuda
CudaDevice	src/arch/cuda/CudaDevice.cpp	/^CudaDevice::CudaDevice(int device) {$/;"	f	class:PVCuda::CudaDevice
CudaDevice	src/arch/cuda/CudaDevice.hpp	/^class CudaDevice {$/;"	c	namespace:PVCuda
CudaKernel	src/arch/cuda/CudaKernel.cpp	/^CudaKernel::CudaKernel() {$/;"	f	class:PVCuda::CudaKernel
CudaKernel	src/arch/cuda/CudaKernel.cpp	/^CudaKernel::CudaKernel(CudaDevice *inDevice) {$/;"	f	class:PVCuda::CudaKernel
CudaKernel	src/arch/cuda/CudaKernel.hpp	/^class CudaKernel {$/;"	c	namespace:PVCuda
CudaPoolingDeliverKernel	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^CudaPoolingDeliverKernel::CudaPoolingDeliverKernel(CudaDevice *inDevice) : CudaKernel(inDevice) {$/;"	f	class:PVCuda::CudaPoolingDeliverKernel
CudaPoolingDeliverKernel	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^class CudaPoolingDeliverKernel : public CudaKernel {$/;"	c	namespace:PVCuda
CudaRecvPost	src/cudakernels/CudaRecvPost.cpp	/^CudaRecvPost::CudaRecvPost(CudaDevice *inDevice) : CudaKernel(inDevice) {$/;"	f	class:PVCuda::CudaRecvPost
CudaRecvPost	src/cudakernels/CudaRecvPost.hpp	/^class CudaRecvPost : public CudaKernel {$/;"	c	namespace:PVCuda
CudaRecvPre	src/cudakernels/CudaRecvPre.cpp	/^CudaRecvPre::CudaRecvPre(CudaDevice *inDevice) : CudaKernel(inDevice) {$/;"	f	class:PVCuda::CudaRecvPre
CudaRecvPre	src/cudakernels/CudaRecvPre.hpp	/^class CudaRecvPre : public CudaKernel {$/;"	c	namespace:PVCuda
CudaTimer	src/arch/cuda/CudaTimer.cpp	/^CudaTimer::CudaTimer($/;"	f	class:PVCuda::CudaTimer
CudaTimer	src/arch/cuda/CudaTimer.cpp	/^CudaTimer::CudaTimer(const char *timermessage, double init_time)$/;"	f	class:PVCuda::CudaTimer
CudaTimer	src/arch/cuda/CudaTimer.cpp	/^CudaTimer::CudaTimer(double init_time) : PV::Timer(init_time) {$/;"	f	class:PVCuda::CudaTimer
CudaTimer	src/arch/cuda/CudaTimer.hpp	/^class CudaTimer : public PV::Timer {$/;"	c	namespace:PVCuda
CudaTransposePoolingDeliverKernel	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^CudaTransposePoolingDeliverKernel::CudaTransposePoolingDeliverKernel(CudaDevice *inDevice)$/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
CudaTransposePoolingDeliverKernel	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^class CudaTransposePoolingDeliverKernel : public CudaKernel {$/;"	c	namespace:PVCuda
CudaUpdateHyPerLCALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateHyPerLCALayer::CudaUpdateHyPerLCALayer(CudaDevice *inDevice) : CudaKernel(inDevice) {$/;"	f	class:PVCuda::CudaUpdateHyPerLCALayer
CudaUpdateHyPerLCALayer	src/cudakernels/CudaUpdateStateFunctions.hpp	/^class CudaUpdateHyPerLCALayer : public CudaKernel {$/;"	c	namespace:PVCuda
CudaUpdateISTALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateISTALayer::CudaUpdateISTALayer(CudaDevice *inDevice) : CudaKernel(inDevice) {$/;"	f	class:PVCuda::CudaUpdateISTALayer
CudaUpdateISTALayer	src/cudakernels/CudaUpdateStateFunctions.hpp	/^class CudaUpdateISTALayer : public CudaKernel {$/;"	c	namespace:PVCuda
CudaUpdateMomentumLCALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateMomentumLCALayer::CudaUpdateMomentumLCALayer(CudaDevice *inDevice)$/;"	f	class:PVCuda::CudaUpdateMomentumLCALayer
CudaUpdateMomentumLCALayer	src/cudakernels/CudaUpdateStateFunctions.hpp	/^class CudaUpdateMomentumLCALayer : public CudaKernel {$/;"	c	namespace:PVCuda
DATASTOREDELAYTESTPROBE_HPP_	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.hpp	9;"	d
DATASTOREDELAYTEST_HPP_	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.hpp	9;"	d
DATASTORE_HPP_	src/columns/DataStore.hpp	9;"	d
DAY	src/checkpointing/Checkpointer.hpp	/^   enum WallClockUnit { SECOND, MINUTE, HOUR, DAY };$/;"	e	enum:PV::Checkpointer::WallClockUnit
DEBUG	src/include/pv_common.h	30;"	d
DEBUG_OUTPUT	src/include/pv_common.h	28;"	d
DEBUG_OUTPUT	src/io/fileio.cpp	19;"	d	file:
DEBUG_OUTPUT	tests/test_border_activity/src/test_border_activity.cpp	22;"	d	file:
DEBUG_OUTPUT	tests/test_constant_input/src/test_constant_input.cpp	26;"	d	file:
DEBUG_PARSING	src/io/PVParams.cpp	28;"	d	file:
DEBUG_PRINT	tests/test_cocirc/src/test_cocirc.cpp	8;"	d	file:
DEBUG_PRINT	tests/test_datatypes/src/test_datatypes.cpp	19;"	d	file:
DEBUG_PRINT	tests/test_gauss2d/src/test_gauss2d.cpp	8;"	d	file:
DEBUG_PRINT	tests/test_mirror_BCs/src/test_mirror_BCs.cpp	7;"	d	file:
DEBUG_PRINT	tests/test_post_weights/src/test_post_weights.cpp	12;"	d	file:
DEBUG_WEIGHTS	src/include/pv_common.h	29;"	d
DEFAULT_DELTA_T	src/columns/HyPerCol.cpp	10;"	d	file:
DEFAULT_DYNVTHSCALE	src/layers/LCALIFLayer.hpp	14;"	d
DEFAULT_NUMSTEPS	src/columns/HyPerCol.cpp	11;"	d	file:
DEFAULT_OUTPUT_PATH	src/columns/HyPerCol.cpp	9;"	d	file:
DEFAULT_PARAMS_H_	src/include/default_params.h	9;"	d
DELTA_G_INHB	src/include/default_params.h	21;"	d
DELTA_VTH	src/include/default_params.h	26;"	d
DELTA_VTH_REST	src/include/default_params.h	27;"	d
DEPRECATED_FEATURES	src/utils/conversions.h	276;"	d
DataFrame	python/deprecated/max_readpvpfile.py	/^class DataFrame(tuple):$/;"	c
DataStore	src/columns/DataStore.cpp	/^DataStore::DataStore(int numBuffers, int numItems, int numLevels, bool isSparse_flag) {$/;"	f	class:PV::DataStore
DataStore	src/columns/DataStore.hpp	/^class DataStore {$/;"	c	namespace:PV
DatastoreDelayTestLayer	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^DatastoreDelayTestLayer::DatastoreDelayTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::DatastoreDelayTestLayer
DatastoreDelayTestLayer	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.hpp	/^class DatastoreDelayTestLayer : public ANNLayer {$/;"	c	namespace:PV
DatastoreDelayTestProbe	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^DatastoreDelayTestProbe::DatastoreDelayTestProbe(const char *probeName, HyPerCol *hc)$/;"	f	class:PV::DatastoreDelayTestProbe
DatastoreDelayTestProbe	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.hpp	/^class DatastoreDelayTestProbe : public StatsProbe {$/;"	c	namespace:PV
Debug	src/utils/PVLog.hpp	/^typedef Log<char, DebugLogType> Debug;$/;"	t	namespace:PV
DebugLog	src/utils/PVLog.hpp	/^typedef Log<char, DebugLogType> DebugLog;$/;"	t	namespace:PV
DebugLog	src/utils/PVLog.hpp	48;"	d
DebugLogType	src/utils/PVLog.hpp	/^typedef LogType<LogDebugType> DebugLogType;$/;"	t	namespace:PV
DelayTestProbe	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^DelayTestProbe::DelayTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::DelayTestProbe
DelayTestProbe	tests/DelaysToFeaturesTest/src/DelayTestProbe.hpp	/^class DelayTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
DelayTestProbe_HPP_	tests/DelaysToFeaturesTest/src/DelayTestProbe.hpp	9;"	d
DropoutLayer	src/layers/DropoutLayer.cpp	/^DropoutLayer::DropoutLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::DropoutLayer
DropoutLayer	src/layers/DropoutLayer.hpp	/^class DropoutLayer : public ANNLayer {$/;"	c	namespace:PV
EAST	src/columns/Communicator.hpp	/^   static const int EAST      = 5;$/;"	m	class:PV::Communicator
EAST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
EAST	src/utils/BorderExchange.hpp	/^   static int const EAST      = 5;$/;"	m	class:PV::BorderExchange
EST_MAX_ACTIVITY	src/include/default_params.h	48;"	d
EV_ANN_ACTIVITY	src/layers/ANNLayer.hpp	15;"	d
EV_LIFGAP_GSYN_GAP	src/layers/LIFGap.hpp	15;"	d
EV_LIF_GSYN_IB	src/layers/LIF.hpp	19;"	d
EXAMPLE_HPP_	tests/Shared/Example.hpp	9;"	d
EXCITE_DELAY	src/include/default_params.h	36;"	d
EXCITE_VEL	src/include/default_params.h	40;"	d
Entry	src/structures/SparseList.hpp	/^   } Entry;$/;"	t	class:PV::SparseList	typeref:struct:PV::SparseList::__anon1
Error	src/utils/PVLog.hpp	/^typedef Log<char, FatalType> Error;$/;"	t	namespace:PV
ErrorLog	src/utils/PVLog.hpp	/^typedef Log<char, ErrorLogType> ErrorLog;$/;"	t	namespace:PV
ErrorLog	src/utils/PVLog.hpp	47;"	d
ErrorLogType	src/utils/PVLog.hpp	/^typedef LogType<LogErrorType> ErrorLogType;$/;"	t	namespace:PV
ErrorNoExit	src/utils/PVLog.hpp	/^typedef Log<char, ErrorLogType> ErrorNoExit;$/;"	t	namespace:PV
Example	tests/Shared/Example.cpp	/^Example::Example(const char *name, HyPerCol *hc) {$/;"	f	class:PV::Example
Example	tests/Shared/Example.hpp	/^class Example : public PV::HyPerLayer {$/;"	c	namespace:PV
FACTORY_HPP_	src/columns/Factory.hpp	9;"	d
FAILBEFOREEXPECTEDSTARTTIMELAYER_HPP_	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	2;"	d
FAST_BITS	src/io/stb_image.h	1473;"	d
FEEDBACKCONN_HPP_	src/connections/FeedbackConn.hpp	9;"	d
FILEIO_HPP_	src/io/fileio.hpp	9;"	d
FIRMTHRESHOLDCOSTFNLCAPROBE_HPP_	src/probes/FirmThresholdCostFnLCAProbe.hpp	9;"	d
FIRMTHRESHOLDCOSTFNPROBE_HPP_	src/probes/FirmThresholdCostFnProbe.hpp	9;"	d
FLOAT	src/utils/BufferUtilsPvp.hpp	/^   FLOAT                 = 3,$/;"	e	enum:PV::BufferUtils::HeaderDataTypeEnum
Factory	src/columns/Factory.cpp	/^Factory::Factory() { registerCoreKeywords(); }$/;"	f	class:PV::Factory
Factory	src/columns/Factory.hpp	/^class Factory {$/;"	c	namespace:PV
FailBeforeExpectedStartTimeLayer	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^FailBeforeExpectedStartTimeLayer::FailBeforeExpectedStartTimeLayer($/;"	f	class:FailBeforeExpectedStartTimeLayer
FailBeforeExpectedStartTimeLayer	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^FailBeforeExpectedStartTimeLayer::FailBeforeExpectedStartTimeLayer() { initialize_base(); }$/;"	f	class:FailBeforeExpectedStartTimeLayer
FailBeforeExpectedStartTimeLayer	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^class FailBeforeExpectedStartTimeLayer : public PV::HyPerLayer {$/;"	c
Fatal	src/utils/PVLog.hpp	/^typedef Log<char, FatalType> Fatal;$/;"	t	namespace:PV
Fatal	src/utils/PVLog.hpp	46;"	d
FatalIf	src/utils/PVLog.hpp	50;"	d
FatalType	src/utils/PVLog.hpp	/^typedef LogType<LogFatalType> FatalType;$/;"	t	namespace:PV
FeedbackConn	src/connections/FeedbackConn.cpp	/^FeedbackConn::FeedbackConn() { initialize_base(); }$/;"	f	class:PV::FeedbackConn
FeedbackConn	src/connections/FeedbackConn.cpp	/^FeedbackConn::FeedbackConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::FeedbackConn
FeedbackConn	src/connections/FeedbackConn.hpp	/^class FeedbackConn : public TransposeConn {$/;"	c	namespace:PV
FileStream	src/io/FileStream.cpp	/^FileStream::FileStream(char const *path, std::ios_base::openmode mode, bool verifyWrites) {$/;"	f	class:PV::FileStream
FileStream	src/io/FileStream.hpp	/^   FileStream() {}$/;"	f	class:PV::FileStream
FileStream	src/io/FileStream.hpp	/^class FileStream : public PrintStream {$/;"	c	namespace:PV
FilenameParsingGroundTruthLayer	src/layers/FilenameParsingGroundTruthLayer.cpp	/^FilenameParsingGroundTruthLayer::FilenameParsingGroundTruthLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
FilenameParsingGroundTruthLayer	src/layers/FilenameParsingGroundTruthLayer.hpp	/^class FilenameParsingGroundTruthLayer : public ANNLayer {$/;"	c	namespace:PV
FirmThresholdCostFnLCAProbe	src/probes/FirmThresholdCostFnLCAProbe.cpp	/^FirmThresholdCostFnLCAProbe::FirmThresholdCostFnLCAProbe() { initialize_base(); }$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
FirmThresholdCostFnLCAProbe	src/probes/FirmThresholdCostFnLCAProbe.cpp	/^FirmThresholdCostFnLCAProbe::FirmThresholdCostFnLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
FirmThresholdCostFnLCAProbe	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^class FirmThresholdCostFnLCAProbe : public FirmThresholdCostFnProbe {$/;"	c	namespace:PV
FirmThresholdCostFnProbe	src/probes/FirmThresholdCostFnProbe.cpp	/^FirmThresholdCostFnProbe::FirmThresholdCostFnProbe() : AbstractNormProbe() {$/;"	f	class:PV::FirmThresholdCostFnProbe
FirmThresholdCostFnProbe	src/probes/FirmThresholdCostFnProbe.cpp	/^FirmThresholdCostFnProbe::FirmThresholdCostFnProbe(const char *probeName, HyPerCol *hc)$/;"	f	class:PV::FirmThresholdCostFnProbe
FirmThresholdCostFnProbe	src/probes/FirmThresholdCostFnProbe.hpp	/^class FirmThresholdCostFnProbe : public AbstractNormProbe {$/;"	c	namespace:PV
FrameServer	demos/HeatMapLocalization/src/main.cpp	/^   FrameServer() {$/;"	f	class:FrameServer
FrameServer	demos/HeatMapLocalization/src/main.cpp	/^class FrameServer {$/;"	c	file:
GAPCONN_HPP_	src/connections/GapConn.hpp	9;"	d
GAPLAYER_HPP_	src/layers/GapLayer.hpp	10;"	d
GATEAVGPOOLTESTLAYER_HPP_	tests/AvgPoolTest/src/GateAvgPoolTestLayer.hpp	2;"	d
GATEMAXPOOLTESTLAYER_HPP_	tests/MaxPoolTest/src/GateMaxPoolTestLayer.hpp	2;"	d
GATESUMPOOLTESTLAYER_HPP_	tests/SumPoolTest/src/GateSumPoolTestLayer.hpp	2;"	d
GAUSSIANRANDOMV_HPP_	src/initv/GaussianRandomV.hpp	9;"	d
GAUSSIANRANDOM_HPP_	src/columns/GaussianRandom.hpp	9;"	d
GLOBAL_GAIN	src/include/default_params.h	28;"	d
GPUSYSTEMTESTPROBE_HPP_	tests/GPUSystemTest/src/GPUSystemTestProbe.hpp	7;"	d
GPUSystemTestProbe	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^GPUSystemTestProbe::GPUSystemTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::GPUSystemTestProbe
GPUSystemTestProbe	tests/GPUSystemTest/src/GPUSystemTestProbe.hpp	/^class GPUSystemTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
GSyn	src/layers/HyPerLayer.hpp	/^   float **GSyn; \/\/ of dynamic length numChannels$/;"	m	class:PV::HyPerLayer
GSynExcEffective	src/layers/LCALIFLayer.hpp	/^   float *GSynExcEffective; \/\/ What is used as GSynExc, after normalizing, stored for checkpointing$/;"	m	class:PV::LCALIFLayer
GSynHead	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *GSynHead;$/;"	m	struct:PVCuda::HyPerLCAParams
GSynHead	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *GSynHead;$/;"	m	struct:PVCuda::ISTAParams
GSynHead	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *GSynHead;$/;"	m	struct:PVCuda::MomentumLCAParams
GSynInhEffective	src/layers/LCALIFLayer.hpp	/^   float *GSynInhEffective; \/\/ What is used as GSynInh$/;"	m	class:PV::LCALIFLayer
G_E	src/layers/LIF.hpp	/^   pvconductance_t *G_E; \/\/ excitatory conductance$/;"	m	class:PV::LIF
G_I	src/layers/LIF.hpp	/^   pvconductance_t *G_I; \/\/ inhibitory conductance$/;"	m	class:PV::LIF
G_IB	src/layers/LIF.hpp	/^   pvconductance_t *G_IB;$/;"	m	class:PV::LIF
G_Norm	src/layers/LCALIFLayer.hpp	/^   float *G_Norm; \/\/ Copy of GSyn[CHANNEL_NORM] to be written out during checkpointing$/;"	m	class:PV::LCALIFLayer
GapConn	src/connections/GapConn.cpp	/^GapConn::GapConn() { initialize_base(); }$/;"	f	class:PV::GapConn
GapConn	src/connections/GapConn.cpp	/^GapConn::GapConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GapConn
GapConn	src/connections/GapConn.hpp	/^class GapConn : public PV::HyPerConn {$/;"	c	namespace:PV
GapLayer	src/layers/GapLayer.cpp	/^GapLayer::GapLayer() { initialize_base(); }$/;"	f	class:PV::GapLayer
GapLayer	src/layers/GapLayer.cpp	/^GapLayer::GapLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GapLayer
GapLayer	src/layers/GapLayer.hpp	/^class GapLayer : public CloneVLayer {$/;"	c	namespace:PV
GateAvgPoolTestLayer	tests/AvgPoolTest/src/GateAvgPoolTestLayer.cpp	/^GateAvgPoolTestLayer::GateAvgPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GateAvgPoolTestLayer
GateAvgPoolTestLayer	tests/AvgPoolTest/src/GateAvgPoolTestLayer.hpp	/^class GateAvgPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
GateMaxPoolTestLayer	tests/MaxPoolTest/src/GateMaxPoolTestLayer.cpp	/^GateMaxPoolTestLayer::GateMaxPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GateMaxPoolTestLayer
GateMaxPoolTestLayer	tests/MaxPoolTest/src/GateMaxPoolTestLayer.hpp	/^class GateMaxPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
GateSumPoolTestLayer	tests/SumPoolTest/src/GateSumPoolTestLayer.cpp	/^GateSumPoolTestLayer::GateSumPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GateSumPoolTestLayer
GateSumPoolTestLayer	tests/SumPoolTest/src/GateSumPoolTestLayer.hpp	/^class GateSumPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
GaussianRandom	src/columns/GaussianRandom.cpp	/^GaussianRandom::GaussianRandom() { initialize_base(); }$/;"	f	class:PV::GaussianRandom
GaussianRandom	src/columns/GaussianRandom.cpp	/^GaussianRandom::GaussianRandom(const PVLayerLoc *locptr, bool isExtended) {$/;"	f	class:PV::GaussianRandom
GaussianRandom	src/columns/GaussianRandom.cpp	/^GaussianRandom::GaussianRandom(int count) {$/;"	f	class:PV::GaussianRandom
GaussianRandom	src/columns/GaussianRandom.hpp	/^class GaussianRandom : public PV::Random {$/;"	c	namespace:PV
GaussianRandomV	src/initv/GaussianRandomV.cpp	/^GaussianRandomV::GaussianRandomV() { initialize_base(); }$/;"	f	class:PV::GaussianRandomV
GaussianRandomV	src/initv/GaussianRandomV.cpp	/^GaussianRandomV::GaussianRandomV(char const *name, HyPerCol *hc) {$/;"	f	class:PV::GaussianRandomV
GaussianRandomV	src/initv/GaussianRandomV.hpp	/^class GaussianRandomV : public BaseInitV {$/;"	c	namespace:PV
HAS_MAIN	src/io/PVParams.hpp	25;"	d
HOUR	src/checkpointing/Checkpointer.hpp	/^   enum WallClockUnit { SECOND, MINUTE, HOUR, DAY };$/;"	e	enum:PV::Checkpointer::WallClockUnit
HYPERCOL_HPP_	src/columns/HyPerCol.hpp	9;"	d
HYPERCONNCHECKPOINTERTESTPROBE_HPP_	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	9;"	d
HYPERCONNDEBUGINITWEIGHTS_HPP_	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	9;"	d
HYPERCONN_HPP_	src/connections/HyPerConn.hpp	9;"	d
HYPERLAYER_FEEDBACK_DELAY	src/layers/HyPerLayer.hpp	50;"	d
HYPERLAYER_FEEDFORWARD_DELAY	src/layers/HyPerLayer.hpp	51;"	d
HYPERLAYER_HPP_	src/layers/HyPerLayer.hpp	12;"	d
HYPERLCALAYER_HPP_	src/layers/HyPerLCALayer.hpp	9;"	d
HarnessObject	demos/HeatMapLocalization/src/main.cpp	/^   HarnessObject(char const * name, PV::HyPerCol * hc) { BaseObject::initialize(name, hc); }$/;"	f	class:HarnessObject
HarnessObject	demos/HeatMapLocalization/src/main.cpp	/^class HarnessObject : public PV::BaseObject {$/;"	c	file:
HeaderDataType	src/utils/BufferUtilsPvp.hpp	/^} HeaderDataType;$/;"	t	namespace:PV::BufferUtils	typeref:enum:PV::BufferUtils::HeaderDataTypeEnum
HeaderDataTypeEnum	src/utils/BufferUtilsPvp.hpp	/^typedef enum HeaderDataTypeEnum {$/;"	g	namespace:PV::BufferUtils
HyPerCol	src/columns/HyPerCol.cpp	/^HyPerCol::HyPerCol(const char *mName, PV_Init *initObj) {$/;"	f	class:PV::HyPerCol
HyPerCol	src/columns/HyPerCol.hpp	/^class HyPerCol : public Subject, Observer {$/;"	c	namespace:PV
HyPerConn	src/connections/HyPerConn.cpp	/^HyPerConn::HyPerConn() { initialize_base(); }$/;"	f	class:PV::HyPerConn
HyPerConn	src/connections/HyPerConn.cpp	/^HyPerConn::HyPerConn(char const *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerConn
HyPerConn	src/connections/HyPerConn.hpp	/^class HyPerConn : public BaseConnection {$/;"	c	namespace:PV
HyPerConnCheckpointerTestProbe	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^HyPerConnCheckpointerTestProbe::HyPerConnCheckpointerTestProbe($/;"	f	class:HyPerConnCheckpointerTestProbe
HyPerConnCheckpointerTestProbe	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^HyPerConnCheckpointerTestProbe::HyPerConnCheckpointerTestProbe() { initialize_base(); }$/;"	f	class:HyPerConnCheckpointerTestProbe
HyPerConnCheckpointerTestProbe	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^class HyPerConnCheckpointerTestProbe : public PV::ColProbe {$/;"	c
HyPerConnDebugInitWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^HyPerConnDebugInitWeights::HyPerConnDebugInitWeights() { initialize_base(); }$/;"	f	class:PV::HyPerConnDebugInitWeights
HyPerConnDebugInitWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^HyPerConnDebugInitWeights::HyPerConnDebugInitWeights(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::HyPerConnDebugInitWeights
HyPerConnDebugInitWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	/^class HyPerConnDebugInitWeights : public PV::HyPerConn {$/;"	c	namespace:PV
HyPerLCALayer	src/layers/HyPerLCALayer.cpp	/^HyPerLCALayer::HyPerLCALayer() { initialize_base(); }$/;"	f	class:PV::HyPerLCALayer
HyPerLCALayer	src/layers/HyPerLCALayer.cpp	/^HyPerLCALayer::HyPerLCALayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerLCALayer
HyPerLCALayer	src/layers/HyPerLCALayer.hpp	/^class HyPerLCALayer : public PV::ANNLayer {$/;"	c	namespace:PV
HyPerLCALayer_update_state	src/layers/HyPerLCALayer.cpp	/^void HyPerLCALayer_update_state($/;"	f
HyPerLCAParams	src/cudakernels/CudaUpdateStateFunctions.hpp	/^struct HyPerLCAParams {$/;"	s	namespace:PVCuda
HyPerLayer	src/layers/HyPerLayer.cpp	/^HyPerLayer::HyPerLayer() { initialize_base(); }$/;"	f	class:PV::HyPerLayer
HyPerLayer	src/layers/HyPerLayer.cpp	/^HyPerLayer::HyPerLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerLayer
HyPerLayer	src/layers/HyPerLayer.hpp	/^class HyPerLayer : public BaseLayer {$/;"	c	namespace:PV
IDENTCONN_HPP_	src/connections/IdentConn.hpp	9;"	d
IDENTICALFEATUREPROBE_HPP_	tests/GPUSystemTest/src/identicalBatchProbe.hpp	7;"	d
IMAGEFROMMEMORYBUFFER_HPP_	src/layers/ImageFromMemoryBuffer.hpp	15;"	d
IMPORTPARAMSCONN_HPP_	tests/ImportParamsTest/src/ImportParamsConn.hpp	2;"	d
IMPORTPARAMSLAYER_HPP_	tests/ImportParamsTest/src/ImportParamsLayer.hpp	2;"	d
IMPRINTCONNTESTINPUTLAYER_HPP_	tests/ImprintConnTest/src/ImprintConnTestInputLayer.hpp	2;"	d
IMPRINTCONN_HPP_	src/connections/ImprintConn.hpp	9;"	d
INCLUDE_STB_IMAGE_WRITE_H	src/io/stb_image_write.h	121;"	d
INDEX_DATA_SIZE	src/io/io.hpp	56;"	d
INDEX_DATA_SIZE	tools/readpvpheader.c	29;"	d	file:
INDEX_DATA_TYPE	src/io/io.hpp	57;"	d
INDEX_DATA_TYPE	tools/readpvpheader.c	30;"	d	file:
INDEX_FILE_TYPE	src/io/io.hpp	50;"	d
INDEX_FILE_TYPE	tools/readpvpheader.c	23;"	d	file:
INDEX_HEADER_SIZE	src/io/io.hpp	48;"	d
INDEX_HEADER_SIZE	tools/readpvpheader.c	21;"	d	file:
INDEX_KX0	src/io/io.hpp	62;"	d
INDEX_KX0	tools/readpvpheader.c	35;"	d	file:
INDEX_KY0	src/io/io.hpp	63;"	d
INDEX_KY0	tools/readpvpheader.c	36;"	d	file:
INDEX_METHOD	src/probes/BaseConnectionProbe.hpp	/^enum PatchIDMethod { INDEX_METHOD, COORDINATE_METHOD };$/;"	e	enum:PatchIDMethod
INDEX_NB	tools/readpvpheader.c	37;"	d	file:
INDEX_NBANDS	src/io/io.hpp	65;"	d
INDEX_NBANDS	tools/readpvpheader.c	38;"	d	file:
INDEX_NBATCH	src/io/io.hpp	64;"	d
INDEX_NF	src/io/io.hpp	53;"	d
INDEX_NF	tools/readpvpheader.c	26;"	d	file:
INDEX_NUM_PARAMS	src/io/io.hpp	49;"	d
INDEX_NUM_PARAMS	tools/readpvpheader.c	22;"	d	file:
INDEX_NUM_RECORDS	src/io/io.hpp	54;"	d
INDEX_NUM_RECORDS	tools/readpvpheader.c	27;"	d	file:
INDEX_NX	src/io/io.hpp	51;"	d
INDEX_NX	tools/readpvpheader.c	24;"	d	file:
INDEX_NX_GLOBAL	src/io/io.hpp	60;"	d
INDEX_NX_GLOBAL	tools/readpvpheader.c	33;"	d	file:
INDEX_NX_PROCS	src/io/io.hpp	58;"	d
INDEX_NX_PROCS	tools/readpvpheader.c	31;"	d	file:
INDEX_NY	src/io/io.hpp	52;"	d
INDEX_NY	tools/readpvpheader.c	25;"	d	file:
INDEX_NY_GLOBAL	src/io/io.hpp	61;"	d
INDEX_NY_GLOBAL	tools/readpvpheader.c	34;"	d	file:
INDEX_NY_PROCS	src/io/io.hpp	59;"	d
INDEX_NY_PROCS	tools/readpvpheader.c	32;"	d	file:
INDEX_RECORD_SIZE	src/io/io.hpp	55;"	d
INDEX_RECORD_SIZE	tools/readpvpheader.c	28;"	d	file:
INDEX_TIME	src/io/io.hpp	66;"	d
INDEX_TIME	tools/readpvpheader.c	39;"	d	file:
INDEX_WGT_MAX	src/io/io.hpp	74;"	d
INDEX_WGT_MAX	tools/readpvpheader.c	45;"	d	file:
INDEX_WGT_MIN	src/io/io.hpp	73;"	d
INDEX_WGT_MIN	tools/readpvpheader.c	44;"	d	file:
INDEX_WGT_NFP	src/io/io.hpp	72;"	d
INDEX_WGT_NFP	tools/readpvpheader.c	43;"	d	file:
INDEX_WGT_NUMPATCHES	src/io/io.hpp	75;"	d
INDEX_WGT_NUMPATCHES	tools/readpvpheader.c	46;"	d	file:
INDEX_WGT_NXP	src/io/io.hpp	70;"	d
INDEX_WGT_NXP	tools/readpvpheader.c	41;"	d	file:
INDEX_WGT_NYP	src/io/io.hpp	71;"	d
INDEX_WGT_NYP	tools/readpvpheader.c	42;"	d	file:
INHIB_DELAY	src/include/default_params.h	37;"	d
INHIB_VEL	src/include/default_params.h	41;"	d
INITCLONEKERNELWEIGHTS_HPP_	src/weightinit/InitCloneKernelWeights.hpp	9;"	d
INITCOCIRCWEIGHTSPARAMS_HPP_	src/weightinit/InitCocircWeightsParams.hpp	9;"	d
INITCOCIRCWEIGHTS_HPP_	src/weightinit/InitCocircWeights.hpp	9;"	d
INITGABORWEIGHTSPARAMS_HPP_	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	9;"	d
INITGABORWEIGHTS_HPP_	tests/InitWeightsTest/src/InitGaborWeights.hpp	9;"	d
INITGAUSS2DWEIGHTSPARAMS_HPP_	src/weightinit/InitGauss2DWeightsParams.hpp	9;"	d
INITGAUSS2DWEIGHTS_HPP_	src/weightinit/InitGauss2DWeights.hpp	9;"	d
INITGAUSSIANRANDOMWEIGHTSPARAMS_HPP_	src/weightinit/InitGaussianRandomWeightsParams.hpp	9;"	d
INITGAUSSIANRANDOMWEIGHTS_HPP_	src/weightinit/InitGaussianRandomWeights.hpp	9;"	d
INITIALNUMGROUPS	src/io/PVParams.cpp	43;"	d	file:
INITIAL_CONNECTION_ARRAY_SIZE	src/include/pv_common.h	43;"	d
INITIAL_LAYER_ARRAY_SIZE	src/include/pv_common.h	42;"	d
INITIAL_PUBLISHER_ARRAY_SIZE	src/include/pv_common.h	44;"	d
INITIAL_SUBSCRIBER_ARRAY_SIZE	src/include/pv_common.h	45;"	d
INITIDENTWEIGHTSPARAMS_HPP_	src/weightinit/InitIdentWeightsParams.hpp	9;"	d
INITIDENTWEIGHTS_HPP_	src/weightinit/InitIdentWeights.hpp	9;"	d
INITMAXPOOLINGWEIGHTSPARAMS_HPP_	src/weightinit/InitMaxPoolingWeightsParams.hpp	9;"	d
INITMAXPOOLINGWEIGHTS_HPP_	src/weightinit/InitMaxPoolingWeights.hpp	9;"	d
INITONETOONEWEIGHTSPARAMS_HPP_	src/weightinit/InitOneToOneWeightsParams.hpp	14;"	d
INITONETOONEWEIGHTSWITHDELAYSPARAMS_HPP_	src/weightinit/InitOneToOneWeightsWithDelaysParams.hpp	10;"	d
INITONETOONEWEIGHTSWITHDELAYS_HPP_	src/weightinit/InitOneToOneWeightsWithDelays.hpp	9;"	d
INITONETOONEWEIGHTS_HPP_	src/weightinit/InitOneToOneWeights.hpp	9;"	d
INITRANDOMWEIGHTSPARAMS_HPP_	src/weightinit/InitRandomWeightsParams.hpp	9;"	d
INITRANDOMWEIGHTS_HPP_	src/weightinit/InitRandomWeights.hpp	9;"	d
INITSMARTWEIGHTS_HPP_	src/weightinit/InitSmartWeights.hpp	9;"	d
INITSPREADOVERARBORSWEIGHTSPARAMS_HPP_	src/weightinit/InitSpreadOverArborsWeightsParams.hpp	9;"	d
INITSPREADOVERARBORSWEIGHTS_HPP_	src/weightinit/InitSpreadOverArborsWeights.hpp	9;"	d
INITUNIFORMRANDOMWEIGHTS_HPP_	src/weightinit/InitUniformRandomWeights.hpp	9;"	d
INITUNIFORMWEIGHTSPARAMS_HPP_	src/weightinit/InitUniformWeightsParams.hpp	9;"	d
INITUNIFORMWEIGHTS_HPP_	src/weightinit/InitUniformWeights.hpp	9;"	d
INITUNIVORMRANDOMWEIGHTSPARAMS_HPP_	src/weightinit/InitUniformRandomWeightsParams.hpp	9;"	d
INITVFROMFILE_HPP_	src/initv/InitVFromFile.hpp	9;"	d
INITWEIGHTSPARAMS_HPP_	src/weightinit/InitWeightsParams.hpp	9;"	d
INITWEIGHTS_HPP_	src/weightinit/InitWeights.hpp	9;"	d
INT	src/utils/BufferUtilsPvp.hpp	/^   INT                   = 2,$/;"	e	enum:PV::BufferUtils::HeaderDataTypeEnum
INVERSEFLAG	src/include/default_params.h	51;"	d
IO_HPP_	src/io/io.hpp	9;"	d
ISTALAYER_HPP_	src/layers/ISTALayer.hpp	9;"	d
ISTALayer	src/layers/ISTALayer.cpp	/^ISTALayer::ISTALayer() { initialize_base(); }$/;"	f	class:PV::ISTALayer
ISTALayer	src/layers/ISTALayer.cpp	/^ISTALayer::ISTALayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ISTALayer
ISTALayer	src/layers/ISTALayer.hpp	/^class ISTALayer : public PV::ANNLayer {$/;"	c	namespace:PV
ISTALayer_update_state	src/layers/ISTALayer.cpp	/^void ISTALayer_update_state($/;"	f
ISTAParams	src/cudakernels/CudaUpdateStateFunctions.hpp	/^struct ISTAParams {$/;"	s	namespace:PVCuda
IdentConn	src/connections/IdentConn.cpp	/^IdentConn::IdentConn() { initialize_base(); }$/;"	f	class:PV::IdentConn
IdentConn	src/connections/IdentConn.cpp	/^IdentConn::IdentConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::IdentConn
IdentConn	src/connections/IdentConn.hpp	/^class IdentConn : public HyPerConn {$/;"	c	namespace:PV
Image	src/structures/Image.cpp	/^Image::Image(const std::vector<float> &data, int width, int height, int channels) {$/;"	f	class:PV::Image
Image	src/structures/Image.cpp	/^Image::Image(std::string filename) { read(filename); }$/;"	f	class:PV::Image
Image	src/structures/Image.hpp	/^class Image : public Buffer<float> {$/;"	c	namespace:PV
ImageFromMemoryBuffer	src/layers/ImageFromMemoryBuffer.cpp	/^ImageFromMemoryBuffer::ImageFromMemoryBuffer() { initialize_base(); }$/;"	f	class:PV::ImageFromMemoryBuffer
ImageFromMemoryBuffer	src/layers/ImageFromMemoryBuffer.cpp	/^ImageFromMemoryBuffer::ImageFromMemoryBuffer(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ImageFromMemoryBuffer
ImageFromMemoryBuffer	src/layers/ImageFromMemoryBuffer.hpp	/^class ImageFromMemoryBuffer : public ImageLayer {$/;"	c	namespace:PV
ImageLayer	src/layers/ImageLayer.cpp	/^ImageLayer::ImageLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::ImageLayer
ImageLayer	src/layers/ImageLayer.hpp	/^   ImageLayer() {}$/;"	f	class:PV::ImageLayer
ImageLayer	src/layers/ImageLayer.hpp	/^class ImageLayer : public InputLayer {$/;"	c	namespace:PV
ImageOffsetTestLayer	tests/ImageOffsetTest/src/ImageOffsetTestLayer.cpp	/^ImageOffsetTestLayer::ImageOffsetTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::ImageOffsetTestLayer
ImageOffsetTestLayer	tests/ImageOffsetTest/src/ImageOffsetTestLayer.hpp	/^class ImageOffsetTestLayer : public PV::ImageLayer {$/;"	c	namespace:PV
ImagePvpOffsetTestLayer	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.cpp	/^ImagePvpOffsetTestLayer::ImagePvpOffsetTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImagePvpOffsetTestLayer
ImagePvpOffsetTestLayer	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.hpp	/^class ImagePvpOffsetTestLayer : public PV::PvpLayer {$/;"	c	namespace:PV
ImagePvpTestLayer	tests/ImageSystemTest/src/ImagePvpTestLayer.cpp	/^ImagePvpTestLayer::ImagePvpTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::ImagePvpTestLayer
ImagePvpTestLayer	tests/ImageSystemTest/src/ImagePvpTestLayer.hpp	/^class ImagePvpTestLayer : public PV::PvpLayer {$/;"	c	namespace:PV
ImageTestLayer	tests/ImageSystemTest/src/ImageTestLayer.cpp	/^ImageTestLayer::ImageTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::ImageTestLayer
ImageTestLayer	tests/ImageSystemTest/src/ImageTestLayer.hpp	/^class ImageTestLayer : public PV::ImageLayer {$/;"	c	namespace:PV
ImportParamsConn	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^ImportParamsConn::ImportParamsConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImportParamsConn
ImportParamsConn	tests/ImportParamsTest/src/ImportParamsConn.hpp	/^class ImportParamsConn : public PV::HyPerConn {$/;"	c	namespace:PV
ImportParamsLayer	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^ImportParamsLayer::ImportParamsLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImportParamsLayer
ImportParamsLayer	tests/ImportParamsTest/src/ImportParamsLayer.hpp	/^class ImportParamsLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ImprintConn	src/connections/ImprintConn.cpp	/^ImprintConn::ImprintConn() { initialize_base(); }$/;"	f	class:PV::ImprintConn
ImprintConn	src/connections/ImprintConn.cpp	/^ImprintConn::ImprintConn(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::ImprintConn
ImprintConn	src/connections/ImprintConn.hpp	/^class ImprintConn : public HyPerConn {$/;"	c	namespace:PV
ImprintConnTestInputLayer	tests/ImprintConnTest/src/ImprintConnTestInputLayer.cpp	/^ImprintConnTestInputLayer::ImprintConnTestInputLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImprintConnTestInputLayer
ImprintConnTestInputLayer	tests/ImprintConnTest/src/ImprintConnTestInputLayer.hpp	/^class ImprintConnTestInputLayer : public PV::ANNLayer {$/;"	c	namespace:PV
IndexListType	src/connections/HyPerConn.hpp	/^   typedef std::vector<int> IndexListType;$/;"	t	class:PV::HyPerConn
IndexMapType	src/connections/HyPerConn.hpp	/^   typedef std::map<int, WeightIndexMapType> IndexMapType;$/;"	t	class:PV::HyPerConn
Info	src/utils/PVLog.hpp	/^typedef Log<char, InfoLogType> Info;$/;"	t	namespace:PV
InfoLog	src/utils/PVLog.hpp	/^typedef Log<char, InfoLogType> InfoLog;$/;"	t	namespace:PV
InfoLog	src/utils/PVLog.hpp	44;"	d
InfoLogType	src/utils/PVLog.hpp	/^typedef LogType<LogInfoType> InfoLogType;$/;"	t	namespace:PV
InitCloneKernelWeights	src/weightinit/InitCloneKernelWeights.cpp	/^InitCloneKernelWeights::InitCloneKernelWeights() { initialize_base(); }$/;"	f	class:PV::InitCloneKernelWeights
InitCloneKernelWeights	src/weightinit/InitCloneKernelWeights.hpp	/^class InitCloneKernelWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitCocircWeights	src/weightinit/InitCocircWeights.cpp	/^InitCocircWeights::InitCocircWeights() { initialize_base(); }$/;"	f	class:PV::InitCocircWeights
InitCocircWeights	src/weightinit/InitCocircWeights.cpp	/^InitCocircWeights::InitCocircWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitCocircWeights
InitCocircWeights	src/weightinit/InitCocircWeights.hpp	/^class InitCocircWeights : public PV::InitGauss2DWeights {$/;"	c	namespace:PV
InitCocircWeightsParams	src/weightinit/InitCocircWeightsParams.cpp	/^InitCocircWeightsParams::InitCocircWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitCocircWeightsParams
InitCocircWeightsParams	src/weightinit/InitCocircWeightsParams.cpp	/^InitCocircWeightsParams::InitCocircWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitCocircWeightsParams
InitCocircWeightsParams	src/weightinit/InitCocircWeightsParams.hpp	/^class InitCocircWeightsParams : public PV::InitGauss2DWeightsParams {$/;"	c	namespace:PV
InitGaborWeights	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^InitGaborWeights::InitGaborWeights() { initialize_base(); }$/;"	f	class:PV::InitGaborWeights
InitGaborWeights	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^InitGaborWeights::InitGaborWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaborWeights
InitGaborWeights	tests/InitWeightsTest/src/InitGaborWeights.hpp	/^class InitGaborWeights : public PV::InitGauss2DWeights {$/;"	c	namespace:PV
InitGaborWeightsParams	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^InitGaborWeightsParams::InitGaborWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitGaborWeightsParams
InitGaborWeightsParams	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^InitGaborWeightsParams::InitGaborWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitGaborWeightsParams
InitGaborWeightsParams	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^class InitGaborWeightsParams : public PV::InitGauss2DWeightsParams {$/;"	c	namespace:PV
InitGauss2DWeights	src/weightinit/InitGauss2DWeights.cpp	/^InitGauss2DWeights::InitGauss2DWeights() { initialize_base(); }$/;"	f	class:PV::InitGauss2DWeights
InitGauss2DWeights	src/weightinit/InitGauss2DWeights.cpp	/^InitGauss2DWeights::InitGauss2DWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGauss2DWeights
InitGauss2DWeights	src/weightinit/InitGauss2DWeights.hpp	/^class InitGauss2DWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitGauss2DWeightsParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^InitGauss2DWeightsParams::InitGauss2DWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitGauss2DWeightsParams
InitGauss2DWeightsParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^InitGauss2DWeightsParams::InitGauss2DWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitGauss2DWeightsParams
InitGauss2DWeightsParams	src/weightinit/InitGauss2DWeightsParams.hpp	/^class InitGauss2DWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitGaussianRandomWeights	src/weightinit/InitGaussianRandomWeights.cpp	/^InitGaussianRandomWeights::InitGaussianRandomWeights() { initialize_base(); }$/;"	f	class:PV::InitGaussianRandomWeights
InitGaussianRandomWeights	src/weightinit/InitGaussianRandomWeights.cpp	/^InitGaussianRandomWeights::InitGaussianRandomWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaussianRandomWeights
InitGaussianRandomWeights	src/weightinit/InitGaussianRandomWeights.hpp	/^class InitGaussianRandomWeights : public PV::InitRandomWeights {$/;"	c	namespace:PV
InitGaussianRandomWeightsParams	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^InitGaussianRandomWeightsParams::InitGaussianRandomWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitGaussianRandomWeightsParams
InitGaussianRandomWeightsParams	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^InitGaussianRandomWeightsParams::InitGaussianRandomWeightsParams(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaussianRandomWeightsParams
InitGaussianRandomWeightsParams	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^class InitGaussianRandomWeightsParams : public PV::InitRandomWeightsParams {$/;"	c	namespace:PV
InitIdentWeights	src/weightinit/InitIdentWeights.cpp	/^InitIdentWeights::InitIdentWeights() { initialize_base(); }$/;"	f	class:PV::InitIdentWeights
InitIdentWeights	src/weightinit/InitIdentWeights.cpp	/^InitIdentWeights::InitIdentWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitIdentWeights
InitIdentWeights	src/weightinit/InitIdentWeights.hpp	/^class InitIdentWeights : public PV::InitOneToOneWeights {$/;"	c	namespace:PV
InitIdentWeightsParams	src/weightinit/InitIdentWeightsParams.cpp	/^InitIdentWeightsParams::InitIdentWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitIdentWeightsParams
InitIdentWeightsParams	src/weightinit/InitIdentWeightsParams.cpp	/^InitIdentWeightsParams::InitIdentWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitIdentWeightsParams
InitIdentWeightsParams	src/weightinit/InitIdentWeightsParams.hpp	/^class InitIdentWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitMaxPoolingWeights	src/weightinit/InitMaxPoolingWeights.cpp	/^InitMaxPoolingWeights::InitMaxPoolingWeights() { initialize_base(); }$/;"	f	class:PV::InitMaxPoolingWeights
InitMaxPoolingWeights	src/weightinit/InitMaxPoolingWeights.cpp	/^InitMaxPoolingWeights::InitMaxPoolingWeights(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitMaxPoolingWeights
InitMaxPoolingWeights	src/weightinit/InitMaxPoolingWeights.hpp	/^class InitMaxPoolingWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitMaxPoolingWeightsParams	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^InitMaxPoolingWeightsParams::InitMaxPoolingWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitMaxPoolingWeightsParams
InitMaxPoolingWeightsParams	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^InitMaxPoolingWeightsParams::InitMaxPoolingWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitMaxPoolingWeightsParams
InitMaxPoolingWeightsParams	src/weightinit/InitMaxPoolingWeightsParams.hpp	/^class InitMaxPoolingWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitOneToOneWeights	src/weightinit/InitOneToOneWeights.cpp	/^InitOneToOneWeights::InitOneToOneWeights() { initialize_base(); }$/;"	f	class:PV::InitOneToOneWeights
InitOneToOneWeights	src/weightinit/InitOneToOneWeights.cpp	/^InitOneToOneWeights::InitOneToOneWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeights
InitOneToOneWeights	src/weightinit/InitOneToOneWeights.hpp	/^class InitOneToOneWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitOneToOneWeightsParams	src/weightinit/InitOneToOneWeightsParams.cpp	/^InitOneToOneWeightsParams::InitOneToOneWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitOneToOneWeightsParams
InitOneToOneWeightsParams	src/weightinit/InitOneToOneWeightsParams.cpp	/^InitOneToOneWeightsParams::InitOneToOneWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitOneToOneWeightsParams
InitOneToOneWeightsParams	src/weightinit/InitOneToOneWeightsParams.hpp	/^class InitOneToOneWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitOneToOneWeightsWithDelays	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^InitOneToOneWeightsWithDelays::InitOneToOneWeightsWithDelays() { initialize_base(); }$/;"	f	class:PV::InitOneToOneWeightsWithDelays
InitOneToOneWeightsWithDelays	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^InitOneToOneWeightsWithDelays::InitOneToOneWeightsWithDelays(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeightsWithDelays
InitOneToOneWeightsWithDelays	src/weightinit/InitOneToOneWeightsWithDelays.hpp	/^class InitOneToOneWeightsWithDelays : public PV::InitWeights {$/;"	c	namespace:PV
InitOneToOneWeightsWithDelaysParams	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^InitOneToOneWeightsWithDelaysParams::InitOneToOneWeightsWithDelaysParams($/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
InitOneToOneWeightsWithDelaysParams	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^InitOneToOneWeightsWithDelaysParams::InitOneToOneWeightsWithDelaysParams() { initialize_base(); }$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
InitOneToOneWeightsWithDelaysParams	src/weightinit/InitOneToOneWeightsWithDelaysParams.hpp	/^class InitOneToOneWeightsWithDelaysParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitRandomWeights	src/weightinit/InitRandomWeights.cpp	/^InitRandomWeights::InitRandomWeights() { initialize_base(); }$/;"	f	class:PV::InitRandomWeights
InitRandomWeights	src/weightinit/InitRandomWeights.hpp	/^class InitRandomWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitRandomWeightsParams	src/weightinit/InitRandomWeightsParams.cpp	/^InitRandomWeightsParams::InitRandomWeightsParams() {}$/;"	f	class:PV::InitRandomWeightsParams
InitRandomWeightsParams	src/weightinit/InitRandomWeightsParams.cpp	/^InitRandomWeightsParams::InitRandomWeightsParams(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitRandomWeightsParams
InitRandomWeightsParams	src/weightinit/InitRandomWeightsParams.hpp	/^class InitRandomWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitSmartWeights	src/weightinit/InitSmartWeights.cpp	/^InitSmartWeights::InitSmartWeights() { initialize_base(); }$/;"	f	class:PV::InitSmartWeights
InitSmartWeights	src/weightinit/InitSmartWeights.cpp	/^InitSmartWeights::InitSmartWeights(char const *name, HyPerCol *hc) : InitWeights() {$/;"	f	class:PV::InitSmartWeights
InitSmartWeights	src/weightinit/InitSmartWeights.hpp	/^class InitSmartWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitSpreadOverArborsWeights	src/weightinit/InitSpreadOverArborsWeights.cpp	/^InitSpreadOverArborsWeights::InitSpreadOverArborsWeights() { initialize_base(); }$/;"	f	class:PV::InitSpreadOverArborsWeights
InitSpreadOverArborsWeights	src/weightinit/InitSpreadOverArborsWeights.cpp	/^InitSpreadOverArborsWeights::InitSpreadOverArborsWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitSpreadOverArborsWeights
InitSpreadOverArborsWeights	src/weightinit/InitSpreadOverArborsWeights.hpp	/^class InitSpreadOverArborsWeights : public PV::InitGauss2DWeights {$/;"	c	namespace:PV
InitSpreadOverArborsWeightsParams	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^InitSpreadOverArborsWeightsParams::InitSpreadOverArborsWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
InitSpreadOverArborsWeightsParams	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^InitSpreadOverArborsWeightsParams::InitSpreadOverArborsWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
InitSpreadOverArborsWeightsParams	src/weightinit/InitSpreadOverArborsWeightsParams.hpp	/^class InitSpreadOverArborsWeightsParams : public PV::InitGauss2DWeightsParams {$/;"	c	namespace:PV
InitUniformRandomWeights	src/weightinit/InitUniformRandomWeights.cpp	/^InitUniformRandomWeights::InitUniformRandomWeights() { initialize_base(); }$/;"	f	class:PV::InitUniformRandomWeights
InitUniformRandomWeights	src/weightinit/InitUniformRandomWeights.cpp	/^InitUniformRandomWeights::InitUniformRandomWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformRandomWeights
InitUniformRandomWeights	src/weightinit/InitUniformRandomWeights.hpp	/^class InitUniformRandomWeights : public PV::InitRandomWeights {$/;"	c	namespace:PV
InitUniformRandomWeightsParams	src/weightinit/InitUniformRandomWeightsParams.cpp	/^InitUniformRandomWeightsParams::InitUniformRandomWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitUniformRandomWeightsParams
InitUniformRandomWeightsParams	src/weightinit/InitUniformRandomWeightsParams.cpp	/^InitUniformRandomWeightsParams::InitUniformRandomWeightsParams(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformRandomWeightsParams
InitUniformRandomWeightsParams	src/weightinit/InitUniformRandomWeightsParams.hpp	/^class InitUniformRandomWeightsParams : public PV::InitRandomWeightsParams {$/;"	c	namespace:PV
InitUniformWeights	src/weightinit/InitUniformWeights.cpp	/^InitUniformWeights::InitUniformWeights() { initialize_base(); }$/;"	f	class:PV::InitUniformWeights
InitUniformWeights	src/weightinit/InitUniformWeights.cpp	/^InitUniformWeights::InitUniformWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformWeights
InitUniformWeights	src/weightinit/InitUniformWeights.hpp	/^class InitUniformWeights : public PV::InitWeights {$/;"	c	namespace:PV
InitUniformWeightsParams	src/weightinit/InitUniformWeightsParams.cpp	/^InitUniformWeightsParams::InitUniformWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitUniformWeightsParams
InitUniformWeightsParams	src/weightinit/InitUniformWeightsParams.cpp	/^InitUniformWeightsParams::InitUniformWeightsParams(const char *name, HyPerCol *hc)$/;"	f	class:PV::InitUniformWeightsParams
InitUniformWeightsParams	src/weightinit/InitUniformWeightsParams.hpp	/^class InitUniformWeightsParams : public PV::InitWeightsParams {$/;"	c	namespace:PV
InitVFromFile	src/initv/InitVFromFile.cpp	/^InitVFromFile::InitVFromFile() { initialize_base(); }$/;"	f	class:PV::InitVFromFile
InitVFromFile	src/initv/InitVFromFile.cpp	/^InitVFromFile::InitVFromFile(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitVFromFile
InitVFromFile	src/initv/InitVFromFile.hpp	/^class InitVFromFile : public BaseInitV {$/;"	c	namespace:PV
InitWeightTestProbe	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^InitWeightTestProbe::InitWeightTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::InitWeightTestProbe
InitWeightTestProbe	tests/InitWeightsTest/src/InitWeightTestProbe.hpp	/^class InitWeightTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
InitWeightTestProbe_HPP_	tests/InitWeightsTest/src/InitWeightTestProbe.hpp	9;"	d
InitWeights	src/weightinit/InitWeights.cpp	/^InitWeights::InitWeights() { initialize_base(); }$/;"	f	class:PV::InitWeights
InitWeights	src/weightinit/InitWeights.cpp	/^InitWeights::InitWeights(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitWeights
InitWeights	src/weightinit/InitWeights.hpp	/^class InitWeights : public BaseObject {$/;"	c	namespace:PV
InitWeightsParams	src/weightinit/InitWeightsParams.cpp	/^InitWeightsParams::InitWeightsParams() { initialize_base(); }$/;"	f	class:PV::InitWeightsParams
InitWeightsParams	src/weightinit/InitWeightsParams.cpp	/^InitWeightsParams::InitWeightsParams(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitWeightsParams
InitWeightsParams	src/weightinit/InitWeightsParams.hpp	/^class InitWeightsParams {$/;"	c	namespace:PV
InitializeStateMessage	src/columns/Messages.hpp	/^   InitializeStateMessage() { setMessageType("InitializeState"); }$/;"	f	class:PV::InitializeStateMessage
InitializeStateMessage	src/columns/Messages.hpp	/^class InitializeStateMessage : public BaseMessage {$/;"	c	namespace:PV
InputLayer	src/layers/InputLayer.cpp	/^InputLayer::InputLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::InputLayer
InputLayer	src/layers/InputLayer.hpp	/^   InputLayer() {}$/;"	f	class:PV::InputLayer
InputLayer	src/layers/InputLayer.hpp	/^class InputLayer : public HyPerLayer {$/;"	c	namespace:PV
IntOptional	src/io/Configuration.hpp	/^   struct IntOptional {$/;"	s	class:PV::Configuration
InterpolationMethod	src/utils/BufferUtilsRescale.hpp	/^enum InterpolationMethod { NEAREST, BICUBIC };$/;"	g	namespace:PV::BufferUtils
InverseFlag	src/layers/SigmoidLayer.hpp	/^   bool InverseFlag;$/;"	m	class:PV::SigmoidLayer
KERNEL	src/layers/updateStateFunctions.h	21;"	d
KERNEL	src/layers/updateStateFunctions.h	26;"	d
KERNELCONNDEBUGINITWEIGHTS_HPP_	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	9;"	d
KERNELCONN_HPP_	src/connections/KernelConn.hpp	9;"	d
KERNELPROBE_HPP_	src/probes/KernelProbe.hpp	9;"	d
KERNELTESTPROBE_HPP_	tests/KernelTest/src/KernelTestProbe.hpp	9;"	d
KEYWORDHANDLER_HPP_	src/columns/KeywordHandler.hpp	9;"	d
KMEANSLAYER_HPP_	src/layers/KmeansLayer.hpp	9;"	d
KernelConn	src/connections/KernelConn.cpp	/^KernelConn::KernelConn($/;"	f	class:PV::KernelConn
KernelConn	src/connections/KernelConn.hpp	/^class KernelConn : public HyPerConn {$/;"	c	namespace:PV
KernelConnDebugInitWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^KernelConnDebugInitWeights::KernelConnDebugInitWeights() { initialize_base(); }$/;"	f	class:PV::KernelConnDebugInitWeights
KernelConnDebugInitWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^KernelConnDebugInitWeights::KernelConnDebugInitWeights(const char *name, HyPerCol *hc)$/;"	f	class:PV::KernelConnDebugInitWeights
KernelConnDebugInitWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	/^class KernelConnDebugInitWeights : public PV::HyPerConn {$/;"	c	namespace:PV
KernelProbe	src/probes/KernelProbe.cpp	/^KernelProbe::KernelProbe() { initialize_base(); }$/;"	f	class:PV::KernelProbe
KernelProbe	src/probes/KernelProbe.cpp	/^KernelProbe::KernelProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::KernelProbe
KernelProbe	src/probes/KernelProbe.hpp	/^class KernelProbe : public BaseHyPerConnProbe {$/;"	c	namespace:PV
KernelTestProbe	tests/KernelTest/src/KernelTestProbe.cpp	/^KernelTestProbe::KernelTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::KernelTestProbe
KernelTestProbe	tests/KernelTest/src/KernelTestProbe.hpp	/^class KernelTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
KeywordHandler	src/columns/KeywordHandler.cpp	/^KeywordHandler::KeywordHandler(KeywordHandler const &orig) {$/;"	f	class:PV::KeywordHandler
KeywordHandler	src/columns/KeywordHandler.cpp	/^KeywordHandler::KeywordHandler(char const *kw, ObjectCreateFn creator) { initialize(kw, creator); }$/;"	f	class:PV::KeywordHandler
KeywordHandler	src/columns/KeywordHandler.hpp	/^class KeywordHandler {$/;"	c	namespace:PV
KmeansLayer	src/layers/KmeansLayer.cpp	/^KmeansLayer::KmeansLayer() { initialize_base(); }$/;"	f	class:PV::KmeansLayer
KmeansLayer	src/layers/KmeansLayer.cpp	/^KmeansLayer::KmeansLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::KmeansLayer
KmeansLayer	src/layers/KmeansLayer.hpp	/^class KmeansLayer : public HyPerLayer {$/;"	c	namespace:PV
KneeTimeScaleController	src/components/KneeTimeScaleController.cpp	/^KneeTimeScaleController::KneeTimeScaleController($/;"	f	class:PV::KneeTimeScaleController
KneeTimeScaleController	src/components/KneeTimeScaleController.hpp	/^class KneeTimeScaleController : public AdaptiveTimeScaleController {$/;"	c	namespace:PV
KneeTimeScaleProbe	src/probes/KneeTimeScaleProbe.cpp	/^KneeTimeScaleProbe::KneeTimeScaleProbe(char const *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::KneeTimeScaleProbe
KneeTimeScaleProbe	src/probes/KneeTimeScaleProbe.hpp	/^class KneeTimeScaleProbe : public AdaptiveTimeScaleProbe {$/;"	c	namespace:PV
L0NORMLCAPROBE_HPP_	src/probes/L0NormLCAProbe.hpp	9;"	d
L0NORMPROBE_HPP_	src/probes/L0NormProbe.hpp	9;"	d
L0NormLCAProbe	src/probes/L0NormLCAProbe.cpp	/^L0NormLCAProbe::L0NormLCAProbe() { initialize_base(); }$/;"	f	class:PV::L0NormLCAProbe
L0NormLCAProbe	src/probes/L0NormLCAProbe.cpp	/^L0NormLCAProbe::L0NormLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L0NormLCAProbe
L0NormLCAProbe	src/probes/L0NormLCAProbe.hpp	/^class L0NormLCAProbe : public L0NormProbe {$/;"	c	namespace:PV
L0NormProbe	src/probes/L0NormProbe.cpp	/^L0NormProbe::L0NormProbe() : AbstractNormProbe() { initL0NormProbe_base(); }$/;"	f	class:PV::L0NormProbe
L0NormProbe	src/probes/L0NormProbe.cpp	/^L0NormProbe::L0NormProbe(const char *probeName, HyPerCol *hc) : AbstractNormProbe() {$/;"	f	class:PV::L0NormProbe
L0NormProbe	src/probes/L0NormProbe.hpp	/^class L0NormProbe : public AbstractNormProbe {$/;"	c	namespace:PV
L1NORMLCAPROBE_HPP_	src/probes/L1NormLCAProbe.hpp	9;"	d
L1NORMPROBE_HPP_	src/probes/L1NormProbe.hpp	9;"	d
L1NormLCAProbe	src/probes/L1NormLCAProbe.cpp	/^L1NormLCAProbe::L1NormLCAProbe() { initialize_base(); }$/;"	f	class:PV::L1NormLCAProbe
L1NormLCAProbe	src/probes/L1NormLCAProbe.cpp	/^L1NormLCAProbe::L1NormLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L1NormLCAProbe
L1NormLCAProbe	src/probes/L1NormLCAProbe.hpp	/^class L1NormLCAProbe : public L1NormProbe {$/;"	c	namespace:PV
L1NormProbe	src/probes/L1NormProbe.cpp	/^L1NormProbe::L1NormProbe() : AbstractNormProbe() { initL1NormProbe_base(); }$/;"	f	class:PV::L1NormProbe
L1NormProbe	src/probes/L1NormProbe.cpp	/^L1NormProbe::L1NormProbe(const char *probeName, HyPerCol *hc) : AbstractNormProbe() {$/;"	f	class:PV::L1NormProbe
L1NormProbe	src/probes/L1NormProbe.hpp	/^class L1NormProbe : public AbstractNormProbe {$/;"	c	namespace:PV
L2CONNPROBE_HPP_	src/probes/L2ConnProbe.hpp	9;"	d
L2ConnProbe	src/probes/L2ConnProbe.cpp	/^L2ConnProbe::L2ConnProbe() { initialize_base(); }$/;"	f	class:PV::L2ConnProbe
L2ConnProbe	src/probes/L2ConnProbe.cpp	/^L2ConnProbe::L2ConnProbe(const char *probename, HyPerCol *hc) : KernelProbe(probename, hc) {}$/;"	f	class:PV::L2ConnProbe
L2ConnProbe	src/probes/L2ConnProbe.hpp	/^class L2ConnProbe : public KernelProbe {$/;"	c	namespace:PV
L2NORMPROBE_HPP_	src/probes/L2NormProbe.hpp	9;"	d
L2NormProbe	src/probes/L2NormProbe.cpp	/^L2NormProbe::L2NormProbe() : AbstractNormProbe() { initL2NormProbe_base(); }$/;"	f	class:PV::L2NormProbe
L2NormProbe	src/probes/L2NormProbe.cpp	/^L2NormProbe::L2NormProbe(const char *probeName, HyPerCol *hc) : AbstractNormProbe() {$/;"	f	class:PV::L2NormProbe
L2NormProbe	src/probes/L2NormProbe.hpp	/^class L2NormProbe : public AbstractNormProbe {$/;"	c	namespace:PV
LABELERRORLAYER_HPP_	src/layers/LabelErrorLayer.hpp	9;"	d
LAYERPHASETESTPROBE_HPP_	tests/LayerPhaseTest/src/LayerPhaseTestProbe.hpp	9;"	d
LAYERPROBE_HPP_	src/probes/LayerProbe.hpp	9;"	d
LCALIFLAYER_HPP_	src/layers/LCALIFLayer.hpp	9;"	d
LCALIFLayer	src/layers/LCALIFLayer.cpp	/^LCALIFLayer::LCALIFLayer() {$/;"	f	class:PV::LCALIFLayer
LCALIFLayer	src/layers/LCALIFLayer.cpp	/^LCALIFLayer::LCALIFLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LCALIFLayer
LCALIFLayer	src/layers/LCALIFLayer.hpp	/^class LCALIFLayer : public PV::LIFGap {$/;"	c	namespace:PV
LCALIF_VmemInf	src/layers/LCALIFLayer.cpp	/^inline float LCALIF_VmemInf($/;"	f
LCALIF_tauInf	src/layers/LCALIFLayer.cpp	/^inline float LCALIF_tauInf($/;"	f
LCALIF_update_state	src/layers/LCALIFLayer.cpp	/^void LCALIF_update_state($/;"	f
LCAMomentumRate	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float LCAMomentumRate;$/;"	m	struct:PVCuda::MomentumLCAParams
LCAMomentumRate	src/layers/MomentumLCALayer.hpp	/^   float LCAMomentumRate;$/;"	m	class:PV::MomentumLCALayer
LCG	src/utils/cl_random.c	65;"	d	file:
LEAKYINTEGRATOR_HPP_	src/layers/LeakyIntegrator.hpp	9;"	d
LIF	src/layers/LIF.cpp	/^LIF::LIF() { initialize_base(); }$/;"	f	class:PV::LIF
LIF	src/layers/LIF.cpp	/^LIF::LIF(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LIF
LIF	src/layers/LIF.hpp	/^class LIF : public PV::HyPerLayer {$/;"	c	namespace:PV
LIFGAP_HPP_	src/layers/LIFGap.hpp	9;"	d
LIFGap	src/layers/LIFGap.cpp	/^LIFGap::LIFGap() { initialize_base(); }$/;"	f	class:PV::LIFGap
LIFGap	src/layers/LIFGap.cpp	/^LIFGap::LIFGap(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LIFGap
LIFGap	src/layers/LIFGap.hpp	/^class LIFGap : public PV::LIF {$/;"	c	namespace:PV
LIFGap_Vmem_derivative	src/layers/LIFGap.cpp	/^inline float LIFGap_Vmem_derivative($/;"	f
LIFGap_update_state_arma	src/layers/LIFGap.cpp	/^void LIFGap_update_state_arma($/;"	f
LIFGap_update_state_beginning	src/layers/LIFGap.cpp	/^void LIFGap_update_state_beginning($/;"	f
LIFGap_update_state_original	src/layers/LIFGap.cpp	/^void LIFGap_update_state_original($/;"	f
LIFTESTPROBE_BINS	tests/LIFTest/src/LIFTestProbe.cpp	13;"	d	file:
LIFTESTPROBE_DEFAULTENDINGTIME	tests/LIFTest/src/LIFTestProbe.cpp	11;"	d	file:
LIFTESTPROBE_DEFAULTTOLERANCE	tests/LIFTest/src/LIFTestProbe.cpp	12;"	d	file:
LIFTESTPROBE_HPP_	tests/LIFTest/src/LIFTestProbe.hpp	9;"	d
LIFTestProbe	tests/LIFTest/src/LIFTestProbe.cpp	/^LIFTestProbe::LIFTestProbe() : StatsProbe() { initialize_base(); }$/;"	f	class:PV::LIFTestProbe
LIFTestProbe	tests/LIFTest/src/LIFTestProbe.cpp	/^LIFTestProbe::LIFTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::LIFTestProbe
LIFTestProbe	tests/LIFTest/src/LIFTestProbe.hpp	/^class LIFTestProbe : public StatsProbe {$/;"	c	namespace:PV
LIF_HPP_	src/layers/LIF.hpp	10;"	d
LIF_Vmem_derivative	src/layers/LIF.cpp	/^inline float LIF_Vmem_derivative($/;"	f
LIF_params	src/layers/LIF.hpp	/^struct LIF_params {$/;"	s
LIF_update_state_arma	src/layers/LIF.cpp	/^void LIF_update_state_arma($/;"	f
LIF_update_state_beginning	src/layers/LIF.cpp	/^void LIF_update_state_beginning($/;"	f
LIF_update_state_original	src/layers/LIF.cpp	/^void LIF_update_state_original($/;"	f
LOCAL	src/columns/Communicator.hpp	/^   static const int LOCAL     = 0;$/;"	m	class:PV::Communicator
LOCAL	src/utils/BorderExchange.hpp	/^   static int const LOCAL     = 0;$/;"	m	class:PV::BorderExchange
LOCALIZATIONBBFINDPROBE_HPP_	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	9;"	d
LOCALIZATIONDATA_HPP_	demos/HeatMapLocalization/src/LocalizationData.hpp	9;"	d
LOCALIZATIONPROBE_HPP_	demos/HeatMapLocalization/src/LocalizationProbe.hpp	9;"	d
LabelErrorLayer	src/layers/LabelErrorLayer.cpp	/^LabelErrorLayer::LabelErrorLayer() { initialize_base(); }$/;"	f	class:PV::LabelErrorLayer
LabelErrorLayer	src/layers/LabelErrorLayer.cpp	/^LabelErrorLayer::LabelErrorLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LabelErrorLayer
LabelErrorLayer	src/layers/LabelErrorLayer.hpp	/^class LabelErrorLayer : public PV::ANNLayer {$/;"	c	namespace:PV
LabelErrorLayer_update_state	src/layers/LabelErrorLayer.cpp	/^void LabelErrorLayer_update_state($/;"	f
Layer	python/param_draw.py	/^class Layer(Col):$/;"	c
LayerAdvanceDataStoreMessage	src/columns/Messages.hpp	/^   LayerAdvanceDataStoreMessage(int phase) {$/;"	f	class:PV::LayerAdvanceDataStoreMessage
LayerAdvanceDataStoreMessage	src/columns/Messages.hpp	/^class LayerAdvanceDataStoreMessage : public BaseMessage {$/;"	c	namespace:PV
LayerArchive	tests/Shared/ColumnArchive.hpp	/^struct LayerArchive {$/;"	s
LayerCheckNotANumberMessage	src/columns/Messages.hpp	/^   LayerCheckNotANumberMessage(int phase) {$/;"	f	class:PV::LayerCheckNotANumberMessage
LayerCheckNotANumberMessage	src/columns/Messages.hpp	/^class LayerCheckNotANumberMessage : public BaseMessage {$/;"	c	namespace:PV
LayerCopyFromGpuMessage	src/columns/Messages.hpp	/^   LayerCopyFromGpuMessage(int phase, Timer *timer) {$/;"	f	class:PV::LayerCopyFromGpuMessage
LayerCopyFromGpuMessage	src/columns/Messages.hpp	/^class LayerCopyFromGpuMessage : public BaseMessage {$/;"	c	namespace:PV
LayerOutputStateMessage	src/columns/Messages.hpp	/^   LayerOutputStateMessage(int phase, double simTime) {$/;"	f	class:PV::LayerOutputStateMessage
LayerOutputStateMessage	src/columns/Messages.hpp	/^class LayerOutputStateMessage : public BaseMessage {$/;"	c	namespace:PV
LayerPhaseTestProbe	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^LayerPhaseTestProbe::LayerPhaseTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::LayerPhaseTestProbe
LayerPhaseTestProbe	tests/LayerPhaseTest/src/LayerPhaseTestProbe.hpp	/^class LayerPhaseTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
LayerProbe	src/probes/LayerProbe.cpp	/^LayerProbe::LayerProbe() {$/;"	f	class:PV::LayerProbe
LayerProbe	src/probes/LayerProbe.cpp	/^LayerProbe::LayerProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::LayerProbe
LayerProbe	src/probes/LayerProbe.hpp	/^class LayerProbe : public BaseProbe {$/;"	c	namespace:PV
LayerPublishMessage	src/columns/Messages.hpp	/^   LayerPublishMessage(int phase, double simTime) {$/;"	f	class:PV::LayerPublishMessage
LayerPublishMessage	src/columns/Messages.hpp	/^class LayerPublishMessage : public BaseMessage {$/;"	c	namespace:PV
LayerRecvSynapticInputMessage	src/columns/Messages.hpp	/^   LayerRecvSynapticInputMessage($/;"	f	class:PV::LayerRecvSynapticInputMessage
LayerRecvSynapticInputMessage	src/columns/Messages.hpp	/^class LayerRecvSynapticInputMessage : public BaseMessage {$/;"	c	namespace:PV
LayerUpdateStateMessage	src/columns/Messages.hpp	/^   LayerUpdateStateMessage($/;"	f	class:PV::LayerUpdateStateMessage
LayerUpdateStateMessage	src/columns/Messages.hpp	/^class LayerUpdateStateMessage : public BaseMessage {$/;"	c	namespace:PV
LeakyIntegrator	src/layers/LeakyIntegrator.cpp	/^LeakyIntegrator::LeakyIntegrator() { initialize_base(); }$/;"	f	class:PV::LeakyIntegrator
LeakyIntegrator	src/layers/LeakyIntegrator.cpp	/^LeakyIntegrator::LeakyIntegrator(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LeakyIntegrator
LeakyIntegrator	src/layers/LeakyIntegrator.hpp	/^class LeakyIntegrator : public PV::ANNLayer {$/;"	c	namespace:PV
LocalizationBBFindProbe	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^LocalizationBBFindProbe::LocalizationBBFindProbe() {$/;"	f	class:LocalizationBBFindProbe
LocalizationBBFindProbe	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^LocalizationBBFindProbe::LocalizationBBFindProbe(const char * probeName, PV::HyPerCol * hc) {$/;"	f	class:LocalizationBBFindProbe
LocalizationBBFindProbe	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^class LocalizationBBFindProbe: public LocalizationProbe {$/;"	c
LocalizationData	demos/HeatMapLocalization/src/LocalizationData.hpp	/^struct LocalizationData {$/;"	s
LocalizationProbe	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^LocalizationProbe::LocalizationProbe() {$/;"	f	class:LocalizationProbe
LocalizationProbe	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^LocalizationProbe::LocalizationProbe(const char * probeName, PV::HyPerCol * hc) {$/;"	f	class:LocalizationProbe
LocalizationProbe	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^class LocalizationProbe: public PV::LayerProbe {$/;"	c
Log	src/utils/PVLog.hpp	/^   Log(basic_ostream &s, const char *file = __FILE__, int line = __LINE__)$/;"	f	struct:PV::Log
Log	src/utils/PVLog.hpp	/^   Log(const char *file = __FILE__, int line = __LINE__) : _stream(LogStreamType::stream()) {$/;"	f	struct:PV::Log
Log	src/utils/PVLog.hpp	/^struct Log {$/;"	s	namespace:PV
LogDebugType	src/utils/PVLog.hpp	/^   LogDebugType,$/;"	e	enum:PV::LogTypeEnum
LogErrorType	src/utils/PVLog.hpp	/^   LogErrorType,$/;"	e	enum:PV::LogTypeEnum
LogFatalType	src/utils/PVLog.hpp	/^   LogFatalType,$/;"	e	enum:PV::LogTypeEnum
LogFileStream	src/utils/PVLog.cpp	/^   LogFileStream(std::basic_ostream<T> &st) : mDefaultStream(st) { setStreamDefault(); }$/;"	f	class:PV::LogFileStream
LogFileStream	src/utils/PVLog.cpp	/^class LogFileStream {$/;"	c	namespace:PV	file:
LogInfoType	src/utils/PVLog.hpp	/^   LogInfoType,$/;"	e	enum:PV::LogTypeEnum
LogStackTraceType	src/utils/PVLog.hpp	/^   LogStackTraceType$/;"	e	enum:PV::LogTypeEnum
LogStreamTraits	src/utils/PVLog.hpp	/^struct LogStreamTraits {$/;"	s	namespace:PV
LogStreamType	src/utils/PVLog.hpp	/^   typedef LogStreamTraits<C, LT, T> LogStreamType;$/;"	t	struct:PV::Log
LogTimeScaleController	src/components/LogTimeScaleController.cpp	/^LogTimeScaleController::LogTimeScaleController($/;"	f	class:PV::LogTimeScaleController
LogTimeScaleController	src/components/LogTimeScaleController.hpp	/^class LogTimeScaleController : public AdaptiveTimeScaleController {$/;"	c	namespace:PV
LogTimeScaleProbe	src/probes/LogTimeScaleProbe.cpp	/^LogTimeScaleProbe::LogTimeScaleProbe(char const *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::LogTimeScaleProbe
LogTimeScaleProbe	src/probes/LogTimeScaleProbe.hpp	/^class LogTimeScaleProbe : public AdaptiveTimeScaleProbe {$/;"	c	namespace:PV
LogType	src/utils/PVLog.hpp	/^   typedef LT LogType;$/;"	t	struct:PV::Log
LogType	src/utils/PVLog.hpp	/^   typedef LT LogType;$/;"	t	struct:PV::LogStreamTraits
LogType	src/utils/PVLog.hpp	/^struct LogType {$/;"	s	namespace:PV
LogTypeEnum	src/utils/PVLog.hpp	/^enum LogTypeEnum {$/;"	g	namespace:PV
LogWarnType	src/utils/PVLog.hpp	/^   LogWarnType,$/;"	e	enum:PV::LogTypeEnum
MACH_TIMER	src/utils/Clock.hpp	18;"	d
MAIN_USES_CUSTOMGROUPS	tests/AvgPoolTest/src/AvgPoolTest.cpp	13;"	d	file:
MAIN_USES_CUSTOMGROUPS	tests/BackgroundLayerTest/src/main.cpp	10;"	d	file:
MAIN_USES_CUSTOMGROUPS	tests/MaskLayerTest/src/MaskTest.cpp	5;"	d	file:
MAIN_USES_CUSTOMGROUPS	tests/MaxPoolTest/src/MaxPoolTest.cpp	11;"	d	file:
MAIN_USES_CUSTOMGROUPS	tests/SumPoolTest/src/SumPoolTest.cpp	13;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/BasicSystemTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/BatchSweepTest/src/main.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/BinningLayerTest/src/main.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/CloneHyPerConnTest/src/CloneHyPerConnTest.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/CloneKernelConnTest/src/CloneKernelConnTest.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/GPUSystemTest/src/GPUSystemTest.cpp	11;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/ImportParamsTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/ImprintConnTest/src/ImprintConnTest.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/InputSystemTest/src/MovieSystemTest.cpp	10;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/LayerPhaseTest/src/LayerPhaseTest.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/MPITest/src/pv.cpp	17;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/MomentumTest/src/MomentumTest.cpp	5;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/ParameterSweepTest/src/main.cpp	9;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/PlasticConnTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/PlasticTransposeConnTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/PointProbeTest/src/PointProbeTest.cpp	5;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/RandomOrderTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/ReadArborFileTest/src/main.cpp	8;"	d	file:
MAIN_USES_CUSTOM_GROUPS	tests/SegmentTest/src/main.cpp	9;"	d	file:
MASKFROMMEMORYBUFFER_HPP_	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	9;"	d
MASKLAYER_HPP_	src/layers/MaskLayer.hpp	9;"	d
MASKTESTINPUTLAYER_HPP_	tests/MaskLayerTest/src/MaskTestInputLayer.hpp	2;"	d
MAX	src/connections/PoolingConn.hpp	/^   enum AccumulateType { UNDEFINED, MAX, SUM, AVG };$/;"	e	enum:PV::PoolingConn::AccumulateType
MAXPOOLTESTLAYER_HPP_	tests/ImprintConnTest/src/TestLayer.hpp	2;"	d
MAXPOOLTESTLAYER_HPP_	tests/MaskLayerTest/src/MaskTestLayer.hpp	2;"	d
MAXPOOLTESTLAYER_HPP_	tests/MaxPoolTest/src/MaxPoolTestLayer.hpp	2;"	d
MAX_ARBOR_LIST	src/connections/HyPerConn.hpp	36;"	d
MAX_BIN_PARAMS	src/io/io.hpp	22;"	d
MAX_FILESYSTEMCALL_TRIES	src/include/pv_common.h	32;"	d
MAX_F_DELAY	src/include/pv_common.h	47;"	d
MAX_NEIGHBORS	src/include/pv_common.h	41;"	d
MAX_PARAMS	src/io/PVParams.hpp	23;"	d
MEM_CONST	src/layers/updateStateFunctions.h	23;"	d
MEM_CONST	src/layers/updateStateFunctions.h	28;"	d
MEM_GLOBAL	src/layers/updateStateFunctions.h	22;"	d
MEM_GLOBAL	src/layers/updateStateFunctions.h	27;"	d
MEM_LOCAL	src/layers/updateStateFunctions.h	24;"	d
MEM_LOCAL	src/layers/updateStateFunctions.h	29;"	d
MESSAGES_HPP_	src/columns/Messages.hpp	11;"	d
MINUTE	src/checkpointing/Checkpointer.hpp	/^   enum WallClockUnit { SECOND, MINUTE, HOUR, DAY };$/;"	e	enum:PV::Checkpointer::WallClockUnit
MIN_BIN_PARAMS	src/io/io.hpp	17;"	d
MOMENTUMCONNSIMPLECHECKPOINTERTESTPROBE_HPP_	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	9;"	d
MOMENTUMCONNTESTPROBE_HPP_	tests/MomentumTest/src/MomentumConnTestProbe.hpp	9;"	d
MOMENTUMCONNVISCOSITYCHECKPOINTERTESTPROBE_HPP_	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	9;"	d
MOMENTUMCONN_HPP_	src/connections/MomentumConn.hpp	9;"	d
MOMENTUMLCALAYER_HPP_	src/layers/MomentumLCALayer.hpp	9;"	d
MOMENTUMTESTCONNPROBE_HPP_	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.hpp	7;"	d
MPIBLOCK_HPP_	src/structures/MPIBlock.hpp	9;"	d
MPIBlock	src/structures/MPIBlock.cpp	/^MPIBlock::MPIBlock($/;"	f	class:PV::MPIBlock
MPIBlock	src/structures/MPIBlock.hpp	/^class MPIBlock {$/;"	c	namespace:PV
MPITESTLAYER_HPP_	tests/MPITest/src/MPITestLayer.hpp	9;"	d
MPITESTPROBE_HPP_	tests/MPITest/src/MPITestProbe.hpp	9;"	d
MPITestLayer	tests/MPITest/src/MPITestLayer.cpp	/^MPITestLayer::MPITestLayer(const char *name, HyPerCol *hc) : ANNLayer() {$/;"	f	class:PV::MPITestLayer
MPITestLayer	tests/MPITest/src/MPITestLayer.hpp	/^class MPITestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
MPITestProbe	tests/MPITest/src/MPITestProbe.cpp	/^MPITestProbe::MPITestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::MPITestProbe
MPITestProbe	tests/MPITest/src/MPITestProbe.hpp	/^class MPITestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
MPI_Allreduce	src/arch/mpi/mpi.c	/^int MPI_Allreduce($/;"	f
MPI_BAND	src/arch/mpi/mpi.h	37;"	d
MPI_BOR	src/arch/mpi/mpi.h	39;"	d
MPI_BXOR	src/arch/mpi/mpi.h	41;"	d
MPI_BYTE	src/arch/mpi/mpi.h	21;"	d
MPI_Barrier	src/arch/mpi/mpi.c	/^int MPI_Barrier(MPI_Comm comm) { return 0; }$/;"	f
MPI_Bcast	src/arch/mpi/mpi.c	/^int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm) { return 0; }$/;"	f
MPI_CHAR	src/arch/mpi/mpi.h	22;"	d
MPI_COMM_WORLD	src/arch/mpi/mpi.h	20;"	d
MPI_Comm	src/arch/mpi/mpi.h	17;"	d
MPI_Comm_rank	src/arch/mpi/mpi.c	/^int MPI_Comm_rank(MPI_Comm comm, int *rank) {$/;"	f
MPI_Comm_size	src/arch/mpi/mpi.c	/^int MPI_Comm_size(MPI_Comm comm, int *size) {$/;"	f
MPI_DOUBLE	src/arch/mpi/mpi.h	28;"	d
MPI_Datatype	src/arch/mpi/mpi.h	14;"	d
MPI_FLOAT	src/arch/mpi/mpi.h	27;"	d
MPI_Finalize	src/arch/mpi/mpi.c	/^int MPI_Finalize() {$/;"	f
MPI_H_	src/arch/mpi/mpi.h	9;"	d
MPI_INT	src/arch/mpi/mpi.h	24;"	d
MPI_IN_PLACE	src/arch/mpi/mpi.h	31;"	d
MPI_Iallreduce	src/arch/mpi/mpi.c	/^int MPI_Iallreduce($/;"	f
MPI_Init	src/arch/mpi/mpi.c	/^int MPI_Init(int *argc, char ***argv) {$/;"	f
MPI_Initialized	src/arch/mpi/mpi.c	/^int MPI_Initialized(int *flag) {$/;"	f
MPI_Irecv	src/arch/mpi/mpi.c	/^int MPI_Irecv($/;"	f
MPI_Isend	src/arch/mpi/mpi.c	/^int MPI_Isend($/;"	f
MPI_LAND	src/arch/mpi/mpi.h	36;"	d
MPI_LONG	src/arch/mpi/mpi.h	26;"	d
MPI_LOR	src/arch/mpi/mpi.h	38;"	d
MPI_LXOR	src/arch/mpi/mpi.h	40;"	d
MPI_MAX	src/arch/mpi/mpi.h	32;"	d
MPI_MAXLOC	src/arch/mpi/mpi.h	42;"	d
MPI_MIN	src/arch/mpi/mpi.h	33;"	d
MPI_MINLOC	src/arch/mpi/mpi.h	43;"	d
MPI_Op	src/arch/mpi/mpi.h	18;"	d
MPI_PROD	src/arch/mpi/mpi.h	35;"	d
MPI_REPLACE	src/arch/mpi/mpi.h	44;"	d
MPI_Recv	src/arch/mpi/mpi.c	/^int MPI_Recv($/;"	f
MPI_Reduce	src/arch/mpi/mpi.c	/^int MPI_Reduce($/;"	f
MPI_Request	src/arch/mpi/mpi.h	13;"	d
MPI_Request	src/arch/mpi/mpi.h	15;"	d
MPI_STATUSES_IGNORE	src/arch/mpi/mpi.h	30;"	d
MPI_STATUS_IGNORE	src/arch/mpi/mpi.h	29;"	d
MPI_SUM	src/arch/mpi/mpi.h	34;"	d
MPI_Send	src/arch/mpi/mpi.c	/^int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) {$/;"	f
MPI_Status	src/arch/mpi/mpi.h	16;"	d
MPI_Testall	src/arch/mpi/mpi.c	/^int MPI_Testall(int count, MPI_Request *reqs, int *flag, MPI_Status *stats) {$/;"	f
MPI_UNSIGNED	src/arch/mpi/mpi.h	25;"	d
MPI_UNSIGNED_CHAR	src/arch/mpi/mpi.h	23;"	d
MPI_Waitall	src/arch/mpi/mpi.c	/^int MPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]) {$/;"	f
MPI_Wtime	src/arch/mpi/mpi.c	/^double MPI_Wtime() { return clock() \/ CLOCKS_PER_SEC; }$/;"	f
Map2	demos/HeatMapLocalization/src/BBFind.hpp	/^      typedef vector< vector<float> >           Map2;       \/\/ [y][x]$/;"	t	class:BBFind
Map3	demos/HeatMapLocalization/src/BBFind.hpp	/^      typedef vector< vector< vector<float> > > Map3;       \/\/ [feature][y][x]$/;"	t	class:BBFind
MaskFromMemoryBuffer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^MaskFromMemoryBuffer::MaskFromMemoryBuffer() {$/;"	f	class:MaskFromMemoryBuffer
MaskFromMemoryBuffer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^MaskFromMemoryBuffer::MaskFromMemoryBuffer(const char * name, PV::HyPerCol * hc){$/;"	f	class:MaskFromMemoryBuffer
MaskFromMemoryBuffer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^class MaskFromMemoryBuffer: public PV::ANNLayer {$/;"	c
MaskLayer	src/layers/MaskLayer.cpp	/^MaskLayer::MaskLayer() {$/;"	f	class:PV::MaskLayer
MaskLayer	src/layers/MaskLayer.cpp	/^MaskLayer::MaskLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MaskLayer
MaskLayer	src/layers/MaskLayer.hpp	/^class MaskLayer : public PV::ANNLayer {$/;"	c	namespace:PV
MaskTestInputLayer	tests/MaskLayerTest/src/MaskTestInputLayer.cpp	/^MaskTestInputLayer::MaskTestInputLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MaskTestInputLayer
MaskTestInputLayer	tests/MaskLayerTest/src/MaskTestInputLayer.hpp	/^class MaskTestInputLayer : public PV::ANNLayer {$/;"	c	namespace:PV
MaskTestLayer	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^MaskTestLayer::MaskTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MaskTestLayer
MaskTestLayer	tests/MaskLayerTest/src/MaskTestLayer.hpp	/^class MaskTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
MaxPoolTestLayer	tests/MaxPoolTest/src/MaxPoolTestLayer.cpp	/^MaxPoolTestLayer::MaxPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MaxPoolTestLayer
MaxPoolTestLayer	tests/MaxPoolTest/src/MaxPoolTestLayer.hpp	/^class MaxPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
MomentumConn	src/connections/MomentumConn.cpp	/^MomentumConn::MomentumConn() { initialize_base(); }$/;"	f	class:PV::MomentumConn
MomentumConn	src/connections/MomentumConn.cpp	/^MomentumConn::MomentumConn(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::MomentumConn
MomentumConn	src/connections/MomentumConn.hpp	/^class MomentumConn : public HyPerConn {$/;"	c	namespace:PV
MomentumConnSimpleCheckpointerTestProbe	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^MomentumConnSimpleCheckpointerTestProbe::MomentumConnSimpleCheckpointerTestProbe($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
MomentumConnSimpleCheckpointerTestProbe	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^MomentumConnSimpleCheckpointerTestProbe::MomentumConnSimpleCheckpointerTestProbe() {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
MomentumConnSimpleCheckpointerTestProbe	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^class MomentumConnSimpleCheckpointerTestProbe : public PV::ColProbe {$/;"	c
MomentumConnTestProbe	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^MomentumConnTestProbe::MomentumConnTestProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::MomentumConnTestProbe
MomentumConnTestProbe	tests/MomentumTest/src/MomentumConnTestProbe.hpp	/^class MomentumConnTestProbe : public KernelProbe {$/;"	c	namespace:PV
MomentumConnViscosityCheckpointerTestProbe	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^MomentumConnViscosityCheckpointerTestProbe::MomentumConnViscosityCheckpointerTestProbe($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
MomentumConnViscosityCheckpointerTestProbe	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^MomentumConnViscosityCheckpointerTestProbe::MomentumConnViscosityCheckpointerTestProbe() {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
MomentumConnViscosityCheckpointerTestProbe	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^class MomentumConnViscosityCheckpointerTestProbe : public PV::ColProbe {$/;"	c
MomentumLCALayer	src/layers/MomentumLCALayer.cpp	/^MomentumLCALayer::MomentumLCALayer() { initialize_base(); }$/;"	f	class:PV::MomentumLCALayer
MomentumLCALayer	src/layers/MomentumLCALayer.cpp	/^MomentumLCALayer::MomentumLCALayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MomentumLCALayer
MomentumLCALayer	src/layers/MomentumLCALayer.hpp	/^class MomentumLCALayer : public PV::HyPerLCALayer {$/;"	c	namespace:PV
MomentumLCALayer_update_state	src/layers/MomentumLCALayer.cpp	/^void MomentumLCALayer_update_state($/;"	f
MomentumLCAParams	src/cudakernels/CudaUpdateStateFunctions.hpp	/^struct MomentumLCAParams {$/;"	s	namespace:PVCuda
MomentumTestConnProbe	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^MomentumTestConnProbe::MomentumTestConnProbe() { initialize_base(); }$/;"	f	class:PV::MomentumTestConnProbe
MomentumTestConnProbe	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^MomentumTestConnProbe::MomentumTestConnProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::MomentumTestConnProbe
MomentumTestConnProbe	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.hpp	/^class MomentumTestConnProbe : public BaseHyPerConnProbe {$/;"	c	namespace:PV
MoviePvpTestLayer	tests/ImageSystemTest/src/MoviePvpTestLayer.cpp	/^MoviePvpTestLayer::MoviePvpTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::MoviePvpTestLayer
MoviePvpTestLayer	tests/ImageSystemTest/src/MoviePvpTestLayer.hpp	/^class MoviePvpTestLayer : public PV::PvpLayer {$/;"	c	namespace:PV
MovieTestLayer	tests/ImageSystemTest/src/MovieTestLayer.cpp	/^MovieTestLayer::MovieTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::MovieTestLayer
MovieTestLayer	tests/ImageSystemTest/src/MovieTestLayer.hpp	/^class MovieTestLayer : public PV::ImageLayer {$/;"	c	namespace:PV
NEAREST	src/utils/BufferUtilsRescale.hpp	/^enum InterpolationMethod { NEAREST, BICUBIC };$/;"	e	enum:PV::BufferUtils::InterpolationMethod
NOISE_AMP	src/include/default_params.h	11;"	d
NONE	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode { NONE, STEP, SIMTIME, WALLCLOCK };$/;"	e	enum:PV::Checkpointer::CheckpointWriteTriggerMode
NORMALIZEBASE_HPP_	src/normalizers/NormalizeBase.hpp	9;"	d
NORMALIZECONTRASTZEROMEAN_HPP_	src/normalizers/NormalizeContrastZeroMean.hpp	9;"	d
NORMALIZEGAP_HPP_	src/normalizers/NormalizeGap.hpp	15;"	d
NORMALIZEGROUP_HPP_	src/normalizers/NormalizeGroup.hpp	9;"	d
NORMALIZEL2_HPP_	src/normalizers/NormalizeL2.hpp	9;"	d
NORMALIZEL3_HPP_	tests/NormalizeSubclassSystemTest/src/NormalizeL3.hpp	8;"	d
NORMALIZEMAX_HPP_	src/normalizers/NormalizeMax.hpp	9;"	d
NORMALIZEMULTIPLY_HPP_	src/normalizers/NormalizeMultiply.hpp	9;"	d
NORMALIZESUM_HPP_	src/normalizers/NormalizeSum.hpp	9;"	d
NORTH	src/columns/Communicator.hpp	/^   static const int NORTH     = 2;$/;"	m	class:PV::Communicator
NORTH	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
NORTH	src/utils/BorderExchange.hpp	/^   static int const NORTH     = 2;$/;"	m	class:PV::BorderExchange
NORTHEAST	src/columns/Communicator.hpp	/^   static const int NORTHEAST = 3;$/;"	m	class:PV::Communicator
NORTHEAST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
NORTHEAST	src/utils/BorderExchange.hpp	/^   static int const NORTHEAST = 3;$/;"	m	class:PV::BorderExchange
NORTHWEST	src/columns/Communicator.hpp	/^   static const int NORTHWEST = 1;$/;"	m	class:PV::Communicator
NORTHWEST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
NORTHWEST	src/utils/BorderExchange.hpp	/^   static int const NORTHWEST = 1;$/;"	m	class:PV::BorderExchange
NO_TRIGGER	src/layers/HyPerLayer.hpp	/^   NO_TRIGGER,$/;"	e	enum:PV::TriggerBehaviorTypeEnum
NUMBER_OF_VALUES	src/probes/PointLIFProbe.cpp	14;"	d	file:
NUM_ANNSQ_EVENTS	src/layers/ANNSquaredLayer.hpp	13;"	d
NUM_ANN_EVENTS	src/layers/ANNLayer.hpp	14;"	d
NUM_BIN_PARAMS	src/io/io.hpp	18;"	d
NUM_BUFFERS	tests/DataStoreTest/src/DataStoreTest.cpp	/^const int NUM_BUFFERS = 2;$/;"	v
NUM_ITEMS	tests/DataStoreTest/src/DataStoreTest.cpp	/^const int NUM_ITEMS   = 10;$/;"	v
NUM_LEVELS	tests/DataStoreTest/src/DataStoreTest.cpp	/^const int NUM_LEVELS  = 4;$/;"	v
NUM_LIFGAP_EVENTS	src/layers/LIFGap.hpp	13;"	d
NUM_LIF_EVENTS	src/layers/LIF.hpp	16;"	d
NUM_NEIGHBORHOOD	src/include/pv_common.h	38;"	d
NUM_PAR_BYTE_PARAMS	src/io/io.hpp	27;"	d
NUM_RETINA_CHANNELS	src/layers/Retina.hpp	17;"	d
NUM_RETINA_EVENTS	src/layers/Retina.hpp	18;"	d
NUM_WEIGHT_PARAMS	src/io/io.hpp	25;"	d
NUM_WGT_EXTRA_PARAMS	src/io/io.hpp	20;"	d
NUM_WGT_PARAMS	src/io/io.hpp	21;"	d
NormalizeBase	src/normalizers/NormalizeBase.cpp	/^NormalizeBase::NormalizeBase() { initialize_base(); }$/;"	f	class:PV::NormalizeBase
NormalizeBase	src/normalizers/NormalizeBase.hpp	/^class NormalizeBase : public BaseObject {$/;"	c	namespace:PV
NormalizeContrastZeroMean	src/normalizers/NormalizeContrastZeroMean.cpp	/^NormalizeContrastZeroMean::NormalizeContrastZeroMean() { initialize_base(); }$/;"	f	class:PV::NormalizeContrastZeroMean
NormalizeContrastZeroMean	src/normalizers/NormalizeContrastZeroMean.cpp	/^NormalizeContrastZeroMean::NormalizeContrastZeroMean(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeContrastZeroMean
NormalizeContrastZeroMean	src/normalizers/NormalizeContrastZeroMean.hpp	/^class NormalizeContrastZeroMean : public PV::NormalizeBase {$/;"	c	namespace:PV
NormalizeGap	src/normalizers/NormalizeGap.cpp	/^NormalizeGap::NormalizeGap() { initialize_base(); }$/;"	f	class:PV::NormalizeGap
NormalizeGap	src/normalizers/NormalizeGap.cpp	/^NormalizeGap::NormalizeGap(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeGap
NormalizeGap	src/normalizers/NormalizeGap.hpp	/^class NormalizeGap : public PV::NormalizeSum {$/;"	c	namespace:PV
NormalizeGroup	src/normalizers/NormalizeGroup.cpp	/^NormalizeGroup::NormalizeGroup() {}$/;"	f	class:PV::NormalizeGroup
NormalizeGroup	src/normalizers/NormalizeGroup.cpp	/^NormalizeGroup::NormalizeGroup(char const *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeGroup
NormalizeGroup	src/normalizers/NormalizeGroup.hpp	/^class NormalizeGroup : public NormalizeBase {$/;"	c	namespace:PV
NormalizeL2	src/normalizers/NormalizeL2.cpp	/^NormalizeL2::NormalizeL2() { initialize_base(); }$/;"	f	class:PV::NormalizeL2
NormalizeL2	src/normalizers/NormalizeL2.cpp	/^NormalizeL2::NormalizeL2(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeL2
NormalizeL2	src/normalizers/NormalizeL2.hpp	/^class NormalizeL2 : public PV::NormalizeMultiply {$/;"	c	namespace:PV
NormalizeL3	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^NormalizeL3::NormalizeL3() { initialize_base(); }$/;"	f	class:PV::NormalizeL3
NormalizeL3	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^NormalizeL3::NormalizeL3(char const *probeName, HyPerCol *hc) {$/;"	f	class:PV::NormalizeL3
NormalizeL3	tests/NormalizeSubclassSystemTest/src/NormalizeL3.hpp	/^class NormalizeL3 : public NormalizeMultiply {$/;"	c	namespace:PV
NormalizeMax	src/normalizers/NormalizeMax.cpp	/^NormalizeMax::NormalizeMax() { initialize_base(); }$/;"	f	class:PV::NormalizeMax
NormalizeMax	src/normalizers/NormalizeMax.cpp	/^NormalizeMax::NormalizeMax(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeMax
NormalizeMax	src/normalizers/NormalizeMax.hpp	/^class NormalizeMax : public PV::NormalizeMultiply {$/;"	c	namespace:PV
NormalizeMultiply	src/normalizers/NormalizeMultiply.cpp	/^NormalizeMultiply::NormalizeMultiply() { initialize_base(); }$/;"	f	class:PV::NormalizeMultiply
NormalizeMultiply	src/normalizers/NormalizeMultiply.cpp	/^NormalizeMultiply::NormalizeMultiply(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeMultiply
NormalizeMultiply	src/normalizers/NormalizeMultiply.hpp	/^class NormalizeMultiply : public NormalizeBase {$/;"	c	namespace:PV
NormalizeSum	src/normalizers/NormalizeSum.cpp	/^NormalizeSum::NormalizeSum() { initialize_base(); }$/;"	f	class:PV::NormalizeSum
NormalizeSum	src/normalizers/NormalizeSum.cpp	/^NormalizeSum::NormalizeSum(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeSum
NormalizeSum	src/normalizers/NormalizeSum.hpp	/^class NormalizeSum : public PV::NormalizeMultiply {$/;"	c	namespace:PV
OBSERVERTABLE_HPP_	src/observerpattern/ObserverTable.hpp	9;"	d
OBSERVER_HPP_	src/observerpattern/Observer.hpp	9;"	d
ObjectCreateFn	src/columns/KeywordHandler.hpp	/^typedef BaseObject *(*ObjectCreateFn)(char const *name, HyPerCol *hc);$/;"	t	namespace:PV
Observer	src/observerpattern/Observer.hpp	/^   Observer() {}$/;"	f	class:PV::Observer
Observer	src/observerpattern/Observer.hpp	/^class Observer {$/;"	c	namespace:PV
ObserverTable	src/observerpattern/ObserverTable.hpp	/^   ObserverTable() {}$/;"	f	class:PV::ObserverTable
ObserverTable	src/observerpattern/ObserverTable.hpp	/^class ObserverTable {$/;"	c	namespace:PV
PAD	src/utils/BufferUtilsRescale.hpp	/^enum RescaleMethod { CROP, PAD };$/;"	e	enum:PV::BufferUtils::RescaleMethod
PARAMETERARRAYSTACK_INITIALCOUNT	src/io/PVParams.cpp	23;"	d	file:
PARAMETERARRAY_INITIALSIZE	src/io/PVParams.cpp	22;"	d	file:
PARAMETERSTRINGSTACK_INITIALCOUNT	src/io/PVParams.cpp	24;"	d	file:
PARAMETERSWEEPTESTPROBE_HPP_	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	9;"	d
PARAMETERSWEEP_INCREMENTCOUNT	src/io/PVParams.cpp	25;"	d	file:
PARAMS_IO_READ	src/io/io.hpp	/^enum ParamsIOFlag { PARAMS_IO_READ, PARAMS_IO_WRITE };$/;"	e	enum:PV::ParamsIOFlag
PARAMS_IO_WRITE	src/io/io.hpp	/^enum ParamsIOFlag { PARAMS_IO_READ, PARAMS_IO_WRITE };$/;"	e	enum:PV::ParamsIOFlag
PARSE_BADFILETYPE	tools/readpvpheader.c	18;"	d	file:
PARSE_BADHEADERSIZE	tools/readpvpheader.c	16;"	d	file:
PARSE_BADNUMPARAMS	tools/readpvpheader.c	17;"	d	file:
PARSE_CANTOPEN	tools/readpvpheader.c	14;"	d	file:
PARSE_FAILURE	tools/readpvpheader.c	13;"	d	file:
PARSE_NOHEADER	tools/readpvpheader.c	15;"	d	file:
PARSE_NOMEM	tools/readpvpheader.c	19;"	d	file:
PARSE_SUCCESS	tools/readpvpheader.c	12;"	d	file:
PATCH_SF	src/include/pv_types.h	/^enum PVPatchStrideFields { PATCH_SX, PATCH_SY, PATCH_SF };$/;"	e	enum:PVPatchStrideFields
PATCH_SX	src/include/pv_types.h	/^enum PVPatchStrideFields { PATCH_SX, PATCH_SY, PATCH_SF };$/;"	e	enum:PVPatchStrideFields
PATCH_SY	src/include/pv_types.h	/^enum PVPatchStrideFields { PATCH_SX, PATCH_SY, PATCH_SF };$/;"	e	enum:PVPatchStrideFields
PI	src/include/pv_common.h	35;"	d
PLASTICCLONECONN_HPP_	src/connections/PlasticCloneConn.hpp	9;"	d
PLASTICCONNTESTLAYER_HPP_	tests/PlasticConnTest/src/PlasticConnTestLayer.hpp	9;"	d
PLASTICCONNTESTPROBE_HPP_	tests/PlasticConnTest/src/PlasticConnTestProbe.hpp	9;"	d
PLASTICTESTCONN_HPP_	tests/PlasticConnTest/src/PlasticTestConn.hpp	9;"	d
POINTLIFPROBE_HPP_	src/probes/PointLIFProbe.hpp	9;"	d
POINTPROBE_HPP_	src/probes/PointProbe.hpp	9;"	d
POOLINGCONNCHECKPOINTERTESTPROBE_HPP_	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	9;"	d
POOLINGCONN_HPP_	src/connections/PoolingConn.hpp	9;"	d
POOLINGINDEXLAYER_HPP_	src/layers/PoolingIndexLayer.hpp	9;"	d
POS_KURVE_FLAG	src/weightinit/InitCocircWeightsParams.hpp	/^   bool POS_KURVE_FLAG; \/\/  handle pos and neg curvature separately$/;"	m	class:PV::InitCocircWeightsParams
PRIVATETRANSPOSECONN_HPP_	src/connections/privateTransposeConn.hpp	9;"	d
PROTECTED_NUMBER	src/connections/HyPerConn.hpp	35;"	d
PTWISEPRODUCTLAYER_HPP_	src/layers/PtwiseProductLayer.hpp	14;"	d
PTWISEQUOTIENTLAYER_HPP_	src/layers/PtwiseQuotientLayer.hpp	16;"	d
PUBLISHER_HPP_	src/columns/Publisher.hpp	9;"	d
PV	src/checkpointing/CheckpointEntry.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/CheckpointEntry.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryData.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryDataStore.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/CheckpointEntryDataStore.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryPvp.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryRandState.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/CheckpointEntryRandState.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointableFileStream.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/CheckpointableFileStream.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/Checkpointer.cpp	/^namespace PV {$/;"	n	file:
PV	src/checkpointing/Checkpointer.hpp	/^namespace PV {$/;"	n
PV	src/checkpointing/CheckpointingMessages.hpp	/^namespace PV {$/;"	n
PV	src/columns/Arguments.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/Arguments.hpp	/^namespace PV {$/;"	n
PV	src/columns/BaseObject.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/BaseObject.hpp	/^namespace PV {$/;"	n
PV	src/columns/CommandLineArguments.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/CommandLineArguments.hpp	/^namespace PV {$/;"	n
PV	src/columns/Communicator.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/Communicator.hpp	/^namespace PV {$/;"	n
PV	src/columns/ConfigFileArguments.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/ConfigFileArguments.hpp	/^namespace PV {$/;"	n
PV	src/columns/DataStore.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/DataStore.hpp	/^namespace PV {$/;"	n
PV	src/columns/Factory.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/Factory.hpp	/^namespace PV {$/;"	n
PV	src/columns/GaussianRandom.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/GaussianRandom.hpp	/^namespace PV {$/;"	n
PV	src/columns/HyPerCol.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/HyPerCol.hpp	/^namespace PV {$/;"	n
PV	src/columns/KeywordHandler.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/KeywordHandler.hpp	/^namespace PV {$/;"	n
PV	src/columns/Messages.hpp	/^namespace PV {$/;"	n
PV	src/columns/PV_Init.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/PV_Init.hpp	/^namespace PV {$/;"	n
PV	src/columns/Publisher.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/Publisher.hpp	/^namespace PV {$/;"	n
PV	src/columns/Random.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/Random.hpp	/^namespace PV {$/;"	n
PV	src/columns/RandomSeed.cpp	/^namespace PV {$/;"	n	file:
PV	src/columns/RandomSeed.hpp	/^namespace PV {$/;"	n
PV	src/components/AdaptiveTimeScaleController.cpp	/^namespace PV {$/;"	n	file:
PV	src/components/AdaptiveTimeScaleController.hpp	/^namespace PV {$/;"	n
PV	src/components/BatchIndexer.cpp	/^namespace PV {$/;"	n	file:
PV	src/components/BatchIndexer.hpp	/^namespace PV {$/;"	n
PV	src/components/KneeTimeScaleController.cpp	/^namespace PV {$/;"	n	file:
PV	src/components/KneeTimeScaleController.hpp	/^namespace PV {$/;"	n
PV	src/components/LogTimeScaleController.cpp	/^namespace PV {$/;"	n	file:
PV	src/components/LogTimeScaleController.hpp	/^namespace PV {$/;"	n
PV	src/connections/BaseConnection.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/BaseConnection.hpp	/^namespace PV {$/;"	n
PV	src/connections/CloneConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/CloneConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/CloneKernelConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/CloneKernelConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/CopyConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/CopyConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/FeedbackConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/FeedbackConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/GapConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/GapConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/HyPerConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/HyPerConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/IdentConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/IdentConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/ImprintConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/ImprintConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/KernelConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/KernelConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/MomentumConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/MomentumConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/PlasticCloneConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/PlasticCloneConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/PoolingConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/PoolingConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/RescaleConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/RescaleConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/TransposeConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/TransposeConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/TransposePoolingConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/TransposePoolingConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/privateTransposeConn.cpp	/^namespace PV {$/;"	n	file:
PV	src/connections/privateTransposeConn.hpp	/^namespace PV {$/;"	n
PV	src/connections/weight_conversions.hpp	/^namespace PV {$/;"	n
PV	src/initv/BaseInitV.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/BaseInitV.hpp	/^namespace PV {$/;"	n
PV	src/initv/ConstantV.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/ConstantV.hpp	/^namespace PV {$/;"	n
PV	src/initv/GaussianRandomV.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/GaussianRandomV.hpp	/^namespace PV {$/;"	n
PV	src/initv/InitVFromFile.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/InitVFromFile.hpp	/^namespace PV {$/;"	n
PV	src/initv/UniformRandomV.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/UniformRandomV.hpp	/^namespace PV {$/;"	n
PV	src/initv/ZeroV.cpp	/^namespace PV {$/;"	n	file:
PV	src/initv/ZeroV.hpp	/^namespace PV {$/;"	n
PV	src/io/ConfigParser.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/ConfigParser.hpp	/^namespace PV {$/;"	n
PV	src/io/Configuration.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/Configuration.hpp	/^namespace PV {$/;"	n
PV	src/io/FileStream.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/FileStream.hpp	/^namespace PV {$/;"	n
PV	src/io/PVParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/PVParams.hpp	/^namespace PV {$/;"	n
PV	src/io/PrintStream.hpp	/^namespace PV {$/;"	n
PV	src/io/fileio.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/fileio.hpp	/^namespace PV {$/;"	n
PV	src/io/io.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/io.hpp	/^namespace PV {$/;"	n
PV	src/io/parser/params.y	/^PV::PVParams* handler;$/;"	l
PV	src/io/randomstateio.cpp	/^namespace PV {$/;"	n	file:
PV	src/io/randomstateio.hpp	/^namespace PV {$/;"	n
PV	src/layers/ANNErrorLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ANNErrorLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ANNLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ANNLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ANNSquaredLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ANNSquaredLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ANNWhitenedLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ANNWhitenedLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/BackgroundLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/BackgroundLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/BaseLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/BaseLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/BinningLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/BinningLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/CloneVLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/CloneVLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ConstantLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ConstantLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/DropoutLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/DropoutLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/FilenameParsingGroundTruthLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/FilenameParsingGroundTruthLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/GapLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/GapLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/HyPerLCALayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/HyPerLCALayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/HyPerLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/HyPerLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ISTALayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ISTALayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ImageFromMemoryBuffer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ImageFromMemoryBuffer.hpp	/^namespace PV {$/;"	n
PV	src/layers/ImageLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ImageLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/InputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/InputLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/KmeansLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/KmeansLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/LCALIFLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/LCALIFLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/LIF.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/LIF.hpp	/^namespace PV {$/;"	n
PV	src/layers/LIFGap.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/LIFGap.hpp	/^namespace PV {$/;"	n
PV	src/layers/LabelErrorLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/LabelErrorLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/LeakyIntegrator.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/LeakyIntegrator.hpp	/^namespace PV {$/;"	n
PV	src/layers/MaskLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/MaskLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/MomentumLCALayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/MomentumLCALayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/PVLayerCube.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/PVLayerCube.hpp	/^namespace PV {$/;"	n
PV	src/layers/PoolingIndexLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/PoolingIndexLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/PtwiseProductLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/PtwiseProductLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/PtwiseQuotientLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/PtwiseQuotientLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/PvpLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/PvpLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/RescaleLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/RescaleLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/Retina.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/Retina.hpp	/^namespace PV {$/;"	n
PV	src/layers/RunningAverageLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/RunningAverageLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/SegmentLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/SegmentLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/Segmentify.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/Segmentify.hpp	/^namespace PV {$/;"	n
PV	src/layers/ShuffleLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/ShuffleLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/SigmoidLayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/SigmoidLayer.hpp	/^namespace PV {$/;"	n
PV	src/layers/WTALayer.cpp	/^namespace PV {$/;"	n	file:
PV	src/layers/WTALayer.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeBase.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeBase.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeContrastZeroMean.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeContrastZeroMean.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeGap.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeGap.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeGroup.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeGroup.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeL2.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeL2.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeMax.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeMax.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeMultiply.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeMultiply.hpp	/^namespace PV {$/;"	n
PV	src/normalizers/NormalizeSum.cpp	/^namespace PV {$/;"	n	file:
PV	src/normalizers/NormalizeSum.hpp	/^namespace PV {$/;"	n
PV	src/observerpattern/BaseMessage.hpp	/^namespace PV {$/;"	n
PV	src/observerpattern/Observer.hpp	/^namespace PV {$/;"	n
PV	src/observerpattern/ObserverTable.cpp	/^namespace PV {$/;"	n	file:
PV	src/observerpattern/ObserverTable.hpp	/^namespace PV {$/;"	n
PV	src/observerpattern/Subject.cpp	/^namespace PV {$/;"	n	file:
PV	src/observerpattern/Subject.hpp	/^namespace PV {$/;"	n
PV	src/probes/AbstractNormProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/AbstractNormProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/AdaptiveTimeScaleProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/AdaptiveTimeScaleProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/BaseConnectionProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/BaseConnectionProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/BaseHyPerConnProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/BaseHyPerConnProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/BaseProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/BaseProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/ColProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/ColProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/ColumnEnergyProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/ColumnEnergyProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/FirmThresholdCostFnLCAProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/FirmThresholdCostFnProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/FirmThresholdCostFnProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/KernelProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/KernelProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/KneeTimeScaleProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/KneeTimeScaleProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L0NormLCAProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L0NormLCAProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L0NormProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L0NormProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L1NormLCAProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L1NormLCAProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L1NormProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L1NormProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L2ConnProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L2ConnProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/L2NormProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/L2NormProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/LayerProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/LayerProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/LogTimeScaleProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/LogTimeScaleProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/PointLIFProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/PointLIFProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/PointProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/PointProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/QuotientColProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/QuotientColProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/RequireAllZeroActivityProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/RequireAllZeroActivityProbe.hpp	/^namespace PV {$/;"	n
PV	src/probes/StatsProbe.cpp	/^namespace PV {$/;"	n	file:
PV	src/probes/StatsProbe.hpp	/^namespace PV {$/;"	n
PV	src/structures/Buffer.hpp	/^namespace PV {$/;"	n
PV	src/structures/Image.cpp	/^namespace PV {$/;"	n	file:
PV	src/structures/Image.hpp	/^namespace PV {$/;"	n
PV	src/structures/MPIBlock.cpp	/^namespace PV {$/;"	n	file:
PV	src/structures/MPIBlock.hpp	/^namespace PV {$/;"	n
PV	src/structures/RingBuffer.hpp	/^namespace PV {$/;"	n
PV	src/structures/SparseList.hpp	/^namespace PV {$/;"	n
PV	src/utils/BorderExchange.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/BorderExchange.hpp	/^namespace PV {$/;"	n
PV	src/utils/BufferUtilsMPI.hpp	/^namespace PV {$/;"	n
PV	src/utils/BufferUtilsPvp.hpp	/^namespace PV {$/;"	n
PV	src/utils/BufferUtilsRescale.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/BufferUtilsRescale.hpp	/^namespace PV {$/;"	n
PV	src/utils/Clock.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/Clock.hpp	/^namespace PV {$/;"	n
PV	src/utils/PVAlloc.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/PVAlloc.hpp	/^namespace PV {$/;"	n
PV	src/utils/PVAssert.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/PVAssert.hpp	/^namespace PV {$/;"	n
PV	src/utils/PVLog.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/PVLog.hpp	/^namespace PV {$/;"	n
PV	src/utils/Timer.cpp	/^namespace PV {$/;"	n	file:
PV	src/utils/Timer.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitCloneKernelWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitCloneKernelWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitCocircWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitCocircWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitCocircWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitCocircWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitGauss2DWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitGauss2DWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitGauss2DWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitGauss2DWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitGaussianRandomWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitGaussianRandomWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitIdentWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitIdentWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitIdentWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitIdentWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitMaxPoolingWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitMaxPoolingWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitMaxPoolingWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitOneToOneWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitOneToOneWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitOneToOneWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitOneToOneWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitOneToOneWeightsWithDelays.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitOneToOneWeightsWithDelaysParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitRandomWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitRandomWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitRandomWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitRandomWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitSmartWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitSmartWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitSpreadOverArborsWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitSpreadOverArborsWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitSpreadOverArborsWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitUniformRandomWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitUniformRandomWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitUniformRandomWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitUniformRandomWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitUniformWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitUniformWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitUniformWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitUniformWeightsParams.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitWeights.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitWeights.hpp	/^namespace PV {$/;"	n
PV	src/weightinit/InitWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	src/weightinit/InitWeightsParams.hpp	/^namespace PV {$/;"	n
PV	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ArborSystemTest/src/ArborTestForOnesProbe.hpp	/^namespace PV {$/;"	n
PV	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ArborSystemTest/src/ArborTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/AvgPoolTest/src/AvgPoolTestInputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/AvgPoolTest/src/AvgPoolTestInputLayer.hpp	/^namespace PV {$/;"	n
PV	tests/AvgPoolTest/src/AvgPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/AvgPoolTest/src/AvgPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/AvgPoolTest/src/GateAvgPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/AvgPoolTest/src/GateAvgPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/BackgroundLayerTest/src/ComparisonLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/BackgroundLayerTest/src/ComparisonLayer.hpp	/^namespace PV {$/;"	n
PV	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/BinningLayerTest/src/BinningTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/BinningLayerTest/src/BinningTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/DelaysToFeaturesTest/src/DelayTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/DryRunFlagTest/src/AlwaysFailsLayer.hpp	/^namespace PV {$/;"	n
PV	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/GPUSystemTest/src/GPUSystemTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/GPUSystemTest/src/identicalBatchProbe.hpp	/^namespace PV {$/;"	n
PV	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/GroupNormalizationTest/src/AllConstantValueProbe.hpp	/^namespace PV {$/;"	n
PV	tests/ImageOffsetTest/src/ImageOffsetTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageOffsetTest/src/ImageOffsetTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImageSystemTest/src/ImagePvpTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageSystemTest/src/ImagePvpTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImageSystemTest/src/ImageTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageSystemTest/src/ImageTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImageSystemTest/src/MoviePvpTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageSystemTest/src/MoviePvpTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImageSystemTest/src/MovieTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImageSystemTest/src/MovieTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImportParamsTest/src/ImportParamsConn.hpp	/^namespace PV {$/;"	n
PV	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImportParamsTest/src/ImportParamsLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImprintConnTest/src/ImprintConnTestInputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImprintConnTest/src/ImprintConnTestInputLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ImprintConnTest/src/TestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ImprintConnTest/src/TestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^namespace PV {$/;"	n	file:
PV	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	/^namespace PV {$/;"	n
PV	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^namespace PV {$/;"	n	file:
PV	tests/InitWeightsTest/src/InitGaborWeights.hpp	/^namespace PV {$/;"	n
PV	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^namespace PV {$/;"	n	file:
PV	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^namespace PV {$/;"	n
PV	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/InitWeightsTest/src/InitWeightTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^namespace PV {$/;"	n	file:
PV	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	/^namespace PV {$/;"	n
PV	tests/KernelTest/src/KernelTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/KernelTest/src/KernelTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/LIFTest/src/AverageRateConn.cpp	/^namespace PV {$/;"	n	file:
PV	tests/LIFTest/src/AverageRateConn.hpp	/^namespace PV {$/;"	n
PV	tests/LIFTest/src/LIFTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/LIFTest/src/LIFTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/LayerPhaseTest/src/LayerPhaseTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/MPITest/src/MPITestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MPITest/src/MPITestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/MPITest/src/MPITestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MPITest/src/MPITestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/MaskLayerTest/src/MaskTestInputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MaskLayerTest/src/MaskTestInputLayer.hpp	/^namespace PV {$/;"	n
PV	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MaskLayerTest/src/MaskTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/MaxPoolTest/src/GateMaxPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MaxPoolTest/src/GateMaxPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/MaxPoolTest/src/MaxPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MaxPoolTest/src/MaxPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/MomentumTest/src/MomentumConnTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^namespace PV {$/;"	n	file:
PV	tests/NormalizeSubclassSystemTest/src/NormalizeL3.hpp	/^namespace PV {$/;"	n
PV	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/PlasticConnTest/src/PlasticConnTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/PlasticConnTest/src/PlasticConnTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/PlasticConnTest/src/PlasticConnTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/PlasticConnTest/src/PlasticTestConn.cpp	/^namespace PV {$/;"	n	file:
PV	tests/PlasticConnTest/src/PlasticTestConn.hpp	/^namespace PV {$/;"	n
PV	tests/PointProbeTest/src/TestPointProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/PointProbeTest/src/TestPointProbe.hpp	/^namespace PV {$/;"	n
PV	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.hpp	/^namespace PV {$/;"	n
PV	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/RescaleLayerTest/src/RescaleLayerTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/SegmentTest/src/AssertZerosProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SegmentTest/src/AssertZerosProbe.hpp	/^namespace PV {$/;"	n
PV	tests/SegmentTest/src/SegmentTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SegmentTest/src/SegmentTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/SegmentTest/src/SegmentifyTest.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SegmentTest/src/SegmentifyTest.hpp	/^namespace PV {$/;"	n
PV	tests/Shared/CPTestInputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/Shared/CPTestInputLayer.hpp	/^namespace PV {$/;"	n
PV	tests/Shared/Example.cpp	/^namespace PV {$/;"	n	file:
PV	tests/Shared/Example.hpp	/^namespace PV {$/;"	n
PV	tests/Shared/VaryingHyPerConn.cpp	/^namespace PV {$/;"	n	file:
PV	tests/Shared/VaryingHyPerConn.hpp	/^namespace PV {$/;"	n
PV	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^namespace PV {$/;"	n
PV	tests/SumPoolTest/src/GateSumPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SumPoolTest/src/GateSumPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/SumPoolTest/src/SumPoolTestInputLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SumPoolTest/src/SumPoolTestInputLayer.hpp	/^namespace PV {$/;"	n
PV	tests/SumPoolTest/src/SumPoolTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/SumPoolTest/src/SumPoolTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/TriggerTest/src/TriggerTestConn.cpp	/^namespace PV {$/;"	n	file:
PV	tests/TriggerTest/src/TriggerTestConn.hpp	/^namespace PV {$/;"	n
PV	tests/TriggerTest/src/TriggerTestLayer.cpp	/^namespace PV {$/;"	n	file:
PV	tests/TriggerTest/src/TriggerTestLayer.hpp	/^namespace PV {$/;"	n
PV	tests/TriggerTest/src/TriggerTestLayerProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/TriggerTest/src/TriggerTestLayerProbe.hpp	/^namespace PV {$/;"	n
PV	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.hpp	/^namespace PV {$/;"	n
PV	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/UpdateFromCloneTest/src/TestConnProbe.hpp	/^namespace PV {$/;"	n
PV	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^namespace PV {$/;"	n	file:
PV	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.hpp	/^namespace PV {$/;"	n
PV	tests/test_constant_input/src/TestImage.cpp	/^namespace PV {$/;"	n	file:
PV	tests/test_constant_input/src/TestImage.hpp	/^namespace PV {$/;"	n
PVBufType	src/probes/LayerProbe.hpp	/^typedef enum { BufV, BufActivity } PVBufType;$/;"	t	namespace:PV	typeref:enum:PV::__anon3
PVCuda	src/arch/cuda/CudaBuffer.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/arch/cuda/CudaBuffer.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/arch/cuda/CudaDevice.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/arch/cuda/CudaDevice.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/arch/cuda/CudaKernel.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/arch/cuda/CudaKernel.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/arch/cuda/CudaTimer.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/arch/cuda/CudaTimer.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/arch/cuda/cuda_util.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/cudakernels/CudaRecvPost.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/cudakernels/CudaRecvPost.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/cudakernels/CudaRecvPre.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/cudakernels/CudaRecvPre.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^namespace PVCuda {$/;"	n
PVCuda	src/cudakernels/CudaUpdateStateFunctions.cpp	/^namespace PVCuda {$/;"	n	file:
PVCuda	src/cudakernels/CudaUpdateStateFunctions.hpp	/^namespace PVCuda {$/;"	n
PVDataType	src/include/pv_types.h	/^enum PVDataType {$/;"	g
PVHalo	src/include/PVLayerLoc.h	/^} PVHalo;$/;"	t	typeref:struct:PVHalo_
PVHalo_	src/include/PVLayerLoc.h	/^typedef struct PVHalo_ {$/;"	s
PVLAYERCUBE_H_	src/layers/PVLayerCube.hpp	9;"	d
PVLAYERLOC_H_	src/include/PVLayerLoc.h	6;"	d
PVLOG_HPP_	src/utils/PVLog.hpp	2;"	d
PVLayer	src/include/pv_types.h	/^} PVLayer;$/;"	t	typeref:struct:PVLayer_
PVLayerCube	src/include/pv_types.h	/^} PVLayerCube;$/;"	t	typeref:struct:PVLayerCube_
PVLayerCube_	src/include/pv_types.h	/^typedef struct PVLayerCube_ {$/;"	s
PVLayerLoc	src/include/PVLayerLoc.h	/^} PVLayerLoc;$/;"	t	typeref:struct:PVLayerLoc_
PVLayerLoc_	src/include/PVLayerLoc.h	/^typedef struct PVLayerLoc_ {$/;"	s
PVLayer_	src/include/pv_types.h	/^typedef struct PVLayer_ {$/;"	s
PVModule.addGroup	parameterWrapper/PVModule.lua	/^function PVModule.addGroup(parameterTable, newKey, group, overwrites)$/;"	f
PVModule.addMultiGroups	parameterWrapper/PVModule.lua	/^function PVModule.addMultiGroups(parameterTable, group)$/;"	f
PVModule.batchSweep	parameterWrapper/PVModule.lua	/^function PVModule.batchSweep(pvParams, group, param, values)$/;"	f
PVModule.createParamsFileString	parameterWrapper/PVModule.lua	/^function PVModule.createParamsFileString(parameterTable)$/;"	f
PVModule.deepCopy	parameterWrapper/PVModule.lua	/^function PVModule.deepCopy(obj, seen)$/;"	f
PVModule.paramSweep	parameterWrapper/PVModule.lua	/^function PVModule.paramSweep(pvParams, group, param, values)$/;"	f
PVModule.printConsole	parameterWrapper/PVModule.lua	/^function PVModule.printConsole(parameterTable)$/;"	f
PVPARAMS_HPP_	src/io/PVParams.hpp	9;"	d
PVP_ACT_FILE_TYPE	src/io/io.hpp	37;"	d
PVP_ACT_FILE_TYPE	tools/readpvpheader.c	49;"	d	file:
PVP_ACT_SPARSEVALUES_FILE_TYPE	src/io/io.hpp	45;"	d
PVP_ACT_SPARSEVALUES_FILE_TYPE	tools/readpvpheader.c	53;"	d	file:
PVP_FILE_TYPE	src/io/io.hpp	34;"	d
PVP_KERNEL_FILE_TYPE	src/io/io.hpp	43;"	d
PVP_KERNEL_FILE_TYPE	tools/readpvpheader.c	52;"	d	file:
PVP_NONSPIKING_ACT_FILE_TYPE	src/io/io.hpp	41;"	d
PVP_NONSPIKING_ACT_FILE_TYPE	tools/readpvpheader.c	51;"	d	file:
PVP_WGT_FILE_TYPE	src/io/io.hpp	39;"	d
PVP_WGT_FILE_TYPE	tools/readpvpheader.c	50;"	d	file:
PVParams	src/io/PVParams.cpp	/^PVParams::PVParams($/;"	f	class:PV::PVParams
PVParams	src/io/PVParams.cpp	/^PVParams::PVParams(const char *filename, size_t initialSize, Communicator *inIcComm) {$/;"	f	class:PV::PVParams
PVParams	src/io/PVParams.cpp	/^PVParams::PVParams(size_t initialSize, Communicator *inIcComm) {$/;"	f	class:PV::PVParams
PVParams	src/io/PVParams.hpp	/^class PVParams {$/;"	c	namespace:PV
PVPatch	src/cudakernels/CudaRecvPre.hpp	/^} PVPatch;$/;"	t	namespace:PVCuda	typeref:struct:PVCuda::PVPatch_
PVPatch	src/include/pv_types.h	/^} PVPatch __attribute__((aligned));$/;"	t	typeref:struct:PVPatch_
PVPatchStrideFields	src/include/pv_types.h	/^enum PVPatchStrideFields { PATCH_SX, PATCH_SY, PATCH_SF };$/;"	g
PVPatchStrides	src/include/pv_types.h	/^} PVPatchStrides;$/;"	t	typeref:struct:PVPatchStrides_
PVPatchStrides_	src/include/pv_types.h	/^typedef struct PVPatchStrides_ {$/;"	s
PVPatch_	src/cudakernels/CudaRecvPre.hpp	/^typedef struct PVPatch_ {$/;"	s	namespace:PVCuda
PVPatch_	src/include/pv_types.h	/^typedef struct PVPatch_ {$/;"	s
PVSubnets.addActivityMask	parameterWrapper/PVSubnets.lua	/^function PVSubnets.addActivityMask(args)$/;"	f
PVSubnets.addLCASubnet	parameterWrapper/PVSubnets.lua	/^function PVSubnets.addLCASubnet(args)$/;"	f
PVSubnets.addMaxPoolingLayer	parameterWrapper/PVSubnets.lua	/^function PVSubnets.addMaxPoolingLayer(args)$/;"	f
PVSubnets.addScaleValueConn	parameterWrapper/PVSubnets.lua	/^function PVSubnets.addScaleValueConn(args)$/;"	f
PVSubnets.backPropStep	parameterWrapper/PVSubnets.lua	/^function PVSubnets.backPropStep(args)$/;"	f
PVSubnets.deconvPath	parameterWrapper/PVSubnets.lua	/^function PVSubnets.deconvPath(args)$/;"	f
PVSubnets.singleLayerPerceptron	parameterWrapper/PVSubnets.lua	/^function PVSubnets.singleLayerPerceptron(args)$/;"	f
PV_ARCH_H	src/include/pv_arch.h	2;"	d
PV_BREAK	src/include/pv_common.h	22;"	d
PV_COMMON_H	src/include/pv_common.h	9;"	d
PV_CONTINUE	src/include/pv_common.h	24;"	d
PV_CORE_SRC_CONNECTIONS_RESCALECONN_HPP_	src/connections/RescaleConn.hpp	9;"	d
PV_ERR_FILE_NOT_FOUND	src/io/io.hpp	29;"	d
PV_FAILURE	src/include/pv_common.h	21;"	d
PV_FLOAT	src/include/pv_types.h	/^   PV_FLOAT = 0,$/;"	e	enum:PVDataType
PV_INIT_HPP_	src/columns/PV_Init.hpp	9;"	d
PV_INT	src/include/pv_types.h	/^   PV_INT   = 1,$/;"	e	enum:PVDataType
PV_Init	src/columns/PV_Init.cpp	/^PV_Init::PV_Init(int *argc, char **argv[], bool allowUnrecognizedArguments) {$/;"	f	class:PV::PV_Init
PV_Init	src/columns/PV_Init.hpp	/^class PV_Init {$/;"	c	namespace:PV
PV_MARGINWIDTH_FAILURE	src/include/pv_common.h	25;"	d
PV_Object	python/deprecated/max_pv_object.py	/^class PV_Object(list):$/;"	c
PV_PATH_MAX	src/include/pv_arch.h	8;"	d
PV_POSTPONE	src/include/pv_common.h	23;"	d
PV_SUCCESS	src/include/pv_common.h	20;"	d
PV_Stream	src/include/pv_types.h	/^} PV_Stream;$/;"	t	typeref:struct:PV_Stream_
PV_Stream_	src/include/pv_types.h	/^typedef struct PV_Stream_ {$/;"	s
PV_TYPES_H_	src/include/pv_types.h	9;"	d
PV_USE_CUDA	src/layers/HyPerLayer.hpp	30;"	d
PV_USE_CUDA	src/layers/HyPerLayer.hpp	32;"	d
PV_fclose	src/io/fileio.cpp	/^int PV_fclose(PV_Stream *pvstream) {$/;"	f	namespace:PV
PV_fopen	src/io/fileio.cpp	/^PV_Stream *PV_fopen(const char *path, const char *mode, bool verifyWrites) {$/;"	f	namespace:PV
PV_fread	src/io/fileio.cpp	/^size_t PV_fread(void *RESTRICT ptr, size_t size, size_t nitems, PV_Stream *RESTRICT pvstream) {$/;"	f	namespace:PV
PV_fseek	src/io/fileio.cpp	/^int PV_fseek(PV_Stream *pvstream, long offset, int whence) {$/;"	f	namespace:PV
PV_ftell	src/io/fileio.cpp	/^long int PV_ftell(PV_Stream *pvstream) {$/;"	f	namespace:PV
PV_ftell_primitive	src/io/fileio.cpp	/^long int PV_ftell_primitive(PV_Stream *pvstream) {$/;"	f	namespace:PV
PV_fwrite	src/io/fileio.cpp	/^PV_fwrite(const void *RESTRICT ptr, size_t size, size_t nitems, PV_Stream *RESTRICT pvstream) {$/;"	f	namespace:PV
PV_stat	src/io/fileio.cpp	/^int PV_stat(const char *path, struct stat *buf) {$/;"	f	namespace:PV
Param_Parser	python/param_draw.py	/^class Param_Parser(Param_Reader):$/;"	c
Param_Reader	python/param_draw.py	/^class Param_Reader(object):    $/;"	c
Parameter	src/io/PVParams.cpp	/^Parameter::Parameter(const char *name, double value) {$/;"	f	class:PV::Parameter
Parameter	src/io/PVParams.hpp	/^class Parameter {$/;"	c	namespace:PV
ParameterArray	src/io/PVParams.cpp	/^ParameterArray::ParameterArray(int initialSize) {$/;"	f	class:PV::ParameterArray
ParameterArray	src/io/PVParams.hpp	/^class ParameterArray {$/;"	c	namespace:PV
ParameterArrayStack	src/io/PVParams.cpp	/^ParameterArrayStack::ParameterArrayStack(int initialCount) {$/;"	f	class:PV::ParameterArrayStack
ParameterArrayStack	src/io/PVParams.hpp	/^class ParameterArrayStack {$/;"	c	namespace:PV
ParameterGroup	src/io/PVParams.cpp	/^ParameterGroup::ParameterGroup($/;"	f	class:PV::ParameterGroup
ParameterGroup	src/io/PVParams.hpp	/^class ParameterGroup {$/;"	c	namespace:PV
ParameterStack	src/io/PVParams.cpp	/^ParameterStack::ParameterStack(int maxCount) {$/;"	f	class:PV::ParameterStack
ParameterStack	src/io/PVParams.hpp	/^class ParameterStack {$/;"	c	namespace:PV
ParameterString	src/io/PVParams.cpp	/^ParameterString::ParameterString(const char *name, const char *value) {$/;"	f	class:PV::ParameterString
ParameterString	src/io/PVParams.hpp	/^class ParameterString {$/;"	c	namespace:PV
ParameterStringStack	src/io/PVParams.cpp	/^ParameterStringStack::ParameterStringStack(int initialCount) {$/;"	f	class:PV::ParameterStringStack
ParameterStringStack	src/io/PVParams.hpp	/^class ParameterStringStack {$/;"	c	namespace:PV
ParameterSweep	src/io/PVParams.cpp	/^ParameterSweep::ParameterSweep() {$/;"	f	class:PV::ParameterSweep
ParameterSweep	src/io/PVParams.hpp	/^class ParameterSweep {$/;"	c	namespace:PV
ParameterSweepTestProbe	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^ParameterSweepTestProbe::ParameterSweepTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ParameterSweepTestProbe
ParameterSweepTestProbe	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	/^class ParameterSweepTestProbe : public StatsProbe {$/;"	c	namespace:PV
Params	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   struct Params {$/;"	s	class:PVCuda::CudaPoolingDeliverKernel
ParamsIOFlag	src/io/io.hpp	/^enum ParamsIOFlag { PARAMS_IO_READ, PARAMS_IO_WRITE };$/;"	g	namespace:PV
PatchIDMethod	src/probes/BaseConnectionProbe.hpp	/^enum PatchIDMethod { INDEX_METHOD, COORDINATE_METHOD };$/;"	g
PlasticCloneConn	src/connections/PlasticCloneConn.cpp	/^PlasticCloneConn::PlasticCloneConn() { initialize_base(); }$/;"	f	class:PV::PlasticCloneConn
PlasticCloneConn	src/connections/PlasticCloneConn.cpp	/^PlasticCloneConn::PlasticCloneConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PlasticCloneConn
PlasticCloneConn	src/connections/PlasticCloneConn.hpp	/^class PlasticCloneConn : public CloneConn {$/;"	c	namespace:PV
PlasticConnTestLayer	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^PlasticConnTestLayer::PlasticConnTestLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::PlasticConnTestLayer
PlasticConnTestLayer	tests/PlasticConnTest/src/PlasticConnTestLayer.hpp	/^class PlasticConnTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
PlasticConnTestProbe	tests/PlasticConnTest/src/PlasticConnTestProbe.cpp	/^PlasticConnTestProbe::PlasticConnTestProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::PlasticConnTestProbe
PlasticConnTestProbe	tests/PlasticConnTest/src/PlasticConnTestProbe.hpp	/^class PlasticConnTestProbe : public KernelProbe {$/;"	c	namespace:PV
PlasticTestConn	tests/PlasticConnTest/src/PlasticTestConn.cpp	/^PlasticTestConn::PlasticTestConn(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::PlasticTestConn
PlasticTestConn	tests/PlasticConnTest/src/PlasticTestConn.hpp	/^class PlasticTestConn : public HyPerConn {$/;"	c	namespace:PV
PointLIFProbe	src/probes/PointLIFProbe.cpp	/^PointLIFProbe::PointLIFProbe() : PointProbe() {$/;"	f	class:PV::PointLIFProbe
PointLIFProbe	src/probes/PointLIFProbe.cpp	/^PointLIFProbe::PointLIFProbe(const char *probeName, HyPerCol *hc) : PointProbe() {$/;"	f	class:PV::PointLIFProbe
PointLIFProbe	src/probes/PointLIFProbe.hpp	/^class PointLIFProbe : public PointProbe {$/;"	c	namespace:PV
PointProbe	src/probes/PointProbe.cpp	/^PointProbe::PointProbe() {$/;"	f	class:PV::PointProbe
PointProbe	src/probes/PointProbe.cpp	/^PointProbe::PointProbe(const char *probeName, HyPerCol *hc) : LayerProbe() {$/;"	f	class:PV::PointProbe
PointProbe	src/probes/PointProbe.hpp	/^class PointProbe : public PV::LayerProbe {$/;"	c	namespace:PV
PoolingConn	src/connections/PoolingConn.cpp	/^PoolingConn::PoolingConn() { initialize_base(); }$/;"	f	class:PV::PoolingConn
PoolingConn	src/connections/PoolingConn.cpp	/^PoolingConn::PoolingConn(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::PoolingConn
PoolingConn	src/connections/PoolingConn.hpp	/^class PoolingConn : public HyPerConn {$/;"	c	namespace:PV
PoolingConnCheckpointerTestProbe	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^PoolingConnCheckpointerTestProbe::PoolingConnCheckpointerTestProbe($/;"	f	class:PoolingConnCheckpointerTestProbe
PoolingConnCheckpointerTestProbe	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^PoolingConnCheckpointerTestProbe::PoolingConnCheckpointerTestProbe() { initialize_base(); }$/;"	f	class:PoolingConnCheckpointerTestProbe
PoolingConnCheckpointerTestProbe	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^class PoolingConnCheckpointerTestProbe : public PV::ColProbe {$/;"	c
PoolingIndexLayer	src/layers/PoolingIndexLayer.cpp	/^PoolingIndexLayer::PoolingIndexLayer() { initialize_base(); }$/;"	f	class:PV::PoolingIndexLayer
PoolingIndexLayer	src/layers/PoolingIndexLayer.cpp	/^PoolingIndexLayer::PoolingIndexLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PoolingIndexLayer
PoolingIndexLayer	src/layers/PoolingIndexLayer.hpp	/^class PoolingIndexLayer : public HyPerLayer {$/;"	c	namespace:PV
PrepareCheckpointWriteMessage	src/checkpointing/CheckpointingMessages.hpp	/^   PrepareCheckpointWriteMessage(std::string const &directory) : mDirectory(directory) {$/;"	f	class:PV::PrepareCheckpointWriteMessage
PrepareCheckpointWriteMessage	src/checkpointing/CheckpointingMessages.hpp	/^class PrepareCheckpointWriteMessage : public BaseMessage {$/;"	c	namespace:PV
PrintStream	src/io/PrintStream.hpp	/^   PrintStream() {}$/;"	f	class:PV::PrintStream
PrintStream	src/io/PrintStream.hpp	/^   PrintStream(std::ostream &stream) { setOutStream(stream); }$/;"	f	class:PV::PrintStream
PrintStream	src/io/PrintStream.hpp	/^class PrintStream {$/;"	c	namespace:PV
ProcessCheckpointReadMessage	src/checkpointing/CheckpointingMessages.hpp	/^   ProcessCheckpointReadMessage(std::string const &directory) : mDirectory(directory) {$/;"	f	class:PV::ProcessCheckpointReadMessage
ProcessCheckpointReadMessage	src/checkpointing/CheckpointingMessages.hpp	/^class ProcessCheckpointReadMessage : public BaseMessage {$/;"	c	namespace:PV
PtwiseProductLayer	src/layers/PtwiseProductLayer.cpp	/^PtwiseProductLayer::PtwiseProductLayer() { initialize_base(); }$/;"	f	class:PV::PtwiseProductLayer
PtwiseProductLayer	src/layers/PtwiseProductLayer.cpp	/^PtwiseProductLayer::PtwiseProductLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PtwiseProductLayer
PtwiseProductLayer	src/layers/PtwiseProductLayer.hpp	/^class PtwiseProductLayer : public ANNLayer {$/;"	c	namespace:PV
PtwiseQuotientLayer	src/layers/PtwiseQuotientLayer.cpp	/^PtwiseQuotientLayer::PtwiseQuotientLayer() { initialize_base(); }$/;"	f	class:PV::PtwiseQuotientLayer
PtwiseQuotientLayer	src/layers/PtwiseQuotientLayer.cpp	/^PtwiseQuotientLayer::PtwiseQuotientLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PtwiseQuotientLayer
PtwiseQuotientLayer	src/layers/PtwiseQuotientLayer.hpp	/^class PtwiseQuotientLayer : public ANNLayer {$/;"	c	namespace:PV
Publisher	src/columns/Publisher.cpp	/^Publisher::Publisher(Communicator *comm, PVLayerCube *cube, int numLevels, bool isSparse) {$/;"	f	class:PV::Publisher
Publisher	src/columns/Publisher.hpp	/^class Publisher {$/;"	c	namespace:PV
PvpLayer	src/layers/PvpLayer.cpp	/^PvpLayer::PvpLayer(const char *name, HyPerCol *hc) { initialize(name, hc); }$/;"	f	class:PV::PvpLayer
PvpLayer	src/layers/PvpLayer.hpp	/^   PvpLayer() {}$/;"	f	class:PV::PvpLayer
PvpLayer	src/layers/PvpLayer.hpp	/^class PvpLayer : public InputLayer {$/;"	c	namespace:PV
QUOTIENTCOLPROBE_HPP_	src/probes/QuotientColProbe.hpp	9;"	d
QuotientColProbe	src/probes/QuotientColProbe.cpp	/^QuotientColProbe::QuotientColProbe()$/;"	f	class:PV::QuotientColProbe
QuotientColProbe	src/probes/QuotientColProbe.cpp	/^QuotientColProbe::QuotientColProbe(const char *probename, HyPerCol *hc) : ColProbe() {$/;"	f	class:PV::QuotientColProbe
QuotientColProbe	src/probes/QuotientColProbe.hpp	/^class QuotientColProbe : public ColProbe {$/;"	c	namespace:PV
RANDOM	src/components/BatchIndexer.hpp	/^   enum BatchMethod { BYFILE, BYLIST, BYSPECIFIED, RANDOM };$/;"	e	enum:PV::BatchIndexer::BatchMethod
RANDOMSEED_HPP_	src/columns/RandomSeed.hpp	9;"	d
RANDOM_HPP_	src/columns/Random.hpp	22;"	d
RECEIVEFROMPOSTPROBE_HPP_	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.hpp	7;"	d
REFRACTORY_PERIOD	src/include/default_params.h	45;"	d
REQUIREALLZEROACTIVITYPROBE_HPP_	src/probes/RequireAllZeroActivityProbe.hpp	18;"	d
RESCALELAYERTESTPROBE_HPP_	tests/RescaleLayerTest/src/RescaleLayerTestProbe.hpp	9;"	d
RESCALELAYER_HPP_	src/layers/RescaleLayer.hpp	7;"	d
RESETSTATEONTRIGGERTESTPROBE_HPP_	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	2;"	d
RESETSTATE_TRIGGER	src/layers/HyPerLayer.hpp	/^   RESETSTATE_TRIGGER$/;"	e	enum:PV::TriggerBehaviorTypeEnum
RESIZE_ARRAY_INCR	src/include/pv_common.h	46;"	d
RESTRICT	src/include/pv_arch.h	12;"	d
RETINA_HPP_	src/layers/Retina.hpp	9;"	d
RINGBUFFER_HPP_	src/structures/RingBuffer.hpp	9;"	d
RMAX_COCIRC	src/include/default_params.h	32;"	d
RMAX_EDGE	src/include/default_params.h	30;"	d
RMAX_FEEDBACK	src/include/default_params.h	34;"	d
RUNNINGAVERAGELAYER_HPP_	src/layers/RunningAverageLayer.hpp	10;"	d
Random	src/columns/Random.cpp	/^Random::Random() {$/;"	f	class:PV::Random
Random	src/columns/Random.cpp	/^Random::Random(const PVLayerLoc *locptr, bool isExtended) {$/;"	f	class:PV::Random
Random	src/columns/Random.cpp	/^Random::Random(int count) {$/;"	f	class:PV::Random
Random	src/columns/Random.hpp	/^class Random {$/;"	c	namespace:PV
RandomSeed	src/columns/RandomSeed.cpp	/^RandomSeed::RandomSeed() {$/;"	f	class:PV::RandomSeed
RandomSeed	src/columns/RandomSeed.hpp	/^class RandomSeed {$/;"	c	namespace:PV
ReadStateFromCheckpointMessage	src/columns/Messages.hpp	/^   ReadStateFromCheckpointMessage(T *dataRegistry) {$/;"	f	class:PV::ReadStateFromCheckpointMessage
ReadStateFromCheckpointMessage	src/columns/Messages.hpp	/^class ReadStateFromCheckpointMessage : public BaseMessage {$/;"	c	namespace:PV
ReceiveFromPostProbe	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^ReceiveFromPostProbe::ReceiveFromPostProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::ReceiveFromPostProbe
ReceiveFromPostProbe	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.hpp	/^class ReceiveFromPostProbe : public PV::StatsProbe {$/;"	c	namespace:PV
Rectangle	demos/HeatMapLocalization/src/BBFind.hpp	/^      class Rectangle$/;"	c	class:BBFind
Rectangles	demos/HeatMapLocalization/src/BBFind.hpp	/^      typedef vector< list<Rectangle> >         Rectangles; \/\/ [feature][rectangles]$/;"	t	class:BBFind
RegisterDataMessage	src/columns/Messages.hpp	/^   RegisterDataMessage(T *dataRegistry) {$/;"	f	class:PV::RegisterDataMessage
RegisterDataMessage	src/columns/Messages.hpp	/^class RegisterDataMessage : public BaseMessage {$/;"	c	namespace:PV
RequireAllZeroActivityProbe	src/probes/RequireAllZeroActivityProbe.cpp	/^RequireAllZeroActivityProbe::RequireAllZeroActivityProbe() { initialize_base(); }$/;"	f	class:PV::RequireAllZeroActivityProbe
RequireAllZeroActivityProbe	src/probes/RequireAllZeroActivityProbe.cpp	/^RequireAllZeroActivityProbe::RequireAllZeroActivityProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::RequireAllZeroActivityProbe
RequireAllZeroActivityProbe	src/probes/RequireAllZeroActivityProbe.hpp	/^class RequireAllZeroActivityProbe : public PV::StatsProbe {$/;"	c	namespace:PV
RescaleConn	src/connections/RescaleConn.cpp	/^RescaleConn::RescaleConn() { initialize_base(); }$/;"	f	class:PV::RescaleConn
RescaleConn	src/connections/RescaleConn.cpp	/^RescaleConn::RescaleConn(char const *name, HyPerCol *hc) {$/;"	f	class:PV::RescaleConn
RescaleConn	src/connections/RescaleConn.hpp	/^class RescaleConn : public IdentConn {$/;"	c	namespace:PV
RescaleLayer	src/layers/RescaleLayer.cpp	/^RescaleLayer::RescaleLayer() { initialize_base(); }$/;"	f	class:PV::RescaleLayer
RescaleLayer	src/layers/RescaleLayer.cpp	/^RescaleLayer::RescaleLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::RescaleLayer
RescaleLayer	src/layers/RescaleLayer.hpp	/^class RescaleLayer : public CloneVLayer {$/;"	c	namespace:PV
RescaleLayerTestProbe	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^RescaleLayerTestProbe::RescaleLayerTestProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::RescaleLayerTestProbe
RescaleLayerTestProbe	tests/RescaleLayerTest/src/RescaleLayerTestProbe.hpp	/^class RescaleLayerTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
RescaleMethod	src/utils/BufferUtilsRescale.hpp	/^enum RescaleMethod { CROP, PAD };$/;"	g	namespace:PV::BufferUtils
ResetStateOnTriggerTestProbe	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^ResetStateOnTriggerTestProbe::ResetStateOnTriggerTestProbe($/;"	f	class:ResetStateOnTriggerTestProbe
ResetStateOnTriggerTestProbe	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^ResetStateOnTriggerTestProbe::ResetStateOnTriggerTestProbe() { initialize_base(); }$/;"	f	class:ResetStateOnTriggerTestProbe
ResetStateOnTriggerTestProbe	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	/^class ResetStateOnTriggerTestProbe : public PV::LayerProbe {$/;"	c
Retina	src/layers/Retina.cpp	/^Retina::Retina() {$/;"	f	class:PV::Retina
Retina	src/layers/Retina.cpp	/^Retina::Retina(const char *name, HyPerCol *hc) {$/;"	f	class:PV::Retina
Retina	src/layers/Retina.hpp	/^class Retina : public PV::HyPerLayer {$/;"	c	namespace:PV
Retina_nonspiking_update_state	src/layers/Retina.cpp	/^void Retina_nonspiking_update_state($/;"	f
Retina_params	src/layers/Retina.hpp	/^struct Retina_params {$/;"	s
Retina_spiking_update_state	src/layers/Retina.cpp	/^void Retina_spiking_update_state($/;"	f
RingBuffer	src/structures/RingBuffer.hpp	/^   RingBuffer(int numLevels, int numItems, T initialValue = (T)0) {$/;"	f	class:PV::RingBuffer
RingBuffer	src/structures/RingBuffer.hpp	/^class RingBuffer {$/;"	c	namespace:PV
RunningAverageLayer	src/layers/RunningAverageLayer.cpp	/^RunningAverageLayer::RunningAverageLayer() { initialize_base(); }$/;"	f	class:PV::RunningAverageLayer
RunningAverageLayer	src/layers/RunningAverageLayer.cpp	/^RunningAverageLayer::RunningAverageLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::RunningAverageLayer
RunningAverageLayer	src/layers/RunningAverageLayer.hpp	/^class RunningAverageLayer : public CloneVLayer {$/;"	c	namespace:PV
SADDLE_FLAG	src/weightinit/InitCocircWeightsParams.hpp	/^   bool SADDLE_FLAG; \/\/ handle saddle points separately$/;"	m	class:PV::InitCocircWeightsParams
SECOND	src/checkpointing/Checkpointer.hpp	/^   enum WallClockUnit { SECOND, MINUTE, HOUR, DAY };$/;"	e	enum:PV::Checkpointer::WallClockUnit
SEGMENTIFYTEST_HPP_	tests/SegmentTest/src/SegmentifyTest.hpp	2;"	d
SEGMENTIFY_HPP_	src/layers/Segmentify.hpp	2;"	d
SEGMENTLAYER_HPP_	src/layers/SegmentLayer.hpp	2;"	d
SEGMENTTESTLAYER_HPP_	tests/SegmentTest/src/SegmentTestLayer.hpp	2;"	d
SHRUNKENPATCHTESTLAYER_HPP_	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.hpp	9;"	d
SHRUNKENPATCHTESTPROBE_HPP_	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	9;"	d
SHUFFLELAYER_HPP_	src/layers/ShuffleLayer.hpp	11;"	d
SIGMA_DIST_COCIRC	src/include/default_params.h	33;"	d
SIGMA_DIST_FEEDBACK	src/include/default_params.h	35;"	d
SIGMA_EDGE	src/include/default_params.h	31;"	d
SIGMOIDALPHA	src/include/default_params.h	53;"	d
SIGMOIDFLAG	src/include/default_params.h	52;"	d
SIGMOIDLAYER_HPP_	src/layers/SigmoidLayer.hpp	10;"	d
SIMTIME	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode { NONE, STEP, SIMTIME, WALLCLOCK };$/;"	e	enum:PV::Checkpointer::CheckpointWriteTriggerMode
SOUTH	src/columns/Communicator.hpp	/^   static const int SOUTH     = 7;$/;"	m	class:PV::Communicator
SOUTH	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
SOUTH	src/utils/BorderExchange.hpp	/^   static int const SOUTH     = 7;$/;"	m	class:PV::BorderExchange
SOUTHEAST	src/columns/Communicator.hpp	/^   static const int SOUTHEAST = 8;$/;"	m	class:PV::Communicator
SOUTHEAST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
SOUTHEAST	src/utils/BorderExchange.hpp	/^   static int const SOUTHEAST = 8;$/;"	m	class:PV::BorderExchange
SOUTHWEST	src/columns/Communicator.hpp	/^   static const int SOUTHWEST = 6;$/;"	m	class:PV::Communicator
SOUTHWEST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
SOUTHWEST	src/utils/BorderExchange.hpp	/^   static int const SOUTHWEST = 6;$/;"	m	class:PV::BorderExchange
SRC_CONVERTFROMTABLE_HPP_	demos/HeatMapLocalization/src/ConvertFromTable.hpp	9;"	d
STATSPROBE_HPP_	src/probes/StatsProbe.hpp	9;"	d
STBIDEF	src/io/stb_image.h	413;"	d
STBIDEF	src/io/stb_image.h	415;"	d
STBIWDEF	src/io/stb_image_write.h	128;"	d
STBIWDEF	src/io/stb_image_write.h	130;"	d
STBIW_ASSERT	src/io/stb_image_write.h	227;"	d
STBIW_FREE	src/io/stb_image_write.h	214;"	d
STBIW_MALLOC	src/io/stb_image_write.h	212;"	d
STBIW_MEMMOVE	src/io/stb_image_write.h	222;"	d
STBIW_REALLOC	src/io/stb_image_write.h	213;"	d
STBIW_REALLOC_SIZED	src/io/stb_image_write.h	218;"	d
STBIW_UCHAR	src/io/stb_image_write.h	230;"	d
STBI_ASSERT	src/io/stb_image.h	599;"	d
STBI_FREE	src/io/stb_image.h	658;"	d
STBI_HAS_LROTL	src/io/stb_image.h	635;"	d
STBI_INCLUDE_STB_IMAGE_H	src/io/stb_image.h	220;"	d
STBI_MALLOC	src/io/stb_image.h	656;"	d
STBI_NEON	src/io/stb_image.h	747;"	d
STBI_NOTUSED	src/io/stb_image.h	629;"	d
STBI_NOTUSED	src/io/stb_image.h	631;"	d
STBI_NO_BMP	src/io/stb_image.h	558;"	d
STBI_NO_GIF	src/io/stb_image.h	567;"	d
STBI_NO_HDR	src/io/stb_image.h	570;"	d
STBI_NO_JPEG	src/io/stb_image.h	552;"	d
STBI_NO_PIC	src/io/stb_image.h	573;"	d
STBI_NO_PNG	src/io/stb_image.h	555;"	d
STBI_NO_PNM	src/io/stb_image.h	576;"	d
STBI_NO_PSD	src/io/stb_image.h	561;"	d
STBI_NO_SIMD	src/io/stb_image.h	679;"	d
STBI_NO_SIMD	src/io/stb_image.h	695;"	d
STBI_NO_TGA	src/io/stb_image.h	564;"	d
STBI_NO_ZLIB	src/io/stb_image.h	581;"	d
STBI_REALLOC	src/io/stb_image.h	657;"	d
STBI_REALLOC_SIZED	src/io/stb_image.h	662;"	d
STBI_SIMD_ALIGN	src/io/stb_image.h	723;"	d
STBI_SIMD_ALIGN	src/io/stb_image.h	730;"	d
STBI_SIMD_ALIGN	src/io/stb_image.h	753;"	d
STBI_SIMD_ALIGN	src/io/stb_image.h	757;"	d
STBI_SSE2	src/io/stb_image.h	699;"	d
STBI_VERSION	src/io/stb_image.h	395;"	d
STBI__BYTECAST	src/io/stb_image.h	1309;"	d
STBI__F_avg	src/io/stb_image.h	/^   STBI__F_avg   = 3,$/;"	e	enum:__anon16
STBI__F_avg_first	src/io/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon16
STBI__F_none	src/io/stb_image.h	/^   STBI__F_none  = 0,$/;"	e	enum:__anon16
STBI__F_paeth	src/io/stb_image.h	/^   STBI__F_paeth = 4,$/;"	e	enum:__anon16
STBI__F_paeth_first	src/io/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon16
STBI__F_sub	src/io/stb_image.h	/^   STBI__F_sub   = 1,$/;"	e	enum:__anon16
STBI__F_up	src/io/stb_image.h	/^   STBI__F_up    = 2,$/;"	e	enum:__anon16
STBI__HDR_BUFLEN	src/io/stb_image.h	6693;"	d
STBI__IDCT_1D	src/io/stb_image.h	2053;"	d
STBI__MARKER_none	src/io/stb_image.h	2592;"	d
STBI__PNG_TYPE	src/io/stb_image.h	4880;"	d
STBI__RESTART	src/io/stb_image.h	2613;"	d
STBI__SCAN_header	src/io/stb_image.h	/^enum { STBI__SCAN_load = 0, STBI__SCAN_type, STBI__SCAN_header };$/;"	e	enum:__anon7
STBI__SCAN_load	src/io/stb_image.h	/^enum { STBI__SCAN_load = 0, STBI__SCAN_type, STBI__SCAN_header };$/;"	e	enum:__anon7
STBI__SCAN_type	src/io/stb_image.h	/^enum { STBI__SCAN_load = 0, STBI__SCAN_type, STBI__SCAN_header };$/;"	e	enum:__anon7
STBI__X64_TARGET	src/io/stb_image.h	667;"	d
STBI__X86_TARGET	src/io/stb_image.h	669;"	d
STBI__ZFAST_BITS	src/io/stb_image.h	3824;"	d
STBI__ZFAST_MASK	src/io/stb_image.h	3825;"	d
STBI_default	src/io/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon4
STBI_grey	src/io/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon4
STBI_grey_alpha	src/io/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon4
STBI_rgb	src/io/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon4
STBI_rgb_alpha	src/io/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon4
STB_IMAGE_IMPLEMENTATION	src/structures/Image.cpp	7;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/structures/Image.cpp	11;"	d	file:
STEP	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode { NONE, STEP, SIMTIME, WALLCLOCK };$/;"	e	enum:PV::Checkpointer::CheckpointWriteTriggerMode
STOCHASTIC	src/connections/HyPerConn.hpp	/^   enum AccumulateType { UNDEFINED, CONVOLVE, STOCHASTIC };$/;"	e	enum:PV::HyPerConn::AccumulateType
STOCHASTICRELEASETESTPROBE_HPP_	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	9;"	d
SUBJECT_HPP_	src/observerpattern/Subject.hpp	9;"	d
SUM	src/connections/PoolingConn.hpp	/^   enum AccumulateType { UNDEFINED, MAX, SUM, AVG };$/;"	e	enum:PV::PoolingConn::AccumulateType
SUMPOOLTESTINPUTLAYER_HPP_	tests/SumPoolTest/src/SumPoolTestInputLayer.hpp	2;"	d
SUMPOOLTESTLAYER_HPP_	tests/SumPoolTest/src/SumPoolTestLayer.hpp	2;"	d
SWEEP_NUMBER	src/io/PVParams.hpp	/^enum SweepType { SWEEP_UNDEF = 0, SWEEP_NUMBER = 1, SWEEP_STRING = 2 };$/;"	e	enum:PV::SweepType
SWEEP_STRING	src/io/PVParams.hpp	/^enum SweepType { SWEEP_UNDEF = 0, SWEEP_NUMBER = 1, SWEEP_STRING = 2 };$/;"	e	enum:PV::SweepType
SWEEP_UNDEF	src/io/PVParams.hpp	/^enum SweepType { SWEEP_UNDEF = 0, SWEEP_NUMBER = 1, SWEEP_STRING = 2 };$/;"	e	enum:PV::SweepType
SegmentLayer	src/layers/SegmentLayer.cpp	/^SegmentLayer::SegmentLayer() {$/;"	f	class:PV::SegmentLayer
SegmentLayer	src/layers/SegmentLayer.cpp	/^SegmentLayer::SegmentLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SegmentLayer
SegmentLayer	src/layers/SegmentLayer.hpp	/^class SegmentLayer : public PV::HyPerLayer {$/;"	c	namespace:PV
SegmentTestLayer	tests/SegmentTest/src/SegmentTestLayer.cpp	/^SegmentTestLayer::SegmentTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SegmentTestLayer
SegmentTestLayer	tests/SegmentTest/src/SegmentTestLayer.hpp	/^class SegmentTestLayer : public PV::SegmentLayer {$/;"	c	namespace:PV
Segmentify	src/layers/Segmentify.cpp	/^Segmentify::Segmentify() {$/;"	f	class:PV::Segmentify
Segmentify	src/layers/Segmentify.cpp	/^Segmentify::Segmentify(const char *name, HyPerCol *hc) {$/;"	f	class:PV::Segmentify
Segmentify	src/layers/Segmentify.hpp	/^class Segmentify : public PV::HyPerLayer {$/;"	c	namespace:PV
SegmentifyTest	tests/SegmentTest/src/SegmentifyTest.cpp	/^SegmentifyTest::SegmentifyTest(const char *name, HyPerCol *hc) { Segmentify::initialize(name, hc); }$/;"	f	class:PV::SegmentifyTest
SegmentifyTest	tests/SegmentTest/src/SegmentifyTest.hpp	/^class SegmentifyTest : public PV::Segmentify {$/;"	c	namespace:PV
ShrunkenPatchTestLayer	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^ShrunkenPatchTestLayer::ShrunkenPatchTestLayer(const char *name, HyPerCol *hc) : ANNLayer() {$/;"	f	class:PV::ShrunkenPatchTestLayer
ShrunkenPatchTestLayer	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.hpp	/^class ShrunkenPatchTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
ShrunkenPatchTestProbe	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^ShrunkenPatchTestProbe::ShrunkenPatchTestProbe(const char *probename, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::ShrunkenPatchTestProbe
ShrunkenPatchTestProbe	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^class ShrunkenPatchTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
ShuffleLayer	src/layers/ShuffleLayer.cpp	/^ShuffleLayer::ShuffleLayer() { initialize_base(); }$/;"	f	class:PV::ShuffleLayer
ShuffleLayer	src/layers/ShuffleLayer.cpp	/^ShuffleLayer::ShuffleLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ShuffleLayer
ShuffleLayer	src/layers/ShuffleLayer.hpp	/^class ShuffleLayer : public CloneVLayer {$/;"	c	namespace:PV
SigmoidAlpha	src/layers/SigmoidLayer.hpp	/^   float SigmoidAlpha;$/;"	m	class:PV::SigmoidLayer
SigmoidFlag	src/layers/SigmoidLayer.hpp	/^   bool SigmoidFlag;$/;"	m	class:PV::SigmoidLayer
SigmoidLayer	src/layers/SigmoidLayer.cpp	/^SigmoidLayer::SigmoidLayer() { initialize_base(); }$/;"	f	class:PV::SigmoidLayer
SigmoidLayer	src/layers/SigmoidLayer.cpp	/^SigmoidLayer::SigmoidLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SigmoidLayer
SigmoidLayer	src/layers/SigmoidLayer.hpp	/^class SigmoidLayer : public CloneVLayer {$/;"	c	namespace:PV
SparseFileTable	src/utils/BufferUtilsPvp.hpp	/^struct SparseFileTable {$/;"	s	namespace:PV::BufferUtils
SparseList	src/structures/SparseList.hpp	/^   SparseList() {}$/;"	f	class:PV::SparseList
SparseList	src/structures/SparseList.hpp	/^   SparseList(const Buffer<T> &source, T zeroVal) { fromBuffer(source, zeroVal); }$/;"	f	class:PV::SparseList
SparseList	src/structures/SparseList.hpp	/^class SparseList {$/;"	c	namespace:PV
SparseWeightInfo	src/connections/HyPerConn.hpp	/^struct SparseWeightInfo {$/;"	s	namespace:PV
StackTrace	src/utils/PVLog.hpp	/^typedef Log<char, StackTraceType> StackTrace;$/;"	t	namespace:PV
StackTrace	src/utils/PVLog.hpp	49;"	d
StackTraceType	src/utils/PVLog.hpp	/^typedef LogType<LogStackTraceType> StackTraceType;$/;"	t	namespace:PV
StatsProbe	src/probes/StatsProbe.cpp	/^StatsProbe::StatsProbe() : LayerProbe() {$/;"	f	class:PV::StatsProbe
StatsProbe	src/probes/StatsProbe.cpp	/^StatsProbe::StatsProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::StatsProbe
StatsProbe	src/probes/StatsProbe.hpp	/^class StatsProbe : public PV::LayerProbe {$/;"	c	namespace:PV
StochasticReleaseTestProbe	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^StochasticReleaseTestProbe::StochasticReleaseTestProbe() { initialize_base(); }$/;"	f	class:PV::StochasticReleaseTestProbe
StochasticReleaseTestProbe	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^StochasticReleaseTestProbe::StochasticReleaseTestProbe(const char *name, HyPerCol *hc) {$/;"	f	class:PV::StochasticReleaseTestProbe
StochasticReleaseTestProbe	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^class StochasticReleaseTestProbe : public PV::StatsProbe {$/;"	c	namespace:PV
StrFunc	src/utils/PVLog.hpp	/^   typedef std::basic_ostream<C, T> &(*StrFunc)(std::basic_ostream<C, T> &);$/;"	t	class:PV::LogStreamTraits::std
Subject	src/observerpattern/Subject.hpp	/^   Subject() {}$/;"	f	class:PV::Subject
Subject	src/observerpattern/Subject.hpp	/^class Subject {$/;"	c	namespace:PV
SumPoolTestInputLayer	tests/SumPoolTest/src/SumPoolTestInputLayer.cpp	/^SumPoolTestInputLayer::SumPoolTestInputLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SumPoolTestInputLayer
SumPoolTestInputLayer	tests/SumPoolTest/src/SumPoolTestInputLayer.hpp	/^class SumPoolTestInputLayer : public PV::ANNLayer {$/;"	c	namespace:PV
SumPoolTestLayer	tests/SumPoolTest/src/SumPoolTestLayer.cpp	/^SumPoolTestLayer::SumPoolTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SumPoolTestLayer
SumPoolTestLayer	tests/SumPoolTest/src/SumPoolTestLayer.hpp	/^class SumPoolTestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
SweepType	src/io/PVParams.hpp	/^enum SweepType { SWEEP_UNDEF = 0, SWEEP_NUMBER = 1, SWEEP_STRING = 2 };$/;"	g	namespace:PV
TAUSWORTHE	src/utils/cl_random.c	85;"	d	file:
TAUS_UINT4	src/utils/BufferUtilsPvp.hpp	/^   TAUS_UINT4 = 5,$/;"	e	enum:PV::BufferUtils::HeaderDataTypeEnum
TAU_EXC	src/include/default_params.h	18;"	d
TAU_INH	src/include/default_params.h	19;"	d
TAU_INHB	src/include/default_params.h	20;"	d
TAU_RATE	src/include/default_params.h	22;"	d
TAU_VMEM	src/include/default_params.h	17;"	d
TAU_VTH	src/include/default_params.h	24;"	d
TAU_VTHREST	src/include/default_params.h	25;"	d
TAU_WMAX	src/include/default_params.h	23;"	d
TESTCONNPROBE_HPP_	tests/UpdateFromCloneTest/src/TestConnProbe.hpp	7;"	d
TESTDATANOBROADCAST_HPP_	tests/CheckpointEntryTest/src/testDataNoBroadcast.hpp	2;"	d
TESTDATAWITHBROADCAST_HPP_	tests/CheckpointEntryTest/src/testDataWithBroadcast.hpp	2;"	d
TESTIMAGE_HPP_	tests/test_constant_input/src/TestImage.hpp	9;"	d
TESTNOTALWAYSALLZEROSPROBE_HPP_	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.hpp	2;"	d
TESTPOINTPROBE_HPP_	tests/PointProbeTest/src/TestPointProbe.hpp	7;"	d
TESTPVPBATCH_HPP_	tests/CheckpointEntryTest/src/testPvpBatch.hpp	2;"	d
TESTPVPEXTENDED_HPP_	tests/CheckpointEntryTest/src/testPvpExtended.hpp	2;"	d
TESTPVPRESTRICTED_HPP_	tests/CheckpointEntryTest/src/testPvpRestricted.hpp	2;"	d
TESTSEPARATEDNAME_HPP_	tests/CheckpointEntryTest/src/testSeparatedName.hpp	2;"	d
TEXTFILEBUFFERSIZE	demos/HeatMapLocalization/src/main.cpp	23;"	d	file:
TIMER_HPP_	src/utils/Timer.hpp	10;"	d
TIMER_ON	src/columns/HyPerCol.cpp	8;"	d	file:
TRANSPOSECONN_HPP_	src/connections/TransposeConn.hpp	9;"	d
TRANSPOSEPOOLINGCONN_HPP_	src/connections/TransposePoolingConn.hpp	9;"	d
TRIGGERTESTCONN_HPP_	tests/TriggerTest/src/TriggerTestConn.hpp	7;"	d
TRIGGERTESTLAYERPROBE_HPP_	tests/TriggerTest/src/TriggerTestLayerProbe.hpp	7;"	d
TRIGGERTESTLAYER_HPP_	tests/TriggerTest/src/TriggerTestLayer.hpp	7;"	d
TestConnProbe	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^TestConnProbe::TestConnProbe() { initialize_base(); }$/;"	f	class:PV::TestConnProbe
TestConnProbe	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^TestConnProbe::TestConnProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::TestConnProbe
TestConnProbe	tests/UpdateFromCloneTest/src/TestConnProbe.hpp	/^class TestConnProbe : public BaseHyPerConnProbe {$/;"	c	namespace:PV
TestImage	tests/test_constant_input/src/TestImage.cpp	/^TestImage::TestImage() { initialize_base(); }$/;"	f	class:PV::TestImage
TestImage	tests/test_constant_input/src/TestImage.cpp	/^TestImage::TestImage(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TestImage
TestImage	tests/test_constant_input/src/TestImage.hpp	/^class TestImage : public HyPerLayer {$/;"	c	namespace:PV
TestLayer	tests/ImprintConnTest/src/TestLayer.cpp	/^TestLayer::TestLayer(const char *name, HyPerCol *hc) { ANNLayer::initialize(name, hc); }$/;"	f	class:PV::TestLayer
TestLayer	tests/ImprintConnTest/src/TestLayer.hpp	/^class TestLayer : public PV::ANNLayer {$/;"	c	namespace:PV
TestNotAlwaysAllZerosProbe	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^TestNotAlwaysAllZerosProbe::TestNotAlwaysAllZerosProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::TestNotAlwaysAllZerosProbe
TestNotAlwaysAllZerosProbe	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.hpp	/^class TestNotAlwaysAllZerosProbe : public StatsProbe {$/;"	c	namespace:PV
TestPointProbe	tests/PointProbeTest/src/TestPointProbe.cpp	/^TestPointProbe::TestPointProbe() {$/;"	f	class:PV::TestPointProbe
TestPointProbe	tests/PointProbeTest/src/TestPointProbe.cpp	/^TestPointProbe::TestPointProbe(const char *probeName, HyPerCol *hc) : PointProbe() {$/;"	f	class:PV::TestPointProbe
TestPointProbe	tests/PointProbeTest/src/TestPointProbe.hpp	/^class TestPointProbe : public PV::PointProbe {$/;"	c	namespace:PV
TextOutput	src/checkpointing/CheckpointEntryData.hpp	/^namespace TextOutput {$/;"	n	namespace:PV
TimeInfo	src/checkpointing/Checkpointer.hpp	/^   struct TimeInfo {$/;"	s	class:PV::Checkpointer
TimeScaleInfo	src/components/AdaptiveTimeScaleController.hpp	/^   struct TimeScaleInfo {$/;"	s	class:PV::AdaptiveTimeScaleController
Timer	src/utils/Timer.cpp	/^Timer::Timer(const char *objname, const char *objtype, const char *timertype, double init_time) {$/;"	f	class:PV::Timer
Timer	src/utils/Timer.cpp	/^Timer::Timer(const char *timermessage, double init_time) {$/;"	f	class:PV::Timer
Timer	src/utils/Timer.cpp	/^Timer::Timer(double init_time) {$/;"	f	class:PV::Timer
Timer	src/utils/Timer.hpp	/^class Timer {$/;"	c	namespace:PV
TransposeConn	src/connections/TransposeConn.cpp	/^TransposeConn::TransposeConn() { initialize_base(); } \/\/ TransposeConn::~TransposeConn()$/;"	f	class:PV::TransposeConn
TransposeConn	src/connections/TransposeConn.cpp	/^TransposeConn::TransposeConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TransposeConn
TransposeConn	src/connections/TransposeConn.hpp	/^class TransposeConn : public HyPerConn {$/;"	c	namespace:PV
TransposePoolingConn	src/connections/TransposePoolingConn.cpp	/^TransposePoolingConn::TransposePoolingConn() {$/;"	f	class:PV::TransposePoolingConn
TransposePoolingConn	src/connections/TransposePoolingConn.cpp	/^TransposePoolingConn::TransposePoolingConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TransposePoolingConn
TransposePoolingConn	src/connections/TransposePoolingConn.hpp	/^class TransposePoolingConn : public HyPerConn {$/;"	c	namespace:PV
TriggerBehaviorType	src/layers/HyPerLayer.hpp	/^} TriggerBehaviorType;$/;"	t	namespace:PV	typeref:enum:PV::TriggerBehaviorTypeEnum
TriggerBehaviorTypeEnum	src/layers/HyPerLayer.hpp	/^typedef enum TriggerBehaviorTypeEnum {$/;"	g	namespace:PV
TriggerTestConn	tests/TriggerTest/src/TriggerTestConn.cpp	/^TriggerTestConn::TriggerTestConn(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TriggerTestConn
TriggerTestConn	tests/TriggerTest/src/TriggerTestConn.hpp	/^class TriggerTestConn : public PV::HyPerConn {$/;"	c	namespace:PV
TriggerTestLayer	tests/TriggerTest/src/TriggerTestLayer.cpp	/^TriggerTestLayer::TriggerTestLayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TriggerTestLayer
TriggerTestLayer	tests/TriggerTest/src/TriggerTestLayer.hpp	/^class TriggerTestLayer : public PV::HyPerLayer {$/;"	c	namespace:PV
TriggerTestLayerProbe	tests/TriggerTest/src/TriggerTestLayerProbe.cpp	/^TriggerTestLayerProbe::TriggerTestLayerProbe(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TriggerTestLayerProbe
TriggerTestLayerProbe	tests/TriggerTest/src/TriggerTestLayerProbe.hpp	/^class TriggerTestLayerProbe : public PV::LayerProbe {$/;"	c	namespace:PV
UNDEFINED	src/connections/HyPerConn.hpp	/^   enum AccumulateType { UNDEFINED, CONVOLVE, STOCHASTIC };$/;"	e	enum:PV::HyPerConn::AccumulateType
UNDEFINED	src/connections/PoolingConn.hpp	/^   enum AccumulateType { UNDEFINED, MAX, SUM, AVG };$/;"	e	enum:PV::PoolingConn::AccumulateType
UNIFORMRANDOMV_HPP_	src/initv/UniformRandomV.hpp	9;"	d
UNIFORM_ACTIVITY_VALUE	tests/test_border_activity/src/test_border_activity.cpp	27;"	d	file:
UNRECOGNIZED_DATATYPE	src/utils/BufferUtilsPvp.hpp	/^   UNRECOGNIZED_DATATYPE = 0,$/;"	e	enum:PV::BufferUtils::HeaderDataTypeEnum
UPDATEONLY_TRIGGER	src/layers/HyPerLayer.hpp	/^   UPDATEONLY_TRIGGER,$/;"	e	enum:PV::TriggerBehaviorTypeEnum
UPDATESTATEFUNCTIONS_H_	src/layers/updateStateFunctions.h	10;"	d
USE_MACH_TIMER	src/utils/Timer.cpp	15;"	d	file:
UniformRandomV	src/initv/UniformRandomV.cpp	/^UniformRandomV::UniformRandomV() { initialize_base(); }$/;"	f	class:PV::UniformRandomV
UniformRandomV	src/initv/UniformRandomV.cpp	/^UniformRandomV::UniformRandomV(char const *name, HyPerCol *hc) {$/;"	f	class:PV::UniformRandomV
UniformRandomV	src/initv/UniformRandomV.hpp	/^class UniformRandomV : public BaseInitV {$/;"	c	namespace:PV
V	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *V;$/;"	m	struct:PVCuda::HyPerLCAParams
V	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *V;$/;"	m	struct:PVCuda::ISTAParams
V	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *V;$/;"	m	struct:PVCuda::MomentumLCAParams
V	src/include/pv_types.h	/^   float *V;$/;"	m	struct:PVLayer_
V0	src/layers/SigmoidLayer.hpp	/^   float V0;$/;"	m	class:PV::SigmoidLayer
VARYINGHYPERCONN_HPP_	tests/Shared/VaryingHyPerConn.hpp	9;"	d
VTH_REST	src/include/default_params.h	16;"	d
VThresh	src/layers/ANNLayer.hpp	/^   float VThresh = -FLT_MAX; \/\/ threshold potential, values smaller than VThresh are set to AMin$/;"	m	class:PV::ANNLayer
VThresh	src/probes/FirmThresholdCostFnProbe.hpp	/^   float VThresh;$/;"	m	class:PV::FirmThresholdCostFnProbe
VWidth	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float VWidth;$/;"	m	struct:PVCuda::ISTAParams
VWidth	src/layers/ANNLayer.hpp	/^   float VWidth = (float)0; \/\/ The thresholding occurs linearly over the region$/;"	m	class:PV::ANNLayer
VWidth	src/probes/FirmThresholdCostFnProbe.hpp	/^   float VWidth;$/;"	m	class:PV::FirmThresholdCostFnProbe
V_EXC	src/include/default_params.h	13;"	d
V_INH	src/include/default_params.h	14;"	d
V_INHB	src/include/default_params.h	15;"	d
V_REST	src/include/default_params.h	12;"	d
Vadpt	src/layers/LCALIFLayer.hpp	/^   float *Vadpt;$/;"	m	class:PV::LCALIFLayer
VaryingHyPerConn	tests/Shared/VaryingHyPerConn.cpp	/^VaryingHyPerConn::VaryingHyPerConn(const char *name, HyPerCol *hc) : HyPerConn() {$/;"	f	class:PV::VaryingHyPerConn
VaryingHyPerConn	tests/Shared/VaryingHyPerConn.hpp	/^class VaryingHyPerConn : public HyPerConn {$/;"	c	namespace:PV
Vattained	src/layers/LCALIFLayer.hpp	/^   float *Vattained; \/\/ Membrane potential before testing to see if a spike resets it to resting$/;"	m	class:PV::LCALIFLayer
Vexc	src/layers/LIF.hpp	/^   float Vexc;$/;"	m	struct:LIF_params
Vinh	src/layers/LIF.hpp	/^   float Vinh;$/;"	m	struct:LIF_params
VinhB	src/layers/LIF.hpp	/^   float VinhB;$/;"	m	struct:LIF_params
Vmeminf	src/layers/LCALIFLayer.hpp	/^   float *Vmeminf; \/\/ Asymptotic value of the membrane potential.  Output in checkpoints for$/;"	m	class:PV::LCALIFLayer
Vrest	src/layers/LIF.hpp	/^   float Vrest;$/;"	m	struct:LIF_params
Vscale	src/layers/LCALIFLayer.hpp	/^   float Vscale;$/;"	m	class:PV::LCALIFLayer
Vth	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float Vth;$/;"	m	struct:PVCuda::ISTAParams
Vth	src/layers/LIF.hpp	/^   float *Vth; \/\/ threshold potential$/;"	m	class:PV::LIF
Vth	src/layers/SigmoidLayer.hpp	/^   float Vth;$/;"	m	class:PV::SigmoidLayer
VthRest	src/layers/LIF.hpp	/^   float VthRest;$/;"	m	struct:LIF_params
WALLCLOCK	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode { NONE, STEP, SIMTIME, WALLCLOCK };$/;"	e	enum:PV::Checkpointer::CheckpointWriteTriggerMode
WDebug	src/utils/PVLog.hpp	/^typedef Log<wchar_t, DebugLogType> WDebug;$/;"	t	namespace:PV
WEIGHT_CONVERSIONS_H_	src/connections/weight_conversions.hpp	9;"	d
WEIGHT_DEAD_VALUE	src/include/default_params.h	55;"	d
WEIGHT_MIN_VALUE	src/include/default_params.h	56;"	d
WEST	src/columns/Communicator.hpp	/^   static const int WEST      = 4;$/;"	m	class:PV::Communicator
WEST	src/structures/Buffer.hpp	/^   enum Anchor { CENTER, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };$/;"	e	enum:PV::Buffer::Anchor
WEST	src/utils/BorderExchange.hpp	/^   static int const WEST      = 4;$/;"	m	class:PV::BorderExchange
WError	src/utils/PVLog.hpp	/^typedef Log<char, ErrorLogType> WError;$/;"	t	namespace:PV
WError	src/utils/PVLog.hpp	/^typedef Log<wchar_t, ErrorLogType> WError;$/;"	t	namespace:PV
WFatal	src/utils/PVLog.hpp	/^typedef Log<wchar_t, FatalType> WFatal;$/;"	t	namespace:PV
WInfo	src/utils/PVLog.hpp	/^typedef Log<wchar_t, InfoLogType> WInfo;$/;"	t	namespace:PV
WStackTrace	src/utils/PVLog.hpp	/^typedef Log<wchar_t, StackTraceType> WStackTrace;$/;"	t	namespace:PV
WTALAYER_HPP_	src/layers/WTALayer.hpp	7;"	d
WTALayer	src/layers/WTALayer.cpp	/^WTALayer::WTALayer(const char *name, HyPerCol *hc) {$/;"	f	class:PV::WTALayer
WTALayer	src/layers/WTALayer.hpp	/^class WTALayer : public PV::HyPerLayer {$/;"	c	namespace:PV
WWarn	src/utils/PVLog.hpp	/^typedef Log<wchar_t, WarnLogType> WWarn;$/;"	t	namespace:PV
WallClockUnit	src/checkpointing/Checkpointer.hpp	/^   enum WallClockUnit { SECOND, MINUTE, HOUR, DAY };$/;"	g	class:PV::Checkpointer
Warn	src/utils/PVLog.hpp	/^typedef Log<char, WarnLogType> Warn;$/;"	t	namespace:PV
WarnLog	src/utils/PVLog.hpp	/^typedef Log<char, WarnLogType> WarnLog;$/;"	t	namespace:PV
WarnLog	src/utils/PVLog.hpp	45;"	d
WarnLogType	src/utils/PVLog.hpp	/^typedef LogType<LogWarnType> WarnLogType;$/;"	t	namespace:PV
WeightIndexMapType	src/connections/HyPerConn.hpp	/^   typedef std::map<const WeightType *const, const IndexListType> WeightIndexMapType;$/;"	t	class:PV::HyPerConn
WeightListType	src/connections/HyPerConn.hpp	/^   typedef std::vector<WeightType> WeightListType;$/;"	t	class:PV::HyPerConn
WeightMapType	src/connections/HyPerConn.hpp	/^   typedef std::map<int, WeightPtrMapType> WeightMapType;$/;"	t	class:PV::HyPerConn
WeightPtrMapType	src/connections/HyPerConn.hpp	/^   typedef std::map<const WeightType *const, const WeightListType> WeightPtrMapType;$/;"	t	class:PV::HyPerConn
WeightType	src/connections/HyPerConn.hpp	/^   typedef float WeightType;$/;"	t	class:PV::HyPerConn
YCbCr_to_RGB_kernel	src/io/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)($/;"	m	struct:__anon9
ZEROV_HPP_	src/initv/ZeroV.hpp	9;"	d
ZeroV	src/initv/ZeroV.cpp	/^ZeroV::ZeroV() { initialize_base(); }$/;"	f	class:PV::ZeroV
ZeroV	src/initv/ZeroV.cpp	/^ZeroV::ZeroV(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ZeroV
ZeroV	src/initv/ZeroV.hpp	/^class ZeroV : public ConstantV {$/;"	c	namespace:PV
_CRT_NONSTDC_NO_DEPRECATE	src/io/stb_image_write.h	187;"	d
_CRT_SECURE_NO_WARNINGS	src/io/stb_image_write.h	184;"	d
_DROPOUTLAYER_HPP_	src/layers/DropoutLayer.hpp	2;"	d
_KNEETIMESCALECONTROLLER_HPP_	src/components/KneeTimeScaleController.hpp	2;"	d
_KNEETIMESCALEPROBE_HPP_	src/probes/KneeTimeScaleProbe.hpp	2;"	d
_LOGTIMESCALECONTROLLER_HPP_	src/components/LogTimeScaleController.hpp	2;"	d
_LOGTIMESCALEPROBE_HPP_	src/probes/LogTimeScaleProbe.hpp	2;"	d
__BUFFERUTILSMPI_HPP_	src/utils/BufferUtilsMPI.hpp	2;"	d
__BUFFERUTILSPVP_HPP__	src/utils/BufferUtilsPvp.hpp	2;"	d
__BUFFERUTILSRESCALE_HPP__	src/utils/BufferUtilsRescale.hpp	2;"	d
__BUFFER_HPP__	src/structures/Buffer.hpp	2;"	d
__CHECKPOINTABLEFILESTREAM_HPP__	src/checkpointing/CheckpointableFileStream.hpp	2;"	d
__FILESTREAM_HPP__	src/io/FileStream.hpp	9;"	d
__IMAGE_HPP__	src/structures/Image.hpp	5;"	d
__INPUTLAYER_HPP__	src/layers/InputLayer.hpp	5;"	d
__PRINTSTREAM_HPP_	src/io/PrintStream.hpp	2;"	d
__PVPLAYER_HPP__	src/layers/PvpLayer.hpp	2;"	d
__SPARSELIST_HPP__	src/structures/SparseList.hpp	2;"	d
__getitem__	python/param_draw.py	/^    def __getitem__(self,item):$/;"	m	class:Col	file:
__init__	python/deprecated/max_pv_object.py	/^    def __init__(self, data, header = None, name = None):$/;"	m	class:PV_Object
__init__	python/deprecated/max_readpvpfile.py	/^    def __init__(self, time, values):$/;"	m	class:DataFrame
__init__	python/param_draw.py	/^    def __init__(self):$/;"	m	class:Col
__init__	python/param_draw.py	/^    def __init__(self, filename, **kwargs):$/;"	m	class:Param_Parser
__init__	python/param_draw.py	/^    def __init__(self, filename, lists):$/;"	m	class:Param_Reader
__init__	python/param_draw.py	/^    def __init__(self, name, type, nodraw_status):$/;"	m	class:Conn
__init__	python/param_draw.py	/^    def __init__(self, name, type, nodraw_status):$/;"	m	class:Layer
__init__	python/pvtools/pvpFile.py	/^    def __init__(self, filename, mode):$/;"	m	class:pvpOpen
__init__	src/bindings/pyPV.py	/^   def __init__(self, arguments):$/;"	m	class:pyHyPerCol
__new__	python/deprecated/max_readpvpfile.py	/^    def __new__ (cls, time, values):$/;"	m	class:DataFrame	file:
_pv_alloc_h	src/utils/PVAlloc.hpp	2;"	d
_pv_assert_h	src/utils/PVAssert.hpp	2;"	d
_stream	src/utils/PVLog.hpp	/^   std::basic_ostream<C, T> &_stream;$/;"	m	struct:PV::Log
a	python/timers_txt_to_csv.py	/^    a = csv.writer(outfile, delimiter=',')$/;"	v
aPostOffset	src/connections/HyPerConn.hpp	/^   size_t **aPostOffset; \/\/ aPostOffset[arborId][kExt] is the index of the start of a patch into an$/;"	m	class:PV::HyPerConn
abs_refractory_period	src/layers/Retina.hpp	/^   float abs_refractory_period;$/;"	m	struct:Retina_params
accumulateAmount	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float accumulateAmount;$/;"	m	class:BBFindConfRemapLayer
accumulateAmount	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float accumulateAmount;$/;"	m	class:LocalizationBBFindProbe
accumulateFunctionFromPostPointer	src/connections/HyPerConn.hpp	/^   int (*accumulateFunctionFromPostPointer)($/;"	m	class:PV::HyPerConn
accumulateFunctionPointer	src/connections/HyPerConn.hpp	/^   int (*accumulateFunctionPointer)($/;"	m	class:PV::HyPerConn
accumulateIntoPrev	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::accumulateIntoPrev(Map3 &prevMap, const Map3 &currentMap, float accumulateAmt, float frameMemory, float scaleMin, float scaleMax)$/;"	f	class:BBFind
accumulateMax	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateMax(float *dataPatchStart, int weights_in_patch, float *max) {$/;"	f	class:PV::NormalizeBase
accumulateMaxAbs	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateMaxAbs(float *dataPatchStart, int weights_in_patch, float *max) {$/;"	f	class:PV::NormalizeBase
accumulateMin	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateMin(float *dataPatchStart, int weights_in_patch, float *min) {$/;"	f	class:PV::NormalizeBase
accumulateSum	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateSum(float *dataPatchStart, int weights_in_patch, float *sum) {$/;"	f	class:PV::NormalizeBase
accumulateSumAndSumSquared	src/normalizers/NormalizeContrastZeroMean.cpp	/^int NormalizeContrastZeroMean::accumulateSumAndSumSquared($/;"	f	class:PV::NormalizeContrastZeroMean
accumulateSumShrunken	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateSumShrunken($/;"	f	class:PV::NormalizeBase
accumulateSumSquared	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateSumSquared(float *dataPatchStart, int weights_in_patch, float *sumsq) {$/;"	f	class:PV::NormalizeBase
accumulateSumSquaredShrunken	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::accumulateSumSquaredShrunken($/;"	f	class:PV::NormalizeBase
accumulateTime	src/arch/cuda/CudaTimer.cpp	/^double CudaTimer::accumulateTime() {$/;"	f	class:PVCuda::CudaTimer
action_batch_sweep_close	src/io/PVParams.cpp	/^void PVParams::action_batch_sweep_close() {$/;"	f	class:PV::PVParams
action_batch_sweep_values_filename	src/io/PVParams.cpp	/^void PVParams::action_batch_sweep_values_filename(const char *stringval) {$/;"	f	class:PV::PVParams
action_batch_sweep_values_number	src/io/PVParams.cpp	/^void PVParams::action_batch_sweep_values_number(double val) {$/;"	f	class:PV::PVParams
action_batch_sweep_values_string	src/io/PVParams.cpp	/^void PVParams::action_batch_sweep_values_string(const char *stringval) {$/;"	f	class:PV::PVParams
action_include_directive	src/io/PVParams.cpp	/^void PVParams::action_include_directive(const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_array	src/io/PVParams.cpp	/^void PVParams::action_parameter_array(char *id) {$/;"	f	class:PV::PVParams
action_parameter_array_overwrite	src/io/PVParams.cpp	/^void PVParams::action_parameter_array_overwrite(char *id) {$/;"	f	class:PV::PVParams
action_parameter_array_value	src/io/PVParams.cpp	/^void PVParams::action_parameter_array_value(double val) {$/;"	f	class:PV::PVParams
action_parameter_def	src/io/PVParams.cpp	/^void PVParams::action_parameter_def(char *id, double val) {$/;"	f	class:PV::PVParams
action_parameter_def_overwrite	src/io/PVParams.cpp	/^void PVParams::action_parameter_def_overwrite(char *id, double val) {$/;"	f	class:PV::PVParams
action_parameter_filename_def	src/io/PVParams.cpp	/^void PVParams::action_parameter_filename_def(const char *id, const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_filename_def_overwrite	src/io/PVParams.cpp	/^void PVParams::action_parameter_filename_def_overwrite(const char *id, const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_group	src/io/PVParams.cpp	/^void PVParams::action_parameter_group() {$/;"	f	class:PV::PVParams
action_parameter_group_name	src/io/PVParams.cpp	/^void PVParams::action_parameter_group_name(char *keyword, char *name) {$/;"	f	class:PV::PVParams
action_parameter_string_def	src/io/PVParams.cpp	/^void PVParams::action_parameter_string_def(const char *id, const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_string_def_overwrite	src/io/PVParams.cpp	/^void PVParams::action_parameter_string_def_overwrite(const char *id, const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_sweep_close	src/io/PVParams.cpp	/^void PVParams::action_parameter_sweep_close() {$/;"	f	class:PV::PVParams
action_parameter_sweep_values_filename	src/io/PVParams.cpp	/^void PVParams::action_parameter_sweep_values_filename(const char *stringval) {$/;"	f	class:PV::PVParams
action_parameter_sweep_values_number	src/io/PVParams.cpp	/^void PVParams::action_parameter_sweep_values_number(double val) {$/;"	f	class:PV::PVParams
action_parameter_sweep_values_string	src/io/PVParams.cpp	/^void PVParams::action_parameter_sweep_values_string(const char *stringval) {$/;"	f	class:PV::PVParams
action_pvparams_directive	src/io/PVParams.cpp	/^void PVParams::action_pvparams_directive(char *id, double val) {$/;"	f	class:PV::PVParams
action_sweep_open	src/io/PVParams.cpp	/^void PVParams::action_sweep_open(const char *groupname, const char *paramname) {$/;"	f	class:PV::PVParams
activeBatchSweep	src/io/PVParams.hpp	/^   ParameterSweep *activeBatchSweep;$/;"	m	class:PV::PVParams
activeIndices	src/cudakernels/CudaRecvPre.hpp	/^   PV::SparseList<float>::Entry *activeIndices;$/;"	m	struct:PVCuda::recv_pre_params
activeIndices	src/include/pv_types.h	/^   void const *activeIndices;$/;"	m	struct:PVLayerCube_
activeIndicesBuffer	src/columns/DataStore.hpp	/^   SparseList<float>::Entry *activeIndicesBuffer(int bufferId) {$/;"	f	class:PV::DataStore
activeIndicesBuffer	src/columns/DataStore.hpp	/^   SparseList<float>::Entry *activeIndicesBuffer(int bufferId, int level) {$/;"	f	class:PV::DataStore
activeParamSweep	src/io/PVParams.hpp	/^   ParameterSweep *activeParamSweep;$/;"	m	class:PV::PVParams
activity	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *activity;$/;"	m	struct:PVCuda::HyPerLCAParams
activity	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *activity;$/;"	m	struct:PVCuda::ISTAParams
activity	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *activity;$/;"	m	struct:PVCuda::MomentumLCAParams
activity	src/include/pv_types.h	/^   PVLayerCube *activity;$/;"	m	struct:PVLayer_
activityIsSpiking	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   bool activityIsSpiking() { return false; }$/;"	f	class:BBFindConfRemapLayer
activityIsSpiking	src/layers/ANNLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::ANNLayer
activityIsSpiking	src/layers/BinningLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::BinningLayer
activityIsSpiking	src/layers/HyPerLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::HyPerLayer
activityIsSpiking	src/layers/KmeansLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::KmeansLayer
activityIsSpiking	src/layers/PoolingIndexLayer.hpp	/^   bool activityIsSpiking() { return false; }$/;"	f	class:PV::PoolingIndexLayer
activityIsSpiking	src/layers/Retina.hpp	/^   virtual bool activityIsSpiking() { return spikingFlag; }$/;"	f	class:PV::Retina
activityIsSpiking	src/layers/SegmentLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::SegmentLayer
activityIsSpiking	src/layers/Segmentify.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::Segmentify
activityIsSpiking	src/layers/WTALayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::WTALayer
activityIsSpiking	tests/Shared/Example.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::Example
activityIsSpiking	tests/TriggerTest/src/TriggerTestLayer.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::TriggerTestLayer
activityIsSpiking	tests/test_constant_input/src/TestImage.hpp	/^   virtual bool activityIsSpiking() { return false; }$/;"	f	class:PV::TestImage
actual_pvp	python/analysis_parse.py	/^actual_pvp = []$/;"	v
addActiveBatchSweep	src/io/PVParams.cpp	/^void PVParams::addActiveBatchSweep(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
addActiveParamSweep	src/io/PVParams.cpp	/^void PVParams::addActiveParamSweep(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
addBaseProbe	src/columns/HyPerCol.cpp	/^int HyPerCol::addBaseProbe(BaseProbe *p) {$/;"	f	class:PV::HyPerCol
addClone	src/connections/HyPerConn.cpp	/^void HyPerConn::addClone(PlasticCloneConn *conn) {$/;"	f	class:PV::HyPerConn
addCol	tests/Shared/ColumnArchive.cpp	/^void ColumnArchive::addCol(PV::HyPerCol *hc, float layerTolerance, float connTolerance) {$/;"	f	class:ColumnArchive
addConn	tests/Shared/ColumnArchive.cpp	/^void ColumnArchive::addConn(PV::HyPerConn *conn, float connTolerance) {$/;"	f	class:ColumnArchive
addConnToList	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::addConnToList(HyPerConn *newConn) {$/;"	f	class:PV::NormalizeBase
addConnection	src/columns/HyPerCol.cpp	/^int HyPerCol::addConnection(BaseConnection *conn) {$/;"	f	class:PV::HyPerCol
addEntry	src/structures/SparseList.hpp	/^   void addEntry(Entry entry) { mList.push_back(entry); }$/;"	f	class:PV::SparseList
addGpuGroup	src/columns/HyPerCol.cpp	/^void HyPerCol::addGpuGroup(BaseConnection *conn, int gpuGroupIdx) {$/;"	f	class:PV::HyPerCol
addGpuTimers	src/layers/HyPerLayer.cpp	/^double HyPerLayer::addGpuTimers() {$/;"	f	class:PV::HyPerLayer
addGroup	src/io/PVParams.cpp	/^void PVParams::addGroup(char *keyword, char *name) {$/;"	f	class:PV::PVParams
addLayer	src/columns/HyPerCol.cpp	/^int HyPerCol::addLayer(HyPerLayer *layer) {$/;"	f	class:PV::HyPerCol
addLayer	tests/Shared/ColumnArchive.cpp	/^void ColumnArchive::addLayer(PV::HyPerLayer *layer, float layerTolerance) {$/;"	f	class:ColumnArchive
addMirrorBC	mlab/imgProc/addMirrorBC.m	/^function [pad_image] = addMirrorBC(original_image, pad)$/;"	f
addMirrorBC2	mlab/imgProc/addMirrorBC2.m	/^function [pad_image] = addMirrorBC2(original_image, pad)$/;"	f
addNormalizer	src/columns/HyPerCol.cpp	/^int HyPerCol::addNormalizer(NormalizeBase *normalizer) {$/;"	f	class:PV::HyPerCol
addObject	src/columns/HyPerCol.cpp	/^void HyPerCol::addObject(BaseObject *obj) {$/;"	f	class:PV::HyPerCol
addObject	src/observerpattern/ObserverTable.cpp	/^bool ObserverTable::addObject(std::string const &name, Observer *entry) {$/;"	f	class:PV::ObserverTable
addObserver	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::addObserver(Observer *observer, BaseMessage const &message) {$/;"	f	class:PV::Checkpointer
addObserver	src/observerpattern/Subject.hpp	/^   virtual void addObserver(Observer *observer, BaseMessage const &message) { return; }$/;"	f	class:PV::Subject
addPublisher	src/layers/HyPerLayer.cpp	/^void HyPerLayer::addPublisher() {$/;"	f	class:PV::HyPerLayer
addTerm	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::addTerm(BaseProbe *probe) {$/;"	f	class:PV::ColumnEnergyProbe
addToGDist	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::addToGDist(float inc) { gDist += inc; }$/;"	f	class:PV::InitCocircWeightsParams
adjustAllPatches	src/connections/HyPerConn.cpp	/^int HyPerConn::adjustAllPatches($/;"	f	class:PV::HyPerConn
adjustAxonalArbors	src/connections/HyPerConn.cpp	/^int HyPerConn::adjustAxonalArbors(int arborId) {$/;"	f	class:PV::HyPerConn
adjustedPatchDimension	src/connections/HyPerConn.hpp	/^   static inline int adjustedPatchDimension($/;"	f	class:PV::HyPerConn
advanceTime	src/columns/HyPerCol.cpp	/^int HyPerCol::advanceTime(double sim_time) {$/;"	f	class:PV::HyPerCol
advanceTimeLoop	src/columns/HyPerCol.cpp	/^void HyPerCol::advanceTimeLoop(Clock &runClock, int const runClockStartingStep) {$/;"	f	class:PV::HyPerCol
allLabelsBuf	src/layers/SegmentLayer.hpp	/^   int *allLabelsBuf;$/;"	m	class:PV::SegmentLayer
allVals	python/probe_analysis/noArborReadProbe.py	/^            allVals = [[float(x[1]) for x in lineSp if x[0][:min(len(x[0]), len(tok))] == tok] for lineSp in lines]$/;"	v
all_a	src/io/stb_image.h	/^   unsigned int mr, mg, mb, ma, all_a;$/;"	m	struct:__anon17
all_lines	python/probe_analysis/noArborReadProbe.py	/^all_lines = True    #All values if True$/;"	v
allocDeviceActiveIndices	src/layers/HyPerLayer.hpp	/^   bool allocDeviceActiveIndices;$/;"	m	class:PV::HyPerLayer
allocDeviceActivity	src/layers/HyPerLayer.hpp	/^   bool allocDeviceActivity;$/;"	m	class:PV::HyPerLayer
allocDeviceDatastore	src/layers/HyPerLayer.hpp	/^   bool allocDeviceDatastore;$/;"	m	class:PV::HyPerLayer
allocDeviceGSyn	src/layers/HyPerLayer.hpp	/^   bool allocDeviceGSyn; \/\/ array of channels to allocate$/;"	m	class:PV::HyPerLayer
allocDeviceV	src/layers/HyPerLayer.hpp	/^   bool allocDeviceV;$/;"	m	class:PV::HyPerLayer
allocDeviceWeights	src/connections/HyPerConn.hpp	/^   bool allocDeviceWeights;$/;"	m	class:PV::HyPerConn
allocPostDeviceWeights	src/connections/HyPerConn.hpp	/^   bool allocPostDeviceWeights;$/;"	m	class:PV::HyPerConn
allocWeights	src/connections/HyPerConn.cpp	/^float *HyPerConn::allocWeights(int nPatches, int nxPatch, int nyPatch, int nfPatch) {$/;"	f	class:PV::HyPerConn
alloc_params	src/io/fileio.cpp	/^int *alloc_params(int numParams) {$/;"	f	namespace:PV
allocate	src/columns/RandomSeed.cpp	/^unsigned int RandomSeed::allocate(unsigned int numRequested) {$/;"	f	class:PV::RandomSeed
allocateActivity	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateActivity() {$/;"	f	class:PV::HyPerLayer
allocateBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateBuffer(T **buf, int bufsize, const char *bufname) {$/;"	f	class:PV::HyPerLayer
allocateBuffers	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateBuffers() {$/;"	f	class:PV::HyPerLayer
allocateBuffers	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::allocateBuffers() {$/;"	f	class:PV::LCALIFLayer
allocateBuffers	src/layers/LIF.cpp	/^int LIF::allocateBuffers() {$/;"	f	class:PV::LIF
allocateClayerBuffers	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateClayerBuffers() {$/;"	f	class:PV::HyPerLayer
allocateConductances	src/layers/LIF.cpp	/^int LIF::allocateConductances(int num_channels) {$/;"	f	class:PV::LIF
allocateConductances	src/layers/LIFGap.cpp	/^int LIFGap::allocateConductances(int num_channels) {$/;"	f	class:PV::LIFGap
allocateDataStructures	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::allocateDataStructures() {$/;"	f	class:BBFindConfRemapLayer
allocateDataStructures	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::allocateDataStructures() {$/;"	f	class:BBFindConfRemapProbe
allocateDataStructures	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::allocateDataStructures() {$/;"	f	class:ConvertFromTable
allocateDataStructures	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::allocateDataStructures() {$/;"	f	class:LocalizationProbe
allocateDataStructures	src/columns/BaseObject.hpp	/^   virtual int allocateDataStructures() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
allocateDataStructures	src/connections/CloneConn.cpp	/^int CloneConn::allocateDataStructures() {$/;"	f	class:PV::CloneConn
allocateDataStructures	src/connections/GapConn.cpp	/^int GapConn::allocateDataStructures() {$/;"	f	class:PV::GapConn
allocateDataStructures	src/connections/HyPerConn.cpp	/^int HyPerConn::allocateDataStructures() {$/;"	f	class:PV::HyPerConn
allocateDataStructures	src/connections/ImprintConn.cpp	/^int ImprintConn::allocateDataStructures() {$/;"	f	class:PV::ImprintConn
allocateDataStructures	src/connections/MomentumConn.cpp	/^int MomentumConn::allocateDataStructures() {$/;"	f	class:PV::MomentumConn
allocateDataStructures	src/connections/PoolingConn.cpp	/^int PoolingConn::allocateDataStructures() {$/;"	f	class:PV::PoolingConn
allocateDataStructures	src/connections/TransposeConn.cpp	/^int TransposeConn::allocateDataStructures() {$/;"	f	class:PV::TransposeConn
allocateDataStructures	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::allocateDataStructures() {$/;"	f	class:PV::TransposePoolingConn
allocateDataStructures	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::allocateDataStructures() {$/;"	f	class:PV::privateTransposeConn
allocateDataStructures	src/layers/BinningLayer.cpp	/^int BinningLayer::allocateDataStructures() {$/;"	f	class:PV::BinningLayer
allocateDataStructures	src/layers/CloneVLayer.cpp	/^int CloneVLayer::allocateDataStructures() {$/;"	f	class:PV::CloneVLayer
allocateDataStructures	src/layers/FilenameParsingGroundTruthLayer.cpp	/^int FilenameParsingGroundTruthLayer::allocateDataStructures() {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
allocateDataStructures	src/layers/GapLayer.cpp	/^int GapLayer::allocateDataStructures() {$/;"	f	class:PV::GapLayer
allocateDataStructures	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::allocateDataStructures() {$/;"	f	class:PV::HyPerLCALayer
allocateDataStructures	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateDataStructures() {$/;"	f	class:PV::HyPerLayer
allocateDataStructures	src/layers/ISTALayer.cpp	/^int ISTALayer::allocateDataStructures() {$/;"	f	class:PV::ISTALayer
allocateDataStructures	src/layers/InputLayer.cpp	/^int InputLayer::allocateDataStructures() {$/;"	f	class:PV::InputLayer
allocateDataStructures	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::allocateDataStructures() {$/;"	f	class:PV::LCALIFLayer
allocateDataStructures	src/layers/LIF.cpp	/^int LIF::allocateDataStructures() {$/;"	f	class:PV::LIF
allocateDataStructures	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::allocateDataStructures() {$/;"	f	class:PV::MomentumLCALayer
allocateDataStructures	src/layers/PtwiseProductLayer.cpp	/^int PtwiseProductLayer::allocateDataStructures() {$/;"	f	class:PV::PtwiseProductLayer
allocateDataStructures	src/layers/PtwiseQuotientLayer.cpp	/^int PtwiseQuotientLayer::allocateDataStructures() {$/;"	f	class:PV::PtwiseQuotientLayer
allocateDataStructures	src/layers/PvpLayer.cpp	/^int PvpLayer::allocateDataStructures() {$/;"	f	class:PV::PvpLayer
allocateDataStructures	src/layers/Retina.cpp	/^int Retina::allocateDataStructures() {$/;"	f	class:PV::Retina
allocateDataStructures	src/layers/SegmentLayer.cpp	/^int SegmentLayer::allocateDataStructures() {$/;"	f	class:PV::SegmentLayer
allocateDataStructures	src/layers/Segmentify.cpp	/^int Segmentify::allocateDataStructures() {$/;"	f	class:PV::Segmentify
allocateDataStructures	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::allocateDataStructures() {$/;"	f	class:PV::ShuffleLayer
allocateDataStructures	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::allocateDataStructures() {$/;"	f	class:PV::SigmoidLayer
allocateDataStructures	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::allocateDataStructures() {$/;"	f	class:PV::AdaptiveTimeScaleProbe
allocateDataStructures	src/probes/BaseProbe.cpp	/^int BaseProbe::allocateDataStructures() {$/;"	f	class:PV::BaseProbe
allocateDataStructures	src/probes/KernelProbe.cpp	/^int KernelProbe::allocateDataStructures() {$/;"	f	class:PV::KernelProbe
allocateDataStructures	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^int ImportParamsConn::allocateDataStructures() {$/;"	f	class:PV::ImportParamsConn
allocateDataStructures	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^int ImportParamsLayer::allocateDataStructures() {$/;"	f	class:PV::ImportParamsLayer
allocateDataStructures	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::allocateDataStructures() {$/;"	f	class:PV::LIFTestProbe
allocateDataStructures	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::allocateDataStructures() {$/;"	f	class:PV::MPITestLayer
allocateDataStructures	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::allocateDataStructures() {$/;"	f	class:PV::PlasticConnTestLayer
allocateDataStructures	tests/Shared/CPTestInputLayer.cpp	/^int CPTestInputLayer::allocateDataStructures() {$/;"	f	class:PV::CPTestInputLayer
allocateDataStructures	tests/Shared/VaryingHyPerConn.cpp	/^int VaryingHyPerConn::allocateDataStructures() {$/;"	f	class:PV::VaryingHyPerConn
allocateDataStructures	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::allocateDataStructures() {$/;"	f	class:PV::ShrunkenPatchTestLayer
allocateDeviceBuffers	src/connections/HyPerConn.cpp	/^int HyPerConn::allocateDeviceBuffers() {$/;"	f	class:PV::HyPerConn
allocateDeviceBuffers	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateDeviceBuffers() {$/;"	f	class:PV::HyPerLayer
allocateDeviceWeights	src/connections/CloneConn.cpp	/^int CloneConn::allocateDeviceWeights() { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
allocateDeviceWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::allocateDeviceWeights() {$/;"	f	class:PV::HyPerConn
allocateDeviceWeights	src/connections/TransposeConn.cpp	/^int TransposeConn::allocateDeviceWeights() { return PV_SUCCESS; }$/;"	f	class:PV::TransposeConn
allocateExtendedBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateExtendedBuffer(float **buf, char const *bufname) {$/;"	f	class:PV::HyPerLayer
allocateGSyn	src/layers/CloneVLayer.cpp	/^int CloneVLayer::allocateGSyn() {$/;"	f	class:PV::CloneVLayer
allocateGSyn	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateGSyn() {$/;"	f	class:PV::HyPerLayer
allocatePostConn	src/connections/CloneConn.cpp	/^int CloneConn::allocatePostConn() {$/;"	f	class:PV::CloneConn
allocatePostConn	src/connections/HyPerConn.cpp	/^int HyPerConn::allocatePostConn() {$/;"	f	class:PV::HyPerConn
allocatePostConn	src/connections/TransposeConn.cpp	/^int TransposeConn::allocatePostConn() {$/;"	f	class:PV::TransposeConn
allocatePostDeviceWeights	src/connections/CloneConn.cpp	/^int CloneConn::allocatePostDeviceWeights() { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
allocatePostDeviceWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::allocatePostDeviceWeights() {$/;"	f	class:PV::HyPerConn
allocatePostDeviceWeights	src/connections/TransposeConn.cpp	/^int TransposeConn::allocatePostDeviceWeights() { return PV_SUCCESS; }$/;"	f	class:PV::TransposeConn
allocatePostToPreBuffer	src/connections/HyPerConn.cpp	/^int HyPerConn::allocatePostToPreBuffer() {$/;"	f	class:PV::HyPerConn
allocatePrevActivity	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocatePrevActivity() {$/;"	f	class:PV::HyPerLayer
allocateRestrictedBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateRestrictedBuffer(float **buf, char const *bufname) {$/;"	f	class:PV::HyPerLayer
allocateSparseWeightsPost	src/connections/HyPerConn.cpp	/^void HyPerConn::allocateSparseWeightsPost(PVLayerCube const *activity, int arbor) {$/;"	f	class:PV::HyPerConn
allocateSparseWeightsPre	src/connections/HyPerConn.cpp	/^void HyPerConn::allocateSparseWeightsPre(PVLayerCube const *activity, int arbor) {$/;"	f	class:PV::HyPerConn
allocateTimeScaleController	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::allocateTimeScaleController() {$/;"	f	class:PV::AdaptiveTimeScaleProbe
allocateTimeScaleController	src/probes/KneeTimeScaleProbe.cpp	/^void KneeTimeScaleProbe::allocateTimeScaleController() {$/;"	f	class:PV::KneeTimeScaleProbe
allocateTimeScaleController	src/probes/LogTimeScaleProbe.cpp	/^void LogTimeScaleProbe::allocateTimeScaleController() {$/;"	f	class:PV::LogTimeScaleProbe
allocateUpdateKernel	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::allocateUpdateKernel() {$/;"	f	class:PV::HyPerLCALayer
allocateUpdateKernel	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateUpdateKernel() {$/;"	f	class:PV::HyPerLayer
allocateUpdateKernel	src/layers/ISTALayer.cpp	/^int ISTALayer::allocateUpdateKernel() {$/;"	f	class:PV::ISTALayer
allocateUpdateKernel	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::allocateUpdateKernel() {$/;"	f	class:PV::MomentumLCALayer
allocateV	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::allocateV() {$/;"	f	class:PV::BackgroundLayer
allocateV	src/layers/BinningLayer.cpp	/^int BinningLayer::allocateV() {$/;"	f	class:PV::BinningLayer
allocateV	src/layers/CloneVLayer.cpp	/^int CloneVLayer::allocateV() {$/;"	f	class:PV::CloneVLayer
allocateV	src/layers/HyPerLayer.cpp	/^int HyPerLayer::allocateV() { return allocateRestrictedBuffer(&clayer->V, "membrane potential V"); }$/;"	f	class:PV::HyPerLayer
allocateV	src/layers/InputLayer.cpp	/^int InputLayer::allocateV() {$/;"	f	class:PV::InputLayer
allocateV	src/layers/RescaleLayer.cpp	/^int RescaleLayer::allocateV() {$/;"	f	class:PV::RescaleLayer
allocateV	src/layers/Retina.cpp	/^int Retina::allocateV() {$/;"	f	class:PV::Retina
allocateV	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::allocateV() {$/;"	f	class:PV::RunningAverageLayer
allocateV	src/layers/SegmentLayer.cpp	/^int SegmentLayer::allocateV() {$/;"	f	class:PV::SegmentLayer
allocateV	src/layers/Segmentify.cpp	/^int Segmentify::allocateV() {$/;"	f	class:PV::Segmentify
allocateV	src/layers/WTALayer.cpp	/^int WTALayer::allocateV() {$/;"	f	class:PV::WTALayer
allocateV	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::allocateV() {$/;"	f	class:PV::TestImage
allocation	src/io/PVParams.hpp	/^   int allocation; \/\/ Size of buffer$/;"	m	class:PV::ParameterArrayStack
allocation	src/io/PVParams.hpp	/^   int allocation;$/;"	m	class:PV::ParameterStringStack
ampSpikelet	src/layers/GapLayer.hpp	/^   float ampSpikelet;$/;"	m	class:PV::GapLayer
appendString	parameterWrapper/PVModule.lua	/^local function appendString(table, str)$/;"	f
appendToList	src/structures/SparseList.hpp	/^   void appendToList(SparseList<T> &dest) {$/;"	f	class:PV::SparseList
append_dots	python/param_draw.py	/^    def append_dots():$/;"	f	function:mermaid_writeout
applyGSyn_ANNWhitenedLayer	src/layers/updateStateFunctions.h	/^int applyGSyn_ANNWhitenedLayer($/;"	f
applyGSyn_HyPerLCALayer	src/layers/updateStateFunctions.h	/^int applyGSyn_HyPerLCALayer($/;"	f
applyGSyn_HyPerLCALayer2	src/layers/updateStateFunctions.h	/^int applyGSyn_HyPerLCALayer2($/;"	f
applyGSyn_HyPerLayer	src/layers/updateStateFunctions.h	/^int applyGSyn_HyPerLayer($/;"	f
applyGSyn_HyPerLayer1Channel	src/layers/updateStateFunctions.h	/^int applyGSyn_HyPerLayer1Channel($/;"	f
applyGSyn_ISTALayer	src/layers/updateStateFunctions.h	/^int applyGSyn_ISTALayer($/;"	f
applyGSyn_ISTALayer2	src/layers/updateStateFunctions.h	/^int applyGSyn_ISTALayer2($/;"	f
applyGSyn_LabelErrorLayer	src/layers/updateStateFunctions.h	/^int applyGSyn_LabelErrorLayer($/;"	f
applyGSyn_MomentumLCALayer	src/layers/updateStateFunctions.h	/^int applyGSyn_MomentumLCALayer($/;"	f
applyGSyn_MomentumLCALayer2	src/layers/updateStateFunctions.h	/^int applyGSyn_MomentumLCALayer2($/;"	f
applyMomentum	src/connections/MomentumConn.cpp	/^int MomentumConn::applyMomentum(int arbor_ID) {$/;"	f	class:PV::MomentumConn
applyRMin	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::applyRMin($/;"	f	class:PV::NormalizeMultiply
applyThreshold	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map2 BBFind::applyThreshold(const Map2 confMap, float threshold)$/;"	f	class:BBFind
applyThreshold	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::applyThreshold(float *dataPatchStart, int weights_in_patch, float wMax) {$/;"	f	class:PV::NormalizeMultiply
applyTimestamps	src/checkpointing/CheckpointEntryPvp.hpp	/^   virtual void applyTimestamps(std::vector<double> const &timestamps) const {}$/;"	f	class:PV::CheckpointEntryPvp
applyVMax_ANNLayer_threshminmax	src/layers/updateStateFunctions.h	/^int applyVMax_ANNLayer_threshminmax($/;"	f
applyVThresh_ANNErrorLayer	src/layers/updateStateFunctions.h	/^int applyVThresh_ANNErrorLayer($/;"	f
applyVThresh_ANNLayer_threshminmax	src/layers/updateStateFunctions.h	/^int applyVThresh_ANNLayer_threshminmax($/;"	f
arborID	python/probe_analysis/readProbe.py	/^            arborID = 0$/;"	v
arborID	src/probes/KernelProbe.hpp	/^   int arborID; \/\/ which arbor to investigate$/;"	m	class:PV::KernelProbe
arborLabel	python/probe_analysis/readProbe.py	/^                        arborLabel  = keySP[1]$/;"	v
arborLabel	python/probe_analysis/readProbe.py	/^                        arborLabel = str(arborID)$/;"	v
args	src/bindings/pyPV.py	/^   args = ["pv", "-p", "input\/BasicSystemTest.params", "-t"]$/;"	v
argsSet	src/arch/cuda/CudaKernel.hpp	/^   bool argsSet;$/;"	m	class:PVCuda::CudaKernel
arguments	src/columns/PV_Init.hpp	/^   Arguments *arguments;$/;"	m	class:PV::PV_Init
arrayPresent	src/io/PVParams.cpp	/^bool PVParams::arrayPresent(const char *groupName, const char *paramName) {$/;"	f	class:PV::PVParams
arrayPresent	src/io/PVParams.cpp	/^bool ParameterGroup::arrayPresent(const char *name) {$/;"	f	class:PV::ParameterGroup
arraySize	src/io/PVParams.hpp	/^   int arraySize; \/\/ The number of values that have been pushed$/;"	m	class:PV::ParameterArray
arrayStack	src/io/PVParams.hpp	/^   ParameterArrayStack *arrayStack;$/;"	m	class:PV::PVParams
arrayStack	src/io/PVParams.hpp	/^   ParameterArrayStack *arrayStack;$/;"	m	class:PV::ParameterGroup
arrayValues	src/io/PVParams.cpp	/^PVParams::arrayValues(const char *groupName, const char *paramName, int *size, bool warnIfAbsent) {$/;"	f	class:PV::PVParams
arrayValues	src/io/PVParams.cpp	/^const float *ParameterGroup::arrayValues(const char *name, int *size) {$/;"	f	class:PV::ParameterGroup
arrayValuesDbl	src/io/PVParams.cpp	/^const double *PVParams::arrayValuesDbl($/;"	f	class:PV::PVParams
arrayValuesDbl	src/io/PVParams.cpp	/^const double *ParameterGroup::arrayValuesDbl(const char *name, int *size) {$/;"	f	class:PV::ParameterGroup
asVector	src/structures/Buffer.hpp	/^   std::vector<T> asVector() const { return mData; }$/;"	f	class:PV::Buffer
aspect	src/weightinit/InitCocircWeightsParams.hpp	/^   float aspect; \/\/ circular (not line oriented)$/;"	m	class:PV::InitCocircWeightsParams
aspect	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float aspect; \/\/ set to 1 for circularly symmetric (not oriented)$/;"	m	class:PV::InitGauss2DWeightsParams
assertAllZeroes	tests/GenericSystemTest/src/main.cpp	/^int assertAllZeroes(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
assertAllZeroes	tests/LCATest/src/main.cpp	/^int assertAllZeroes(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
assertAllZeroes	tests/MomentumLCATest/src/main.cpp	/^int assertAllZeroes(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
assertAllZeroes	tests/TotalEnergyTest/src/main.cpp	/^int assertAllZeroes(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
assertAllZeroes	tests/WriteSparseFileTest/src/main.cpp	/^int assertAllZeroes(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
assign_labels	python/param_draw.py	/^    def assign_labels(self):$/;"	m	class:Param_Parser
assign_object	python/param_draw.py	/^    def assign_object(self,type,name):$/;"	m	class:Param_Reader
avg	src/probes/StatsProbe.hpp	/^   float *avg;$/;"	m	class:PV::StatsProbe
basic_ostream	src/utils/PVLog.hpp	/^   typedef std::basic_ostream<C, T> basic_ostream;$/;"	t	struct:PV::Log
batchCommunicator	src/columns/Communicator.hpp	/^   MPI_Comm batchCommunicator() const { return batchMPIBlock->getComm(); }$/;"	f	class:PV::Communicator
batchFromRank	src/utils/conversions.h	/^static inline int batchFromRank(int rank, int batchWidth, int numRows, int numColumns) {$/;"	f
batchIndex	src/utils/conversions.h	/^static inline int batchIndex(int k, int nb, int nx, int ny, int nf) { return k \/ (nx * nf * ny); }$/;"	f
batchLoc	src/probes/PointProbe.hpp	/^   int batchLoc;$/;"	m	class:PV::PointProbe
batchMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock *batchMPIBlock  = nullptr;$/;"	m	class:PV::Communicator
batchRank	src/columns/Communicator.hpp	/^   int batchRank;$/;"	m	class:PV::Communicator
batchSkip	src/connections/HyPerConn.hpp	/^   bool *batchSkip;$/;"	m	class:PV::HyPerConn
batchSweepSize	src/io/PVParams.hpp	/^   int batchSweepSize; \/\/ The number of batch values sets in the sweep.  Each BatchSweep group in$/;"	m	class:PV::PVParams
batchSweeps	src/io/PVParams.hpp	/^   ParameterSweep **batchSweeps;$/;"	m	class:PV::PVParams
batchWidth	src/columns/Communicator.hpp	/^   int batchWidth;$/;"	m	class:PV::Communicator
batch_sweep	src/io/parser/params.y	/^batch_sweep : batch_sweep_id '{' batch_sweep_values '}' ';'$/;"	l
batch_sweep_id	src/io/parser/params.y	/^batch_sweep_id : T_BATCH_SWEEP T_STRING ':' T_ID '='$/;"	l
batch_sweep_values	src/io/parser/params.y	/^batch_sweep_values : \/* empty *\/$/;"	l
batch_sweep_values_filename	src/io/parser/params.y	/^batch_sweep_values_filename : T_FILENAME ';'$/;"	l
batch_sweep_values_filenames	src/io/parser/params.y	/^batch_sweep_values_filenames : batch_sweep_values_filename$/;"	l
batch_sweep_values_number	src/io/parser/params.y	/^batch_sweep_values_number : T_NUMBER ';'$/;"	l
batch_sweep_values_numbers	src/io/parser/params.y	/^batch_sweep_values_numbers : batch_sweep_values_number$/;"	l
batch_sweep_values_string	src/io/parser/params.y	/^batch_sweep_values_string : T_STRING ';'$/;"	l
batch_sweep_values_strings	src/io/parser/params.y	/^batch_sweep_values_strings : batch_sweep_values_string$/;"	l
bbfinder	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   BBFind bbfinder;$/;"	m	class:LocalizationBBFindProbe
beginStim	src/layers/Retina.hpp	/^   double beginStim;$/;"	m	struct:Retina_params
bgindex	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
bicubic	src/utils/BufferUtilsRescale.cpp	/^inline static float bicubic(float x) {$/;"	f	namespace:PV::BufferUtils::__anon2
bicubicInterp	src/utils/BufferUtilsRescale.cpp	/^void bicubicInterp($/;"	f	namespace:PV::BufferUtils::__anon2
binMax	src/layers/BinningLayer.hpp	/^   float binMax;$/;"	m	class:PV::BinningLayer
binMax	src/layers/WTALayer.hpp	/^   float binMax;$/;"	m	class:PV::WTALayer
binMin	src/layers/BinningLayer.hpp	/^   float binMin;$/;"	m	class:PV::BinningLayer
binMin	src/layers/WTALayer.hpp	/^   float binMin;$/;"	m	class:PV::WTALayer
binSigma	src/layers/BinningLayer.hpp	/^   float binSigma;$/;"	m	class:PV::BinningLayer
binary	src/io/FileStream.hpp	/^   bool binary() { return mFStream.flags() & std::ios_base::binary; }$/;"	f	class:PV::FileStream
blendMaps	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::blendMaps(const Map3 &mapA, const Map3 &mapB, float interp)$/;"	f	class:BBFind
block_size	src/arch/cuda/CudaKernel.hpp	/^   dim3 block_size;$/;"	m	class:PVCuda::CudaKernel
blockingNormalize_dW	src/connections/HyPerConn.cpp	/^void HyPerConn::blockingNormalize_dW() {$/;"	f	class:PV::HyPerConn
bottom	demos/HeatMapLocalization/src/BBFind.hpp	/^            int bottom() const { return y + height\/ 2; }$/;"	f	class:BBFind::Rectangle
bottom	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int bottom;$/;"	m	struct:LocalizationData
boundList	python/probe_analysis/noArborReadProbe.py	/^            boundList = list(arange(minVal, maxVal, step))$/;"	v
boundList	python/probe_analysis/readProbe.py	/^                boundList = [list(arange(minVals[arborID], maxVals[arborID], stepWidths[arborID])) if stepWidths[arborID] != 0.0 else [0] for arborID in range(numArbors[tok])] # List of separators (edges) for bins$/;"	v
boundListHist	python/probe_analysis/noArborReadProbe.py	/^                boundListHist = list(arange(minVal, maxVal, stepHist))$/;"	v
boundingBoxLineWidth	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int boundingBoxLineWidth = 5;$/;"	m	class:BBFindConfRemapProbe
boundingBoxLineWidth	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int boundingBoxLineWidth;$/;"	m	class:LocalizationProbe
boundingboxFinder	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   std::vector<BBFind> boundingboxFinder;$/;"	m	class:BBFindConfRemapLayer
boundingboxGuessSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int boundingboxGuessSize;$/;"	m	class:BBFindConfRemapLayer
boundingboxGuessSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int boundingboxGuessSize;$/;"	m	class:LocalizationBBFindProbe
bounds	python/probe_analysis/noArborReadProbe.py	/^bounds = {}$/;"	v
bowtieAngle	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float bowtieAngle; \/\/ bowtie angle$/;"	m	class:PV::InitGauss2DWeightsParams
bowtieFlag	src/weightinit/InitGauss2DWeightsParams.hpp	/^   bool bowtieFlag; \/\/ flag for setting bowtie angle$/;"	m	class:PV::InitGauss2DWeightsParams
box_muller_data	src/columns/GaussianRandom.hpp	/^struct box_muller_data {$/;"	s
box_muller_state	src/utils/cl_random.h	/^struct box_muller_state {$/;"	s
bpp	src/io/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
buffer	src/columns/DataStore.hpp	/^   float *buffer(int bufferId) { return mBuffer->getBuffer(bufferId * mNumItems); }$/;"	f	class:PV::DataStore
buffer	src/columns/DataStore.hpp	/^   float *buffer(int bufferId, int level) {$/;"	f	class:PV::DataStore
bufferIndexFromCoords	demos/HeatMapLocalization/src/BBFind.cpp	/^int BBFind::bufferIndexFromCoords(int x, int y, int f, int nx, int ny, int nf)$/;"	f	class:BBFind
bufferSize	src/io/PVParams.hpp	/^   int bufferSize; \/\/ The size of the buffer in memory$/;"	m	class:PV::ParameterArray
bufferToMap3	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::bufferToMap3(const float *bufferStart, int nx, int ny, int nf)$/;"	f	class:BBFind
bufferToMap3	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::bufferToMap3(const float *bufferStart, int nx, int ny, int nf, int const * displayedCategories, int numDisplayedCategories)$/;"	f	class:BBFind
buffer_start	src/io/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon6
buflen	src/io/stb_image.h	/^   int buflen;$/;"	m	struct:__anon6
build	src/columns/PV_Init.hpp	/^   HyPerCol *build() {$/;"	f	class:PV::PV_Init
build	src/columns/buildandrun.cpp	/^HyPerCol *build(PV_Init *initObj) { return initObj ? createHyPerCol(initObj) : nullptr; }$/;"	f
buildFrameLookup	python/pvtools/pvpFile.py	/^    def buildFrameLookup(self):$/;"	m	class:pvpOpen
buildLabelToIdx	src/layers/Segmentify.cpp	/^int Segmentify::buildLabelToIdx(int batchIdx) {$/;"	f	class:PV::Segmentify
buildandrun	src/columns/buildandrun.cpp	/^int buildandrun($/;"	f
buildandrun1paramset	src/columns/buildandrun.cpp	/^int buildandrun1paramset($/;"	f
buildandverify	tests/test_mpi_specifyrowscolumns/src/test_mpi_specifyrowscolumns.cpp	/^int buildandverify(PV::PV_Init *initObj) {$/;"	f
burstDuration	src/layers/Retina.hpp	/^   float burstDuration; \/\/ duration of each burst, <=0 -> sinusoidal$/;"	m	struct:Retina_params
burstFreq	src/layers/Retina.hpp	/^   float burstFreq; \/\/ frequency of bursts$/;"	m	struct:Retina_params
calcBatchElementStart	src/checkpointing/CheckpointEntryDataStore.cpp	/^float *CheckpointEntryDataStore::calcBatchElementStart(int frame) const {$/;"	f	class:PV::CheckpointEntryDataStore
calcBatchIndexFromRank	src/structures/MPIBlock.cpp	/^int MPIBlock::calcBatchIndexFromRank(int const rank) const {$/;"	f	class:PV::MPIBlock
calcBatchIndexFromRankInternal	src/structures/MPIBlock.cpp	/^int MPIBlock::calcBatchIndexFromRankInternal(int const rank) const {$/;"	f	class:PV::MPIBlock
calcBorderExcess	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^int CudaPoolingDeliverKernel::calcBorderExcess($/;"	f	class:PVCuda::CudaPoolingDeliverKernel
calcBorderExcess	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^int CudaTransposePoolingDeliverKernel::calcBorderExcess($/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
calcBurstStatus	src/layers/Retina.cpp	/^static inline float calcBurstStatus(double timed, Retina_params *params) {$/;"	f	file:
calcColumnFromRank	src/structures/MPIBlock.cpp	/^int MPIBlock::calcColumnFromRank(int const rank) const {$/;"	f	class:PV::MPIBlock
calcColumnFromRankInternal	src/structures/MPIBlock.cpp	/^int MPIBlock::calcColumnFromRankInternal(int const rank) const { return rank % getNumColumns(); }$/;"	f	class:PV::MPIBlock
calcDelta	src/weightinit/InitWeightsParams.cpp	/^float InitWeightsParams::calcDelta(int post, float dPost, float distHeadPreUnits) {$/;"	f	class:PV::InitWeightsParams
calcDistChordCocircKurvePreNKurvePost	src/weightinit/InitCocircWeights.cpp	/^bool InitCocircWeights::calcDistChordCocircKurvePreNKurvePost($/;"	f	class:PV::InitCocircWeights
calcDthPre	src/weightinit/InitGauss2DWeightsParams.cpp	/^float InitGauss2DWeightsParams::calcDthPre() { return PI * thetaMax \/ (float)numOrientationsPre; }$/;"	f	class:PV::InitGauss2DWeightsParams
calcGapStrength	src/layers/LIFGap.cpp	/^int LIFGap::calcGapStrength() {$/;"	f	class:PV::LIFGap
calcKurveAndSigmaKurve	src/weightinit/InitCocircWeightsParams.cpp	/^float InitCocircWeightsParams::calcKurveAndSigmaKurve($/;"	f	class:PV::InitCocircWeightsParams
calcKurvePostAndSigmaKurvePost	src/weightinit/InitCocircWeightsParams.cpp	/^float InitCocircWeightsParams::calcKurvePostAndSigmaKurvePost(int kfPost) {$/;"	f	class:PV::InitCocircWeightsParams
calcMPIBatchIndex	src/checkpointing/CheckpointEntryDataStore.cpp	/^int CheckpointEntryDataStore::calcMPIBatchIndex(int frame) const {$/;"	f	class:PV::CheckpointEntryDataStore
calcManyScale	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^int CudaPoolingDeliverKernel::calcManyScale(int preRestricted, int postRestricted) { return 1; }$/;"	f	class:PVCuda::CudaPoolingDeliverKernel
calcManyScale	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^int CudaTransposePoolingDeliverKernel::calcManyScale(int preRestricted, int postRestricted) {$/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
calcMinMaxWeights	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^void CheckpointEntryWeightPvp::calcMinMaxWeights(float *minWeightPtr, float *maxWeightPtr) const {$/;"	f	class:PV::CheckpointEntryWeightPvp
calcNormDist	src/layers/BinningLayer.cpp	/^float BinningLayer::calcNormDist(float xVal, float mean, float sigma) {$/;"	f	class:PV::BinningLayer
calcNumCells	src/structures/MPIBlock.cpp	/^int MPIBlock::calcNumCells(int cellSize, int overallSize) {$/;"	f	class:PV::MPIBlock
calcNumExtended	src/layers/HyPerLayer.cpp	/^void HyPerLayer::calcNumExtended() {$/;"	f	class:PV::HyPerLayer
calcOtherParams	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitCocircWeightsParams
calcOtherParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitGauss2DWeightsParams
calcOtherParams	src/weightinit/InitIdentWeightsParams.cpp	/^void InitIdentWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitIdentWeightsParams
calcOtherParams	src/weightinit/InitOneToOneWeightsParams.cpp	/^void InitOneToOneWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitOneToOneWeightsParams
calcOtherParams	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^void InitOneToOneWeightsWithDelaysParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
calcOtherParams	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^void InitSpreadOverArborsWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
calcOtherParams	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::calcOtherParams(int dataPatchIndex) {$/;"	f	class:PV::InitWeightsParams
calcOtherParams	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^void InitGaborWeightsParams::calcOtherParams(int patchIndex) {$/;"	f	class:PV::InitGaborWeightsParams
calcRankFromRowColBatch	src/structures/MPIBlock.cpp	/^int MPIBlock::calcRankFromRowColBatch($/;"	f	class:PV::MPIBlock
calcRowColBatchFromRank	src/structures/MPIBlock.cpp	/^void MPIBlock::calcRowColBatchFromRank($/;"	f	class:PV::MPIBlock
calcRowFromRank	src/structures/MPIBlock.cpp	/^int MPIBlock::calcRowFromRank(int const rank) const {$/;"	f	class:PV::MPIBlock
calcRowFromRankInternal	src/structures/MPIBlock.cpp	/^int MPIBlock::calcRowFromRankInternal(int const rank) const {$/;"	f	class:PV::MPIBlock
calcStride	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^int CudaPoolingDeliverKernel::calcStride(int preRestricted, int postRestricted) {$/;"	f	class:PVCuda::CudaPoolingDeliverKernel
calcStride	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^int CudaTransposePoolingDeliverKernel::calcStride(int preRestricted, int postRestricted) {$/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
calcTh0Pre	src/weightinit/InitGauss2DWeightsParams.cpp	/^float InitGauss2DWeightsParams::calcTh0Pre(float dthPre) { return rotate * dthPre \/ 2.0f; }$/;"	f	class:PV::InitGauss2DWeightsParams
calcThPost	src/weightinit/InitGauss2DWeightsParams.cpp	/^float InitGauss2DWeightsParams::calcThPost(int fPost) {$/;"	f	class:PV::InitGauss2DWeightsParams
calcTimesteps	src/components/AdaptiveTimeScaleController.cpp	/^std::vector<double> AdaptiveTimeScaleController::calcTimesteps($/;"	f	class:PV::AdaptiveTimeScaleController
calcTimesteps	src/components/KneeTimeScaleController.cpp	/^KneeTimeScaleController::calcTimesteps(double timeValue, std::vector<double> const &rawTimeScales) {$/;"	f	class:PV::KneeTimeScaleController
calcTimesteps	src/components/LogTimeScaleController.cpp	/^LogTimeScaleController::calcTimesteps(double timeValue, std::vector<double> const &rawTimeScales) {$/;"	f	class:PV::LogTimeScaleController
calcUnitCellIndex	src/connections/HyPerConn.cpp	/^int HyPerConn::calcUnitCellIndex($/;"	f	class:PV::HyPerConn
calcUpdateNumber	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::calcUpdateNumber(double timevalue) {$/;"	f	class:HyPerConnCheckpointerTestProbe
calcUpdateNumber	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::calcUpdateNumber(double timevalue) {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
calcUpdateNumber	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::calcUpdateNumber(double timevalue) {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
calcUpdateNumber	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::calcUpdateNumber(double timevalue) {$/;"	f	class:PoolingConnCheckpointerTestProbe
calcV	src/initv/BaseInitV.cpp	/^int BaseInitV::calcV(float *V, PVLayerLoc const *loc) { return PV_SUCCESS; }$/;"	f	class:PV::BaseInitV
calcV	src/initv/ConstantV.cpp	/^int ConstantV::calcV(float *V, PVLayerLoc const *loc) {$/;"	f	class:PV::ConstantV
calcV	src/initv/GaussianRandomV.cpp	/^int GaussianRandomV::calcV(float *V, PVLayerLoc const *loc) {$/;"	f	class:PV::GaussianRandomV
calcV	src/initv/InitVFromFile.cpp	/^int InitVFromFile::calcV(float *V, const PVLayerLoc *loc) {$/;"	f	class:PV::InitVFromFile
calcV	src/initv/UniformRandomV.cpp	/^int UniformRandomV::calcV(float *V, PVLayerLoc const *loc) {$/;"	f	class:PV::UniformRandomV
calcValues	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::calcValues(double timevalue) {$/;"	f	class:BBFindConfRemapProbe
calcValues	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^int LocalizationBBFindProbe::calcValues(double timevalue) {$/;"	f	class:LocalizationBBFindProbe
calcValues	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::calcValues(double timevalue) {$/;"	f	class:LocalizationProbe
calcValues	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::calcValues(double timeValue) {$/;"	f	class:PV::AbstractNormProbe
calcValues	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::calcValues(double timeValue) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
calcValues	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::calcValues(double timevalue) {$/;"	f	class:PV::ColumnEnergyProbe
calcValues	src/probes/KernelProbe.hpp	/^   virtual int calcValues(double timevalue) { return PV_FAILURE; }$/;"	f	class:PV::KernelProbe
calcValues	src/probes/L2NormProbe.cpp	/^int L2NormProbe::calcValues(double timevalue) {$/;"	f	class:PV::L2NormProbe
calcValues	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::calcValues(double timevalue) {$/;"	f	class:PV::PointLIFProbe
calcValues	src/probes/PointProbe.cpp	/^int PointProbe::calcValues(double timevalue) {$/;"	f	class:PV::PointProbe
calcValues	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::calcValues(double timeValue) {$/;"	f	class:PV::QuotientColProbe
calcValues	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   virtual int calcValues(double timevalue) { return PV_SUCCESS; }$/;"	f	class:HyPerConnCheckpointerTestProbe
calcValues	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   virtual int calcValues(double timevalue) { return PV_SUCCESS; }$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
calcValues	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   virtual int calcValues(double timevalue) { return PV_SUCCESS; }$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
calcValues	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   virtual int calcValues(double timevalue) { return PV_SUCCESS; }$/;"	f	class:PoolingConnCheckpointerTestProbe
calcValues	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^int ResetStateOnTriggerTestProbe::calcValues(double timevalue) {$/;"	f	class:ResetStateOnTriggerTestProbe
calcValues	tests/TriggerTest/src/TriggerTestLayerProbe.cpp	/^int TriggerTestLayerProbe::calcValues(double timevalue) {$/;"	f	class:PV::TriggerTestLayerProbe
calcValues	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.hpp	/^   int calcValues(double timevalue) { return PV_FAILURE; }$/;"	f	class:PV::MomentumTestConnProbe
calcValues	tests/UpdateFromCloneTest/src/TestConnProbe.hpp	/^   int calcValues(double timevalue) { return PV_FAILURE; }$/;"	f	class:PV::TestConnProbe
calcWeights	src/weightinit/InitCloneKernelWeights.cpp	/^int InitCloneKernelWeights::calcWeights($/;"	f	class:PV::InitCloneKernelWeights
calcWeights	src/weightinit/InitCocircWeights.cpp	/^int InitCocircWeights::calcWeights(float *dataStart, int patchIndex, int arborId) {$/;"	f	class:PV::InitCocircWeights
calcWeights	src/weightinit/InitGauss2DWeights.cpp	/^int InitGauss2DWeights::calcWeights(float *dataStart, int dataPatchIndex, int arborId) {$/;"	f	class:PV::InitGauss2DWeights
calcWeights	src/weightinit/InitIdentWeights.cpp	/^int InitIdentWeights::calcWeights(float *dataStart, int patchIndex, int arborId) {$/;"	f	class:PV::InitIdentWeights
calcWeights	src/weightinit/InitMaxPoolingWeights.cpp	/^int InitMaxPoolingWeights::calcWeights($/;"	f	class:PV::InitMaxPoolingWeights
calcWeights	src/weightinit/InitOneToOneWeights.cpp	/^int InitOneToOneWeights::calcWeights(float *dataStart, int patchIndex, int arborId) {$/;"	f	class:PV::InitOneToOneWeights
calcWeights	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^int InitOneToOneWeightsWithDelays::calcWeights(float *dataStart, int patchIndex, int arborId) {$/;"	f	class:PV::InitOneToOneWeightsWithDelays
calcWeights	src/weightinit/InitRandomWeights.cpp	/^int InitRandomWeights::calcWeights(float *dataStart, int dataPatchIndex, int arborId) {$/;"	f	class:PV::InitRandomWeights
calcWeights	src/weightinit/InitSmartWeights.cpp	/^int InitSmartWeights::calcWeights($/;"	f	class:PV::InitSmartWeights
calcWeights	src/weightinit/InitSpreadOverArborsWeights.cpp	/^int InitSpreadOverArborsWeights::calcWeights($/;"	f	class:PV::InitSpreadOverArborsWeights
calcWeights	src/weightinit/InitUniformWeights.cpp	/^int InitUniformWeights::calcWeights($/;"	f	class:PV::InitUniformWeights
calcWeights	src/weightinit/InitWeights.cpp	/^int InitWeights::calcWeights() {$/;"	f	class:PV::InitWeights
calcWeights	src/weightinit/InitWeights.cpp	/^int InitWeights::calcWeights(float *dataStart, int dataPatchIndex, int arborId) {$/;"	f	class:PV::InitWeights
calcWeights	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^int InitGaborWeights::calcWeights(float *dataStart, int patchIndex, int arborId) {$/;"	f	class:PV::InitGaborWeights
calcXDelta	src/weightinit/InitWeightsParams.cpp	/^float InitWeightsParams::calcXDelta(int iPost) {$/;"	f	class:PV::InitWeightsParams
calcYDelta	src/weightinit/InitWeightsParams.cpp	/^float InitWeightsParams::calcYDelta(int jPost) {$/;"	f	class:PV::InitWeightsParams
calc_scale	python/param_draw.py	/^    def calc_scale(self):$/;"	m	class:Param_Parser
calc_score	mlab/util/calc_score.m	/^function score = calc_score(estPvp, gtPvp)$/;"	f
calculateLabelVals	src/layers/Segmentify.cpp	/^int Segmentify::calculateLabelVals(int batchIdx) {$/;"	f	class:PV::Segmentify
calculateSparseWeightInfo	src/connections/HyPerConn.cpp	/^SparseWeightInfo HyPerConn::calculateSparseWeightInfo() const {$/;"	f	class:PV::HyPerConn
calculateThetas	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::calculateThetas(int kfPre_tmp, int patchIndex) {$/;"	f	class:PV::InitGauss2DWeightsParams
calculateWeight	src/weightinit/InitCocircWeightsParams.cpp	/^float InitCocircWeightsParams::calculateWeight() {$/;"	f	class:PV::InitCocircWeightsParams
calculate_phase_colorvalues	python/param_draw.py	/^    def calculate_phase_colorvalues():$/;"	f	function:mermaid_writeout
calculate_scale_colorvalues	python/param_draw.py	/^    def calculate_scale_colorvalues():$/;"	f	function:mermaid_writeout
callUpdateState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::callUpdateState(double simTime, double dt) {$/;"	f	class:PV::HyPerLayer
callingConn	src/weightinit/InitWeights.hpp	/^   HyPerConn *callingConn;$/;"	m	class:PV::InitWeights
canny	mlab/imgProc/canny.m	/^function [gradient, or] = canny(im, sigma)$/;"	f
ccx	python/analysis_parse.py	/^ccx = conn_vars.index("channelCode")$/;"	v
centerIdx	src/layers/SegmentLayer.hpp	/^   std::vector<std::map<int, int>> centerIdx;$/;"	m	class:PV::SegmentLayer
centerIdxBuf	src/layers/SegmentLayer.hpp	/^   int *centerIdxBuf;$/;"	m	class:PV::SegmentLayer
centerIdxBufSize	src/layers/SegmentLayer.hpp	/^   int centerIdxBufSize;$/;"	m	class:PV::SegmentLayer
channel	src/connections/BaseConnection.hpp	/^   ChannelType channel;$/;"	m	class:PV::BaseConnection
channel	src/io/stb_image.h	/^typedef struct { stbi_uc size, type, channel; } stbi__pic_packet;$/;"	m	struct:__anon18
channel	src/weightinit/InitWeightsParams.hpp	/^   ChannelType channel; \/\/ which channel of the post to update (e.g. inhibit)$/;"	m	class:PV::InitWeightsParams
char_traits	src/utils/PVLog.hpp	/^   typedef T char_traits;$/;"	t	struct:PV::LogStreamTraits
checkBowtieAngle	src/weightinit/InitGauss2DWeightsParams.cpp	/^bool InitGauss2DWeightsParams::checkBowtieAngle(float xp, float yp) {$/;"	f	class:PV::InitGauss2DWeightsParams
checkColorDiff	src/weightinit/InitGauss2DWeightsParams.cpp	/^bool InitGauss2DWeightsParams::checkColorDiff(int fPost) {$/;"	f	class:PV::InitGauss2DWeightsParams
checkCommunicatedFlag	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::checkCommunicatedFlag(PV::BaseObject *dependencyObject) {$/;"	f	class:HyPerConnCheckpointerTestProbe
checkCommunicatedFlag	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::checkCommunicatedFlag($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
checkCommunicatedFlag	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::checkCommunicatedFlag($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
checkCommunicatedFlag	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::checkCommunicatedFlag(PV::BaseObject *dependencyObject) {$/;"	f	class:PoolingConnCheckpointerTestProbe
checkComparisonNonzero	tests/LayerRestartTest/src/LayerRestartTest.cpp	/^int checkComparisonNonzero(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
checkComparisonZero	tests/LayerRestartTest/src/LayerRestartTest.cpp	/^int checkComparisonZero(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
checkConfiguration	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTest.cpp	/^void checkConfiguration(PV::PV_Init &pv_initObj, char const *programName) {$/;"	f
checkConfiguration	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTest.cpp	/^void checkConfiguration(PV::PV_Init &pv_initObj, char const *programName) {$/;"	f
checkConfiguration	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTest.cpp	/^void checkConfiguration(PV::PV_Init &pv_initObj, char const *programName) {$/;"	f
checkConfiguration	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTest.cpp	/^void checkConfiguration(PV::PV_Init &pv_initObj, char const *programName) {$/;"	f
checkData	python/pvtools/pvpFile.py	/^    def checkData(self, data):$/;"	m	class:pvpOpen
checkDirExists	src/io/fileio.cpp	/^int checkDirExists(MPIBlock const *mpiBlock, const char *dirname, struct stat *pathstat) {$/;"	f	namespace:PV
checkDuplicates	src/io/PVParams.cpp	/^int PVParams::checkDuplicates(const char *paramName, double val) {$/;"	f	class:PV::PVParams
checkFlags	src/weightinit/InitCocircWeightsParams.cpp	/^bool InitCocircWeightsParams::checkFlags(float dyP_shift, float dxP) {$/;"	f	class:PV::InitCocircWeightsParams
checkHalo	tests/MarginWidthTest/src/MarginWidthTest.cpp	/^bool checkHalo(PVHalo const *halo, int lt, int rt, int dn, int up) {$/;"	f
checkHeaders	python/pvtools/pvpFile.py	/^    def checkHeaders(self, header1, header2):$/;"	m	class:pvpOpen
checkIdxBufSize	src/layers/SegmentLayer.cpp	/^int SegmentLayer::checkIdxBufSize(int newSize) {$/;"	f	class:PV::SegmentLayer
checkInput	tests/test_constant_input/src/test_constant_input.cpp	/^int checkInput(const PVLayerLoc *loc, const float *data, float val, bool extended) {$/;"	f
checkLabelBufSize	src/layers/SegmentLayer.cpp	/^int SegmentLayer::checkLabelBufSize(int newSize) {$/;"	f	class:PV::SegmentLayer
checkLabelValBuf	src/layers/Segmentify.cpp	/^int Segmentify::checkLabelValBuf(int newSize) {$/;"	f	class:PV::Segmentify
checkLoc	src/initv/InitVFromFile.cpp	/^int InitVFromFile::checkLoc($/;"	f	class:PV::InitVFromFile
checkLoc	tests/test_constant_input/src/test_constant_input.cpp	/^int checkLoc(HyPerCol *hc, const PVLayerLoc *loc) {$/;"	f
checkLocValue	src/initv/InitVFromFile.cpp	/^int InitVFromFile::checkLocValue(int fromParams, int fromFile, const char *field) {$/;"	f	class:PV::InitVFromFile
checkOutputVals	tests/SegmentTest/src/SegmentifyTest.cpp	/^int SegmentifyTest::checkOutputVals(int yi, int xi, int fi, float targetVal, float actualVal) {$/;"	f	class:PV::SegmentifyTest
checkPatchDimensions	src/connections/HyPerConn.cpp	/^int HyPerConn::checkPatchDimensions() {$/;"	f	class:PV::HyPerConn
checkPatchSize	src/connections/HyPerConn.cpp	/^int HyPerConn::checkPatchSize(int patchSize, int scalePre, int scalePost, char dim) {$/;"	f	class:PV::HyPerConn
checkProbe	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTest.cpp	/^int checkProbe(PV::HyPerCol *hc, int argc, char **argv) {$/;"	f
checkProbe	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTest.cpp	/^int checkProbe(PV::HyPerCol *hc, int argc, char **argv) {$/;"	f
checkProbe	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTest.cpp	/^int checkProbe(PV::HyPerCol *hc, int argc, char **argv) {$/;"	f
checkProbe	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTest.cpp	/^int checkProbe(PV::HyPerCol *hc, int argc, char **argv) {$/;"	f
checkProbesOnExit	tests/WriteActivitySparseTest/src/WriteActivitySparseTest.cpp	/^int checkProbesOnExit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
checkRankInBounds	src/structures/MPIBlock.cpp	/^void MPIBlock::checkRankInBounds(int const rank) const {$/;"	f	class:PV::MPIBlock
checkSameLoc	src/weightinit/InitCocircWeightsParams.cpp	/^bool InitCocircWeightsParams::checkSameLoc(int kfPost) {$/;"	f	class:PV::InitCocircWeightsParams
checkSharedMemSize	src/cudakernels/CudaRecvPre.cpp	/^void CudaRecvPre::checkSharedMemSize(size_t sharedSize) {$/;"	f	class:PVCuda::CudaRecvPre
checkThetaDiff	src/weightinit/InitGauss2DWeightsParams.cpp	/^bool InitGauss2DWeightsParams::checkThetaDiff(float thPost) {$/;"	f	class:PV::InitGauss2DWeightsParams
checkTok	python/probe_analysis/readProbe.py	/^        checkTok = [[[tok in string for string in tup] for tup in line] for line in lines]$/;"	v
checkValidAnchorString	src/layers/InputLayer.cpp	/^int InputLayer::checkValidAnchorString(const char *offsetAnchor) {$/;"	f	class:PV::InputLayer
checkVertices	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::checkVertices() const {$/;"	f	class:PV::ANNErrorLayer
checkVertices	src/layers/ANNLayer.cpp	/^int ANNLayer::checkVertices() const {$/;"	f	class:PV::ANNLayer
checkWeights	tests/ReduceAcrossBatchTest/src/main.cpp	/^int checkWeights(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
check_activity	tests/test_border_activity/src/test_border_activity.cpp	/^int check_activity(HyPerLayer *l) {$/;"	f
check_borders	tests/test_datatypes/src/test_datatypes.cpp	/^static int check_borders(float *image, PV::BorderExchange *borderExchanger, PVLayerLoc loc) {$/;"	f	file:
check_cocirc_vs_hyper	tests/test_cocirc/src/test_cocirc.cpp	/^int check_cocirc_vs_hyper(HyPerConn *cHyPer, HyPerConn *cKernel, int kPre, int axonID) {$/;"	f
check_kernel_vs_hyper	tests/test_gauss2d/src/test_gauss2d.cpp	/^int check_kernel_vs_hyper(HyPerConn *cHyPer, HyPerConn *cKernel, int kPre, int axonID) {$/;"	f
check_nodraw	python/param_draw.py	/^    def check_nodraw(self,line):$/;"	m	class:Param_Reader
check_weights	tests/test_post_weights/src/test_post_weights.cpp	/^static int check_weights(HyPerConn *c, PVPatch **postWeights, float *postDataStart) {$/;"	f	file:
checkoutput	tests/AdjustAxonalArborsTest/src/main.cpp	/^int checkoutput(HyPerCol *hc, int argc, char **argv) {$/;"	f
checkpointDataStore	src/columns/Publisher.cpp	/^void Publisher::checkpointDataStore($/;"	f	class:PV::Publisher
checkpointNow	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointNow() {$/;"	f	class:PV::Checkpointer
checkpointPvpActivityFloat	src/layers/HyPerLayer.cpp	/^void HyPerLayer::checkpointPvpActivityFloat($/;"	f	class:PV::HyPerLayer
checkpointRandState	src/layers/HyPerLayer.cpp	/^void HyPerLayer::checkpointRandState($/;"	f	class:PV::HyPerLayer
checkpointRead	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointRead(double *simTimePointer, long int *currentStepPointer) {$/;"	f	class:PV::Checkpointer
checkpointTimers	src/probes/StatsProbe.cpp	/^int StatsProbe::checkpointTimers(PrintStream &timerstream) {$/;"	f	class:PV::StatsProbe
checkpointToDirectory	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointToDirectory(std::string const &directory) {$/;"	f	class:PV::Checkpointer
checkpointWeightPvp	src/connections/HyPerConn.cpp	/^void HyPerConn::checkpointWeightPvp($/;"	f	class:PV::HyPerConn
checkpointWrite	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointWrite(double simTime) {$/;"	f	class:PV::Checkpointer
checkpointWriteSignal	src/checkpointing/Checkpointer.cpp	/^bool Checkpointer::checkpointWriteSignal() {$/;"	f	class:PV::Checkpointer
checkpointWriteSimtime	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointWriteSimtime() {$/;"	f	class:PV::Checkpointer
checkpointWriteStep	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointWriteStep() {$/;"	f	class:PV::Checkpointer
checkpointWriteWallclock	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::checkpointWriteWallclock() {$/;"	f	class:PV::Checkpointer
cl_box_muller	src/utils/cl_random.c	/^float cl_box_muller($/;"	f
cl_random_get	src/utils/cl_random.c	/^taus_uint4 cl_random_get(taus_uint4 state) {$/;"	f
cl_random_init	src/utils/cl_random.c	/^int cl_random_init(taus_uint4 *state, size_t count, unsigned int seed) {$/;"	f
cl_random_max	src/utils/cl_random.h	/^static inline double cl_random_max() { return (double)CL_RANDOM_MAX; }$/;"	f
cl_random_prob	src/utils/cl_random.h	/^static inline float cl_random_prob(taus_uint4 state) {$/;"	f
classNames	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char ** classNames = NULL; \/\/ The array of strings giving the names of each category.  Only the root process creates or uses this array.$/;"	m	class:BBFindConfRemapProbe
classNames	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char ** classNames; \/\/ The array of strings giving the names of each category.  Only the root process creates or uses this array.$/;"	m	class:LocalizationProbe
classNamesFile	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * classNamesFile = NULL;$/;"	m	class:BBFindConfRemapProbe
classNamesFile	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * classNamesFile;$/;"	m	class:LocalizationProbe
clayer	src/layers/HyPerLayer.hpp	/^   PVLayer *clayer;$/;"	m	class:PV::HyPerLayer
cleanup	src/columns/BaseObject.hpp	/^   virtual int cleanup() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
cleanup	src/connections/HyPerConn.cpp	/^int HyPerConn::cleanup() {$/;"	f	class:PV::HyPerConn
clear	src/observerpattern/ObserverTable.cpp	/^void ObserverTable::clear(bool deallocateFlag) {$/;"	f	class:PV::ObserverTable
clearFrames	demos/HeatMapLocalization/src/main.cpp	/^   void clearFrames() {$/;"	f	class:FrameServer
clearGateIdxBuffer	src/connections/PoolingConn.cpp	/^void PoolingConn::clearGateIdxBuffer() {$/;"	f	class:PV::PoolingConn
clearHasBeenRead	src/io/PVParams.hpp	/^   void clearHasBeenRead() { hasBeenReadFlag = false; }$/;"	f	class:PV::Parameter
clearHasBeenRead	src/io/PVParams.hpp	/^   void clearHasBeenRead() { hasBeenReadFlag = false; }$/;"	f	class:PV::ParameterArray
clearHasBeenRead	src/io/PVParams.hpp	/^   void clearHasBeenRead() { hasBeenReadFlag = false; }$/;"	f	class:PV::ParameterString
clearHasBeenReadFlags	src/io/PVParams.cpp	/^int PVParams::clearHasBeenReadFlags() {$/;"	f	class:PV::PVParams
clearHasBeenReadFlags	src/io/PVParams.cpp	/^int ParameterGroup::clearHasBeenReadFlags() {$/;"	f	class:PV::ParameterGroup
clearKeywordHandlerList	src/columns/Factory.cpp	/^int Factory::clearKeywordHandlerList() {$/;"	f	class:PV::Factory
clearProgressFlags	src/layers/HyPerLayer.cpp	/^void HyPerLayer::clearProgressFlags() {$/;"	f	class:PV::HyPerLayer
clearWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::clearWeights(float **dataStart, int numPatches, int nxp, int nyp, int nfp) {$/;"	f	class:PV::HyPerConn
clearWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::clearWeights(float *arborDataStart, int numPatches, int nxp, int nyp, int nfp) {$/;"	f	class:PV::HyPerConn
clear_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::clear_dW(int arborId) {$/;"	f	class:PV::HyPerConn
clear_numActivations	src/connections/HyPerConn.cpp	/^int HyPerConn::clear_numActivations(int arborId) {$/;"	f	class:PV::HyPerConn
clines	python/get_names.py	/^clines = listdir(sys.argv[1] + "\/src\/connections")$/;"	v
clip	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::clip(Map3 &confMap, float minVal, float maxVal)$/;"	f	class:BBFind
clipSquash	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::clipSquash(Map3 &map, int numPasses, float initialMax)$/;"	f	class:BBFind
cloneParameters	src/connections/CloneConn.cpp	/^int CloneConn::cloneParameters() {$/;"	f	class:PV::CloneConn
cloneParameters	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::cloneParameters() {$/;"	f	class:PV::PlasticCloneConn
clones	src/connections/HyPerConn.hpp	/^         clones; \/\/ A vector of plastic clones that are cloning from this connection$/;"	m	class:PV::HyPerConn
close	python/pvtools/pvpFile.py	/^    def close(self):$/;"	m	class:pvpOpen
cocircCalcWeights	src/weightinit/InitCocircWeights.cpp	/^int InitCocircWeights::cocircCalcWeights(float *w_tmp, InitCocircWeightsParams *weightParamPtr) {$/;"	f	class:PV::InitCocircWeights
cocircCalcWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::cocircCalcWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
cocircCalcWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::cocircCalcWeights($/;"	f	class:PV::KernelConnDebugInitWeights
cocirc_self	src/weightinit/InitCocircWeightsParams.hpp	/^   float cocirc_self;$/;"	m	class:PV::InitCocircWeightsParams
code	src/io/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon8
code_bits	src/io/stb_image.h	/^   int code_bits; \/\/ number of valid bits$/;"	m	struct:__anon9
code_buffer	src/io/stb_image.h	/^   stbi__uint32 code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon9
code_buffer	src/io/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon13
codes	src/io/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon20
coeff	src/io/stb_image.h	/^      short *coeff; \/\/ progressive only$/;"	m	struct:__anon9::__anon10
coeff_h	src/io/stb_image.h	/^      int coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
coeff_w	src/io/stb_image.h	/^      int coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon9::__anon10
coefficient	src/probes/BaseProbe.hpp	/^   double coefficient;$/;"	m	class:PV::BaseProbe
col2gray	mlab/imgProc/col2gray.m	/^function ret = col2gray(im)$/;"	f
colNx	python/analysis_parse.py	/^                colNx = float(re.search("-?\\d+(\\.\\d+)?", line).group())$/;"	v
colNx	python/analysis_parse.py	/^colNx = 0$/;"	v
colNy	python/analysis_parse.py	/^                colNy = float(re.search("-?\\d+(\\.\\d+)?", line).group())$/;"	v
colNy	python/analysis_parse.py	/^colNy = 0$/;"	v
col_regex	python/param_draw.py	/^    col_regex = re.compile('\\s*HyPerCol\\s*"\\w+"\\s*=\\s*{')$/;"	v	class:Param_Reader
colinear	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^bool RescaleLayerTestProbe::colinear($/;"	f	class:PV::RescaleLayerTestProbe
collectFreq	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::collectFreq(const float *sourceData) {$/;"	f	class:PV::ShuffleLayer
color_table	src/io/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon20
columnFromRank	src/utils/conversions.h	/^static inline int columnFromRank(int rank, int numRows, int numColumns) {$/;"	f
columnId	src/columns/HyPerCol.hpp	/^   int columnId() { return mCommunicator->commRank(); }$/;"	f	class:PV::HyPerCol
combineWeightFiles	src/connections/HyPerConn.hpp	/^   bool combineWeightFiles;$/;"	m	class:PV::HyPerConn
combineWeightFiles	src/weightinit/InitWeightsParams.hpp	/^   bool combineWeightFiles;$/;"	m	class:PV::InitWeightsParams
combine_dW_with_W_flag	src/connections/HyPerConn.hpp	/^   bool combine_dW_with_W_flag; \/\/ indicates that dwDataStart should be set equal to wDataStart,$/;"	m	class:PV::HyPerConn
combinebatches	mlab/util/combinebatches.m	/^function combinebatches(directory, layer_name, num_batch, batch_method, batch_width, total_frames)$/;"	f
commBatch	src/columns/Communicator.cpp	/^int Communicator::commBatch(int commId) {$/;"	f	class:PV::Communicator
commBatch	src/columns/Communicator.hpp	/^   int commBatch() { return commBatch(globalRank); }$/;"	f	class:PV::Communicator
commBatch	src/columns/HyPerCol.hpp	/^   int commBatch() { return mCommunicator->commBatch(); }$/;"	f	class:PV::HyPerCol
commColumn	src/columns/Communicator.cpp	/^int Communicator::commColumn(int commId) { return columnFromRank(commId, numRows, numCols); }$/;"	f	class:PV::Communicator
commColumn	src/columns/Communicator.hpp	/^   int commColumn() { return commColumn(localRank); }$/;"	f	class:PV::Communicator
commColumn	src/columns/HyPerCol.hpp	/^   int commColumn() { return mCommunicator->commColumn(); }$/;"	f	class:PV::HyPerCol
commFinalize	src/columns/PV_Init.cpp	/^int PV_Init::commFinalize() {$/;"	f	class:PV::PV_Init
commIdFromRowColumn	src/columns/Communicator.cpp	/^int Communicator::commIdFromRowColumn(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
commInit	src/columns/PV_Init.cpp	/^int PV_Init::commInit(int *argc, char ***argv) {$/;"	f	class:PV::PV_Init
commRank	src/columns/Communicator.hpp	/^   int commRank() { return localRank; }$/;"	f	class:PV::Communicator
commRow	src/columns/Communicator.cpp	/^int Communicator::commRow(int commId) { return rowFromRank(commId, numRows, numCols); }$/;"	f	class:PV::Communicator
commRow	src/columns/Communicator.hpp	/^   int commRow() { return commRow(localRank); }$/;"	f	class:PV::Communicator
commRow	src/columns/HyPerCol.hpp	/^   int commRow() { return mCommunicator->commRow(); }$/;"	f	class:PV::HyPerCol
commSize	src/columns/Communicator.hpp	/^   int commSize() { return localSize; }$/;"	f	class:PV::Communicator
comment_regex	python/param_draw.py	/^    comment_regex = re.compile('(.*)\/\/')$/;"	v	class:Param_Reader
communicateInitInfo	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::communicateInitInfo() {$/;"	f	class:BBFindConfRemapLayer
communicateInitInfo	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::communicateInitInfo() {$/;"	f	class:BBFindConfRemapProbe
communicateInitInfo	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^int LocalizationBBFindProbe::communicateInitInfo() {$/;"	f	class:LocalizationBBFindProbe
communicateInitInfo	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::communicateInitInfo() {$/;"	f	class:LocalizationProbe
communicateInitInfo	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^int MaskFromMemoryBuffer::communicateInitInfo() {$/;"	f	class:MaskFromMemoryBuffer
communicateInitInfo	src/columns/BaseObject.hpp	/^   virtual int communicateInitInfo() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
communicateInitInfo	src/connections/BaseConnection.cpp	/^int BaseConnection::communicateInitInfo() {$/;"	f	class:PV::BaseConnection
communicateInitInfo	src/connections/CloneConn.cpp	/^int CloneConn::communicateInitInfo() {$/;"	f	class:PV::CloneConn
communicateInitInfo	src/connections/CopyConn.cpp	/^int CopyConn::communicateInitInfo() {$/;"	f	class:PV::CopyConn
communicateInitInfo	src/connections/HyPerConn.cpp	/^int HyPerConn::communicateInitInfo() {$/;"	f	class:PV::HyPerConn
communicateInitInfo	src/connections/IdentConn.cpp	/^int IdentConn::communicateInitInfo() {$/;"	f	class:PV::IdentConn
communicateInitInfo	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::communicateInitInfo() {$/;"	f	class:PV::PlasticCloneConn
communicateInitInfo	src/connections/PoolingConn.cpp	/^int PoolingConn::communicateInitInfo() {$/;"	f	class:PV::PoolingConn
communicateInitInfo	src/connections/TransposeConn.cpp	/^int TransposeConn::communicateInitInfo() {$/;"	f	class:PV::TransposeConn
communicateInitInfo	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::communicateInitInfo() {$/;"	f	class:PV::TransposePoolingConn
communicateInitInfo	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::communicateInitInfo() {$/;"	f	class:PV::privateTransposeConn
communicateInitInfo	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::communicateInitInfo() {$/;"	f	class:PV::BackgroundLayer
communicateInitInfo	src/layers/BinningLayer.cpp	/^int BinningLayer::communicateInitInfo() {$/;"	f	class:PV::BinningLayer
communicateInitInfo	src/layers/CloneVLayer.cpp	/^int CloneVLayer::communicateInitInfo() {$/;"	f	class:PV::CloneVLayer
communicateInitInfo	src/layers/ConstantLayer.cpp	/^int ConstantLayer::communicateInitInfo() {$/;"	f	class:PV::ConstantLayer
communicateInitInfo	src/layers/FilenameParsingGroundTruthLayer.cpp	/^int FilenameParsingGroundTruthLayer::communicateInitInfo() {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
communicateInitInfo	src/layers/GapLayer.cpp	/^int GapLayer::communicateInitInfo() {$/;"	f	class:PV::GapLayer
communicateInitInfo	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::communicateInitInfo() {$/;"	f	class:PV::HyPerLCALayer
communicateInitInfo	src/layers/HyPerLayer.cpp	/^int HyPerLayer::communicateInitInfo() {$/;"	f	class:PV::HyPerLayer
communicateInitInfo	src/layers/LIF.cpp	/^int LIF::communicateInitInfo() {$/;"	f	class:PV::LIF
communicateInitInfo	src/layers/MaskLayer.cpp	/^int MaskLayer::communicateInitInfo() {$/;"	f	class:PV::MaskLayer
communicateInitInfo	src/layers/RescaleLayer.cpp	/^int RescaleLayer::communicateInitInfo() {$/;"	f	class:PV::RescaleLayer
communicateInitInfo	src/layers/Retina.cpp	/^int Retina::communicateInitInfo() {$/;"	f	class:PV::Retina
communicateInitInfo	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::communicateInitInfo() {$/;"	f	class:PV::RunningAverageLayer
communicateInitInfo	src/layers/SegmentLayer.cpp	/^int SegmentLayer::communicateInitInfo() {$/;"	f	class:PV::SegmentLayer
communicateInitInfo	src/layers/Segmentify.cpp	/^int Segmentify::communicateInitInfo() {$/;"	f	class:PV::Segmentify
communicateInitInfo	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::communicateInitInfo() {$/;"	f	class:PV::ShuffleLayer
communicateInitInfo	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::communicateInitInfo() {$/;"	f	class:PV::SigmoidLayer
communicateInitInfo	src/layers/WTALayer.cpp	/^int WTALayer::communicateInitInfo() {$/;"	f	class:PV::WTALayer
communicateInitInfo	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::communicateInitInfo() { return addConnToList(getTargetConn()); }$/;"	f	class:PV::NormalizeBase
communicateInitInfo	src/normalizers/NormalizeGroup.cpp	/^int NormalizeGroup::communicateInitInfo() {$/;"	f	class:PV::NormalizeGroup
communicateInitInfo	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::communicateInitInfo() {$/;"	f	class:PV::AbstractNormProbe
communicateInitInfo	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::communicateInitInfo() {$/;"	f	class:PV::AdaptiveTimeScaleProbe
communicateInitInfo	src/probes/BaseConnectionProbe.cpp	/^int BaseConnectionProbe::communicateInitInfo() {$/;"	f	class:PV::BaseConnectionProbe
communicateInitInfo	src/probes/BaseHyPerConnProbe.cpp	/^int BaseHyPerConnProbe::communicateInitInfo() {$/;"	f	class:PV::BaseHyPerConnProbe
communicateInitInfo	src/probes/BaseProbe.cpp	/^int BaseProbe::communicateInitInfo() {$/;"	f	class:PV::BaseProbe
communicateInitInfo	src/probes/ColProbe.cpp	/^int ColProbe::communicateInitInfo() {$/;"	f	class:PV::ColProbe
communicateInitInfo	src/probes/FirmThresholdCostFnLCAProbe.cpp	/^int FirmThresholdCostFnLCAProbe::communicateInitInfo() {$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
communicateInitInfo	src/probes/FirmThresholdCostFnProbe.cpp	/^int FirmThresholdCostFnProbe::communicateInitInfo() {$/;"	f	class:PV::FirmThresholdCostFnProbe
communicateInitInfo	src/probes/KernelProbe.cpp	/^int KernelProbe::communicateInitInfo() {$/;"	f	class:PV::KernelProbe
communicateInitInfo	src/probes/L0NormLCAProbe.cpp	/^int L0NormLCAProbe::communicateInitInfo() {$/;"	f	class:PV::L0NormLCAProbe
communicateInitInfo	src/probes/L1NormLCAProbe.cpp	/^int L1NormLCAProbe::communicateInitInfo() {$/;"	f	class:PV::L1NormLCAProbe
communicateInitInfo	src/probes/LayerProbe.cpp	/^int LayerProbe::communicateInitInfo() {$/;"	f	class:PV::LayerProbe
communicateInitInfo	src/probes/PointProbe.cpp	/^int PointProbe::communicateInitInfo() {$/;"	f	class:PV::PointProbe
communicateInitInfo	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::communicateInitInfo() {$/;"	f	class:PV::QuotientColProbe
communicateInitInfo	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::communicateInitInfo() {$/;"	f	class:HyPerConnCheckpointerTestProbe
communicateInitInfo	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^int ImportParamsConn::communicateInitInfo() {$/;"	f	class:PV::ImportParamsConn
communicateInitInfo	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^int ImportParamsLayer::communicateInitInfo() {$/;"	f	class:PV::ImportParamsLayer
communicateInitInfo	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::communicateInitInfo() {$/;"	f	class:PV::HyPerConnDebugInitWeights
communicateInitInfo	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::communicateInitInfo() {$/;"	f	class:PV::KernelConnDebugInitWeights
communicateInitInfo	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::communicateInitInfo() {$/;"	f	class:PV::LIFTestProbe
communicateInitInfo	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::communicateInitInfo() {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
communicateInitInfo	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::communicateInitInfo() {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
communicateInitInfo	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::communicateInitInfo() {$/;"	f	class:PoolingConnCheckpointerTestProbe
communicateInitInfo	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^int RescaleLayerTestProbe::communicateInitInfo() {$/;"	f	class:PV::RescaleLayerTestProbe
communicateInitInfo	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^int StochasticReleaseTestProbe::communicateInitInfo() {$/;"	f	class:PV::StochasticReleaseTestProbe
communicateParamsInfo	src/weightinit/InitGauss2DWeightsParams.cpp	/^int InitGauss2DWeightsParams::communicateParamsInfo() {$/;"	f	class:PV::InitGauss2DWeightsParams
communicateParamsInfo	src/weightinit/InitWeights.cpp	/^int InitWeights::communicateParamsInfo() {$/;"	f	class:PV::InitWeights
communicateParamsInfo	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::communicateParamsInfo() {$/;"	f	class:PV::InitWeightsParams
communicator	src/columns/Communicator.hpp	/^   MPI_Comm communicator() const { return localMPIBlock->getComm(); }$/;"	f	class:PV::Communicator
compar	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^bool compar(double const &a, double const &b) {$/;"	f	namespace:PV
compareFields	tests/Shared/ColumnArchive.hpp	/^bool compareFields(char const *type, char const *field, T val1, T val2) {$/;"	f
compareParameterArray	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterArray($/;"	f
compareParameterArrayStacks	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterArrayStacks($/;"	f
compareParameterGroups	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterGroups(PV::ParameterGroup *group1, PV::ParameterGroup *group2) {$/;"	f
compareParameterNumeric	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterNumeric($/;"	f
compareParameterNumericStacks	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterNumericStacks($/;"	f
compareParameterString	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterString($/;"	f
compareParameterStringStacks	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParameterStringStacks($/;"	f
compareParamsFiles	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^void compareParamsFiles(char const *paramsFile1, char const *paramsFile2, PV::Communicator *comm) {$/;"	f
competeBoundingBoxes	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::competeBoundingBoxes(Rectangles &boundingBoxes, float maxIntersectAllowed)$/;"	f	class:BBFind
compressWeight	src/connections/weight_conversions.hpp	/^static inline unsigned char compressWeight(float w, float minVal, float maxVal) {$/;"	f	namespace:PV
compressWeight	src/connections/weight_conversions.hpp	/^static inline unsigned char compressWeight(unsigned char w, float minVal, float maxVal) {$/;"	f	namespace:PV
comptimer	src/probes/StatsProbe.hpp	/^   Timer *comptimer; \/\/ A timer for the basic computation of outputState$/;"	m	class:PV::StatsProbe
computeBoxConfidence	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^double LocalizationBBFindProbe::computeBoxConfidence(LocalizationData const& bbox, float const * buffer, int nx, int ny, int nf) {$/;"	f	class:LocalizationBBFindProbe
computeMargin	src/connections/HyPerConn.hpp	/^   static inline int computeMargin(int prescale, int postscale, int patchsize) {$/;"	f	class:PV::HyPerConn
computeNewWeightUpdateTime	src/connections/HyPerConn.cpp	/^double HyPerConn::computeNewWeightUpdateTime(double simTime, double currentUpdateTime) {$/;"	f	class:PV::HyPerConn
computeNewWeightUpdateTime	src/connections/TransposeConn.cpp	/^double TransposeConn::computeNewWeightUpdateTime(double time, double currentUpdateTime) {$/;"	f	class:PV::TransposeConn
computeNewWeightUpdateTime	src/connections/TransposePoolingConn.cpp	/^double TransposePoolingConn::computeNewWeightUpdateTime(double time, double currentUpdateTime) {$/;"	f	class:PV::TransposePoolingConn
computeNewWeightUpdateTime	src/connections/privateTransposeConn.cpp	/^double privateTransposeConn::computeNewWeightUpdateTime(double time, double currentUpdateTime) {$/;"	f	class:PV::privateTransposeConn
computePValues	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^void StochasticReleaseTestProbe::computePValues() {$/;"	f	class:PV::StochasticReleaseTestProbe
conn	python/analysis_parse.py	/^                conn = re.search(type_regex, line)$/;"	v
conn	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^   HyPerConn *conn = nullptr; \/\/ The connection for which targetLayer is the postsynaptic layer.$/;"	m	class:PV::StochasticReleaseTestProbe
conn_content	python/analysis_parse.py	/^conn_content = []$/;"	v
conn_default	python/analysis_parse.py	/^conn_default =  ["",""] + conn_default$/;"	v
conn_default	python/analysis_parse.py	/^conn_default = ["","","","",""]$/;"	v
conn_dict	python/analysis_parse.py	/^    conn_dict = [line.strip("\\n") for line in f2]$/;"	v
conn_ignore	python/analysis_parse.py	/^conn_ignore = ["","","","0.000000",""]$/;"	v
conn_ignore	python/analysis_parse.py	/^conn_ignore = ["",""] + conn_ignore$/;"	v
conn_loc	python/analysis_parse.py	/^conn_loc = (".\/connections.txt")$/;"	v
conn_name_mismatch	python/analysis_parse.py	/^conn_name_mismatch = [True]*len(conn_names)$/;"	v
conn_names	python/analysis_parse.py	/^conn_names = []$/;"	v
conn_types	python/analysis_parse.py	/^conn_types = []$/;"	v
conn_values	python/analysis_parse.py	/^conn_values = []$/;"	v
conn_vars	python/analysis_parse.py	/^conn_vars = ["channelCode","maskLayerName","originalConnName","delay","plasticityFlag"]$/;"	v
conn_vars	python/analysis_parse.py	/^conn_vars = ["preLayerName", "postLayerName"] + conn_vars$/;"	v
connectOnlySameFeatures	src/weightinit/InitUniformWeightsParams.hpp	/^   bool connectOnlySameFeatures;$/;"	m	class:PV::InitUniformWeightsParams
connectionList	src/normalizers/NormalizeBase.hpp	/^   HyPerConn **connectionList;$/;"	m	class:PV::NormalizeBase
conns	python/get_names.py	/^conns = []$/;"	v
constructWeights	src/connections/CloneConn.cpp	/^int CloneConn::constructWeights() {$/;"	f	class:PV::CloneConn
constructWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::constructWeights() {$/;"	f	class:PV::HyPerConn
constructWeights	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::constructWeights() {$/;"	f	class:PV::PlasticCloneConn
constructWeights	src/connections/PoolingConn.cpp	/^int PoolingConn::constructWeights() {$/;"	f	class:PV::PoolingConn
constructWeights	src/connections/TransposeConn.cpp	/^int TransposeConn::constructWeights() {$/;"	f	class:PV::TransposeConn
constructWeights	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::constructWeights() {$/;"	f	class:PV::TransposePoolingConn
constructWeights	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::constructWeights() {$/;"	f	class:PV::privateTransposeConn
constructWeightsOutOfMemory	src/connections/CloneConn.cpp	/^void CloneConn::constructWeightsOutOfMemory() {$/;"	f	class:PV::CloneConn
context	src/io/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon21
contrast	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float contrast;$/;"	m	class:BBFindConfRemapLayer
contrast	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float contrast;$/;"	m	class:LocalizationBBFindProbe
contrastAndAverage	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::contrastAndAverage(const Map3 fullMap, float contrast, float strength)$/;"	f	class:BBFind
contrastStrength	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float contrastStrength;$/;"	m	class:BBFindConfRemapLayer
contrastStrength	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float contrastStrength;$/;"	m	class:LocalizationBBFindProbe
conv2weights	mlab/util/conv2weights.m	/^function conv2weights (input_pvps,weights_1_pvps,weights_2_pvps) $/;"	f
conv3weights	mlab/util/conv3weights.m	/^function conv3weights (input_pvps,weights_1_pvps,weights_2_pvps,weights_3_pvps) $/;"	f
convData	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   float * convData;$/;"	m	class:ConvertFromTable
convTable	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   convTableStruct convTable;$/;"	m	class:ConvertFromTable
convTableStruct	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^typedef struct convTableStruct_ convTableStruct;$/;"	t	typeref:struct:convTableStruct_
convTableStruct_	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^struct convTableStruct_ {$/;"	s
convertParamToInt	src/io/PVParams.cpp	/^int PVParams::convertParamToInt(double value) {$/;"	f	class:PV::PVParams
convertPreSynapticWeights	src/connections/HyPerConn.cpp	/^PVPatch ***HyPerConn::convertPreSynapticWeights(double simTime) {$/;"	f	class:PV::HyPerConn
convertRateToSpikeCount	src/connections/BaseConnection.hpp	/^   bool convertRateToSpikeCount; \/\/ Whether to check if pre-layer is spiking and, if it is not,$/;"	m	class:PV::BaseConnection
convertToColor	src/structures/Image.cpp	/^void Image::convertToColor(bool alphaChannel) {$/;"	f	class:PV::Image
convertToGray	src/structures/Image.cpp	/^void Image::convertToGray(bool alphaChannel) {$/;"	f	class:PV::Image
copy	src/connections/CopyConn.cpp	/^int CopyConn::copy(int arborId) {$/;"	f	class:PV::CopyConn
copyAllActivityFromDevice	src/layers/HyPerLayer.cpp	/^void HyPerLayer::copyAllActivityFromDevice() {$/;"	f	class:PV::HyPerLayer
copyAllGSynFromDevice	src/layers/HyPerLayer.cpp	/^void HyPerLayer::copyAllGSynFromDevice() {$/;"	f	class:PV::HyPerLayer
copyAllGSynToDevice	src/layers/HyPerLayer.cpp	/^void HyPerLayer::copyAllGSynToDevice() {$/;"	f	class:PV::HyPerLayer
copyAllVFromDevice	src/layers/HyPerLayer.cpp	/^void HyPerLayer::copyAllVFromDevice() {$/;"	f	class:PV::HyPerLayer
copyArrayStack	src/io/PVParams.cpp	/^ParameterArrayStack *ParameterGroup::copyArrayStack() {$/;"	f	class:PV::ParameterGroup
copyAtoV	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::copyAtoV() {$/;"	f	class:PV::PlasticConnTestLayer
copyCorrectOutput	tests/GenericSystemTest/src/main.cpp	/^int copyCorrectOutput(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
copyCorrectOutput	tests/LCATest/src/main.cpp	/^int copyCorrectOutput(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
copyCorrectOutput	tests/MomentumLCATest/src/main.cpp	/^int copyCorrectOutput(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
copyCorrectOutput	tests/TotalEnergyTest/src/main.cpp	/^int copyCorrectOutput(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
copyCorrectOutput	tests/WriteSparseFileTest/src/main.cpp	/^int copyCorrectOutput(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
copyForward	src/columns/Publisher.cpp	/^void Publisher::copyForward(double lastUpdateTime) {$/;"	f	class:PV::Publisher
copyFromDevice	src/arch/cuda/CudaBuffer.cpp	/^int CudaBuffer::copyFromDevice(void *h_ptr) {$/;"	f	class:PVCuda::CudaBuffer
copyFromDevice	src/arch/cuda/CudaBuffer.cpp	/^int CudaBuffer::copyFromDevice(void *h_ptr, size_t in_size) {$/;"	f	class:PVCuda::CudaBuffer
copyInitialStateToGPU	src/columns/BaseObject.hpp	/^   virtual int copyInitialStateToGPU() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
copyInitialStateToGPU	src/layers/HyPerLayer.cpp	/^int HyPerLayer::copyInitialStateToGPU() {$/;"	f	class:PV::HyPerLayer
copyKeywordHandlerList	src/columns/Factory.cpp	/^int Factory::copyKeywordHandlerList(std::vector<KeywordHandler *> const &orig) {$/;"	f	class:PV::Factory
copyObjectMap	src/columns/HyPerCol.hpp	/^   std::map<std::string, Observer *> *copyObjectMap() {$/;"	f	class:PV::HyPerCol
copyOutput	tests/CommandLineRestartTest/src/copyOutput.hpp	/^std::vector<float> copyOutput(PV::HyPerLayer *layer) {$/;"	f
copyParameter	src/io/PVParams.hpp	/^   Parameter *copyParameter() { return new Parameter(paramName, paramDblValue); }$/;"	f	class:PV::Parameter
copyParameterArray	src/io/PVParams.cpp	/^ParameterArray *ParameterArray::copyParameterArray() {$/;"	f	class:PV::ParameterArray
copyParameterString	src/io/PVParams.hpp	/^   ParameterString *copyParameterString() { return new ParameterString(paramName, paramValue); }$/;"	f	class:PV::ParameterString
copyStack	src/io/PVParams.cpp	/^ParameterStack *ParameterGroup::copyStack() {$/;"	f	class:PV::ParameterGroup
copyStringStack	src/io/PVParams.cpp	/^ParameterStringStack *ParameterGroup::copyStringStack() {$/;"	f	class:PV::ParameterGroup
copyToDevice	src/arch/cuda/CudaBuffer.cpp	/^int CudaBuffer::copyToDevice(const void *h_ptr) {$/;"	f	class:PVCuda::CudaBuffer
copyToDevice	src/arch/cuda/CudaBuffer.cpp	/^int CudaBuffer::copyToDevice(const void *h_ptr, size_t in_size) {$/;"	f	class:PVCuda::CudaBuffer
copyandappendpvpsparsevaluesfile	mlab/util/copyandappendpvpsparsevaluesfile.m	/^function copyandappendpvpsparsevaluesfile(originalfilename, newfilename, newdata, nx, ny, nf)$/;"	f
correctData	tests/DataStoreTest/src/DataStoreTest.cpp	/^float correctData(int bufferIndex, int itemIndex, int levelIndex) {$/;"	f
correctHaloSize	tests/UnequalPatchSizeTest/src/main.cpp	/^int correctHaloSize(int patchsize, int nPre, int nPost) {$/;"	f
correctTime	tests/DataStoreTest/src/DataStoreTest.cpp	/^double correctTime(int bufferIndex, int levelIndex) {$/;"	f
correctValue	tests/GroupNormalizationTest/src/AllConstantValueProbe.hpp	/^   float correctValue;$/;"	m	class:PV::AllConstantValueProbe
correctValues	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^   float *correctValues;$/;"	m	class:PV::ShrunkenPatchTestProbe
count	src/io/PVParams.hpp	/^   int count; \/\/ Number of ParameterArrays$/;"	m	class:PV::ParameterArrayStack
count	src/io/PVParams.hpp	/^   int count;$/;"	m	class:PV::ParameterStack
count	src/io/PVParams.hpp	/^   int count;$/;"	m	class:PV::ParameterStringStack
countActivity	python/probe_analysis/readProbeFunc.py	/^def countActivity(data,key):$/;"	f
counts	python/probe_analysis/noArborReadProbe.py	/^                counts = zeros(numHistBins)$/;"	v
counts	tests/LIFTest/src/LIFTestProbe.hpp	/^   int *counts;$/;"	m	class:PV::LIFTestProbe
cpu_time_to_sec	src/utils/Timer.cpp	/^static double cpu_time_to_sec(uint64_t cpu_elapsed) {$/;"	f	file:
create	src/columns/Factory.hpp	/^   static BaseObject *create(char const *name, HyPerCol *hc) {$/;"	f	class:PV::Factory
create	src/columns/KeywordHandler.cpp	/^BaseObject *KeywordHandler::create(char const *name, HyPerCol *hc) const {$/;"	f	class:PV::KeywordHandler
createArbors	src/connections/HyPerConn.cpp	/^int HyPerConn::createArbors() {$/;"	f	class:PV::HyPerConn
createArborsOutOfMemory	src/connections/HyPerConn.cpp	/^void HyPerConn::createArborsOutOfMemory() {$/;"	f	class:PV::HyPerConn
createAxonalArbors	src/connections/CloneConn.cpp	/^int CloneConn::createAxonalArbors(int arborId) { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
createBBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^PV::BaseObject * createBBFindConfRemapLayer(char const * name, PV::HyPerCol * hc) {$/;"	f
createBBFindConfRemapProbe	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^PV::BaseObject * createBBFindConfRemapProbe(char const * name, PV::HyPerCol * hc) {$/;"	f
createBlockComm	src/structures/MPIBlock.cpp	/^void MPIBlock::createBlockComm(MPI_Comm comm) {$/;"	f	class:PV::MPIBlock
createBuffer	src/arch/cuda/CudaDevice.cpp	/^CudaBuffer *CudaDevice::createBuffer(size_t size, std::string const *str) {$/;"	f	class:PVCuda::CudaDevice
createByKeyword	src/columns/Factory.cpp	/^BaseObject *Factory::createByKeyword(char const *keyword, char const *name, HyPerCol *hc) const {$/;"	f	class:PV::Factory
createConvertFromTable	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^PV::BaseObject * createConvertFromTable(char const * name, PV::HyPerCol * hc) {$/;"	f
createCube	src/columns/DataStore.cpp	/^PVLayerCube DataStore::createCube(PVLayerLoc const &loc, int delay) {$/;"	f	class:PV::DataStore
createCube	src/columns/Publisher.cpp	/^PVLayerCube Publisher::createCube(int delay) {$/;"	f	class:PV::Publisher
createHarnessObject	demos/HeatMapLocalization/src/main.cpp	/^PV::BaseObject * createHarnessObject(char const * name, PV::HyPerCol * hc) {$/;"	f
createHyPerCol	src/columns/HyPerCol.cpp	/^HyPerCol *createHyPerCol(PV_Init *pv_initObj) {$/;"	f	namespace:PV
createInitWeightsObject	src/connections/HyPerConn.cpp	/^InitWeights *HyPerConn::createInitWeightsObject(const char *weightInitTypeStr) {$/;"	f	class:PV::HyPerConn
createKmeansLayer	src/layers/KmeansLayer.cpp	/^BaseObject *createKmeansLayer(char const *name, HyPerCol *hc) {$/;"	f	namespace:PV
createLocalizationBBFindProbe	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^PV::BaseObject * createLocalizationBBFindProbe(char const * name, PV::HyPerCol * hc) {$/;"	f
createLocalizationProbe	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^PV::BaseObject * createLocalizationProbe(char const * name, PV::HyPerCol * hc) {$/;"	f
createMaskFromMemoryBuffer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^PV::BaseObject * createMaskFromMemoryBuffer(char const * name, PV::HyPerCol * hc) {$/;"	f
createNewWeightParams	src/weightinit/InitCocircWeights.cpp	/^InitWeightsParams *InitCocircWeights::createNewWeightParams() {$/;"	f	class:PV::InitCocircWeights
createNewWeightParams	src/weightinit/InitGauss2DWeights.cpp	/^InitWeightsParams *InitGauss2DWeights::createNewWeightParams() {$/;"	f	class:PV::InitGauss2DWeights
createNewWeightParams	src/weightinit/InitGaussianRandomWeights.cpp	/^InitWeightsParams *InitGaussianRandomWeights::createNewWeightParams() {$/;"	f	class:PV::InitGaussianRandomWeights
createNewWeightParams	src/weightinit/InitIdentWeights.cpp	/^InitWeightsParams *InitIdentWeights::createNewWeightParams() {$/;"	f	class:PV::InitIdentWeights
createNewWeightParams	src/weightinit/InitMaxPoolingWeights.cpp	/^InitWeightsParams *InitMaxPoolingWeights::createNewWeightParams() {$/;"	f	class:PV::InitMaxPoolingWeights
createNewWeightParams	src/weightinit/InitOneToOneWeights.cpp	/^InitWeightsParams *InitOneToOneWeights::createNewWeightParams() {$/;"	f	class:PV::InitOneToOneWeights
createNewWeightParams	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^InitWeightsParams *InitOneToOneWeightsWithDelays::createNewWeightParams() {$/;"	f	class:PV::InitOneToOneWeightsWithDelays
createNewWeightParams	src/weightinit/InitSmartWeights.cpp	/^InitWeightsParams *InitSmartWeights::createNewWeightParams() {$/;"	f	class:PV::InitSmartWeights
createNewWeightParams	src/weightinit/InitSpreadOverArborsWeights.cpp	/^InitWeightsParams *InitSpreadOverArborsWeights::createNewWeightParams() {$/;"	f	class:PV::InitSpreadOverArborsWeights
createNewWeightParams	src/weightinit/InitUniformRandomWeights.cpp	/^InitWeightsParams *InitUniformRandomWeights::createNewWeightParams() {$/;"	f	class:PV::InitUniformRandomWeights
createNewWeightParams	src/weightinit/InitUniformWeights.cpp	/^InitWeightsParams *InitUniformWeights::createNewWeightParams() {$/;"	f	class:PV::InitUniformWeights
createNewWeightParams	src/weightinit/InitWeights.cpp	/^InitWeightsParams *InitWeights::createNewWeightParams() {$/;"	f	class:PV::InitWeights
createNewWeightParams	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^InitWeightsParams *InitGaborWeights::createNewWeightParams() {$/;"	f	class:PV::InitGaborWeights
createOneToOneConnection	src/weightinit/InitOneToOneWeights.cpp	/^int InitOneToOneWeights::createOneToOneConnection($/;"	f	class:PV::InitOneToOneWeights
createOneToOneConnectionWithDelays	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^int InitOneToOneWeightsWithDelays::createOneToOneConnectionWithDelays($/;"	f	class:PV::InitOneToOneWeightsWithDelays
createParams	src/columns/PV_Init.cpp	/^int PV_Init::createParams() {$/;"	f	class:PV::PV_Init
createPatches	src/connections/HyPerConn.hpp	/^   static PVPatch **createPatches(int nPatches, int nx, int ny) {$/;"	f	class:PV::HyPerConn
createResetStateOnTriggerTestProbe	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^PV::BaseObject *createResetStateOnTriggerTestProbe(char const *name, PV::HyPerCol *hc) {$/;"	f
createString	src/io/ConfigParser.cpp	/^std::string ConfigParser::createString($/;"	f	class:PV::ConfigParser
createTestFile	tests/test_constant_input/src/test_constant_input.cpp	/^int createTestFile(const char *filename, int nTotal, float *buf) {$/;"	f
createWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::createWeights($/;"	f	class:PV::HyPerConn
createWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::createWeights(PVPatch ***patches, int arborId) {$/;"	f	class:PV::HyPerConn
creator	src/columns/KeywordHandler.hpp	/^   ObjectCreateFn creator;$/;"	m	class:PV::KeywordHandler
cudnnHandleError	src/arch/cuda/CudaKernel.cpp	/^void CudaKernel::cudnnHandleError(cudnnStatus_t status, const char *errStr) {$/;"	f	class:PVCuda::CudaKernel
cudnn_Datastore	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *cudnn_Datastore;$/;"	m	class:PV::HyPerLayer
cudnn_GSyn	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *cudnn_GSyn;$/;"	m	class:PV::HyPerLayer
cudnn_WData	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *cudnn_WData;$/;"	m	class:PV::HyPerConn
cudnn_gSyn	src/cudakernels/CudaRecvPost.hpp	/^   float *cudnn_gSyn;$/;"	m	struct:PVCuda::recv_post_params
cudnn_preData	src/cudakernels/CudaRecvPost.hpp	/^   float *cudnn_preData;$/;"	m	struct:PVCuda::recv_post_params
cudnn_weights	src/cudakernels/CudaRecvPost.hpp	/^   float *cudnn_weights;$/;"	m	struct:PVCuda::recv_post_params
cudnn_workspace	src/cudakernels/CudaRecvPost.hpp	/^   void *cudnn_workspace;$/;"	m	struct:PVCuda::recv_post_params
cur_x	src/io/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
cur_y	src/io/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
currFeatureFreqCount	src/layers/ShuffleLayer.hpp	/^   long **currFeatureFreqCount;$/;"	m	class:PV::ShuffleLayer
currGroupKeyword	src/io/PVParams.hpp	/^   char *currGroupKeyword;$/;"	m	class:PV::PVParams
currGroupName	src/io/PVParams.hpp	/^   char *currGroupName;$/;"	m	class:PV::PVParams
currSweepGroupName	src/io/PVParams.hpp	/^   char *currSweepGroupName;$/;"	m	class:PV::PVParams
currSweepParamName	src/io/PVParams.hpp	/^   char *currSweepParamName;$/;"	m	class:PV::PVParams
currentBufferSize	src/io/PVParams.hpp	/^   int currentBufferSize;$/;"	m	class:PV::ParameterSweep
currentParamArray	src/io/PVParams.hpp	/^   ParameterArray *currentParamArray;$/;"	m	class:PV::PVParams
currentTime	python/probe_analysis/noArborReadProbe.py	/^            currentTime = float(splitLine(line)[0][1])$/;"	v
currentTime	python/probe_analysis/noArborReadProbe.py	/^            currentTime = tempTime$/;"	v
currentTime	python/probe_analysis/noArborReadProbe.py	/^    currentTime = float(splitLine(line)[0][1])$/;"	v
customexit	tests/ANNLayerVerticesTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/BatchCheckpointSystemTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/BatchMPICheckpointSystemTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/CheckpointSystemTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/CloneVLayerTest/src/CloneVLayerTest.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/ConfigFileSystemTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/ConnectionRestartTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char **argv) {$/;"	f
customexit	tests/ConvertToGrayscaleTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char **argv) {$/;"	f
customexit	tests/LIFTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/MarginWidthTest/src/MarginWidthTest.cpp	/^int customexit(HyPerCol *hc, int argc, char **argv) {$/;"	f
customexit	tests/NormalizeSubclassSystemTest/src/NormalizeSubclassSystemTest.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/NormalizeSystemTest/src/NormalizeSystemTest.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/ResetStateOnTriggerTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
customexit	tests/UnequalPatchSizeTest/src/main.cpp	/^int customexit(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
custominit	tests/MarginWidthTest/src/MarginWidthTest.cpp	/^int custominit(HyPerCol *hc, int argc, char **argv) {$/;"	f
dWMax	src/connections/HyPerConn.hpp	/^   float dWMax; \/\/ dW scale factor$/;"	m	class:PV::HyPerConn
d_ActiveIndices	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_ActiveIndices;$/;"	m	class:PV::HyPerLayer
d_Activity	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_Activity;$/;"	m	class:PV::HyPerLayer
d_Datastore	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_Datastore;$/;"	m	class:PV::HyPerLayer
d_GSyn	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_GSyn;$/;"	m	class:PV::HyPerLayer
d_GSynPatchStart	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *d_GSynPatchStart;$/;"	m	class:PV::HyPerConn
d_Patch2DataLookupTable	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *d_Patch2DataLookupTable;$/;"	m	class:PV::HyPerConn
d_Patches	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *d_Patches;$/;"	m	class:PV::HyPerConn
d_PostToPreActivity	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *d_PostToPreActivity;$/;"	m	class:PV::HyPerConn
d_V	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_V;$/;"	m	class:PV::HyPerLayer
d_WData	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *d_WData;$/;"	m	class:PV::HyPerConn
d_dtAdapt	src/layers/HyPerLCALayer.hpp	/^   PVCuda::CudaBuffer *d_dtAdapt;$/;"	m	class:PV::HyPerLCALayer
d_dtAdapt	src/layers/ISTALayer.hpp	/^   PVCuda::CudaBuffer *d_dtAdapt;$/;"	m	class:PV::ISTALayer
d_numActive	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *d_numActive;$/;"	m	class:PV::HyPerLayer
d_prevDrive	src/layers/MomentumLCALayer.hpp	/^   PVCuda::CudaBuffer *d_prevDrive;$/;"	m	class:PV::MomentumLCALayer
d_ptr	src/arch/cuda/CudaBuffer.hpp	/^   void *d_ptr; \/\/ pointer to buffer on device$/;"	m	class:PVCuda::CudaBuffer
d_slopes	src/layers/HyPerLCALayer.hpp	/^   PVCuda::CudaBuffer *d_slopes;$/;"	m	class:PV::HyPerLCALayer
d_verticesA	src/layers/HyPerLCALayer.hpp	/^   PVCuda::CudaBuffer *d_verticesA;$/;"	m	class:PV::HyPerLCALayer
d_verticesV	src/layers/HyPerLCALayer.hpp	/^   PVCuda::CudaBuffer *d_verticesV;$/;"	m	class:PV::HyPerLCALayer
data	python/deprecated/readPvpFile.py	/^   data = readData(f, shape, numPerFrame)$/;"	v
data	python/probe_analysis/noArborReadProbe.py	/^data = OrderedDict()$/;"	v
data	python/probe_analysis/readProbeParams.py	/^data = OrderedDict()$/;"	v
data	python/pvtools/pvpFile.py	/^    data = {}$/;"	v	class:pvpOpen
data	src/include/pv_types.h	/^   float *data;$/;"	m	struct:PVLayerCube_
data	src/io/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon9::__anon10
data	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   data = readData(f, shape, numPerFrame)$/;"	v
data	tests/Shared/ColumnArchive.hpp	/^   std::vector<float> data;$/;"	m	struct:LayerArchive
data	tests/Shared/ColumnArchive.hpp	/^   std::vector<std::vector<float>> data; \/\/ outer index is arbors, inner index is individual$/;"	m	struct:ConnArchive
dataBottom	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   int dataBottom;$/;"	m	class:MaskFromMemoryBuffer
dataFile	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   char * dataFile;$/;"	m	class:ConvertFromTable
dataIndexToUnitCellIndex	src/connections/HyPerConn.cpp	/^int HyPerConn::dataIndexToUnitCellIndex($/;"	f	class:PV::HyPerConn
dataLeft	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   int dataLeft;$/;"	m	class:MaskFromMemoryBuffer
dataRight	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   int dataRight;$/;"	m	class:MaskFromMemoryBuffer
dataSize	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
dataStore	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      float *dataStore;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
dataStoreDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      void *dataStoreDescriptor;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
dataStructuresAllocatedFlag	src/connections/BaseConnection.hpp	/^   bool dataStructuresAllocatedFlag;$/;"	m	class:PV::BaseConnection
dataTop	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   int dataTop;$/;"	m	class:MaskFromMemoryBuffer
dataType	src/layers/HyPerLayer.hpp	/^   PVDataType dataType;$/;"	m	class:PV::HyPerLayer
dataType	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
dataTypeString	src/layers/HyPerLayer.hpp	/^   char *dataTypeString;$/;"	m	class:PV::HyPerLayer
dc_pred	src/io/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon9::__anon10
dct_bfly32o	src/io/stb_image.h	2190;"	d
dct_bfly32o	src/io/stb_image.h	2339;"	d
dct_bfly32o	src/io/stb_image.h	2390;"	d
dct_bfly32o	src/io/stb_image.h	2586;"	d
dct_const	src/io/stb_image.h	2162;"	d
dct_const	src/io/stb_image.h	2334;"	d
dct_interleave16	src/io/stb_image.h	2207;"	d
dct_interleave16	src/io/stb_image.h	2341;"	d
dct_interleave8	src/io/stb_image.h	2201;"	d
dct_interleave8	src/io/stb_image.h	2340;"	d
dct_long_mac	src/io/stb_image.h	2371;"	d
dct_long_mac	src/io/stb_image.h	2582;"	d
dct_long_mul	src/io/stb_image.h	2367;"	d
dct_long_mul	src/io/stb_image.h	2581;"	d
dct_pass	src/io/stb_image.h	2212;"	d
dct_pass	src/io/stb_image.h	2342;"	d
dct_pass	src/io/stb_image.h	2398;"	d
dct_pass	src/io/stb_image.h	2587;"	d
dct_rot	src/io/stb_image.h	2166;"	d
dct_rot	src/io/stb_image.h	2335;"	d
dct_trn16	src/io/stb_image.h	2458;"	d
dct_trn16	src/io/stb_image.h	2496;"	d
dct_trn32	src/io/stb_image.h	2464;"	d
dct_trn32	src/io/stb_image.h	2497;"	d
dct_trn64	src/io/stb_image.h	2470;"	d
dct_trn64	src/io/stb_image.h	2498;"	d
dct_trn8_16	src/io/stb_image.h	2525;"	d
dct_trn8_16	src/io/stb_image.h	2577;"	d
dct_trn8_32	src/io/stb_image.h	2531;"	d
dct_trn8_32	src/io/stb_image.h	2578;"	d
dct_trn8_8	src/io/stb_image.h	2519;"	d
dct_trn8_8	src/io/stb_image.h	2576;"	d
dct_wadd	src/io/stb_image.h	2180;"	d
dct_wadd	src/io/stb_image.h	2337;"	d
dct_wadd	src/io/stb_image.h	2380;"	d
dct_wadd	src/io/stb_image.h	2584;"	d
dct_widen	src/io/stb_image.h	2175;"	d
dct_widen	src/io/stb_image.h	2336;"	d
dct_widen	src/io/stb_image.h	2375;"	d
dct_widen	src/io/stb_image.h	2583;"	d
dct_wsub	src/io/stb_image.h	2185;"	d
dct_wsub	src/io/stb_image.h	2338;"	d
dct_wsub	src/io/stb_image.h	2385;"	d
dct_wsub	src/io/stb_image.h	2585;"	d
debugParsing	src/io/PVParams.hpp	/^   bool debugParsing;$/;"	m	class:PV::PVParams
decay_dWMax	src/connections/HyPerConn.cpp	/^void HyPerConn::decay_dWMax() {$/;"	f	class:PV::HyPerConn
declarations	src/io/parser/params.y	/^declarations : \/* empty *\/$/;"	l
decodeChannel	src/connections/BaseConnection.hpp	/^   static int decodeChannel(int channel_code, ChannelType *channel_type) {$/;"	f	class:PV::BaseConnection
deconvPath	parameterWrapper/PVSubnets.lua	/^function deconvPath(pvParams, start, path, trigger)$/;"	f
deconvolvemirrorbc	mlab/util/deconvolvemirrorbc.m	/^function [reconstruction,kernelft,kernelinverseft] = deconvolvemirrorbc(convolvedimage, kernel, reg)$/;"	f
delay	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
delay	src/layers/BinningLayer.hpp	/^   int delay;$/;"	m	class:PV::BinningLayer
delayArraySize	src/connections/BaseConnection.hpp	/^   int delayArraySize;$/;"	m	class:PV::BaseConnection
delays	src/connections/BaseConnection.hpp	/^   int *delays; \/\/ delays[arborId] is the delay in timesteps (not units of dt) of the arborId'th$/;"	m	class:PV::BaseConnection
deleteFile	src/checkpointing/CheckpointEntry.cpp	/^void CheckpointEntry::deleteFile($/;"	f	class:PV::CheckpointEntry
deleteObject	src/observerpattern/ObserverTable.cpp	/^void ObserverTable::deleteObject(std::string const &name, bool deallocateFlag) {$/;"	f	class:PV::ObserverTable
deleteObject	src/observerpattern/ObserverTable.hpp	/^   void deleteObject(char const *name, bool deallocateFlag) {$/;"	f	class:PV::ObserverTable
deleteOutputDirectory	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^int deleteOutputDirectory(PV::Communicator *comm) {$/;"	f
deletePatches	src/connections/HyPerConn.hpp	/^   static int deletePatches(PVPatch **patchpointers) {$/;"	f	class:PV::HyPerConn
deleteWeights	src/connections/CloneConn.cpp	/^int CloneConn::deleteWeights() {$/;"	f	class:PV::CloneConn
deleteWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::deleteWeights() {$/;"	f	class:PV::HyPerConn
deleteWeights	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::deleteWeights() {$/;"	f	class:PV::PlasticCloneConn
deleteWeights	src/connections/TransposeConn.cpp	/^int TransposeConn::deleteWeights() {$/;"	f	class:PV::TransposeConn
deleteWeights	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deleteWeights() {$/;"	f	class:PV::TransposePoolingConn
deliver	src/connections/HyPerConn.cpp	/^int HyPerConn::deliver() {$/;"	f	class:PV::HyPerConn
deliver	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::deliver() {$/;"	f	class:PV::privateTransposeConn
deliverGPU	src/connections/PoolingConn.cpp	/^int PoolingConn::deliverGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::PoolingConn
deliverGPU	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deliverGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::TransposePoolingConn
deliverOnePostNeuronActivity	src/connections/HyPerConn.cpp	/^void HyPerConn::deliverOnePostNeuronActivity($/;"	f	class:PV::HyPerConn
deliverOnePostNeuronActivitySparseWeights	src/connections/HyPerConn.cpp	/^void HyPerConn::deliverOnePostNeuronActivitySparseWeights($/;"	f	class:PV::HyPerConn
deliverOnePreNeuronActivity	src/connections/HyPerConn.cpp	/^void HyPerConn::deliverOnePreNeuronActivity($/;"	f	class:PV::HyPerConn
deliverOnePreNeuronActivitySparseWeights	src/connections/HyPerConn.cpp	/^void HyPerConn::deliverOnePreNeuronActivitySparseWeights($/;"	f	class:PV::HyPerConn
deliverPostsynapticPerspective	src/connections/HyPerConn.hpp	/^   virtual int deliverPostsynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::HyPerConn
deliverPostsynapticPerspective	src/connections/PoolingConn.cpp	/^int PoolingConn::deliverPostsynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::PoolingConn
deliverPostsynapticPerspective	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deliverPostsynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::TransposePoolingConn
deliverPostsynapticPerspectiveConvolve	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPostsynapticPerspectiveConvolve($/;"	f	class:PV::HyPerConn
deliverPostsynapticPerspectiveGPU	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPostsynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::HyPerConn
deliverPostsynapticPerspectiveGPU	src/connections/PoolingConn.cpp	/^int PoolingConn::deliverPostsynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::PoolingConn
deliverPostsynapticPerspectiveGPU	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deliverPostsynapticPerspectiveGPU($/;"	f	class:PV::TransposePoolingConn
deliverPostsynapticPerspectiveStochastic	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPostsynapticPerspectiveStochastic($/;"	f	class:PV::HyPerConn
deliverPresynapticPerspective	src/connections/HyPerConn.hpp	/^   virtual int deliverPresynapticPerspective(PVLayerCube const *activity, int arborId) {$/;"	f	class:PV::HyPerConn
deliverPresynapticPerspective	src/connections/IdentConn.cpp	/^int IdentConn::deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::IdentConn
deliverPresynapticPerspective	src/connections/PoolingConn.cpp	/^int PoolingConn::deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::PoolingConn
deliverPresynapticPerspective	src/connections/RescaleConn.cpp	/^int RescaleConn::deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::RescaleConn
deliverPresynapticPerspective	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::TransposePoolingConn
deliverPresynapticPerspectiveConvolve	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPresynapticPerspectiveConvolve(PVLayerCube const *activity, int arbor) {$/;"	f	class:PV::HyPerConn
deliverPresynapticPerspectiveGPU	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPresynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::HyPerConn
deliverPresynapticPerspectiveGPU	src/connections/PoolingConn.cpp	/^int PoolingConn::deliverPresynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) {$/;"	f	class:PV::PoolingConn
deliverPresynapticPerspectiveGPU	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::deliverPresynapticPerspectiveGPU($/;"	f	class:PV::TransposePoolingConn
deliverPresynapticPerspectiveStochastic	src/connections/HyPerConn.cpp	/^int HyPerConn::deliverPresynapticPerspectiveStochastic(PVLayerCube const *activity, int arbor) {$/;"	f	class:PV::HyPerConn
delta	src/io/stb_image.h	/^   int delta[17]; \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon8
deltaGIB	src/layers/LIF.hpp	/^   float deltaGIB;$/;"	m	struct:LIF_params
deltaPosLayers	src/utils/conversions.h	/^static inline float deltaPosLayers(int kPre, int scale) {$/;"	f
deltaTheta	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float deltaTheta;$/;"	m	class:PV::InitGauss2DWeightsParams
deltaThetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float deltaThetaMax; \/\/ max orientation in units of PI$/;"	m	class:PV::InitGauss2DWeightsParams
deltaTimes	src/layers/HyPerLCALayer.cpp	/^double *HyPerLCALayer::deltaTimes() {$/;"	f	class:PV::HyPerLCALayer
deltaTimes	src/layers/ISTALayer.cpp	/^double *ISTALayer::deltaTimes() {$/;"	f	class:PV::ISTALayer
deltaVth	src/layers/LIF.hpp	/^   float deltaVth;$/;"	m	struct:LIF_params
deltaWithPBC	src/utils/conversions.h	/^static inline float deltaWithPBC(float x1, float x2, float max) {$/;"	f
deltaX	src/utils/conversions.h	/^static inline float deltaX(int xScaleLog2) { return powf(2.0f, (float)xScaleLog2); }$/;"	f
deltaY	src/utils/conversions.h	/^static inline float deltaY(int yScaleLog2) { return powf(2.0f, (float)yScaleLog2); }$/;"	f
delta_radius_curvature	src/weightinit/InitCocircWeightsParams.hpp	/^   float delta_radius_curvature; \/\/ 1 = minimum radius of curvature$/;"	m	class:PV::InitCocircWeightsParams
denomProbe	src/probes/QuotientColProbe.hpp	/^   BaseProbe *denomProbe; \/\/ A pointer to the probe that supplies the denominator.$/;"	m	class:PV::QuotientColProbe
denominator	src/probes/QuotientColProbe.hpp	/^   char *denominator; \/\/ The name of the probe that supplies the denominator$/;"	m	class:PV::QuotientColProbe
depth	src/io/stb_image.h	/^   int depth;$/;"	m	struct:__anon15
dequant	src/io/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon9
description	src/observerpattern/Observer.hpp	/^   std::string description;$/;"	m	class:PV::Observer
detect	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::detect()$/;"	f	class:BBFind
detectionS	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   vector<vector<LocalizationData>> detectionS;$/;"	m	class:BBFindConfRemapProbe
detectionThreshold	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   float * detectionThreshold;$/;"	m	class:LocalizationProbe
detectionWait	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int detectionWait;$/;"	m	class:BBFindConfRemapLayer
detectionWait	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int detectionWait;$/;"	m	class:LocalizationBBFindProbe
detections	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   std::vector<LocalizationData> detections;$/;"	m	class:LocalizationProbe
device	src/arch/cuda/CudaBuffer.hpp	/^   CudaDevice *device;$/;"	m	class:PVCuda::CudaBuffer
device	src/arch/cuda/CudaKernel.hpp	/^   CudaDevice *device;$/;"	m	class:PVCuda::CudaKernel
deviceMem	src/arch/cuda/CudaDevice.hpp	/^   long deviceMem;$/;"	m	class:PVCuda::CudaDevice
device_id	src/arch/cuda/CudaDevice.hpp	/^   int device_id; \/\/ device id (normally 0 for GPU, 1 for CPU)$/;"	m	class:PVCuda::CudaDevice
device_props	src/arch/cuda/CudaDevice.hpp	/^   struct cudaDeviceProp device_props;$/;"	m	class:PVCuda::CudaDevice	typeref:struct:PVCuda::CudaDevice::cudaDeviceProp
didPlot	python/probe_analysis/readProbe.py	/^                    didPlot = True$/;"	v
didPlot	python/probe_analysis/readProbe.py	/^        didPlot = False #Only true if plot is created below$/;"	v
diffDirs	tests/BatchMPICheckpointSystemTest/src/main.cpp	/^int diffDirs(const char *cpdir1, const char *cpdir2, int index) {$/;"	f
diffX	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      int diffX;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
diffX	src/cudakernels/CudaRecvPost.hpp	/^   int diffX;$/;"	m	struct:PVCuda::recv_post_params
diffY	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      int diffY;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
diffY	src/cudakernels/CudaRecvPost.hpp	/^   int diffY;$/;"	m	struct:PVCuda::recv_post_params
dimsSet	src/arch/cuda/CudaKernel.hpp	/^   bool dimsSet;$/;"	m	class:PVCuda::CudaKernel
disable	src/io/PVParams.hpp	/^   bool disable;$/;"	m	class:PV::PVParams
dispFigs	python/probe_analysis/noArborReadProbe.py	/^dispFigs    = False#if True, display figures. Otherwise, print them to file.$/;"	v
dispFigs	python/probe_analysis/readProbeParams.py	/^dispFigs    = False #if True, display figures. Otherwise, print them to file.$/;"	v
displayCategoryIndexEnd	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int displayCategoryIndexEnd;$/;"	m	class:LocalizationProbe
displayCategoryIndexStart	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int displayCategoryIndexStart;$/;"	m	class:LocalizationProbe
displayCommand	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * displayCommand = NULL;$/;"	m	class:BBFindConfRemapProbe
displayCommand	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * displayCommand;$/;"	m	class:LocalizationProbe
displayedCategories	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int * displayedCategories = NULL;$/;"	m	class:BBFindConfRemapLayer
displayedCategories	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int * displayedCategories;$/;"	m	class:LocalizationProbe
displayedIndex	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int displayedIndex;$/;"	m	struct:LocalizationData
dist2NearestCell	src/utils/conversions.c	/^int dist2NearestCell($/;"	f
dn	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int dn;$/;"	m	struct:PVCuda::HyPerLCAParams
dn	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int dn;$/;"	m	struct:PVCuda::ISTAParams
dn	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int dn;$/;"	m	struct:PVCuda::MomentumLCAParams
dn	src/include/PVLayerLoc.h	/^   int lt, rt, dn, up; \/\/ padding in {left, right, down, up} directions$/;"	m	struct:PVHalo_
doHist	python/probe_analysis/noArborReadProbe.py	/^            doHist = 0$/;"	v
doHist	python/probe_analysis/noArborReadProbe.py	/^            doHist = 1$/;"	v
doHist	python/probe_analysis/noArborReadProbe.py	/^doHist = 0$/;"	v
doLegend	python/probe_analysis/noArborReadProbe.py	/^doLegend    = True#if True, time graph will have a legend$/;"	v
doLegend	python/probe_analysis/readProbeParams.py	/^doLegend    = False #if True, time graph will have a legend$/;"	v
doUpdateState	src/layers/BinningLayer.cpp	/^int BinningLayer::doUpdateState($/;"	f	class:PV::BinningLayer
doUpdateState	src/layers/PtwiseQuotientLayer.cpp	/^int PtwiseQuotientLayer::doUpdateState($/;"	f	class:PV::PtwiseQuotientLayer
do_run	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^int CudaPoolingDeliverKernel::do_run() {$/;"	f	class:PVCuda::CudaPoolingDeliverKernel
do_run	src/cudakernels/CudaRecvPost.cpp	/^int CudaRecvPost::do_run() {$/;"	f	class:PVCuda::CudaRecvPost
do_run	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^int CudaTransposePoolingDeliverKernel::do_run() {$/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
doesVerifyWrites	src/checkpointing/Checkpointer.hpp	/^   bool doesVerifyWrites() { return mVerifyWritesFlag; }$/;"	f	class:PV::Checkpointer
drawHeatMaps	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::drawHeatMaps(int b) {$/;"	f	class:BBFindConfRemapProbe
drawHeatMaps	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::drawHeatMaps() {$/;"	f	class:LocalizationProbe
drawMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   bool drawMontage = false;$/;"	m	class:BBFindConfRemapProbe
drawMontage	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   bool drawMontage;$/;"	m	class:LocalizationProbe
drawOriginalAndReconstructed	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::drawOriginalAndReconstructed() {$/;"	f	class:BBFindConfRemapProbe
drawOriginalAndReconstructed	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::drawOriginalAndReconstructed() {$/;"	f	class:LocalizationProbe
drawProgressInformation	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::drawProgressInformation() {$/;"	f	class:BBFindConfRemapProbe
drawProgressInformation	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::drawProgressInformation() {$/;"	f	class:LocalizationProbe
drawTextIntoFile	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::drawTextIntoFile(char const * labelFilename, char const * backgroundColor, char const * textColor, char const * labelText, int width, int height) {$/;"	f	class:BBFindConfRemapProbe
drawTextIntoFile	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::drawTextIntoFile(char const * labelFilename, char const * backgroundColor, char const * textColor, char const * labelText, int width, int height) {$/;"	f	class:LocalizationProbe
drawTextOnMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::drawTextOnMontage(char const * backgroundColor, char const * textColor, char const * labelText, int xOffset, int yOffset, int width, int height) {$/;"	f	class:BBFindConfRemapProbe
drawTextOnMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::drawTextOnMontage(char const * backgroundColor, char const * textColor, char const * labelText, int xOffset, int yOffset, int width, int height) {$/;"	f	class:LocalizationProbe
dtAdapt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   double *dtAdapt;$/;"	m	struct:PVCuda::HyPerLCAParams
dtAdapt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   double *dtAdapt;$/;"	m	struct:PVCuda::ISTAParams
dtAdapt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   double *dtAdapt;$/;"	m	struct:PVCuda::MomentumLCAParams
dt_factor	src/cudakernels/CudaRecvPost.hpp	/^   float dt_factor;$/;"	m	struct:PVCuda::recv_post_params
dt_factor	src/cudakernels/CudaRecvPre.hpp	/^   float dt_factor;$/;"	m	struct:PVCuda::recv_pre_params
dthPost	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float dthPost;$/;"	m	class:PV::InitGauss2DWeightsParams
dumpLoc	tests/test_mpi_specifyrowscolumns/src/test_mpi_specifyrowscolumns.cpp	/^int dumpLoc(const PVLayerLoc *loc, int rank) {$/;"	f
dumpWeights	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int dumpWeights(HyPerConn *conn) {$/;"	f
dumpWeights	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int dumpWeights(HyPerConn *conn) {$/;"	f
dumponeweight	tests/KernelActivationTest/src/KernelActivationTest.cpp	/^int dumponeweight(HyPerConn *conn) {$/;"	f
dumpweights	tests/KernelActivationTest/src/KernelActivationTest.cpp	/^int dumpweights(HyPerCol *hc, int argc, char *argv[]) {$/;"	f
dwDataStart	src/connections/HyPerConn.hpp	/^   float **dwDataStart; \/\/ now that data for all patches are allocated to one continuous block$/;"	m	class:PV::HyPerConn
dxPost	src/weightinit/InitWeightsParams.hpp	/^   float dxPost;$/;"	m	class:PV::InitWeightsParams
dyPost	src/weightinit/InitWeightsParams.hpp	/^   float dyPost;$/;"	m	class:PV::InitWeightsParams
east	src/columns/Communicator.cpp	/^int Communicator::east(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
east	src/utils/BorderExchange.cpp	/^int BorderExchange::east(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
eflags	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
elapsed_time	src/utils/Clock.cpp	/^double Clock::elapsed_time() { return mach_time_to_sec(mach_absolute_time() - mach_start); }$/;"	f	class:PV::Clock
elapsed_time	src/utils/Timer.cpp	/^double Timer::elapsed_time() const { return (double)time_elapsed; }$/;"	f	class:PV::Timer
endStim	src/layers/Retina.hpp	/^   double endStim;$/;"	m	struct:Retina_params
endTime	python/probe_analysis/noArborReadProbe.py	/^endTime   = 1600000  #End must be under number of lines in file$/;"	v
endTime	python/probe_analysis/readProbeParams.py	/^endTime     = 2000100 #End must be under number of lines in file$/;"	v
endingTime	tests/LIFTest/src/LIFTestProbe.hpp	/^   double endingTime; \/\/ The time, in the same units dt is in, at which to stop the test.$/;"	m	class:PV::LIFTestProbe
energyProbe	src/probes/BaseProbe.hpp	/^   char *energyProbe; \/\/ the name of the ColumnEnergyProbe to attach to, if any.$/;"	m	class:PV::BaseProbe
ensureDirExists	src/io/fileio.cpp	/^int ensureDirExists(MPIBlock const *mpiBlock, char const *dirname) {$/;"	f	namespace:PV
eob_run	src/io/stb_image.h	/^   int eob_run;$/;"	m	struct:__anon9
eof	src/io/stb_image.h	/^   int (*eof)(void *user); \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon5
equal	demos/HeatMapLocalization/src/BBFind.cpp	/^bool BBFind::Rectangle::equal(const Rectangle &rectA, const Rectangle &rectB)$/;"	f	class:BBFind::Rectangle
equalizeMargins	src/layers/HyPerLayer.cpp	/^int HyPerLayer::equalizeMargins(HyPerLayer *layer1, HyPerLayer *layer2) {$/;"	f	class:PV::HyPerLayer
equilibriumTime	tests/LayerPhaseTest/src/LayerPhaseTestProbe.hpp	/^   double equilibriumTime;$/;"	m	class:PV::LayerPhaseTestProbe
equilibriumValue	tests/LayerPhaseTest/src/LayerPhaseTestProbe.hpp	/^   float equilibriumValue;$/;"	m	class:PV::LayerPhaseTestProbe
err	python/analysis_parse.py	/^err = []$/;"	v
errScale	src/layers/ANNErrorLayer.hpp	/^   float errScale;$/;"	m	class:PV::ANNErrorLayer
errScale	src/layers/LabelErrorLayer.hpp	/^   float errScale;$/;"	m	class:PV::LabelErrorLayer
errorPresent	tests/PlasticConnTest/src/PlasticConnTestProbe.hpp	/^   bool errorPresent;$/;"	m	class:PV::PlasticConnTestProbe
error_input	python/analysis_parse.py	/^error_input = []$/;"	v
error_layer	python/analysis_parse.py	/^error_layer = []$/;"	v
exchange	src/layers/InputLayer.cpp	/^void InputLayer::exchange() {$/;"	f	class:PV::InputLayer
exchange	src/utils/BorderExchange.cpp	/^void BorderExchange::exchange(float *data, std::vector<MPI_Request> &req) {$/;"	f	class:PV::BorderExchange
exchangeBorders	src/columns/Publisher.cpp	/^int Publisher::exchangeBorders(const PVLayerLoc *loc, int delay \/*default 0*\/) {$/;"	f	class:PV::Publisher
exchangeCounter	src/columns/Communicator.hpp	/^   int exchangeCounter = 1024;$/;"	m	class:PV::Communicator
exchangeCounter	src/utils/BorderExchange.cpp	/^int BorderExchange::exchangeCounter = 1024;$/;"	m	class:PV::BorderExchange	file:
exchangeCounter	src/utils/BorderExchange.hpp	/^   static int exchangeCounter;$/;"	m	class:PV::BorderExchange
excitatoryNoise	src/layers/LCALIFLayer.hpp	/^   float *excitatoryNoise;$/;"	m	class:PV::LCALIFLayer
exit	src/utils/PVLog.hpp	/^inline void DebugLogType::exit() {}$/;"	f	class:PV::DebugLogType
exit	src/utils/PVLog.hpp	/^inline void ErrorLogType::exit() {}$/;"	f	class:PV::ErrorLogType
exit	src/utils/PVLog.hpp	/^inline void FatalType::exit() {$/;"	f	class:PV::FatalType
exit	src/utils/PVLog.hpp	/^inline void InfoLogType::exit() {}$/;"	f	class:PV::InfoLogType
exit	src/utils/PVLog.hpp	/^inline void StackTraceType::exit() {}$/;"	f	class:PV::StackTraceType
exit	src/utils/PVLog.hpp	/^inline void WarnLogType::exit() {}$/;"	f	class:PV::WarnLogType
exitOnFailure	src/probes/RequireAllZeroActivityProbe.hpp	/^   bool exitOnFailure          = true;$/;"	m	class:PV::RequireAllZeroActivityProbe
expandLeadingTilde	src/io/io.cpp	/^std::string expandLeadingTilde(char const *path) {$/;"	f	namespace:PV
expandLeadingTilde	src/io/io.cpp	/^std::string expandLeadingTilde(std::string const &path) { return path.c_str(); }$/;"	f	namespace:PV
expanded	src/io/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
expectedMax	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	/^   float expectedMin, expectedMax;$/;"	m	class:PV::BatchSweepTestProbe
expectedMax	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	/^   float expectedMin, expectedMax;$/;"	m	class:PV::ParameterSweepTestProbe
expectedMin	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	/^   float expectedMin, expectedMax;$/;"	m	class:PV::BatchSweepTestProbe
expectedMin	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	/^   float expectedMin, expectedMax;$/;"	m	class:PV::ParameterSweepTestProbe
expectedSum	tests/BatchSweepTest/src/BatchSweepTestProbe.hpp	/^   double expectedSum;$/;"	m	class:PV::BatchSweepTestProbe
expectedSum	tests/ParameterSweepTest/src/ParameterSweepTestProbe.hpp	/^   double expectedSum;$/;"	m	class:PV::ParameterSweepTestProbe
exponent	src/probes/L2NormProbe.hpp	/^   double exponent;$/;"	m	class:PV::L2NormProbe
extendedBufferToMap3	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::extendedBufferToMap3(const float *bufferStart, int nx, int ny, int nf, int lt, int rt, int up, int dn)$/;"	f	class:BBFind
extendedBufferToMap3	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::extendedBufferToMap3(const float *bufferStart, int nx, int ny, int nf, int lt, int rt, int up, int dn, int const * displayedCategories, int numDisplayedCategories)$/;"	f	class:BBFind
extendedHeaderPattern	python/deprecated/max_readpvpheader.py	/^extendedHeaderPattern = headerPattern + [('nxp', np.int32),$/;"	v
extendedHeaderPattern	python/pvtools/readpvpheader.py	/^extendedHeaderPattern = headerPattern + [('nxp', np.int32),$/;"	v
extendedIndexInBorderRegion	src/utils/conversions.h	/^extendedIndexInBorderRegion(int extK, int nx, int ny, int nf, int lt, int rt, int dn, int up) {$/;"	f
extractCheckpointReadDirectory	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::extractCheckpointReadDirectory() {$/;"	f	class:PV::Checkpointer
f	python/analysis_parse.py	/^f = open("found_pvps.txt", "w")$/;"	v
f	python/deprecated/readPvpFile.py	/^   f = open(filename, 'rb')$/;"	v
f	python/get_names.py	/^f = open("connections.txt", "w")$/;"	v
f	python/get_names.py	/^f = open("layers.txt", "w")$/;"	v
f	python/probe_analysis/noArborReadProbe.py	/^f = open(filename, 'r')$/;"	v
f	python/pvtools/pvpFile.py	/^    f = pvpOpen(filename, 'a')$/;"	v	class:pvpOpen
f	python/timerPie.py	/^f = open(timersFile, 'r')$/;"	v
f	python/timerPie.py	/^f = plt.figure()$/;"	v
f	src/io/PrintStream.hpp	/^   PrintStream &operator<<(std::ostream &(*f)(std::ios &)) {$/;"	f	class:PV::PrintStream
f	src/io/PrintStream.hpp	/^   PrintStream &operator<<(std::ostream &(*f)(std::ios_base &)) {$/;"	f	class:PV::PrintStream
f	src/io/PrintStream.hpp	/^   PrintStream &operator<<(std::ostream &(*f)(std::ostream &)) {$/;"	f	class:PV::PrintStream
f	tests/MomentumLCATest/scripts/plotEnergy.py	/^f = open(momentumFilename, 'r')$/;"	v
f	tests/MomentumLCATest/scripts/plotEnergy.py	/^f = open(regFilename, 'r')$/;"	v
f	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   f = open(filename, 'rb')$/;"	v
fDelayArray	src/connections/BaseConnection.hpp	/^   float *fDelayArray; \/\/ delays[arborId] is the delay in units of dt of the arborId'th arbor$/;"	m	class:PV::BaseConnection
fLoc	src/probes/PointProbe.hpp	/^   int fLoc;$/;"	m	class:PV::PointProbe
fMax	src/probes/StatsProbe.hpp	/^   float *fMax;$/;"	m	class:PV::StatsProbe
fMin	src/probes/StatsProbe.hpp	/^   float *fMin;$/;"	m	class:PV::StatsProbe
fPatchSize	src/connections/HyPerConn.hpp	/^   inline int fPatchSize() { return nfp; }$/;"	f	class:PV::HyPerConn
fPatchStride	src/connections/HyPerConn.hpp	/^   inline int fPatchStride() { return sfp; }$/;"	f	class:PV::HyPerConn
fPostPatchSize	src/connections/HyPerConn.hpp	/^   inline int fPostPatchSize() { return nfpPost; }$/;"	f	class:PV::HyPerConn
fPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   int fPre;$/;"	m	class:PV::InitGauss2DWeightsParams
fast	src/io/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon12
fast	src/io/stb_image.h	/^   stbi_uc fast[1 << FAST_BITS];$/;"	m	struct:__anon8
fast_ac	src/io/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon9
feature	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int feature;$/;"	m	struct:LocalizationData
featureFreqCount	src/layers/ShuffleLayer.hpp	/^   long **featureFreqCount;$/;"	m	class:PV::ShuffleLayer
featureIndex	src/utils/conversions.h	/^static inline int featureIndex(int k, int nx, int ny, int nf) { return k % nf; }$/;"	f
featurefieldwidth	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int featurefieldwidth; \/\/ how many digits it takes to print the features (e.g. if nf was 100, the last feature is 99, which needs 2 digits)  Set in communicateInitInfo.  All processes compute this, although only the root process uses it$/;"	m	class:LocalizationProbe
features	src/layers/MaskLayer.hpp	/^   int *features;$/;"	m	class:PV::MaskLayer
feedVideoToDragonsGapingMaw	demos/HeatMapLocalization/src/main.cpp	/^   void feedVideoToDragonsGapingMaw(char const * path) {$/;"	f	class:FrameServer
fig0	python/probe_analysis/noArborReadProbe.py	/^fig0 = figure(0)$/;"	v
fig1	python/probe_analysis/noArborReadProbe.py	/^    fig1 = figure(1)$/;"	v
fig2	python/probe_analysis/noArborReadProbe.py	/^    fig2 = figure(2)$/;"	v
figLabel	python/probe_analysis/readProbe.py	/^                            figLabel=keyLabel+"_"+filenameTup[0]+"_n"+neuronLabel$/;"	v
figLabel	python/probe_analysis/readProbe.py	/^                            figLabel=keyLabel+"_"+filenameTup[0]+"_n"+neuronLabel+"_a"+arborLabel$/;"	v
figLabel	python/probe_analysis/readProbe.py	/^                        figLabel=keyLabel+"_"+filenameTup[0]+"_n"+neuronLabel+"_a"+arborLabel$/;"	v
figOutDir	python/probe_analysis/noArborReadProbe.py	/^figOutDir    = "\/Users\/slundquist\/Desktop\/figOut\/"$/;"	v
figOutDir	python/probe_analysis/readProbe.py	/^        figOutDir = rootFigOutDir+"\/"+filenameTup[0]+"\/"$/;"	v
figRootName	python/probe_analysis/noArborReadProbe.py	/^figRootName  = 'onVer_weights'$/;"	v
file	python/timers_txt_to_csv.py	/^file = open("timers.txt");$/;"	v
fileLines	python/timerPie.py	/^fileLines = f.readlines()$/;"	v
fileStartTime	python/probe_analysis/noArborReadProbe.py	/^    fileStartTime = float(firstLineSplit[0][1])$/;"	v
fileType	src/connections/HyPerConn.hpp	/^   int fileType; \/\/ type ID for file written by PV::writeWeights$/;"	m	class:PV::HyPerConn
fileType	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
filelength	src/include/pv_types.h	/^   long filelength;$/;"	m	struct:PV_Stream_
filename	python/deprecated/readPvpFile.py	/^   filename = "\/nh\/compneuro\/Data\/Depth\/depth_data_1\/pvp\/depth_00.pvp"$/;"	v
filename	python/probe_analysis/noArborReadProbe.py	/^filename     = "\/Users\/slundquist\/Desktop\/lifLat_Center.txt"$/;"	v
filename	python/probe_analysis/readProbe.py	/^    filename = filenameTup[1]$/;"	v
filename	python/pvtools/pvpFile.py	/^    filename = "\/home\/slundquist\/mountData\/datasets\/cifar\/pvp\/tmp.pvp"$/;"	v	class:pvpOpen
filename	src/weightinit/InitWeightsParams.hpp	/^   char *filename;$/;"	m	class:PV::InitWeightsParams
filename	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   filename = "\/nh\/compneuro\/Data\/Depth\/depth_data_1\/pvp\/depth_00.pvp"$/;"	v
filename	tests/test_constant_input/src/test_constant_input.cpp	/^const char filename[] = "output\/test_layer_direct.bin";$/;"	v
filenames	python/probe_analysis/readProbeParams.py	/^filenames    = [$/;"	v
filenames	python/probe_analysis/readProbeParams.py	/^filenames = [("label","path")]$/;"	v
fileparams	src/connections/HyPerConn.hpp	/^   int fileparams[NUM_WGT_PARAMS]; \/\/ The header of the file named by the filename member variable$/;"	m	class:PV::HyPerConn
filepos	src/include/pv_types.h	/^   long filepos;$/;"	m	struct:PV_Stream_
final	src/connections/BaseConnection.hpp	/^   virtual int initializeState() override final;$/;"	m	class:PV::BaseConnection
final	src/layers/HyPerLayer.hpp	/^   virtual int initializeState() override final;$/;"	m	class:PV::HyPerLayer
finalCheckpoint	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::finalCheckpoint(double simTime) {$/;"	f	class:PV::Checkpointer
finalizeThreads	src/columns/HyPerCol.cpp	/^int HyPerCol::finalizeThreads() {$/;"	f	class:PV::HyPerCol
finalizeUpdate	src/connections/BaseConnection.hpp	/^   virtual int finalizeUpdate(double timed, double dt) { return PV_SUCCESS; }$/;"	f	class:PV::BaseConnection
finalizeUpdate	src/connections/CloneConn.cpp	/^int CloneConn::finalizeUpdate(double timed, double dt) {$/;"	f	class:PV::CloneConn
finalizeUpdate	src/connections/HyPerConn.cpp	/^int HyPerConn::finalizeUpdate(double timed, double dt) {$/;"	f	class:PV::HyPerConn
finalizeUpdate	src/connections/TransposeConn.cpp	/^int TransposeConn::finalizeUpdate(double timed, double dt) {$/;"	f	class:PV::TransposeConn
finalizeUpdate	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::finalizeUpdate(double time, double dt) {$/;"	f	class:PV::privateTransposeConn
findBoundingBox	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::findBoundingBox(int winningFeature, int winningIndex, int xLocation, int yLocation, float const * buffer, PVLayerLoc const * loc, int * boundingBox) {$/;"	f	class:LocalizationProbe
findMaxLocation	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::findMaxLocation(int * winningFeature, int * winningIndex, int * xLocation, int * yLocation, float * maxActivity, float * buffer, PVLayerLoc const * loc) {$/;"	f	class:LocalizationProbe
findPercentileThreshold	src/connections/HyPerConn.cpp	/^SparseWeightInfo HyPerConn::findPercentileThreshold($/;"	f	class:PV::HyPerConn
findPostSynaptic	src/layers/LIF.cpp	/^int LIF::findPostSynaptic($/;"	f	class:PV::LIF
findProbe	src/probes/QuotientColProbe.cpp	/^BaseProbe *QuotientColProbe::findProbe(char const *probeName) {$/;"	f	class:PV::QuotientColProbe
findWarmStartDirectory	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::findWarmStartDirectory() {$/;"	f	class:PV::Checkpointer
findregex	python/analysis_parse.py	/^def findregex(reg, line):$/;"	f
first	src/io/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon19
firstFailureTime	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	/^   double firstFailureTime;$/;"	m	class:ResetStateOnTriggerTestProbe
firstLine	python/probe_analysis/noArborReadProbe.py	/^    firstLine = f.readline()$/;"	v
firstLineSplit	python/probe_analysis/noArborReadProbe.py	/^    firstLineSplit = splitLine(firstLine) #list of tuples. list[0] is always time. tuple is ('label','val')$/;"	v
first_name	python/timers_txt_to_csv.py	/^    first_name = re.search(first_name_pattern,line).group()$/;"	v
first_name_pattern	python/timers_txt_to_csv.py	/^first_name_pattern = "\\w+"$/;"	v
first_row_filter	src/io/stb_image.h	/^static stbi_uc first_row_filter[5] = {STBI__F_none,$/;"	v
firstcode	src/io/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon12
firstsymbol	src/io/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon12
fitBufferToLayer	src/layers/InputLayer.cpp	/^void InputLayer::fitBufferToLayer(Buffer<float> &buffer) {$/;"	f	class:PV::InputLayer
flags	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
float2fixed	src/io/stb_image.h	3336;"	d
float2fixed	src/io/stb_image.h	3384;"	d
flush	src/io/PrintStream.hpp	/^   void flush() { mOutStream->flush(); }$/;"	f	class:PV::PrintStream
flush	src/utils/PVLog.hpp	/^   Log &flush() {$/;"	f	struct:PV::Log
flushOutputStream	src/utils/PVLog.hpp	/^inline bool DebugLogType::flushOutputStream() {$/;"	f	class:PV::DebugLogType
flushOutputStream	src/utils/PVLog.hpp	/^inline bool ErrorLogType::flushOutputStream() {$/;"	f	class:PV::ErrorLogType
flushOutputStream	src/utils/PVLog.hpp	/^inline bool FatalType::flushOutputStream() {$/;"	f	class:PV::FatalType
flushOutputStream	src/utils/PVLog.hpp	/^inline bool InfoLogType::flushOutputStream() {$/;"	f	class:PV::InfoLogType
flushOutputStream	src/utils/PVLog.hpp	/^inline bool StackTraceType::flushOutputStream() {$/;"	f	class:PV::StackTraceType
flushOutputStream	src/utils/PVLog.hpp	/^inline bool WarnLogType::flushOutputStream() {$/;"	f	class:PV::WarnLogType
found	python/analysis_parse.py	/^                found = True$/;"	v
found	python/analysis_parse.py	/^        found = False$/;"	v
foundparams	python/analysis_parse.py	/^foundparams = []$/;"	v
fp	src/include/pv_types.h	/^   FILE *fp;$/;"	m	struct:PV_Stream_
fprint_time	src/arch/cuda/CudaTimer.cpp	/^int CudaTimer::fprint_time(PrintStream &stream) {$/;"	f	class:PVCuda::CudaTimer
fprint_time	src/utils/Timer.cpp	/^int Timer::fprint_time(PrintStream &stream) const {$/;"	f	class:PV::Timer
frameLengths	src/utils/BufferUtilsPvp.hpp	/^   vector<long> frameLengths;$/;"	m	struct:PV::BufferUtils::SparseFileTable
frameStartOffsets	src/utils/BufferUtilsPvp.hpp	/^   vector<long> frameStartOffsets;$/;"	m	struct:PV::BufferUtils::SparseFileTable
framesPerMap	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int framesPerMap;$/;"	m	class:BBFindConfRemapLayer
framesPerMap	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int framesPerMap;$/;"	m	class:LocalizationBBFindProbe
freeArgs	src/columns/PV_Init.cpp	/^void PV_Init::freeArgs(int argc, char **argv) {$/;"	f	class:PV::PV_Init
freeBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::freeBuffer(T **buf) {$/;"	f	class:PV::HyPerLayer
freeChannels	src/layers/HyPerLayer.cpp	/^void HyPerLayer::freeChannels() {$/;"	f	class:PV::HyPerLayer
freeClayer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::freeClayer() {$/;"	f	class:PV::HyPerLayer
freeDatatypes	src/utils/BorderExchange.cpp	/^void BorderExchange::freeDatatypes() {$/;"	f	class:PV::BorderExchange
freeExtendedBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::freeExtendedBuffer(float **buf) { return freeBuffer(buf); }$/;"	f	class:PV::HyPerLayer
freeRestrictedBuffer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::freeRestrictedBuffer(float **buf) { return freeBuffer(buf); }$/;"	f	class:PV::HyPerLayer
freqCollectTime	src/layers/ShuffleLayer.hpp	/^   long freqCollectTime;$/;"	m	class:PV::ShuffleLayer
freqFilename	src/layers/ShuffleLayer.hpp	/^   char *freqFilename;$/;"	m	class:PV::ShuffleLayer
fromBuffer	src/structures/SparseList.hpp	/^   void fromBuffer(const Buffer<T> &source, T zeroVal) {$/;"	f	class:PV::SparseList
func	src/io/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon21
gCocirc	src/weightinit/InitCocircWeightsParams.hpp	/^   float gCocirc;$/;"	m	class:PV::InitCocircWeightsParams
gDist	src/weightinit/InitCocircWeightsParams.hpp	/^   float gDist;$/;"	m	class:PV::InitCocircWeightsParams
gKurvePost	src/weightinit/InitCocircWeightsParams.hpp	/^   float gKurvePost;$/;"	m	class:PV::InitCocircWeightsParams
gKurvePre	src/weightinit/InitCocircWeightsParams.hpp	/^   float gKurvePre;$/;"	m	class:PV::InitCocircWeightsParams
gSyn	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      float *gSyn;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
gSynDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      void *gSynDescriptor;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
gSynPatchStart	src/connections/HyPerConn.hpp	/^   size_t **gSynPatchStart; \/\/ gSynPatchStart[arborId][kExt] is the offset to the start of the patch$/;"	m	class:PV::HyPerConn
gSynPatchStart	src/cudakernels/CudaRecvPre.hpp	/^   size_t *gSynPatchStart;$/;"	m	struct:PVCuda::recv_pre_params
gaborWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::gaborWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
gaborWeights	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^int InitGaborWeights::gaborWeights(float *dataStart, InitGaborWeightsParams *weightParamPtr) {$/;"	f	class:PV::InitGaborWeights
gaborWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::gaborWeights($/;"	f	class:PV::KernelConnDebugInitWeights
gapStrength	src/layers/LIFGap.hpp	/^   float *gapStrength;$/;"	m	class:PV::LIFGap
gapStrengthInitialized	src/layers/LIFGap.hpp	/^   bool gapStrengthInitialized;$/;"	m	class:PV::LIFGap
gatherActivity	src/io/fileio.cpp	/^int gatherActivity($/;"	f	namespace:PV
gauss2DCalcWeights	src/weightinit/InitGauss2DWeights.cpp	/^int InitGauss2DWeights::gauss2DCalcWeights($/;"	f	class:PV::InitGauss2DWeights
gauss2DCalcWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::gauss2DCalcWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
gauss2DCalcWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::gauss2DCalcWeights($/;"	f	class:PV::KernelConnDebugInitWeights
gaussianDist	src/columns/GaussianRandom.cpp	/^float GaussianRandom::gaussianDist(int localIndex) {$/;"	f	class:PV::GaussianRandom
gaussianDist	src/columns/GaussianRandom.hpp	/^   float gaussianDist(int localIndex, float mean, float sigma) {$/;"	f	class:PV::GaussianRandom
gaussianDist	src/columns/GaussianRandom.hpp	/^   void gaussianDist(float *values, int localIndex, int count = 1) {$/;"	f	class:PV::GaussianRandom
gaussianDist	src/columns/GaussianRandom.hpp	/^   void gaussianDist(float *values, int localIndex, int count, float mean, float sigma) {$/;"	f	class:PV::GaussianRandom
gaussianRandState	src/weightinit/InitGaussianRandomWeights.hpp	/^         *gaussianRandState; \/\/ Use this instead of randState to use Box-Muller transformation.$/;"	m	class:PV::InitGaussianRandomWeights
gaussianWeight	src/utils/conversions.h	/^static inline float gaussianWeight(float x0, float x, float sigma, float max) {$/;"	f
gcd	src/columns/Communicator.cpp	/^int Communicator::gcd(int a, int b) {$/;"	f	class:PV::Communicator
generate	tests/GenericSystemTest/src/main.cpp	/^int generate(PV_Init *initObj, int rank) {$/;"	f
generate	tests/LCATest/src/main.cpp	/^int generate(PV_Init *initObj, int rank) {$/;"	f
generate	tests/MomentumLCATest/src/main.cpp	/^int generate(PV_Init *initObj, int rank) {$/;"	f
generate	tests/TotalEnergyTest/src/main.cpp	/^int generate(PV_Init *initObj, int rank) {$/;"	f
generate	tests/WriteSparseFileTest/src/main.cpp	/^int generate(PV_Init *initObj, int rank) {$/;"	f
generateBlockPath	src/checkpointing/Checkpointer.cpp	/^std::string Checkpointer::generateBlockPath(std::string const &baseDirectory) {$/;"	f	class:PV::Checkpointer
generateHeader	python/pvtools/pvpFile.py	/^    def generateHeader(self, data, inShape):$/;"	m	class:pvpOpen
generatePath	src/checkpointing/CheckpointEntry.cpp	/^std::string CheckpointEntry::generatePath($/;"	f	class:PV::CheckpointEntry
getA	src/probes/PointProbe.cpp	/^double PointProbe::getA() { return getValuesBuffer()[1]; }$/;"	f	class:PV::PointProbe
getAMax	src/layers/ANNLayer.hpp	/^   float getAMax() const { return AMax; }$/;"	f	class:PV::ANNLayer
getAMin	src/layers/ANNLayer.hpp	/^   float getAMin() const { return AMin; }$/;"	f	class:PV::ANNLayer
getAPostOffset	src/connections/HyPerConn.hpp	/^   inline size_t **getAPostOffset() { return aPostOffset; }$/;"	f	class:PV::HyPerConn
getAPostOffset	src/connections/HyPerConn.hpp	/^   inline size_t getAPostOffset(int kPre, int arborId) { return aPostOffset[arborId][kPre]; }$/;"	f	class:PV::HyPerConn
getAShift	src/layers/ANNLayer.hpp	/^   float getAShift() const { return AShift; }$/;"	f	class:PV::ANNLayer
getAccumulateAmount	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getAccumulateAmount() const { return mAccumulateAmount; }$/;"	f	class:BBFind
getActive	python/deprecated/max_pv_object.py	/^    def getActive(self):$/;"	m	class:PV_Object
getActive	python/pvtools/display.py	/^def getActive(data):$/;"	f
getActivity	src/layers/HyPerLayer.hpp	/^   float *getActivity() {$/;"	f	class:PV::HyPerLayer
getAllocDeviceWeights	src/connections/HyPerConn.hpp	/^   bool getAllocDeviceWeights() { return allocDeviceWeights; }$/;"	f	class:PV::HyPerConn
getAllocPostDeviceWeights	src/connections/HyPerConn.hpp	/^   bool getAllocPostDeviceWeights() { return allocPostDeviceWeights; }$/;"	f	class:PV::HyPerConn
getAllowUnrecognizedArguments	src/io/ConfigParser.hpp	/^   bool getAllowUnrecognizedArguments() const { return mAllowUnrecognizedArguments; }$/;"	f	class:PV::ConfigParser
getArbor	src/probes/KernelProbe.hpp	/^   int getArbor() { return arborID; }$/;"	f	class:PV::KernelProbe
getArgsCopy	src/columns/PV_Init.cpp	/^char **PV_Init::getArgsCopy() const {$/;"	f	class:PV::PV_Init
getArguments	src/columns/PV_Init.hpp	/^   Arguments const *getArguments() const { return arguments; }$/;"	f	class:PV::PV_Init
getArraySize	src/io/PVParams.hpp	/^   int getArraySize() { return arraySize; }$/;"	f	class:PV::ParameterArray
getAspect	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getAspect() { return aspect; }$/;"	f	class:PV::InitGauss2DWeightsParams
getAutoGPUDevice	src/columns/HyPerCol.cpp	/^int HyPerCol::getAutoGPUDevice() {$/;"	f	class:PV::HyPerCol
getBBGuessSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getBBGuessSize() const { return mBBGuessSize; }$/;"	f	class:BBFind
getBaseProbe	src/columns/HyPerCol.hpp	/^   BaseProbe *getBaseProbe(int which) { return mBaseProbes.at(which); }$/;"	f	class:PV::HyPerCol
getBaseProbeFromName	src/columns/HyPerCol.cpp	/^BaseProbe *HyPerCol::getBaseProbeFromName(const char *probeName) {$/;"	f	class:PV::HyPerCol
getBatchDimension	src/structures/MPIBlock.hpp	/^   int getBatchDimension() const { return mBatchDimension; }$/;"	f	class:PV::MPIBlock
getBatchIndex	src/structures/MPIBlock.hpp	/^   int getBatchIndex() const { return mBatchIndex; }$/;"	f	class:PV::MPIBlock
getBatchMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock const *getBatchMPIBlock() const { return batchMPIBlock; }$/;"	f	class:PV::Communicator
getBatchSweepSize	src/io/PVParams.hpp	/^   int getBatchSweepSize() { return batchSweepSize; }$/;"	f	class:PV::PVParams
getBooleanArgument	src/columns/Arguments.hpp	/^   bool const &getBooleanArgument(std::string const &name) const {$/;"	f	class:PV::Arguments
getBooleanArgument	src/columns/PV_Init.hpp	/^   bool const &getBooleanArgument(std::string const &name) const {$/;"	f	class:PV::PV_Init
getBooleanArgument	src/io/ConfigParser.hpp	/^   bool const &getBooleanArgument(std::string const &name) const {$/;"	f	class:PV::ConfigParser
getBooleanArgument	src/io/Configuration.cpp	/^bool const &Configuration::getBooleanArgument(std::string const &name) const {$/;"	f	class:PV::Configuration
getBoundingBoxFinder	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   std::vector<BBFind> const getBoundingBoxFinder() { return boundingboxFinder; }$/;"	f	class:BBFindConfRemapLayer::std
getBuffer	src/structures/RingBuffer.hpp	/^   T *getBuffer() { return mBuffer[mCurrentLevel].data(); }$/;"	f	class:PV::RingBuffer
getBuffer	src/structures/RingBuffer.hpp	/^   T *getBuffer(int level, int offset) { return &mBuffer[levelIndex(level)].at(offset); }$/;"	f	class:PV::RingBuffer
getBuffer	src/structures/RingBuffer.hpp	/^   T *getBuffer(int offset) { return &mBuffer[mCurrentLevel].at(offset); }$/;"	f	class:PV::RingBuffer
getCLayer	src/layers/HyPerLayer.hpp	/^   PVLayer *getCLayer() { return clayer; }$/;"	f	class:PV::HyPerLayer
getCenterIdxBuf	src/layers/SegmentLayer.hpp	/^   const std::map<int, int> getCenterIdxBuf(int batch) { return centerIdx[batch]; }$/;"	f	class:PV::SegmentLayer
getChannel	src/connections/BaseConnection.hpp	/^   inline ChannelType getChannel() { return channel; }$/;"	f	class:PV::BaseConnection
getChannel	src/layers/HyPerLayer.hpp	/^   float *getChannel(ChannelType ch) { \/\/ name query$/;"	f	class:PV::HyPerLayer
getChannel	src/weightinit/InitWeightsParams.hpp	/^   inline ChannelType getChannel() { return channel; }$/;"	f	class:PV::InitWeightsParams
getChannelStart	src/utils/conversions.h	/^static inline float *getChannelStart(float *gSynHead, enum ChannelType ch, int num_neurons) {$/;"	f
getChannelTimeConst	src/layers/HyPerLayer.hpp	/^   virtual float getChannelTimeConst(enum ChannelType channel_type) { return 0.0f; };$/;"	f	class:PV::HyPerLayer
getChannelTimeConst	src/layers/ISTALayer.hpp	/^   virtual float getChannelTimeConst(enum ChannelType channel_type) { return timeConstantTau; };$/;"	f	class:PV::ISTALayer
getChannelTimeConst	src/layers/LIF.cpp	/^float LIF::getChannelTimeConst(enum ChannelType channel_type) {$/;"	f	class:PV::LIF
getCheckpointReadDirectory	src/checkpointing/Checkpointer.hpp	/^   std::string const &getCheckpointReadDirectory() const { return mCheckpointReadDirectory; }$/;"	f	class:PV::Checkpointer::std
getCheckpointReadFlag	src/columns/HyPerCol.hpp	/^   bool getCheckpointReadFlag() const { return mCheckpointReadFlag; }$/;"	f	class:PV::HyPerCol
getCheckpointWriteDir	src/checkpointing/Checkpointer.hpp	/^   char const *getCheckpointWriteDir() const { return mCheckpointWriteDir; }$/;"	f	class:PV::Checkpointer
getCheckpointWriteFlag	src/checkpointing/Checkpointer.hpp	/^   bool getCheckpointWriteFlag() const { return mCheckpointWriteFlag; }$/;"	f	class:PV::Checkpointer
getCheckpointWriteFlag	src/columns/HyPerCol.hpp	/^   bool getCheckpointWriteFlag() const { return mCheckpointer->getCheckpointWriteFlag(); }$/;"	f	class:PV::HyPerCol
getCheckpointWriteSimtimeInterval	src/checkpointing/Checkpointer.hpp	/^   double getCheckpointWriteSimtimeInterval() const { return mCheckpointWriteSimtimeInterval; }$/;"	f	class:PV::Checkpointer
getCheckpointWriteStepInterval	src/checkpointing/Checkpointer.hpp	/^   long int getCheckpointWriteStepInterval() const { return mCheckpointWriteStepInterval; }$/;"	f	class:PV::Checkpointer
getCheckpointWriteTriggerMode	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode getCheckpointWriteTriggerMode() const {$/;"	f	class:PV::Checkpointer
getClassName	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^char const * LocalizationProbe::getClassName(int k) {$/;"	f	class:LocalizationProbe
getClassNamesFile	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getClassNamesFile() { return classNamesFile; }$/;"	f	class:LocalizationProbe
getCoefficient	src/probes/BaseProbe.hpp	/^   double getCoefficient() { return coefficient; }$/;"	f	class:PV::BaseProbe
getColProbe	src/columns/HyPerCol.hpp	/^   ColProbe *getColProbe(int which) { return mColProbes.at(which); }$/;"	f	class:PV::HyPerCol
getColProbeFromName	src/columns/HyPerCol.cpp	/^ColProbe *HyPerCol::getColProbeFromName(const char *probeName) {$/;"	f	class:PV::HyPerCol
getColumnIndex	src/structures/MPIBlock.hpp	/^   int getColumnIndex() const { return mColumnIndex; }$/;"	f	class:PV::MPIBlock
getCombineWeightFiles	src/weightinit/InitWeightsParams.hpp	/^   inline bool getCombineWeightFiles() { return combineWeightFiles; }$/;"	f	class:PV::InitWeightsParams
getComm	src/structures/MPIBlock.hpp	/^   MPI_Comm getComm() const { return mComm; }$/;"	f	class:PV::MPIBlock
getCommunicator	src/columns/HyPerCol.hpp	/^   Communicator *getCommunicator() const { return mCommunicator; }$/;"	f	class:PV::HyPerCol
getCommunicator	src/columns/PV_Init.hpp	/^   Communicator *getCommunicator() { return mCommunicator; }$/;"	f	class:PV::PV_Init
getConductance	src/layers/LIF.hpp	/^   virtual pvconductance_t *getConductance(ChannelType ch) {$/;"	f	class:PV::LIF
getConfMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getConfMap() { return mCurrentConfMap; }$/;"	f	class:BBFind
getConfig	src/io/ConfigParser.hpp	/^   Configuration const &getConfig() const { return mConfig; }$/;"	f	class:PV::ConfigParser
getConnData	tests/Shared/ColumnArchive.hpp	/^   ConnArchive const &getConnData(int c) const { return m_conndata.at(c); }$/;"	f	class:ColumnArchive
getConnData	tests/Shared/ColumnArchive.hpp	/^   std::vector<ConnArchive> const &getConnData() const { return m_conndata; }$/;"	f	class:ColumnArchive::std
getConnFromName	src/columns/HyPerCol.cpp	/^BaseConnection *HyPerCol::getConnFromName(const char *connName) {$/;"	f	class:PV::HyPerCol
getConnectOnlySameFeatures	src/weightinit/InitUniformWeightsParams.hpp	/^   inline bool getConnectOnlySameFeatures() { return connectOnlySameFeatures; }$/;"	f	class:PV::InitUniformWeightsParams
getConnection	src/columns/HyPerCol.hpp	/^   BaseConnection *getConnection(int which) { return mConnections.at(which); }$/;"	f	class:PV::HyPerCol
getConstantVal	tests/test_constant_input/src/TestImage.hpp	/^   const float getConstantVal() { return val; }$/;"	f	class:PV::TestImage
getContents	src/structures/SparseList.hpp	/^   vector<Entry> getContents() { return mList; }$/;"	f	class:PV::SparseList
getContrast	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getContrast() const { return mContrast; }$/;"	f	class:BBFind
getContrastStrength	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getContrastStrength() const { return mContrastStrength; }$/;"	f	class:BBFind
getConvertRateToSpikeCount	src/connections/BaseConnection.hpp	/^   inline bool getConvertRateToSpikeCount() { return convertRateToSpikeCount; }$/;"	f	class:PV::BaseConnection
getConvertToRateDeltaTimeFactor	src/connections/HyPerConn.cpp	/^double HyPerConn::getConvertToRateDeltaTimeFactor() {$/;"	f	class:PV::HyPerConn
getCorrectInput	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectInput() const { return mCorrectInput; }$/;"	f	class:CorrectState
getCorrectInput	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectInput() const { return mCorrectInput; }$/;"	f	class:CorrectState
getCorrectInput	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectInput() const { return mCorrectInput; }$/;"	f	class:CorrectState
getCorrectInputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   PV::Buffer<float> const &getCorrectInputBuffer() const { return mCorrectInputBuffer; }$/;"	f	class:CorrectState::PV
getCorrectOutput	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectOutput() const { return mCorrectOutput; }$/;"	f	class:CorrectState
getCorrectOutput	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectOutput() const { return mCorrectOutput; }$/;"	f	class:CorrectState
getCorrectOutput	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectOutput() const { return mCorrectOutput; }$/;"	f	class:CorrectState
getCorrectOutputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   PV::Buffer<float> const &getCorrectOutputBuffer() const { return mCorrectOutputBuffer; }$/;"	f	class:CorrectState::PV
getCorrectValue	tests/GroupNormalizationTest/src/AllConstantValueProbe.hpp	/^   float getCorrectValue() { return correctValue; }$/;"	f	class:PV::AllConstantValueProbe
getCorrectWeight	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectWeight() const { return mCorrectWeight; }$/;"	f	class:CorrectState
getCorrectWeight	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectWeight() const { return mCorrectWeight; }$/;"	f	class:CorrectState
getCorrectWeight	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float getCorrectWeight() const { return mCorrectWeight; }$/;"	f	class:CorrectState
getCorrect_dw	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float getCorrect_dw() const { return mCorrect_dw; }$/;"	f	class:CorrectState
getCorrect_dw	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float getCorrect_dw() const { return mCorrect_dw; }$/;"	f	class:CorrectState
getCreator	src/columns/KeywordHandler.hpp	/^   ObjectCreateFn getCreator() const { return creator; }$/;"	f	class:PV::KeywordHandler
getCudnnDatastore	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getCudnnDatastore() { return cudnn_Datastore; }$/;"	f	class:PV::HyPerLayer
getCudnnGSyn	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getCudnnGSyn() { return cudnn_GSyn; }$/;"	f	class:PV::HyPerLayer
getCudnnHandle	src/arch/cuda/CudaDevice.hpp	/^   void *getCudnnHandle() { return handle; }$/;"	f	class:PVCuda::CudaDevice
getCudnnWData	src/connections/CloneConn.hpp	/^   virtual PVCuda::CudaBuffer *getCudnnWData() { return originalConn->getCudnnWData(); }$/;"	f	class:PV::CloneConn
getCudnnWData	src/connections/HyPerConn.hpp	/^   virtual PVCuda::CudaBuffer *getCudnnWData() { return cudnn_WData; }$/;"	f	class:PV::HyPerConn
getCudnnWData	src/connections/TransposeConn.hpp	/^   virtual PVCuda::CudaBuffer *getCudnnWData() { return originalConn->postConn->getCudnnWData(); }$/;"	f	class:PV::TransposeConn
getDWMax	src/connections/HyPerConn.hpp	/^   inline float getDWMax() { return dWMax; }$/;"	f	class:PV::HyPerConn
getDataPointer	src/checkpointing/CheckpointEntryPvp.hpp	/^   T *getDataPointer() const { return mDataPointer; }$/;"	f	class:PV::CheckpointEntryPvp
getDataPointer	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   T *getDataPointer() const { return mDataPointer; }$/;"	f	class:PV::CheckpointEntryPvpBuffer
getDataStore	src/checkpointing/CheckpointEntryDataStore.hpp	/^   DataStore *getDataStore() const { return mDataStore; }$/;"	f	class:PV::CheckpointEntryDataStore
getDataStructuresAllocatedFlag	src/columns/BaseObject.hpp	/^   bool getDataStructuresAllocatedFlag() { return mDataStructuresAllocatedFlag; }$/;"	f	class:PV::BaseObject
getDataType	src/layers/HyPerLayer.hpp	/^   PVDataType getDataType() { return dataType; }$/;"	f	class:PV::HyPerLayer
getDefaultInitWeightsMethod	src/connections/HyPerConn.cpp	/^InitWeights *HyPerConn::getDefaultInitWeightsMethod(const char *keyword) {$/;"	f	class:PV::HyPerConn
getDefaultInitializeFromCheckpointFlag	src/checkpointing/Checkpointer.hpp	/^   bool getDefaultInitializeFromCheckpointFlag() const {$/;"	f	class:PV::Checkpointer
getDefaultInitializeFromCheckpointFlag	src/columns/HyPerCol.hpp	/^   bool getDefaultInitializeFromCheckpointFlag() {$/;"	f	class:PV::HyPerCol
getDelay	src/connections/BaseConnection.hpp	/^   inline int getDelay(int arbor) {$/;"	f	class:PV::BaseConnection
getDelayArraySize	src/connections/BaseConnection.hpp	/^   int getDelayArraySize() { return delayArraySize; }$/;"	f	class:PV::BaseConnection
getDeltaTheta	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getDeltaTheta() { return deltaTheta; }$/;"	f	class:PV::InitGauss2DWeightsParams
getDeltaThetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getDeltaThetaMax() { return deltaThetaMax; }$/;"	f	class:PV::InitGauss2DWeightsParams
getDeltaTime	src/columns/HyPerCol.hpp	/^   double getDeltaTime() const { return mDeltaTime; }$/;"	f	class:PV::HyPerCol
getDeltaTriggerTime	src/layers/HyPerLayer.cpp	/^double HyPerLayer::getDeltaTriggerTime() {$/;"	f	class:PV::HyPerLayer
getDeltaUpdateTime	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^double BBFindConfRemapLayer::getDeltaUpdateTime() {$/;"	f	class:BBFindConfRemapLayer
getDeltaUpdateTime	src/layers/HyPerLCALayer.cpp	/^double HyPerLCALayer::getDeltaUpdateTime() { return parent->getDeltaTime(); }$/;"	f	class:PV::HyPerLCALayer
getDeltaUpdateTime	src/layers/HyPerLayer.cpp	/^double HyPerLayer::getDeltaUpdateTime() {$/;"	f	class:PV::HyPerLayer
getDeltaUpdateTime	src/layers/ISTALayer.cpp	/^double ISTALayer::getDeltaUpdateTime() { return parent->getDeltaTime(); }$/;"	f	class:PV::ISTALayer
getDeltaUpdateTime	src/layers/ImageFromMemoryBuffer.cpp	/^double ImageFromMemoryBuffer::getDeltaUpdateTime() {$/;"	f	class:PV::ImageFromMemoryBuffer
getDeltaUpdateTime	src/layers/InputLayer.cpp	/^double InputLayer::getDeltaUpdateTime() { return mDisplayPeriod > 0 ? mDisplayPeriod : DBL_MAX; }$/;"	f	class:PV::InputLayer
getDeltaUpdateTime	tests/ImageOffsetTest/src/ImageOffsetTestLayer.cpp	/^double ImageOffsetTestLayer::getDeltaUpdateTime() { return 1; }$/;"	f	class:PV::ImageOffsetTestLayer
getDeltaUpdateTime	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.cpp	/^double ImagePvpOffsetTestLayer::getDeltaUpdateTime() { return 1; }$/;"	f	class:PV::ImagePvpOffsetTestLayer
getDescription	src/observerpattern/Observer.hpp	/^   inline std::string const &getDescription() const { return description; }$/;"	f	class:PV::Observer::std
getDescription_c	src/observerpattern/Observer.hpp	/^   inline char const *getDescription_c() const { return description.c_str(); }$/;"	f	class:PV::Observer
getDetection	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   inline LocalizationData const * getDetection(size_t index) { return &detections.at(index); }$/;"	f	class:LocalizationProbe
getDetectionThreshold	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   inline float getDetectionThreshold(int idx) const { return (idx>=0 && idx<numDisplayedCategories) ? detectionThreshold[idx] : std::numeric_limits<float>::signaling_NaN(); }$/;"	f	class:LocalizationProbe
getDetectionWait	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getDetectionWait() const { return mDetectionWait; }$/;"	f	class:BBFind
getDetections	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Rectangles getDetections() { return mDetections; }$/;"	f	class:BBFind
getDetections	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   inline std::vector<LocalizationData> const * getDetections() { return &detections; }$/;"	f	class:LocalizationProbe::std
getDevice	src/columns/HyPerCol.hpp	/^   PVCuda::CudaDevice *getDevice() { return mCudaDevice; }$/;"	f	class:PV::HyPerCol
getDeviceActiveIndices	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceActiveIndices() { return d_ActiveIndices; }$/;"	f	class:PV::HyPerLayer
getDeviceActivity	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceActivity() { return d_Activity; }$/;"	f	class:PV::HyPerLayer
getDeviceDatastore	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceDatastore() { return d_Datastore; }$/;"	f	class:PV::HyPerLayer
getDeviceGSyn	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceGSyn() { return d_GSyn; }$/;"	f	class:PV::HyPerLayer
getDeviceGSynPatchStart	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *getDeviceGSynPatchStart() { return d_GSynPatchStart; }$/;"	f	class:PV::HyPerConn
getDeviceNumActive	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceNumActive() { return d_numActive; }$/;"	f	class:PV::HyPerLayer
getDevicePatches	src/connections/HyPerConn.hpp	/^   PVCuda::CudaBuffer *getDevicePatches() { return d_Patches; }$/;"	f	class:PV::HyPerConn
getDeviceV	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaBuffer *getDeviceV() { return d_V; }$/;"	f	class:PV::HyPerLayer
getDeviceWData	src/connections/CloneConn.hpp	/^   virtual PVCuda::CudaBuffer *getDeviceWData() { return originalConn->getDeviceWData(); }$/;"	f	class:PV::CloneConn
getDeviceWData	src/connections/HyPerConn.hpp	/^   virtual PVCuda::CudaBuffer *getDeviceWData() { return d_WData; }$/;"	f	class:PV::HyPerConn
getDeviceWData	src/connections/TransposeConn.hpp	/^   virtual PVCuda::CudaBuffer *getDeviceWData() { return originalConn->postConn->getDeviceWData(); }$/;"	f	class:PV::TransposeConn
getDisplayCommand	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getDisplayCommand() { return displayCommand; }$/;"	f	class:LocalizationProbe
getDisplayPeriod	src/layers/InputLayer.hpp	/^   int getDisplayPeriod() { return mDisplayPeriod; }$/;"	f	class:PV::InputLayer
getDisplayedCategories	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int const * getDisplayedCategories() { return displayedCategories; }$/;"	f	class:BBFindConfRemapLayer
getDistMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getDistMap() { return mDistMap; }$/;"	f	class:BBFind
getDrawMontage	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   bool getDrawMontage() { return drawMontage; }$/;"	f	class:LocalizationProbe
getEnergyProbe	src/probes/BaseProbe.hpp	/^   char const *getEnergyProbe() { return energyProbe; }$/;"	f	class:PV::BaseProbe
getError	python/deprecated/max_pv_object.py	/^    def getError(self, *args):$/;"	m	class:PV_Object
getError	python/pvtools/display.py	/^def getError(data, *args):$/;"	f
getErrorStream	src/utils/PVLog.cpp	/^std::ostream &getErrorStream() { return errorLogFileStream.getStream(); }$/;"	f	namespace:PV
getFPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline int getFPre() { return fPre; }$/;"	f	class:PV::InitGauss2DWeightsParams
getFeatures	src/structures/Buffer.hpp	/^   int getFeatures() const { return mFeatures; }$/;"	f	class:PV::Buffer
getFileName	src/io/FileStream.hpp	/^   std::string const &getFileName() const { return mFileName; }$/;"	f	class:PV::FileStream::std
getFileName	src/layers/InputLayer.hpp	/^   std::string getFileName(int batchIndex) {$/;"	f	class:PV::InputLayer
getFilename	src/weightinit/InitWeightsParams.hpp	/^   inline const char *getFilename() { return filename; }$/;"	f	class:PV::InitWeightsParams
getFinalStep	src/columns/HyPerCol.hpp	/^   long int getFinalStep() const { return mFinalStep; }$/;"	f	class:PV::HyPerCol
getFirstFailureTime	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	/^   double getFirstFailureTime() { return firstFailureTime; }$/;"	f	class:ResetStateOnTriggerTestProbe
getFramesPerMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getFramesPerMap() const { return mFramesPerMap; }$/;"	f	class:BBFind
getGDist	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getGDist() { return gDist; }$/;"	f	class:PV::InitCocircWeightsParams
getGSynPatchStart	src/connections/HyPerConn.hpp	/^   inline size_t **getGSynPatchStart() { return gSynPatchStart; }$/;"	f	class:PV::HyPerConn
getGSynPatchStart	src/connections/HyPerConn.hpp	/^   inline size_t getGSynPatchStart(int kPre, int arborId) { return gSynPatchStart[arborId][kPre]; }$/;"	f	class:PV::HyPerConn
getGapStrength	src/layers/LIFGap.hpp	/^   const float *getGapStrength() { return gapStrength; }$/;"	f	class:PV::LIFGap
getGlobalBatchDimension	src/structures/MPIBlock.hpp	/^   int getGlobalBatchDimension() const { return mGlobalBatchDimension; }$/;"	f	class:PV::MPIBlock
getGlobalComm	src/structures/MPIBlock.hpp	/^   MPI_Comm getGlobalComm() const { return mGlobalComm; }$/;"	f	class:PV::MPIBlock
getGlobalMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock const *getGlobalMPIBlock() const { return globalMPIBlock; }$/;"	f	class:PV::Communicator
getGlobalNumColumns	src/structures/MPIBlock.hpp	/^   int getGlobalNumColumns() const { return mGlobalNumColumns; }$/;"	f	class:PV::MPIBlock
getGlobalNumRows	src/structures/MPIBlock.hpp	/^   int getGlobalNumRows() const { return mGlobalNumRows; }$/;"	f	class:PV::MPIBlock
getGlobalRank	src/structures/MPIBlock.hpp	/^   int getGlobalRank() const { return mGlobalRank; }$/;"	f	class:PV::MPIBlock
getGpuGroupConn	src/columns/HyPerCol.hpp	/^   BaseConnection *getGpuGroupConn(int gpuGroupIdx) { return mGpuGroupConns.at(gpuGroupIdx); }$/;"	f	class:PV::HyPerCol
getGroupKeyword	src/io/PVParams.hpp	/^   const char *getGroupKeyword() { return groupKeyword; }$/;"	f	class:PV::ParameterGroup
getGroupName	src/io/PVParams.hpp	/^   const char *getGroupName() { return groupName; }$/;"	f	class:PV::ParameterSweep
getHasReceived	src/layers/HyPerLayer.hpp	/^   bool getHasReceived() { return mHasReceived; }$/;"	f	class:PV::HyPerLayer
getHasUpdated	src/layers/HyPerLayer.hpp	/^   bool getHasUpdated() { return mHasUpdated; }$/;"	f	class:PV::HyPerLayer
getHeatMapMontageDir	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getHeatMapMontageDir() { return heatMapMontageDir; }$/;"	f	class:LocalizationProbe
getHeight	src/structures/Buffer.hpp	/^   int getHeight() const { return mHeight; }$/;"	f	class:PV::Buffer
getImageDilationX	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double getImageDilationX() { return imageDilationX; }$/;"	f	class:LocalizationProbe
getImageDilationY	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double getImageDilationY() { return imageDilationY; }$/;"	f	class:LocalizationProbe
getImageFileName	demos/HeatMapLocalization/src/main.cpp	/^std::string getImageFileName(PV::Communicator * icComm)$/;"	f
getImageHeight	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getImageHeight() const { return mImageHeight; }$/;"	f	class:BBFind
getImageLayerName	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getImageLayerName() { return imageLayerName; }$/;"	f	class:LocalizationProbe
getImageWidth	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getImageWidth() const { return mImageWidth; }$/;"	f	class:BBFind
getInPos	src/io/FileStream.cpp	/^long FileStream::getInPos() { return mFStream.tellg(); }$/;"	f	class:PV::FileStream
getIndex	src/components/BatchIndexer.cpp	/^int BatchIndexer::getIndex(int localBatchIndex) {$/;"	f	class:PV::BatchIndexer
getIndex	src/layers/updateStateFunctions.h	30;"	d
getIndices	src/components/BatchIndexer.hpp	/^   std::vector<int> getIndices() { return mIndices; }$/;"	f	class:PV::BatchIndexer
getInitInfoCommunicatedFlag	src/columns/BaseObject.hpp	/^   bool getInitInfoCommunicatedFlag() { return mInitInfoCommunicatedFlag; }$/;"	f	class:PV::BaseObject
getInitWeight	src/weightinit/InitOneToOneWeightsParams.hpp	/^   inline float getInitWeight() { return initWeight; }$/;"	f	class:PV::InitOneToOneWeightsParams
getInitWeight	src/weightinit/InitOneToOneWeightsWithDelaysParams.hpp	/^   inline float getInitWeight() { return initWeight; }$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
getInitWeight	src/weightinit/InitSpreadOverArborsWeightsParams.hpp	/^   inline float getInitWeight() { return initWeight; }$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
getInitWeight	src/weightinit/InitUniformWeightsParams.hpp	/^   inline float getInitWeight() { return initWeight; }$/;"	f	class:PV::InitUniformWeightsParams
getInitialSeed	src/columns/RandomSeed.hpp	/^   unsigned int getInitialSeed() { return mInitialSeed; }$/;"	f	class:PV::RandomSeed
getInitialStep	src/columns/HyPerCol.hpp	/^   long int getInitialStep() const { return mInitialStep; }$/;"	f	class:PV::HyPerCol
getInitialValuesSetFlag	src/columns/BaseObject.hpp	/^   bool getInitialValuesSetFlag() { return mInitialValuesSetFlag; }$/;"	f	class:PV::BaseObject
getInitializeFromCheckpointDir	src/checkpointing/Checkpointer.hpp	/^   char const *getInitializeFromCheckpointDir() const { return mInitializeFromCheckpointDir; }$/;"	f	class:PV::Checkpointer
getInitializeFromCheckpointDir	src/columns/HyPerCol.hpp	/^   const char *getInitializeFromCheckpointDir() const {$/;"	f	class:PV::HyPerCol
getInputPath	src/layers/InputLayer.hpp	/^   const std::string getInputPath() { return mInputPath; }$/;"	f	class:PV::InputLayer
getIntOptionalArgument	src/columns/Arguments.hpp	/^   Configuration::IntOptional const &getIntOptionalArgument(std::string const &name) const {$/;"	f	class:PV::Arguments::Configuration
getIntOptionalArgument	src/columns/PV_Init.hpp	/^   Configuration::IntOptional const &getIntOptionalArgument(std::string const &name) const {$/;"	f	class:PV::PV_Init::Configuration
getIntOptionalArgument	src/io/ConfigParser.hpp	/^   Configuration::IntOptional getIntOptionalArgument(std::string const &name) const {$/;"	f	class:PV::ConfigParser
getIntOptionalArgument	src/io/Configuration.cpp	/^Configuration::getIntOptionalArgument(std::string const &name) const {$/;"	f	class:PV::Configuration::Configuration
getIntegerArgument	src/columns/Arguments.hpp	/^   int const &getIntegerArgument(std::string const &name) const {$/;"	f	class:PV::Arguments
getIntegerArgument	src/columns/PV_Init.hpp	/^   int const &getIntegerArgument(std::string const &name) const {$/;"	f	class:PV::PV_Init
getIntegerArgument	src/io/ConfigParser.hpp	/^   int const &getIntegerArgument(std::string const &name) const {$/;"	f	class:PV::ConfigParser
getIntegerArgument	src/io/Configuration.cpp	/^int const &Configuration::getIntegerArgument(std::string const &name) const {$/;"	f	class:PV::Configuration
getIntegratedSpikeCount	src/layers/LCALIFLayer.hpp	/^   const float *getIntegratedSpikeCount() { return integratedSpikeCount; }$/;"	f	class:PV::LCALIFLayer
getInternalMapHeight	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getInternalMapHeight() const { return mInternalConfidenceHeight; }$/;"	f	class:BBFind
getInternalMapWidth	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getInternalMapWidth() const { return mInternalConfidenceWidth; }$/;"	f	class:BBFind
getInterpolatedConfs	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::getInterpolatedConfs(int framesSinceNewMap)$/;"	f	class:BBFind
getKeepKernelsSynchronized	src/connections/HyPerConn.hpp	/^   inline bool getKeepKernelsSynchronized() { return keepKernelsSynchronized_flag; }$/;"	f	class:PV::HyPerConn
getKernelIndex	src/probes/KernelProbe.hpp	/^   int getKernelIndex() { return kernelIndex; }$/;"	f	class:PV::KernelProbe
getKeyword	src/columns/BaseObject.cpp	/^char const *BaseObject::getKeyword() const {$/;"	f	class:PV::BaseObject
getKeyword	src/columns/KeywordHandler.hpp	/^   const char *getKeyword() const { return keyword; }$/;"	f	class:PV::KeywordHandler
getKeywordHandler	src/columns/Factory.cpp	/^KeywordHandler const *Factory::getKeywordHandler(char const *keyword) const {$/;"	f	class:PV::Factory
getKrRecvPost	src/connections/HyPerConn.hpp	/^   PVCuda::CudaRecvPost *getKrRecvPost() { return krRecvPost; }$/;"	f	class:PV::HyPerConn
getKrRecvPre	src/connections/HyPerConn.hpp	/^   PVCuda::CudaRecvPre *getKrRecvPre() { return krRecvPre; }$/;"	f	class:PV::HyPerConn
getL2PatchSize	src/layers/RescaleLayer.hpp	/^   float getL2PatchSize() { return patchSize; }$/;"	f	class:PV::RescaleLayer
getLIFParams	src/layers/LIF.hpp	/^   virtual LIF_params *getLIFParams() { return &lParams; };$/;"	f	class:PV::LIF
getLastCheckpointDir	src/checkpointing/Checkpointer.hpp	/^   char const *getLastCheckpointDir() const { return mLastCheckpointDir; }$/;"	f	class:PV::Checkpointer
getLastCheckpointDir	src/columns/HyPerCol.hpp	/^   char const *getLastCheckpointDir() const { return mCheckpointer->getLastCheckpointDir(); }$/;"	f	class:PV::HyPerCol
getLastTimeUpdateCalled	src/connections/HyPerConn.hpp	/^   double getLastTimeUpdateCalled() { return lastTimeUpdateCalled; }$/;"	f	class:PV::HyPerConn
getLastUpdateTime	src/columns/DataStore.hpp	/^   double getLastUpdateTime(int bufferId) const { return *mLastUpdateTimes->getBuffer(bufferId); }$/;"	f	class:PV::DataStore
getLastUpdateTime	src/columns/DataStore.hpp	/^   double getLastUpdateTime(int bufferId, int level) const {$/;"	f	class:PV::DataStore
getLastUpdateTime	src/connections/HyPerConn.hpp	/^   double getLastUpdateTime() { return lastUpdateTime; }$/;"	f	class:PV::HyPerConn
getLastUpdateTime	src/layers/HyPerLayer.hpp	/^   double getLastUpdateTime() { return mLastUpdateTime; }$/;"	f	class:PV::HyPerLayer
getLastUpdateTime	src/probes/BaseProbe.hpp	/^   double getLastUpdateTime() { return lastUpdateTime; }$/;"	f	class:PV::BaseProbe
getLayer	src/columns/HyPerCol.hpp	/^   HyPerLayer *getLayer(int which) { return mLayers.at(which); }$/;"	f	class:PV::HyPerCol
getLayerData	src/layers/HyPerLayer.cpp	/^const float *HyPerLayer::getLayerData(int delay) {$/;"	f	class:PV::HyPerLayer
getLayerData	tests/Shared/ColumnArchive.hpp	/^   LayerArchive const &getLayerData(int l) const { return m_layerdata.at(l); }$/;"	f	class:ColumnArchive
getLayerData	tests/Shared/ColumnArchive.hpp	/^   std::vector<LayerArchive> const &getLayerData() const { return m_layerdata; }$/;"	f	class:ColumnArchive::std
getLayerFromName	src/columns/HyPerCol.cpp	/^HyPerLayer *HyPerCol::getLayerFromName(const char *layerName) {$/;"	f	class:PV::HyPerCol
getLayerLoc	src/checkpointing/CheckpointEntryPvp.hpp	/^   PVLayerLoc const *getLayerLoc() const { return mLayerLoc; }$/;"	f	class:PV::CheckpointEntryPvp
getLayerLoc	src/layers/HyPerLayer.hpp	/^   const PVLayerLoc *getLayerLoc() { return &(clayer->loc); }$/;"	f	class:PV::HyPerLayer
getLocalMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock const *getLocalMPIBlock() const { return localMPIBlock; }$/;"	f	class:PV::Communicator
getMPIBlock	src/checkpointing/CheckpointEntry.hpp	/^   MPIBlock const *getMPIBlock() const { return mMPIBlock; }$/;"	f	class:PV::CheckpointEntry
getMPIBlock	src/checkpointing/Checkpointer.hpp	/^   MPIBlock const *getMPIBlock() { return mMPIBlock; }$/;"	f	class:PV::Checkpointer
getMPIBlock	src/utils/BorderExchange.hpp	/^   MPIBlock const *getMPIBlock() const { return mMPIBlock; }$/;"	f	class:PV::BorderExchange
getMaskLayer	src/probes/AbstractNormProbe.hpp	/^   HyPerLayer *getMaskLayer() { return maskLayer; }$/;"	f	class:PV::AbstractNormProbe
getMaskLayerName	src/probes/AbstractNormProbe.hpp	/^   char const *getMaskLayerName() { return maskLayerName; }$/;"	f	class:PV::AbstractNormProbe
getMaxRate	src/layers/HyPerLayer.hpp	/^   float getMaxRate() { return maxRate; }$/;"	f	class:PV::HyPerLayer
getMaxRectangleMemory	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getMaxRectangleMemory() const { return mMaxRectangleMemory; }$/;"	f	class:BBFind
getMaxThreads	src/columns/PV_Init.hpp	/^   int getMaxThreads() const { return maxThreads; }$/;"	f	class:PV::PV_Init
getMean	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^   inline float getMean() { return wGaussMean; }$/;"	f	class:PV::InitGaussianRandomWeightsParams
getMemory	src/arch/cuda/CudaDevice.hpp	/^   size_t getMemory() { return deviceMem; }$/;"	f	class:PVCuda::CudaDevice
getMessage	src/probes/BaseProbe.hpp	/^   const char *getMessage() { return msgstring; }$/;"	f	class:PV::BaseProbe
getMessageType	src/observerpattern/BaseMessage.hpp	/^   inline std::string const &getMessageType() const { return mMessageType; }$/;"	f	class:PV::BaseMessage::std
getMinBlobSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getMinBlobSize() const { return mMinBlobSize; }$/;"	f	class:BBFind
getMinNNZ	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   inline int getMinNNZ() { return mMinNNZ; }$/;"	f	class:PV::InitUniformRandomWeightsParams
getMomentumMethod	src/connections/MomentumConn.hpp	/^   inline char const *getMomentumMethod() { return momentumMethod; }$/;"	f	class:PV::MomentumConn
getNBatch	src/columns/HyPerCol.hpp	/^   int getNBatch() { return mNumBatch; }$/;"	f	class:PV::HyPerCol
getNBatchGlobal	src/columns/HyPerCol.hpp	/^   int getNBatchGlobal() { return mNumBatchGlobal; }$/;"	f	class:PV::HyPerCol
getName	src/checkpointing/CheckpointEntry.hpp	/^   std::string const &getName() const { return mName; }$/;"	f	class:PV::CheckpointEntry::std
getName	src/columns/BaseObject.hpp	/^   inline char const *getName() const { return name; }$/;"	f	class:PV::BaseObject
getName	src/columns/HyPerCol.hpp	/^   const char *getName() { return mName; }$/;"	f	class:PV::HyPerCol
getName	src/io/PVParams.hpp	/^   const char *getName() { return paramName; }$/;"	f	class:PV::ParameterString
getName	src/normalizers/NormalizeMultiply.hpp	/^   const char *getName() { return name; }$/;"	f	class:PV::NormalizeMultiply
getName	src/weightinit/InitWeightsParams.hpp	/^   inline const char *getName() { return name; }$/;"	f	class:PV::InitWeightsParams
getNextUpdateTime	src/layers/HyPerLayer.hpp	/^   double getNextUpdateTime() { return mLastUpdateTime + getDeltaUpdateTime(); }$/;"	f	class:PV::HyPerLayer
getNoPost	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline int getNoPost() { return numOrientationsPost; }$/;"	f	class:PV::InitGauss2DWeightsParams
getNoPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline int getNoPre() { return numOrientationsPre; }$/;"	f	class:PV::InitGauss2DWeightsParams
getNonzeroFound	src/probes/RequireAllZeroActivityProbe.hpp	/^   bool getNonzeroFound() { return nonzeroFound; }$/;"	f	class:PV::RequireAllZeroActivityProbe
getNonzeroTime	src/probes/RequireAllZeroActivityProbe.hpp	/^   double getNonzeroTime() { return nonzeroTime; }$/;"	f	class:PV::RequireAllZeroActivityProbe
getNormDescription	src/probes/AbstractNormProbe.hpp	/^   char const *getNormDescription() { return normDescription; }$/;"	f	class:PV::AbstractNormProbe
getNormalizeArborsIndividuallyFlag	src/normalizers/NormalizeBase.hpp	/^   bool getNormalizeArborsIndividuallyFlag() const { return normalizeArborsIndividually; }$/;"	f	class:PV::NormalizeBase
getNormalizeCutoff	src/normalizers/NormalizeMultiply.hpp	/^   float getNormalizeCutoff() { return normalize_cutoff; }$/;"	f	class:PV::NormalizeMultiply
getNormalizeDwFlag	src/connections/HyPerConn.hpp	/^   bool getNormalizeDwFlag() { return normalizeDwFlag; }$/;"	f	class:PV::HyPerConn
getNormalizeFromPostPerspectiveFlag	src/normalizers/NormalizeMultiply.hpp	/^   bool getNormalizeFromPostPerspectiveFlag() { return normalizeFromPostPerspective; }$/;"	f	class:PV::NormalizeMultiply
getNormalizer	src/columns/HyPerCol.hpp	/^   NormalizeBase *getNormalizer(int which) { return mNormalizers.at(which); }$/;"	f	class:PV::HyPerCol
getNormalizer	src/connections/HyPerConn.hpp	/^   NormalizeBase *getNormalizer() { return normalizer; }$/;"	f	class:PV::HyPerConn
getNormalizerFromName	src/columns/HyPerCol.cpp	/^NormalizeBase *HyPerCol::getNormalizerFromName(const char *normalizerName) {$/;"	f	class:PV::HyPerCol
getNumArbors	python/probe_analysis/readProbeFunc.py	/^def getNumArbors(tok,line):$/;"	f
getNumArgs	src/columns/PV_Init.hpp	/^   int getNumArgs() const { return mArgC; }$/;"	f	class:PV::PV_Init
getNumBuffers	src/columns/DataStore.hpp	/^   int getNumBuffers() const { return mNumBuffers; }$/;"	f	class:PV::DataStore
getNumChannels	src/layers/HyPerLayer.hpp	/^   int getNumChannels() { return numChannels; }$/;"	f	class:PV::HyPerLayer
getNumColumns	src/structures/MPIBlock.hpp	/^   int getNumColumns() const { return mNumColumns; }$/;"	f	class:PV::MPIBlock
getNumConns	tests/Shared/ColumnArchive.hpp	/^   std::vector<ConnArchive>::size_type getNumConns() const { return m_conndata.size(); }$/;"	f	class:ColumnArchive
getNumConvKernels	src/arch/cuda/CudaDevice.hpp	/^   size_t getNumConvKernels() { return numConvKernels; }$/;"	f	class:PVCuda::CudaDevice
getNumDataPatches	src/connections/HyPerConn.hpp	/^   int getNumDataPatches() { return numDataPatches; }$/;"	f	class:PV::HyPerConn
getNumDelayLevels	src/layers/HyPerLayer.hpp	/^   int getNumDelayLevels() { return numDelayLevels; }$/;"	f	class:PV::HyPerLayer
getNumDevices	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::getNumDevices() {$/;"	f	class:PVCuda::CudaDevice
getNumDisplayedCategories	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int getNumDisplayedCategories() { return numDisplayedCategories; }$/;"	f	class:BBFindConfRemapLayer
getNumDisplayedCategories	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   inline int getNumDisplayedCategories() const { return numDisplayedCategories; }$/;"	f	class:LocalizationProbe
getNumExtended	src/layers/HyPerLayer.hpp	/^   int getNumExtended() { return clayer->numExtended; }$/;"	f	class:PV::HyPerLayer
getNumExtendedAllBatches	src/layers/HyPerLayer.hpp	/^   int getNumExtendedAllBatches() { return clayer->numExtendedAllBatches; }$/;"	f	class:PV::HyPerLayer
getNumFlanks	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline int getNumFlanks() { return numFlanks; }$/;"	f	class:PV::InitGauss2DWeightsParams
getNumFrames	demos/HeatMapLocalization/src/main.cpp	/^   size_t getNumFrames() const { return mListOfFrames.size(); }$/;"	f	class:FrameServer
getNumFrames	src/checkpointing/CheckpointEntryDataStore.cpp	/^int CheckpointEntryDataStore::getNumFrames() const {$/;"	f	class:PV::CheckpointEntryDataStore
getNumGlobalExtended	src/layers/HyPerLayer.hpp	/^   int getNumGlobalExtended() {$/;"	f	class:PV::HyPerLayer
getNumGlobalNeurons	src/layers/HyPerLayer.hpp	/^   int getNumGlobalNeurons() {$/;"	f	class:PV::HyPerLayer
getNumGlobalPatches	src/io/fileio.cpp	/^int getNumGlobalPatches(PVLayerLoc const *loc, bool asPostWeights) {$/;"	f	namespace:PV
getNumImagesToAverage	src/layers/RunningAverageLayer.hpp	/^   int getNumImagesToAverage() { return numImagesToAverage; }$/;"	f	class:PV::RunningAverageLayer
getNumItems	src/columns/DataStore.hpp	/^   int getNumItems() const { return mNumItems; }$/;"	f	class:PV::DataStore
getNumItems	src/structures/RingBuffer.hpp	/^   int getNumItems() { return mNumItems; }$/;"	f	class:PV::RingBuffer
getNumLayers	tests/Shared/ColumnArchive.hpp	/^   std::vector<LayerArchive>::size_type getNumLayers() const { return m_layerdata.size(); }$/;"	f	class:ColumnArchive
getNumLevels	src/columns/DataStore.hpp	/^   int getNumLevels() const { return mNumLevels; }$/;"	f	class:PV::DataStore
getNumLevels	src/structures/RingBuffer.hpp	/^   int getNumLevels() { return mNumLevels; }$/;"	f	class:PV::RingBuffer
getNumNeighbors	src/utils/BorderExchange.hpp	/^   int getNumNeighbors() const { return mNumNeighbors; }$/;"	f	class:PV::BorderExchange
getNumNeurons	src/layers/HyPerLayer.hpp	/^   int getNumNeurons() { return clayer->numNeurons; }$/;"	f	class:PV::HyPerLayer
getNumNeuronsAllBatches	src/layers/HyPerLayer.hpp	/^   int getNumNeuronsAllBatches() { return clayer->numNeuronsAllBatches; }$/;"	f	class:PV::HyPerLayer
getNumProbes	src/connections/BaseConnection.hpp	/^   int getNumProbes() { return numProbes; }$/;"	f	class:PV::BaseConnection
getNumProbes	src/layers/HyPerLayer.hpp	/^   int getNumProbes() { return numProbes; }$/;"	f	class:PV::HyPerLayer
getNumRows	src/structures/MPIBlock.hpp	/^   int getNumRows() const { return mNumRows; }$/;"	f	class:PV::MPIBlock
getNumThreads	src/columns/HyPerCol.hpp	/^   int getNumThreads() const { return mNumThreads; }$/;"	f	class:PV::HyPerCol
getNumValues	src/io/PVParams.hpp	/^   int getNumValues() { return numValues; }$/;"	f	class:PV::ParameterSweep
getNumValues	src/probes/BaseProbe.hpp	/^   int getNumValues() { return numValues; }$/;"	f	class:PV::BaseProbe
getNumVertices	src/layers/ANNLayer.hpp	/^   int getNumVertices() const { return numVertices; }$/;"	f	class:PV::ANNLayer
getNumWeightFiles	src/weightinit/InitWeightsParams.hpp	/^   inline int getNumWeightFiles() { return numWeightFiles; }$/;"	f	class:PV::InitWeightsParams
getNumWeightPatches	src/connections/HyPerConn.hpp	/^   int getNumWeightPatches() { return numWeightPatches; }$/;"	f	class:PV::HyPerConn
getNumericValue	src/io/PVParams.cpp	/^int ParameterSweep::getNumericValue(int n, double *val) {$/;"	f	class:PV::ParameterSweep
getNxGlobal	src/columns/HyPerCol.hpp	/^   int getNxGlobal() { return mNumXGlobal; }$/;"	f	class:PV::HyPerCol
getNyGlobal	src/columns/HyPerCol.hpp	/^   int getNyGlobal() { return mNumYGlobal; }$/;"	f	class:PV::HyPerCol
getObject	src/observerpattern/ObserverTable.hpp	/^   Observer *getObject(char *name) const { return getObject(std::string(name)); };$/;"	f	class:PV::ObserverTable
getObject	src/observerpattern/ObserverTable.hpp	/^   Observer *getObject(std::string const &name) const {$/;"	f	class:PV::ObserverTable
getObjectMap	src/observerpattern/ObserverTable.hpp	/^   std::map<std::string, Observer *> const &getObjectMap() const { return mObjectMap; }$/;"	f	class:PV::ObserverTable::std
getObjectVector	src/observerpattern/ObserverTable.hpp	/^   std::vector<Observer *> const &getObjectVector() const { return mObjectVector; }$/;"	f	class:PV::ObserverTable::std
getOrigSizedConfMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getOrigSizedConfMap() { return scale(mCurrentConfMap, mOriginalConfidenceWidth, mOriginalConfidenceHeight, true); }$/;"	f	class:BBFind
getOrigSizedDistMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getOrigSizedDistMap() { return scale(mDistMap, mOriginalConfidenceWidth, mOriginalConfidenceHeight, true); }$/;"	f	class:BBFind
getOriginalConn	src/connections/CloneConn.hpp	/^   HyPerConn *getOriginalConn() { return originalConn; }$/;"	f	class:PV::CloneConn
getOriginalConn	src/connections/CopyConn.hpp	/^   HyPerConn *getOriginalConn() { return originalConn; }$/;"	f	class:PV::CopyConn
getOriginalConn	src/connections/TransposeConn.hpp	/^   inline HyPerConn *getOriginalConn() { return originalConn; }$/;"	f	class:PV::TransposeConn
getOriginalConn	src/connections/TransposePoolingConn.hpp	/^   inline PoolingConn *getOriginalConn() { return mOriginalConn; }$/;"	f	class:PV::TransposePoolingConn
getOriginalConn	src/connections/privateTransposeConn.hpp	/^   inline HyPerConn *getOriginalConn() { return postConn; }$/;"	f	class:PV::privateTransposeConn
getOriginalConnName	src/connections/CopyConn.hpp	/^   char const *getOriginalConnName() { return originalConnName; }$/;"	f	class:PV::CopyConn
getOriginalLayer	src/layers/CloneVLayer.hpp	/^   HyPerLayer *getOriginalLayer() { return originalLayer; }$/;"	f	class:PV::CloneVLayer
getOutPos	src/io/FileStream.cpp	/^long FileStream::getOutPos() { return mFStream.tellp(); }$/;"	f	class:PV::FileStream
getOutputFilenameBase	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getOutputFilenameBase() { return outputFilenameBase; }$/;"	f	class:LocalizationProbe
getOutputPatchIndices	src/probes/KernelProbe.hpp	/^   bool getOutputPatchIndices() { return outputPatchIndices; }$/;"	f	class:PV::KernelProbe
getOutputPath	src/columns/HyPerCol.hpp	/^   const char *getOutputPath() { return mOutputPath; }$/;"	f	class:PV::HyPerCol
getOutputPlasticIncr	src/probes/KernelProbe.hpp	/^   bool getOutputPlasticIncr() { return outputPlasticIncr; }$/;"	f	class:PV::KernelProbe
getOutputStream	src/probes/BaseProbe.hpp	/^   PrintStream *getOutputStream() { return outputStream; }$/;"	f	class:PV::BaseProbe
getOutputStream	src/utils/PVLog.cpp	/^std::ostream &getOutputStream() { return outputLogFileStream.getStream(); }$/;"	f	namespace:PV
getOutputWeights	src/probes/KernelProbe.hpp	/^   bool getOutputWeights() { return outputWeights; }$/;"	f	class:PV::KernelProbe
getPV_InitObj	src/columns/HyPerCol.hpp	/^   PV_Init *getPV_InitObj() const { return mPVInitObj; }$/;"	f	class:PV::HyPerCol
getPV_StreamFilepos	src/io/fileio.cpp	/^long int getPV_StreamFilepos(PV_Stream *pvstream) { return pvstream->filepos; }$/;"	f	namespace:PV
getParamName	src/io/PVParams.hpp	/^   const char *getParamName() { return paramName; }$/;"	f	class:PV::ParameterSweep
getParameterSweepSize	src/io/PVParams.hpp	/^   int getParameterSweepSize() { return parameterSweepSize; }$/;"	f	class:PV::PVParams
getParams	src/columns/PV_Init.hpp	/^   PVParams *getParams() { return params; }$/;"	f	class:PV::PV_Init
getParent	src/columns/BaseObject.hpp	/^   inline HyPerCol *getParent() const { return parent; }$/;"	f	class:PV::BaseObject
getParent	src/weightinit/InitWeightsParams.hpp	/^   inline HyPerCol *getParent() { return parent; }$/;"	f	class:PV::InitWeightsParams
getParentConn	src/weightinit/InitWeightsParams.hpp	/^   inline HyPerConn *getParentConn() { return parentConn; }$/;"	f	class:PV::InitWeightsParams
getParseStatus	src/io/PVParams.hpp	/^   bool getParseStatus() { return parseStatus; }$/;"	f	class:PV::PVParams
getPatchSize	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getPatchSize() {$/;"	f	class:PV::InitWeightsParams
getPatchToDataLUT	src/connections/HyPerConn.hpp	/^   virtual int *getPatchToDataLUT() { return patch2datalookuptable; }$/;"	f	class:PV::HyPerConn
getPercentActive	python/deprecated/max_pv_object.py	/^    def getPercentActive(self):$/;"	m	class:PV_Object
getPercentActive	python/pvtools/display.py	/^def getPercentActive(data):$/;"	f
getPhase	src/layers/HyPerLayer.hpp	/^   int getPhase() { return this->phase; }$/;"	f	class:PV::HyPerLayer
getPixelA	src/structures/Image.cpp	/^float Image::getPixelA(int x, int y) {$/;"	f	class:PV::Image
getPixelB	src/structures/Image.cpp	/^float Image::getPixelB(int x, int y) {$/;"	f	class:PV::Image
getPixelG	src/structures/Image.cpp	/^float Image::getPixelG(int x, int y) {$/;"	f	class:PV::Image
getPixelR	src/structures/Image.cpp	/^float Image::getPixelR(int x, int y) {$/;"	f	class:PV::Image
getPlasticIncr	src/connections/HyPerConn.hpp	/^   inline float *getPlasticIncr(int kPre, int arborId) {$/;"	f	class:PV::HyPerConn
getPlasticityDecrement	src/connections/HyPerConn.hpp	/^   virtual PVLayerCube *getPlasticityDecrement() { return NULL; }$/;"	f	class:PV::HyPerConn
getPlasticityFlag	src/connections/BaseConnection.hpp	/^   inline bool getPlasticityFlag() { return plasticityFlag; };$/;"	f	class:PV::BaseConnection
getPointer	src/arch/cuda/CudaBuffer.hpp	/^   virtual void *getPointer() { return d_ptr; }$/;"	f	class:PVCuda::CudaBuffer
getPoolingType	src/connections/PoolingConn.hpp	/^   inline AccumulateType getPoolingType() const { return poolingType; }$/;"	f	class:PV::PoolingConn
getPost	src/connections/BaseConnection.hpp	/^   inline HyPerLayer *getPost() { return post; }$/;"	f	class:PV::BaseConnection
getPost	src/weightinit/InitWeightsParams.hpp	/^   inline HyPerLayer *getPost() { return post; }$/;"	f	class:PV::InitWeightsParams
getPostExtStrides	src/connections/HyPerConn.hpp	/^   inline const PVPatchStrides *getPostExtStrides() { return &postExtStrides; }$/;"	f	class:PV::HyPerConn
getPostIndexLayer	src/connections/PoolingConn.hpp	/^   PoolingIndexLayer *getPostIndexLayer() { return postIndexLayer; }$/;"	f	class:PV::PoolingConn
getPostLayerName	src/connections/BaseConnection.hpp	/^   inline const char *getPostLayerName() { return postLayerName; }$/;"	f	class:PV::BaseConnection
getPostNonextStrides	src/connections/HyPerConn.hpp	/^   inline const PVPatchStrides *getPostNonextStrides() { return &postNonextStrides; }$/;"	f	class:PV::HyPerConn
getPostToPreActivity	src/connections/CloneConn.hpp	/^   virtual long *getPostToPreActivity() { return originalConn->getPostToPreActivity(); }$/;"	f	class:PV::CloneConn
getPostToPreActivity	src/connections/HyPerConn.hpp	/^   virtual long *getPostToPreActivity() { return postToPreActivity; }$/;"	f	class:PV::HyPerConn
getPre	src/connections/BaseConnection.hpp	/^   inline HyPerLayer *getPre() { return pre; }$/;"	f	class:PV::BaseConnection
getPre	src/weightinit/InitWeightsParams.hpp	/^   inline HyPerLayer *getPre() { return pre; }$/;"	f	class:PV::InitWeightsParams
getPreAndPostLayerNames	src/connections/BaseConnection.cpp	/^int BaseConnection::getPreAndPostLayerNames($/;"	f	class:PV::BaseConnection
getPreLayerName	src/connections/BaseConnection.hpp	/^   inline const char *getPreLayerName() { return preLayerName; }$/;"	f	class:PV::BaseConnection
getPrevInfluence	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getPrevInfluence() const { return mPrevInfluence; }$/;"	f	class:BBFind
getPrevLeakTau	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getPrevLeakTau() const { return mPrevLeakTau; }$/;"	f	class:BBFind
getPrintParamsFilename	src/columns/HyPerCol.hpp	/^   const char *getPrintParamsFilename() const { return mPrintParamsFilename; }$/;"	f	class:PV::HyPerCol
getPrintParamsStream	src/columns/HyPerCol.hpp	/^   PV_Stream *getPrintParamsStream() const { return mPrintParamsStream; }$/;"	f	class:PV::HyPerCol
getProbe	src/connections/BaseConnection.hpp	/^   BaseConnectionProbe *getProbe(int i) { return probes[i]; }$/;"	f	class:PV::BaseConnection
getProbe	src/layers/HyPerLayer.hpp	/^   LayerProbe *getProbe(int n) { return (n >= 0 && n < numProbes) ? probes[n] : NULL; }$/;"	f	class:PV::HyPerLayer
getProbeStatus	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	/^   int getProbeStatus() { return probeStatus; }$/;"	f	class:ResetStateOnTriggerTestProbe
getProgramName	src/columns/PV_Init.hpp	/^   char const *getProgramName() const { return mArgV[0]; }$/;"	f	class:PV::PV_Init
getPublisher	src/layers/HyPerLayer.hpp	/^   Publisher *getPublisher() { return publisher; }$/;"	f	class:PV::HyPerLayer
getPvpatchAccumulateType	src/connections/HyPerConn.hpp	/^   AccumulateType getPvpatchAccumulateType() { return pvpatchAccumulateType; }$/;"	f	class:PV::HyPerConn
getRMinX	src/normalizers/NormalizeMultiply.hpp	/^   float getRMinX() { return rMinX; }$/;"	f	class:PV::NormalizeMultiply
getRMinY	src/normalizers/NormalizeMultiply.hpp	/^   float getRMinY() { return rMinY; }$/;"	f	class:PV::NormalizeMultiply
getRNG	src/columns/Random.hpp	/^   taus_uint4 *getRNG(int index) { return &rngArray[index]; }$/;"	f	class:PV::Random
getRandState	src/connections/HyPerConn.cpp	/^taus_uint4 *HyPerConn::getRandState(int index) {$/;"	f	class:PV::HyPerConn
getRandomSeed	src/columns/HyPerCol.hpp	/^   unsigned int getRandomSeed() { return mRandomSeed; }$/;"	f	class:PV::HyPerCol
getRank	src/structures/MPIBlock.hpp	/^   int getRank() const { return mRank; }$/;"	f	class:PV::MPIBlock
getRank	src/utils/BorderExchange.hpp	/^   int getRank() const { return mMPIBlock->getRank(); }$/;"	f	class:PV::BorderExchange
getReceiveGpu	src/connections/BaseConnection.hpp	/^   inline bool getReceiveGpu() { return receiveGpu; }$/;"	f	class:PV::BaseConnection
getReconLayerName	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char const * getReconLayerName() { return reconLayerName; }$/;"	f	class:LocalizationProbe
getRecvGpu	src/layers/HyPerLayer.hpp	/^   bool getRecvGpu() { return recvGpu; }$/;"	f	class:PV::HyPerLayer
getRescaleMethod	src/layers/RescaleLayer.hpp	/^   char const *getRescaleMethod() { return rescaleMethod; }$/;"	f	class:PV::RescaleLayer
getReverseTag	src/columns/Communicator.hpp	/^   int getReverseTag(int neighbor) { return tags[reverseDirection(localRank, neighbor)]; }$/;"	f	class:PV::Communicator
getRotate	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getRotate() { return rotate; }$/;"	f	class:PV::InitGauss2DWeightsParams
getRowIndex	src/structures/MPIBlock.hpp	/^   int getRowIndex() const { return mRowIndex; }$/;"	f	class:PV::MPIBlock
getScaledConfMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getScaledConfMap() { return scale(mCurrentConfMap, mImageWidth, mImageHeight, true); }$/;"	f	class:BBFind
getScaledDistMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      const Map3 getScaledDistMap() { return scale(mDistMap, mImageWidth, mImageHeight, true); }$/;"	f	class:BBFind
getSelfFlag	src/connections/HyPerConn.hpp	/^   inline bool getSelfFlag() { return selfFlag; }$/;"	f	class:PV::HyPerConn
getShift	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getShift() { return shift; }$/;"	f	class:PV::InitGauss2DWeightsParams
getShrinkPatches_flag	src/connections/HyPerConn.hpp	/^   bool getShrinkPatches_flag() { return shrinkPatches_flag; }$/;"	f	class:PV::HyPerConn
getSigma	src/layers/BinningLayer.hpp	/^   float getSigma() { return binSigma; }$/;"	f	class:PV::BinningLayer
getSigma	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getSigma() { return sigma; }$/;"	f	class:PV::InitGauss2DWeightsParams
getSigma_cocirc	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getSigma_cocirc() { return sigma_cocirc; }$/;"	f	class:PV::InitCocircWeightsParams
getSigma_kurve	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getSigma_kurve() { return sigma_kurve; }$/;"	f	class:PV::InitCocircWeightsParams
getSigma_kurve_post2	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getSigma_kurve_post2() { return sigma_kurve_post2; }$/;"	f	class:PV::InitCocircWeightsParams
getSigma_kurve_pre	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getSigma_kurve_pre() { return sigma_kurve_pre; }$/;"	f	class:PV::InitCocircWeightsParams
getSigma_kurve_pre2	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getSigma_kurve_pre2() { return sigma_kurve_pre2; }$/;"	f	class:PV::InitCocircWeightsParams
getSize	src/arch/cuda/CudaBuffer.hpp	/^   size_t getSize() { return size; }$/;"	f	class:PVCuda::CudaBuffer
getSize	src/structures/MPIBlock.hpp	/^   int getSize() const { return mNumRows * mNumColumns * mBatchDimension; }$/;"	f	class:PV::MPIBlock
getSkipIndex	src/layers/InputLayer.hpp	/^   int getSkipIndex(int batchIndex) { return mSkipFrameIndex.at(batchIndex); }$/;"	f	class:PV::InputLayer
getSlidingAverageSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int getSlidingAverageSize() const { return mSlidingAverageSize; }$/;"	f	class:BBFind
getSlopeNegInf	src/layers/ANNLayer.hpp	/^   float getSlopeNegInf() const { return slopeNegInf; }$/;"	f	class:PV::ANNLayer
getSlopePosInf	src/layers/ANNLayer.hpp	/^   float getSlopePosInf() const { return slopePosInf; }$/;"	f	class:PV::ANNLayer
getSparseFlag	src/layers/HyPerLayer.hpp	/^   bool getSparseFlag() { return this->sparseLayer; }$/;"	f	class:PV::HyPerLayer
getSparseFraction	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   inline float getSparseFraction() { return mSparseFraction; }$/;"	f	class:PV::InitUniformRandomWeightsParams
getStDev	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^   inline float getStDev() { return wGaussStdev; }$/;"	f	class:PV::InitGaussianRandomWeightsParams
getStartBatch	src/structures/MPIBlock.hpp	/^   int getStartBatch() const { return mStartBatch; }$/;"	f	class:PV::MPIBlock
getStartColumn	src/structures/MPIBlock.hpp	/^   int getStartColumn() const { return mStartColumn; }$/;"	f	class:PV::MPIBlock
getStartIndex	src/layers/InputLayer.hpp	/^   int getStartIndex(int batchIndex) { return mStartFrameIndex.at(batchIndex); }$/;"	f	class:PV::InputLayer
getStartRow	src/structures/MPIBlock.hpp	/^   int getStartRow() const { return mStartRow; }$/;"	f	class:PV::MPIBlock
getStartTime	src/columns/HyPerCol.hpp	/^   double getStartTime() const { return mStartTime; }$/;"	f	class:PV::HyPerCol
getStopTime	src/columns/HyPerCol.hpp	/^   double getStopTime() const { return mStopTime; }$/;"	f	class:PV::HyPerCol
getStream	src/arch/cuda/CudaDevice.hpp	/^   cudaStream_t getStream() { return stream; }$/;"	f	class:PVCuda::CudaDevice
getStream	src/utils/PVLog.cpp	/^   std::basic_ostream<T> &getStream() { return *mStream; }$/;"	f	class:PV::LogFileStream
getStrength	src/normalizers/NormalizeBase.hpp	/^   float getStrength() const { return strength; }$/;"	f	class:PV::NormalizeBase
getStrength	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline double getStrength() { return strength; }$/;"	f	class:PV::InitGauss2DWeightsParams
getStringArgument	src/columns/Arguments.hpp	/^   std::string const &getStringArgument(std::string const &name) const {$/;"	f	class:PV::Arguments::std
getStringArgument	src/columns/PV_Init.hpp	/^   std::string const &getStringArgument(std::string const &name) const {$/;"	f	class:PV::PV_Init::std
getStringArgument	src/io/ConfigParser.hpp	/^   std::string getStringArgument(std::string const &name) const {$/;"	f	class:PV::ConfigParser
getStringArgument	src/io/Configuration.cpp	/^std::string const &Configuration::getStringArgument(std::string const &name) const {$/;"	f	class:PV::std::Configuration
getStringValue	src/io/PVParams.cpp	/^const char *ParameterSweep::getStringValue(int n) {$/;"	f	class:PV::ParameterSweep
getSuppressNonplasticCheckpoints	src/checkpointing/Checkpointer.hpp	/^   bool getSuppressNonplasticCheckpoints() const { return mSuppressNonplasticCheckpoints; }$/;"	f	class:PV::Checkpointer
getTag	src/columns/Communicator.hpp	/^   int getTag(int neighbor) { return tags[neighbor]; }$/;"	f	class:PV::Communicator
getTargetConn	src/normalizers/NormalizeBase.cpp	/^HyPerConn *NormalizeBase::getTargetConn() {$/;"	f	class:PV::NormalizeBase
getTargetConn	src/probes/BaseConnectionProbe.hpp	/^   BaseConnection *getTargetConn() { return targetConn; }$/;"	f	class:PV::BaseConnectionProbe
getTargetHyPerConn	src/probes/BaseHyPerConnProbe.hpp	/^   HyPerConn *getTargetHyPerConn() { return targetHyPerConn; }$/;"	f	class:PV::BaseHyPerConnProbe
getTargetLayer	src/probes/LayerProbe.hpp	/^   HyPerLayer *getTargetLayer() { return targetLayer; }$/;"	f	class:PV::LayerProbe
getTargetMax	src/layers/RescaleLayer.hpp	/^   float getTargetMax() { return targetMax; }$/;"	f	class:PV::RescaleLayer
getTargetMean	src/layers/RescaleLayer.hpp	/^   float getTargetMean() { return targetMean; }$/;"	f	class:PV::RescaleLayer
getTargetMin	src/layers/RescaleLayer.hpp	/^   float getTargetMin() { return targetMin; }$/;"	f	class:PV::RescaleLayer
getTargetName	src/probes/BaseProbe.hpp	/^   const char *getTargetName() { return targetName; }$/;"	f	class:PV::BaseProbe
getTargetRate	src/layers/LCALIFLayer.hpp	/^   inline float getTargetRate() { return targetRateHz; }$/;"	f	class:PV::LCALIFLayer
getTargetStd	src/layers/RescaleLayer.hpp	/^   float getTargetStd() { return targetStd; }$/;"	f	class:PV::RescaleLayer
getTargetVal	tests/SegmentTest/src/SegmentifyTest.cpp	/^float SegmentifyTest::getTargetVal(int yi, int xi, int fi) {$/;"	f	class:PV::SegmentifyTest
getTestFailed	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   bool getTestFailed() const { return mTestFailed; }$/;"	f	class:HyPerConnCheckpointerTestProbe
getTestFailed	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   bool getTestFailed() const { return mTestFailed; }$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
getTestFailed	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   bool getTestFailed() const { return mTestFailed; }$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
getTestFailed	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   bool getTestFailed() const { return mTestFailed; }$/;"	f	class:PoolingConnCheckpointerTestProbe
getTextOutputFlag	src/probes/BaseProbe.hpp	/^   inline bool getTextOutputFlag() const { return textOutputFlag; }$/;"	f	class:PV::BaseProbe
getThetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getThetaMax() { return thetaMax; }$/;"	f	class:PV::InitGauss2DWeightsParams
getThreshold	demos/HeatMapLocalization/src/BBFind.hpp	/^      float getThreshold() const { return mThreshold; }$/;"	f	class:BBFind
getTimeScale	src/layers/HyPerLayer.hpp	/^   virtual double getTimeScale(int batchIdx) { return -1.0; };$/;"	f	class:PV::HyPerLayer
getTotalElements	src/structures/Buffer.hpp	/^   int getTotalElements() const { return mHeight * mWidth * mFeatures; }$/;"	f	class:PV::Buffer
getType	src/columns/Arguments.hpp	/^   Configuration::ConfigurationType getType(std::string const &name) const {$/;"	f	class:PV::Arguments
getType	src/io/Configuration.cpp	/^Configuration::ConfigurationType Configuration::getType(std::string const &name) const {$/;"	f	class:PV::Configuration
getType	src/io/PVParams.hpp	/^   SweepType getType() { return type; }$/;"	f	class:PV::ParameterSweep
getUnsignedIntArgument	src/columns/Arguments.hpp	/^   unsigned int const &getUnsignedIntArgument(std::string const &name) const {$/;"	f	class:PV::Arguments
getUnsignedIntArgument	src/columns/PV_Init.hpp	/^   unsigned int const &getUnsignedIntArgument(std::string const &name) const {$/;"	f	class:PV::PV_Init
getUnsignedIntArgument	src/io/ConfigParser.hpp	/^   unsigned int const &getUnsignedIntArgument(std::string const &name) const {$/;"	f	class:PV::ConfigParser
getUnsignedIntArgument	src/io/Configuration.cpp	/^unsigned int const &Configuration::getUnsignedIntArgument(std::string const &name) const {$/;"	f	class:PV::Configuration
getUpdateGSynFromPostPerspective	src/connections/HyPerConn.hpp	/^   bool getUpdateGSynFromPostPerspective() { return updateGSynFromPostPerspective; }$/;"	f	class:PV::HyPerConn
getUpdateGpu	src/layers/HyPerLayer.hpp	/^   bool getUpdateGpu() { return updateGpu; }$/;"	f	class:PV::HyPerLayer
getUpdateNumber	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   int getUpdateNumber() const { return mUpdateNumber; }$/;"	f	class:CorrectState
getUpdateNumber	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   int getUpdateNumber() const { return mUpdateNumber; }$/;"	f	class:CorrectState
getUpdateNumber	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   int getUpdateNumber() const { return mUpdateNumber; }$/;"	f	class:CorrectState
getUpdateNumber	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   int getUpdateNumber() const { return mUpdateNumber; }$/;"	f	class:CorrectState
getUpdatedDeviceActivityFlag	src/layers/HyPerLayer.hpp	/^   bool getUpdatedDeviceActivityFlag() { return updatedDeviceActivity; }$/;"	f	class:PV::HyPerLayer
getUpdatedDeviceDatastoreFlag	src/layers/HyPerLayer.hpp	/^   bool getUpdatedDeviceDatastoreFlag() { return updatedDeviceDatastore; }$/;"	f	class:PV::HyPerLayer
getUpdatedDeviceGSynFlag	src/layers/HyPerLayer.hpp	/^   bool getUpdatedDeviceGSynFlag() { return updatedDeviceGSyn; }$/;"	f	class:PV::HyPerLayer
getUseListOfArborFiles	src/weightinit/InitWeightsParams.hpp	/^   inline bool getUseListOfArborFiles() { return useListOfArborFiles; }$/;"	f	class:PV::InitWeightsParams
getUsingFileList	src/layers/InputLayer.hpp	/^   bool getUsingFileList() { return mUsingFileList; }$/;"	f	class:PV::InputLayer
getV	src/layers/HyPerLayer.hpp	/^   float *getV() { return clayer->V; } \/\/ name query$/;"	f	class:PV::HyPerLayer
getV	src/probes/PointProbe.cpp	/^double PointProbe::getV() { return getValuesBuffer()[0]; }$/;"	f	class:PV::PointProbe
getVThresh	src/layers/ANNLayer.hpp	/^   float getVThresh() const { return VThresh; }$/;"	f	class:PV::ANNLayer
getVWidth	src/layers/ANNLayer.hpp	/^   float getVWidth() const { return VWidth; }$/;"	f	class:PV::ANNLayer
getVadpt	src/layers/LCALIFLayer.hpp	/^   const float *getVadpt() { return Vadpt; }$/;"	f	class:PV::LCALIFLayer
getValue	src/io/PVParams.hpp	/^   const char *getValue() {$/;"	f	class:PV::ParameterString
getValue	src/probes/BaseProbe.cpp	/^double BaseProbe::getValue(double timevalue, int index) {$/;"	f	class:PV::BaseProbe
getValueBC	src/layers/HyPerLayer.hpp	/^   float getValueBC() { return this->valueBC; }$/;"	f	class:PV::HyPerLayer
getValueInternal	src/probes/FirmThresholdCostFnProbe.cpp	/^double FirmThresholdCostFnProbe::getValueInternal(double timevalue, int index) {$/;"	f	class:PV::FirmThresholdCostFnProbe
getValueInternal	src/probes/L0NormProbe.cpp	/^double L0NormProbe::getValueInternal(double timevalue, int index) {$/;"	f	class:PV::L0NormProbe
getValueInternal	src/probes/L1NormProbe.cpp	/^double L1NormProbe::getValueInternal(double timevalue, int index) {$/;"	f	class:PV::L1NormProbe
getValueInternal	src/probes/L2NormProbe.cpp	/^double L2NormProbe::getValueInternal(double timevalue, int index) {$/;"	f	class:PV::L2NormProbe
getValues	src/io/PVParams.hpp	/^   const float *getValues(int *sz) {$/;"	f	class:PV::ParameterArray
getValues	src/probes/BaseProbe.cpp	/^int BaseProbe::getValues(double timevalue) {$/;"	f	class:PV::BaseProbe
getValues	src/probes/BaseProbe.cpp	/^int BaseProbe::getValues(double timevalue, double *values) {$/;"	f	class:PV::BaseProbe
getValues	src/probes/BaseProbe.cpp	/^int BaseProbe::getValues(double timevalue, std::vector<double> *valuesVector) {$/;"	f	class:PV::BaseProbe
getValuesBuffer	src/probes/BaseProbe.hpp	/^   double *getValuesBuffer() { return probeValues; }$/;"	f	class:PV::BaseProbe
getValuesDbl	src/io/PVParams.hpp	/^   const double *getValuesDbl(int *sz) {$/;"	f	class:PV::ParameterArray
getVattained	src/layers/LCALIFLayer.hpp	/^   const float *getVattained() { return Vattained; }$/;"	f	class:PV::LCALIFLayer
getVerifyWrites	src/columns/HyPerCol.hpp	/^   bool getVerifyWrites() { return mVerifyWrites; }$/;"	f	class:PV::HyPerCol
getVertexA	src/layers/ANNLayer.hpp	/^   float getVertexA(int n) const {$/;"	f	class:PV::ANNLayer
getVertexV	src/layers/ANNLayer.hpp	/^   float getVertexV(int n) const {$/;"	f	class:PV::ANNLayer
getVmeminf	src/layers/LCALIFLayer.hpp	/^   const float *getVmeminf() { return Vmeminf; }$/;"	f	class:PV::LCALIFLayer
getVth	src/layers/LIF.hpp	/^   float *getVth() { return Vth; }$/;"	f	class:PV::LIF
getWErrorStream	src/utils/PVLog.cpp	/^std::wostream &getWErrorStream() { return errorLogFileWStream.getStream(); }$/;"	f	namespace:PV
getWMax	src/connections/HyPerConn.hpp	/^   inline float getWMax() { return wMax; };$/;"	f	class:PV::HyPerConn
getWMax	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   inline float getWMax() { return mWMax; }$/;"	f	class:PV::InitUniformRandomWeightsParams
getWMax	src/weightinit/InitWeightsParams.cpp	/^float InitWeightsParams::getWMax() { return parentConn->getWMax(); }$/;"	f	class:PV::InitWeightsParams
getWMin	src/connections/HyPerConn.hpp	/^   inline float getWMin() { return wMin; };$/;"	f	class:PV::HyPerConn
getWMin	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   inline float getWMin() { return mWMin; }$/;"	f	class:PV::InitUniformRandomWeightsParams
getWMin	src/weightinit/InitWeightsParams.cpp	/^float InitWeightsParams::getWMin() { return parentConn->getWMin(); }$/;"	f	class:PV::InitWeightsParams
getWOutputStream	src/utils/PVLog.cpp	/^std::wostream &getWOutputStream() { return outputLogFileWStream.getStream(); }$/;"	f	namespace:PV
getWPostData	src/connections/HyPerConn.hpp	/^   inline float *getWPostData(int arbor) { return wPostDataStart[arbor]; }$/;"	f	class:PV::HyPerConn
getWPostData	src/connections/HyPerConn.hpp	/^   inline float *getWPostData(int arbor, int patchIndex) {$/;"	f	class:PV::HyPerConn
getWPostPatches	src/connections/HyPerConn.hpp	/^   inline PVPatch *getWPostPatches(int arbor, int patchIndex) {$/;"	f	class:PV::HyPerConn
getWeightInitializer	src/connections/HyPerConn.hpp	/^   inline InitWeights *getWeightInitializer() { return weightInitializer; }$/;"	f	class:PV::HyPerConn
getWeightUpdatePeriod	src/connections/HyPerConn.hpp	/^   double getWeightUpdatePeriod() { return weightUpdatePeriod; }$/;"	f	class:PV::HyPerConn
getWeightUpdateTime	src/connections/HyPerConn.hpp	/^   double getWeightUpdateTime() { return weightUpdateTime; }$/;"	f	class:PV::HyPerConn
getWeights	src/connections/HyPerConn.cpp	/^PVPatch *HyPerConn::getWeights(int k, int arbor) {$/;"	f	class:PV::HyPerConn
getWidth	src/structures/Buffer.hpp	/^   int getWidth() const { return mWidth; }$/;"	f	class:PV::Buffer
getWorldRank	src/columns/PV_Init.hpp	/^   int getWorldRank() const {$/;"	f	class:PV::PV_Init
getWorldSize	src/columns/PV_Init.hpp	/^   int getWorldSize() {$/;"	f	class:PV::PV_Init
getWrapToStartIndex	src/components/BatchIndexer.hpp	/^   bool getWrapToStartIndex() { return mWrapToStartIndex; }$/;"	f	class:PV::BatchIndexer
getWriteTimescales	src/columns/HyPerCol.hpp	/^   bool getWriteTimescales() const { return mWriteTimescales; }$/;"	f	class:PV::HyPerCol
getXMargins	src/checkpointing/CheckpointEntryPvp.hpp	/^   int getXMargins() const { return mXMargins; }$/;"	f	class:PV::CheckpointEntryPvp
getXScale	src/layers/HyPerLayer.hpp	/^   int getXScale() { return clayer->xScale; }$/;"	f	class:PV::HyPerLayer
getYMargins	src/checkpointing/CheckpointEntryPvp.hpp	/^   int getYMargins() const { return mYMargins; }$/;"	f	class:PV::CheckpointEntryPvp
getYScale	src/layers/HyPerLayer.hpp	/^   int getYScale() { return clayer->yScale; }$/;"	f	class:PV::HyPerLayer
get_activations	src/connections/HyPerConn.hpp	/^   inline long **get_activations() { return numKernelActivations; }$/;"	f	class:PV::HyPerConn
get_activations	src/connections/HyPerConn.hpp	/^   inline long *get_activations(int arborId) { return numKernelActivations[arborId]; }$/;"	f	class:PV::HyPerConn
get_activations	src/connections/HyPerConn.hpp	/^   inline long *get_activations(int arborId, int patchIndex) {$/;"	f	class:PV::HyPerConn
get_activationsHead	src/connections/HyPerConn.hpp	/^   inline long *get_activationsHead(int arborId, int dataIndex) {$/;"	f	class:PV::HyPerConn
get_cpu_time	src/utils/Timer.cpp	/^uint64_t get_cpu_time() {$/;"	f
get_dwData	src/connections/HyPerConn.hpp	/^   inline float *get_dwData(int arborId, int patchIndex) {$/;"	f	class:PV::HyPerConn
get_dwDataHead	src/connections/HyPerConn.hpp	/^   inline float *get_dwDataHead(int arborId, int dataIndex) {$/;"	f	class:PV::HyPerConn
get_dwDataStart	src/connections/HyPerConn.hpp	/^   inline float **get_dwDataStart() { return dwDataStart; }$/;"	f	class:PV::HyPerConn
get_dwDataStart	src/connections/HyPerConn.hpp	/^   inline float *get_dwDataStart(int arborId) { return dwDataStart[arborId]; }$/;"	f	class:PV::HyPerConn
get_frame_info	python/deprecated/pvAnalysis.py	/^def get_frame_info(hdr,fileStream):$/;"	f
get_local_mem	src/arch/cuda/CudaDevice.cpp	/^size_t CudaDevice::get_local_mem() { return device_props.sharedMemPerBlock; }$/;"	f	class:PVCuda::CudaDevice
get_max_block_size_dimension	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::get_max_block_size_dimension(int dimension) {$/;"	f	class:PVCuda::CudaDevice
get_max_grid_size_dimension	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::get_max_grid_size_dimension(int dimension) {$/;"	f	class:PVCuda::CudaDevice
get_max_threads	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::get_max_threads() { return device_props.maxThreadsPerBlock; }$/;"	f	class:PVCuda::CudaDevice
get_prev_dwDataHead	src/connections/MomentumConn.hpp	/^   inline float *get_prev_dwDataHead(int arborId, int dataIndex) {$/;"	f	class:PV::MomentumConn
get_prev_dwDataStart	src/connections/MomentumConn.hpp	/^   inline float const *get_prev_dwDataStart(int arborId) { return prev_dwDataStart[arborId]; }$/;"	f	class:PV::MomentumConn
get_pvp_data	python/deprecated/pvAnalysis.py	/^def get_pvp_data(fileStream,progressPeriod=0,lastFrame=-1,startFrame=0,skipFrames=1):$/;"	f
get_wData	src/connections/HyPerConn.hpp	/^   inline float *get_wData(int arborId, int patchIndex) {$/;"	f	class:PV::HyPerConn
get_wDataHead	src/connections/HyPerConn.hpp	/^   inline float *get_wDataHead(int arborId, int dataIndex) {$/;"	f	class:PV::HyPerConn
get_wDataStart	src/connections/HyPerConn.hpp	/^   inline float **get_wDataStart() { return wDataStart; }$/;"	f	class:PV::HyPerConn
get_wDataStart	src/connections/HyPerConn.hpp	/^   inline float *get_wDataStart(int arborId) { return wDataStart[arborId]; }$/;"	f	class:PV::HyPerConn
get_wPatches	src/connections/HyPerConn.hpp	/^   inline PVPatch ***get_wPatches() {$/;"	f	class:PV::HyPerConn
get_warp_size	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::get_warp_size() { return device_props.warpSize; }$/;"	f	class:PVCuda::CudaDevice
getcheckdimensionsandstrides	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::getcheckdimensionsandstrides() {}$/;"	f	class:PV::InitWeightsParams
getdxPost	src/weightinit/InitWeightsParams.hpp	/^   inline float getdxPost() { return dxPost; }$/;"	f	class:PV::InitWeightsParams
getdyPost	src/weightinit/InitWeightsParams.hpp	/^   inline float getdyPost() { return dyPost; }$/;"	f	class:PV::InitWeightsParams
getinvert	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   inline bool getinvert() { return invert; }$/;"	f	class:PV::InitGaborWeightsParams
getlambda	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   inline float getlambda() { return lambda; }$/;"	f	class:PV::InitGaborWeightsParams
getmin_weight	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getmin_weight() { return min_weight; }$/;"	f	class:PV::InitCocircWeightsParams
getnKurvePre	src/weightinit/InitCocircWeightsParams.hpp	/^   inline float getnKurvePre() { return nKurvePre; }$/;"	f	class:PV::InitCocircWeightsParams
getnfPatch	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getnfPatch() { return parentConn->fPatchSize(); }$/;"	f	class:PV::InitWeightsParams
getnxPatch	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getnxPatch() { return parentConn->xPatchSize(); }$/;"	f	class:PV::InitWeightsParams
getnyPatch	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getnyPatch() { return parentConn->yPatchSize(); }$/;"	f	class:PV::InitWeightsParams
getphi	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   inline float getphi() { return phi; }$/;"	f	class:PV::InitGaborWeightsParams
getr2Max	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline double getr2Max() { return r2Max; }$/;"	f	class:PV::InitGauss2DWeightsParams
getr2Min	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline double getr2Min() { return r2Min; }$/;"	f	class:PV::InitGauss2DWeightsParams
getsf	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getsf() { return parentConn->fPatchStride(); }$/;"	f	class:PV::InitWeightsParams
getsx	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getsx() { return parentConn->xPatchStride(); }$/;"	f	class:PV::InitWeightsParams
getsy	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::getsy() { return parentConn->yPatchStride(); }$/;"	f	class:PV::InitWeightsParams
getthPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline float getthPre() { return thPre; }$/;"	f	class:PV::InitGauss2DWeightsParams
getxDistHeadPreUnits	src/weightinit/InitWeightsParams.hpp	/^   inline float getxDistHeadPreUnits() { return xDistHeadPreUnits; }$/;"	f	class:PV::InitWeightsParams
getyDistHeadPreUnits	src/weightinit/InitWeightsParams.hpp	/^   inline float getyDistHeadPreUnits() { return yDistHeadPreUnits; }$/;"	f	class:PV::InitWeightsParams
giveMap	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::giveMap(Map3 newMap)$/;"	f	class:BBFind
globalCommRank	src/columns/Communicator.hpp	/^   int globalCommRank() { return globalRank; }$/;"	f	class:PV::Communicator
globalCommSize	src/columns/Communicator.hpp	/^   int globalCommSize() { return globalSize; }$/;"	f	class:PV::Communicator
globalCommunicator	src/columns/Communicator.hpp	/^   MPI_Comm globalCommunicator() const { return globalMPIBlock->getComm(); }$/;"	f	class:PV::Communicator
globalIndex	src/utils/conversions.h	/^static inline int globalIndex($/;"	f
globalIndexFromLocal	src/utils/conversions.h	/^static inline int globalIndexFromLocal(int kl, const PVLayerLoc loc) {$/;"	f
globalIndexFromLocal_nompi	tests/test_extend_border/src/test_extend_border.cpp	/^static inline int globalIndexFromLocal_nompi(int kl, PVLayerLoc loc) {$/;"	f	file:
globalIndexFromLocal_nompi	tests/test_kg/src/test_kg.cpp	/^static inline int globalIndexFromLocal_nompi(int kl, PVLayerLoc loc) {$/;"	f	file:
globalMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock *globalMPIBlock = nullptr;$/;"	m	class:PV::Communicator
globalRank	src/columns/Communicator.hpp	/^   int globalRank;$/;"	m	class:PV::Communicator
globalRank	src/columns/HyPerCol.hpp	/^   int globalRank() { return mCommunicator->globalCommRank(); }$/;"	f	class:PV::HyPerCol
globalSize	src/columns/Communicator.hpp	/^   int globalSize;$/;"	m	class:PV::Communicator
globalToLocalRank	src/utils/conversions.h	/^static inline int globalToLocalRank(int rank, int batchWidth, int numRows, int numColumns) {$/;"	f
gpuGroupIdx	src/connections/HyPerConn.hpp	/^   int gpuGroupIdx;$/;"	m	class:PV::HyPerConn
gpu_recvsyn_timer	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaTimer *gpu_recvsyn_timer;$/;"	m	class:PV::HyPerLayer
gpu_update_timer	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaTimer *gpu_update_timer;$/;"	m	class:PV::HyPerLayer
grayScaleImage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   float * grayScaleImage = NULL;$/;"	m	class:BBFindConfRemapProbe
grayScaleImage	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   float * grayScaleImage;$/;"	m	class:LocalizationProbe
grid_size	src/arch/cuda/CudaKernel.hpp	/^   dim3 grid_size;$/;"	m	class:PVCuda::CudaKernel
group	src/io/PVParams.cpp	/^ParameterGroup *PVParams::group(const char *groupName) {$/;"	f	class:PV::PVParams
groupArraySize	src/io/PVParams.hpp	/^   size_t groupArraySize;$/;"	m	class:PV::PVParams
groupHead	src/normalizers/NormalizeGroup.hpp	/^   NormalizeBase *groupHead = nullptr;$/;"	m	class:PV::NormalizeGroup
groupKeyword	src/io/PVParams.hpp	/^   char *groupKeyword;$/;"	m	class:PV::ParameterGroup
groupKeywordFromIndex	src/io/PVParams.cpp	/^const char *PVParams::groupKeywordFromIndex(int index) {$/;"	f	class:PV::PVParams
groupKeywordFromName	src/io/PVParams.cpp	/^const char *PVParams::groupKeywordFromName(const char *name) {$/;"	f	class:PV::PVParams
groupName	src/io/PVParams.hpp	/^   char *groupName;$/;"	m	class:PV::ParameterGroup
groupName	src/io/PVParams.hpp	/^   char *groupName;$/;"	m	class:PV::ParameterSweep
groupNameFromIndex	src/io/PVParams.cpp	/^const char *PVParams::groupNameFromIndex(int index) {$/;"	f	class:PV::PVParams
groups	src/io/PVParams.hpp	/^   ParameterGroup **groups;$/;"	m	class:PV::PVParams
growpvpfile	mlab/util/growpvpfile.m	/^function growpvpfile(filename, offsetX, offsetY, nX, nY, progressPeriod)$/;"	f
h	src/io/stb_image.h	/^      int h, v;$/;"	m	struct:__anon9::__anon10
h	src/io/stb_image.h	/^   int w, h;$/;"	m	struct:__anon20
h2	src/io/stb_image.h	/^      int x, y, w2, h2;$/;"	m	struct:__anon9::__anon10
ha	src/io/stb_image.h	/^      int hd, ha;$/;"	m	struct:__anon9::__anon10
halo	src/include/PVLayerLoc.h	/^   PVHalo halo; \/\/ padding for memory (must include nb)$/;"	m	struct:PVLayerLoc_
handle	src/arch/cuda/CudaDevice.hpp	/^   void *handle;$/;"	m	class:PVCuda::CudaDevice
handleCallError	src/arch/cuda/cuda_util.hpp	/^inline void handleCallError(const char *message) { handleError(cudaGetLastError(), message); }$/;"	f	namespace:PVCuda
handleDefaultSelfFlag	src/connections/HyPerConn.cpp	/^void HyPerConn::handleDefaultSelfFlag() {$/;"	f	class:PV::HyPerConn
handleDefaultSelfFlag	src/connections/IdentConn.cpp	/^void IdentConn::handleDefaultSelfFlag() { assert(selfFlag == false); }$/;"	f	class:PV::IdentConn
handleError	src/arch/cuda/cuda_util.hpp	/^inline void handleError(cudaError_t error, const char *message) {$/;"	f	namespace:PVCuda
handleMissingPreAndPostLayerNames	src/connections/BaseConnection.cpp	/^int BaseConnection::handleMissingPreAndPostLayerNames() {$/;"	f	class:PV::BaseConnection
handleMissingPreAndPostLayerNames	src/connections/FeedbackConn.cpp	/^int FeedbackConn::handleMissingPreAndPostLayerNames() {$/;"	f	class:PV::FeedbackConn
handleUnnecessaryParameter	src/io/PVParams.cpp	/^void PVParams::handleUnnecessaryParameter(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
handleUnnecessaryParameter	src/io/PVParams.hpp	/^void PVParams::handleUnnecessaryParameter($/;"	f	class:PV::PVParams
handleUnnecessaryStringParameter	src/io/PVParams.cpp	/^void PVParams::handleUnnecessaryStringParameter($/;"	f	class:PV::PVParams
handleUnnecessaryStringParameter	src/io/PVParams.cpp	/^void PVParams::handleUnnecessaryStringParameter(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
handleUnrecognized	src/io/ConfigParser.cpp	/^void ConfigParser::handleUnrecognized($/;"	f	class:PV::ConfigParser
hasBeenRead	src/io/PVParams.cpp	/^bool PVParams::hasBeenRead(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
hasBeenRead	src/io/PVParams.cpp	/^bool ParameterGroup::hasBeenRead(const char *paramName) {$/;"	f	class:PV::ParameterGroup
hasBeenRead	src/io/PVParams.hpp	/^   bool hasBeenRead() { return hasBeenReadFlag; }$/;"	f	class:PV::Parameter
hasBeenRead	src/io/PVParams.hpp	/^   bool hasBeenRead() { return hasBeenReadFlag; }$/;"	f	class:PV::ParameterArray
hasBeenRead	src/io/PVParams.hpp	/^   bool hasBeenRead() { return hasBeenReadFlag; }$/;"	f	class:PV::ParameterString
hasBeenReadFlag	src/io/PVParams.hpp	/^   bool hasBeenReadFlag;$/;"	m	class:PV::Parameter
hasBeenReadFlag	src/io/PVParams.hpp	/^   bool hasBeenReadFlag;$/;"	m	class:PV::ParameterArray
hasBeenReadFlag	src/io/PVParams.hpp	/^   bool hasBeenReadFlag;$/;"	m	class:PV::ParameterString
hasEasternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasEasternNeighbor(int row, int column) { return column < numCommColumns() - 1; }$/;"	f	class:PV::Communicator
hasEasternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasEasternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasHeldValue	src/columns/GaussianRandom.hpp	/^   bool hasHeldValue;$/;"	m	struct:box_muller_data
hasNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasNeighbor(int neighbor) {$/;"	f	class:PV::Communicator
hasNewImageFlag	src/layers/ImageFromMemoryBuffer.hpp	/^   bool hasNewImageFlag; \/\/ set to true by setMemoryBuffer; cleared to false by$/;"	m	class:PV::ImageFromMemoryBuffer
hasNortheasternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasNortheasternNeighbor(int row, int column) {$/;"	f	class:PV::Communicator
hasNortheasternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasNortheasternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasNorthernNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasNorthernNeighbor(int row, int column) { return row > 0; }$/;"	f	class:PV::Communicator
hasNorthernNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasNorthernNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasNorthwesternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasNorthwesternNeighbor(int row, int column) {$/;"	f	class:PV::Communicator
hasNorthwesternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasNorthwesternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasSoutheasternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasSoutheasternNeighbor(int row, int column) {$/;"	f	class:PV::Communicator
hasSoutheasternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasSoutheasternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasSouthernNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasSouthernNeighbor(int row, int column) { return row < numCommRows() - 1; }$/;"	f	class:PV::Communicator
hasSouthernNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasSouthernNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasSouthwesternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasSouthwesternNeighbor(int row, int column) {$/;"	f	class:PV::Communicator
hasSouthwesternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasSouthwesternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hasSweepValue	src/io/PVParams.cpp	/^bool PVParams::hasSweepValue(const char *inParamName) {$/;"	f	class:PV::PVParams
hasWesternNeighbor	src/columns/Communicator.cpp	/^bool Communicator::hasWesternNeighbor(int row, int column) { return column > 0; }$/;"	f	class:PV::Communicator
hasWesternNeighbor	src/utils/BorderExchange.cpp	/^bool BorderExchange::hasWesternNeighbor(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
hd	src/io/stb_image.h	/^      int hd, ha;$/;"	m	struct:__anon9::__anon10
header	python/deprecated/readPvpFile.py	/^   header = readHeaderFile(f)$/;"	v
header	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   header = readHeaderFile(f)$/;"	v
header	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^   header = readHeaderFile(pvpFile)$/;"	v
headerPattern	python/deprecated/max_readpvpheader.py	/^headerPattern = [('headersize', np.int32),$/;"	v
headerPattern	python/pvtools/readpvpheader.py	/^headerPattern = [('headersize', np.int32),$/;"	v
headerSize	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
heatMapMaximum	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   float * heatMapMaximum = NULL;$/;"	m	class:BBFindConfRemapProbe
heatMapMaximum	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   float * heatMapMaximum;$/;"	m	class:LocalizationProbe
heatMapMontageDir	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * heatMapMontageDir = NULL;$/;"	m	class:BBFindConfRemapProbe
heatMapMontageDir	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * heatMapMontageDir;$/;"	m	class:LocalizationProbe
heatMapThreshold	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   float * heatMapThreshold = NULL;$/;"	m	class:BBFindConfRemapProbe
height	demos/HeatMapLocalization/src/BBFind.hpp	/^            int x,  y, width, height;$/;"	m	class:BBFind::Rectangle
heldValue	src/columns/GaussianRandom.hpp	/^   float heldValue;$/;"	m	struct:box_muller_data
heldValues	src/columns/GaussianRandom.hpp	/^   std::vector<box_muller_data> heldValues;$/;"	m	class:PV::GaussianRandom
howManyPixelsAmILookingAt	mlab/util/howManyPixelsAmILookingAt.m	/^function numPixels = howManyPixelsAmILookingAt(nxp,stride)$/;"	f
hs	src/io/stb_image.h	/^   int hs, vs; \/\/ expansion factor in each axis$/;"	m	struct:__anon11
hsz	src/io/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
huff_ac	src/io/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon9
huff_dc	src/io/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon9
hyper	python/analysis_parse.py	/^hyper = []$/;"	v
iPosKurvePost	src/weightinit/InitCocircWeightsParams.hpp	/^   bool iPosKurvePost;$/;"	m	class:PV::InitCocircWeightsParams
iPosKurvePre	src/weightinit/InitCocircWeightsParams.hpp	/^   bool iPosKurvePre;$/;"	m	class:PV::InitCocircWeightsParams
iSaddlePost	src/weightinit/InitCocircWeightsParams.hpp	/^   bool iSaddlePost;$/;"	m	class:PV::InitCocircWeightsParams
iSaddlePre	src/weightinit/InitCocircWeightsParams.hpp	/^   bool iSaddlePre;$/;"	m	class:PV::InitCocircWeightsParams
icComm	src/io/PVParams.hpp	/^   Communicator *icComm;$/;"	m	class:PV::PVParams
id	src/arch/cuda/CudaDevice.hpp	/^   int id() { return device_id; }$/;"	f	class:PVCuda::CudaDevice
id	src/io/stb_image.h	/^      int id;$/;"	m	struct:__anon9::__anon10
idata	src/io/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
idct_block_kernel	src/io/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon9
identicalBatchProbe	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^identicalBatchProbe::identicalBatchProbe(const char *probeName, HyPerCol *hc) : StatsProbe() {$/;"	f	class:PV::identicalBatchProbe
identicalBatchProbe	tests/GPUSystemTest/src/identicalBatchProbe.hpp	/^class identicalBatchProbe : public PV::StatsProbe {$/;"	c	namespace:PV
imageBlendCoeff	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   float imageBlendCoeff; \/\/ heatmap image will be imageBlendCoeff * imagedata plus (1-imageBlendCoeff) * heatmap data$/;"	m	class:BBFindConfRemapProbe
imageBlendCoeff	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   float imageBlendCoeff; \/\/ heatmap image will be imageBlendCoeff * imagedata plus (1-imageBlendCoeff) * heatmap data$/;"	m	class:LocalizationProbe
imageDilationX	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   double imageDilationX = 1.0;$/;"	m	class:BBFindConfRemapProbe
imageDilationX	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double imageDilationX; \/\/ The factor to multiply by to convert from targetLayer coordinates to imageLayer coordinates$/;"	m	class:LocalizationProbe
imageDilationY	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   double imageDilationY = 1.0;$/;"	m	class:BBFindConfRemapProbe
imageDilationY	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double imageDilationY; \/\/ The factor to multiply by to convert from targetLayer coordinates to imageLayer coordinates$/;"	m	class:LocalizationProbe
imageHeight	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int imageHeight;$/;"	m	class:BBFindConfRemapLayer
imageLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   HyPerLayer * imageLayer = NULL;$/;"	m	class:BBFindConfRemapLayer
imageLayer	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   PV::HyPerLayer * imageLayer = NULL;$/;"	m	class:BBFindConfRemapProbe
imageLayer	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   PV::HyPerLayer * imageLayer;$/;"	m	class:LocalizationProbe
imageLayer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   PV::BaseInput * imageLayer;$/;"	m	class:MaskFromMemoryBuffer
imageLayerName	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   char * imageLayerName = NULL;$/;"	m	class:BBFindConfRemapLayer
imageLayerName	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * imageLayerName = NULL;$/;"	m	class:BBFindConfRemapProbe
imageLayerName	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * imageLayerName;$/;"	m	class:LocalizationProbe
imageLayerName	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.hpp	/^   char* imageLayerName;$/;"	m	class:MaskFromMemoryBuffer
imagePVPFilePath	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   std::stringstream imagePVPFilePath;$/;"	m	class:LocalizationProbe
imageWidth	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int imageWidth;$/;"	m	class:BBFindConfRemapLayer
imagelisttopvp	mlab/util/imagelisttopvp.m	/^function pvpdata = imagelisttopvp(infile, outfile)$/;"	f
imagetopvp	mlab/util/imagetopvp.m	/^function pvpdata = imagetopvp(infile, outfile)$/;"	f
img	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^            img = matToImage(mat)$/;"	v
img	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^            img = scaleMat(mat)$/;"	v
img	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^         img = matToImage(mat)$/;"	v
img	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^         img = scaleMat(mat)$/;"	v
img_buffer	src/io/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6
img_buffer_end	src/io/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6
img_buffer_original	src/io/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon6
img_buffer_original_end	src/io/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon6
img_comp	src/io/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon9	typeref:struct:__anon9::__anon10
img_h_max	src/io/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
img_mcu_h	src/io/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
img_mcu_w	src/io/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9
img_mcu_x	src/io/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
img_mcu_y	src/io/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9
img_n	src/io/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon6
img_out_n	src/io/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon6
img_v_max	src/io/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9
img_x	src/io/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon6
img_y	src/io/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon6
immediateExitOnFailure	src/probes/RequireAllZeroActivityProbe.hpp	/^   bool immediateExitOnFailure = true;$/;"	m	class:PV::RequireAllZeroActivityProbe
imprintChance	src/connections/ImprintConn.hpp	/^   float imprintChance;$/;"	m	class:PV::ImprintConn
imprintFeature	src/connections/ImprintConn.cpp	/^int ImprintConn::imprintFeature(int arbor_ID, int batch_ID, int kExt) {$/;"	f	class:PV::ImprintConn
imprintTimeThresh	src/connections/ImprintConn.hpp	/^   double imprintTimeThresh;$/;"	m	class:PV::ImprintConn
imprinted	src/connections/ImprintConn.hpp	/^   bool *imprinted;$/;"	m	class:PV::ImprintConn
include_directive	src/io/parser/params.y	/^include_directive : T_INCLUDE T_STRING ';'$/;"	l
increaseContrast	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::increaseContrast(const Map3 fullMap, float contrast, float strength)$/;"	f	class:BBFind
increaseDelayLevels	src/layers/HyPerLayer.cpp	/^int HyPerLayer::increaseDelayLevels(int neededDelay) {$/;"	f	class:PV::HyPerLayer
increaseKernelPatchSize	mlab/util/increaseKernelPatchSize.m	/^function increaseKernelPatchSize(pvpFile, newNFP, wMinInit, wMaxInit, sparseFraction, outFile)$/;"	f
increaseNumFeatInFile	mlab/util/increaseNumFeatInFile.m	/^function increaseNumFeatInFile(pvpFile, newNF, wMinInit, wMaxInit, sparseFraction, outFile)$/;"	f
increaseTimeLevel	src/columns/Publisher.cpp	/^void Publisher::increaseTimeLevel() {$/;"	f	class:PV::Publisher
incrementConvKernels	src/arch/cuda/CudaDevice.cpp	/^void CudaDevice::incrementConvKernels() { numConvKernels++; }$/;"	f	class:PVCuda::CudaDevice
incrementNBands	src/layers/HyPerLayer.cpp	/^int HyPerLayer::incrementNBands(int *numCalls) {$/;"	f	class:PV::HyPerLayer
index	src/io/fileio.hpp	/^   uint32_t index;$/;"	m	struct:PV::indexvaluepair_
index	src/structures/Buffer.hpp	/^   inline int index(int x, int y, int f) const { return f + (x + y * mWidth) * mFeatures; }$/;"	f	class:PV::Buffer
index	src/structures/SparseList.hpp	/^      uint32_t index;$/;"	m	struct:PV::SparseList::__anon1
indexvaluepair	src/io/fileio.hpp	/^} indexvaluepair;$/;"	t	namespace:PV	typeref:struct:PV::indexvaluepair_
indexvaluepair_	src/io/fileio.hpp	/^typedef struct indexvaluepair_ {$/;"	s	namespace:PV
inferPreAndPostFromConnName	src/connections/BaseConnection.cpp	/^int BaseConnection::inferPreAndPostFromConnName($/;"	f	class:PV::BaseConnection
infer_post_from_name	python/param_draw.py	/^    def infer_post_from_name(self,conn_name):$/;"	m	class:Param_Parser
infer_pre_from_name	python/param_draw.py	/^    def infer_pre_from_name(self,conn_name):$/;"	m	class:Param_Parser
inhibNoiseB	src/layers/LCALIFLayer.hpp	/^   float *inhibNoiseB;$/;"	m	class:PV::LCALIFLayer
inhibitoryNoise	src/layers/LCALIFLayer.hpp	/^   float *inhibitoryNoise;$/;"	m	class:PV::LCALIFLayer
initAbstractNormProbe	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::initAbstractNormProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::AbstractNormProbe
initAbstractNormProbe_base	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::initAbstractNormProbe_base() {$/;"	f	class:PV::AbstractNormProbe
initAllConstantValueProbe	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^int AllConstantValueProbe::initAllConstantValueProbe(char const *probeName, HyPerCol *hc) {$/;"	f	class:PV::AllConstantValueProbe
initArborTestForOnesProbe	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^int ArborTestForOnesProbe::initArborTestForOnesProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ArborTestForOnesProbe
initArborTestForOnesProbe_base	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^int ArborTestForOnesProbe::initArborTestForOnesProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::ArborTestForOnesProbe
initArborTestProbe	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^int ArborTestProbe::initArborTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ArborTestProbe
initArborTestProbe_base	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^int ArborTestProbe::initArborTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::ArborTestProbe
initAssertZerosProbe	tests/SegmentTest/src/AssertZerosProbe.cpp	/^int AssertZerosProbe::initAssertZerosProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::AssertZerosProbe
initAssertZerosProbe_base	tests/SegmentTest/src/AssertZerosProbe.cpp	/^int AssertZerosProbe::initAssertZerosProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::AssertZerosProbe
initBatchSweepTestProbe	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^int BatchSweepTestProbe::initBatchSweepTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BatchSweepTestProbe
initBlockDimensions	src/structures/MPIBlock.cpp	/^void MPIBlock::initBlockDimensions(int blockNumRows, int blockNumColumns, int blockBatchDimension) {$/;"	f	class:PV::MPIBlock
initBlockDirectoryName	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::initBlockDirectoryName() {$/;"	f	class:PV::Checkpointer
initBlockLocation	src/structures/MPIBlock.cpp	/^void MPIBlock::initBlockLocation(MPI_Comm comm) {$/;"	f	class:PV::MPIBlock
initClayer	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initClayer() {$/;"	f	class:PV::HyPerLayer
initCloneHyPerConnTestProbe	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.cpp	/^int CloneHyPerConnTestProbe::initCloneHyPerConnTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::CloneHyPerConnTestProbe
initCloneHyPerConnTestProbe_base	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.cpp	/^int CloneHyPerConnTestProbe::initCloneHyPerConnTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::CloneHyPerConnTestProbe
initCloneKernelConnTestProbe	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.cpp	/^int CloneKernelConnTestProbe::initCloneKernelConnTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::CloneKernelConnTestProbe
initCloneKernelConnTestProbe_base	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.cpp	/^int CloneKernelConnTestProbe::initCloneKernelConnTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::CloneKernelConnTestProbe
initConnection	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::initConnection() {$/;"	f	class:HyPerConnCheckpointerTestProbe
initConnection	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::initConnection() {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initConnection	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::initConnection() {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initConnection	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::initConnection() {$/;"	f	class:PoolingConnCheckpointerTestProbe
initDatastoreDelayTestProbe	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^int DatastoreDelayTestProbe::initDatastoreDelayTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::DatastoreDelayTestProbe
initDelayTestProbe	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^int DelayTestProbe::initDelayTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::DelayTestProbe
initDelayTestProbe_base	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^int DelayTestProbe::initDelayTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::DelayTestProbe
initFinish	tests/Shared/Example.cpp	/^int Example::initFinish(int colId, int colRow, int colCol) {$/;"	f	class:PV::Example
initFirmThresholdCostFnLCAProbe	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^   int initFirmThresholdCostFnLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
initFirmThresholdCostFnProbe	src/probes/FirmThresholdCostFnProbe.cpp	/^int FirmThresholdCostFnProbe::initFirmThresholdCostFnProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::FirmThresholdCostFnProbe
initFirmThresholdCostFnProbe_base	src/probes/FirmThresholdCostFnProbe.cpp	/^int FirmThresholdCostFnProbe::initFirmThresholdCostFnProbe_base() {$/;"	f	class:PV::FirmThresholdCostFnProbe
initGPUSystemTestProbe	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^int GPUSystemTestProbe::initGPUSystemTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::GPUSystemTestProbe
initGPUSystemTestProbe_base	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^int GPUSystemTestProbe::initGPUSystemTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::GPUSystemTestProbe
initGlobalDimensions	src/structures/MPIBlock.cpp	/^void MPIBlock::initGlobalDimensions($/;"	f	class:PV::MPIBlock
initInfoCommunicatedFlag	src/connections/BaseConnection.hpp	/^   bool initInfoCommunicatedFlag;$/;"	m	class:PV::BaseConnection
initInitWeightTestProbe	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^int InitWeightTestProbe::initInitWeightTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::InitWeightTestProbe
initInitWeightTestProbe_base	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^int InitWeightTestProbe::initInitWeightTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitWeightTestProbe
initInputLayer	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::initInputLayer() {$/;"	f	class:HyPerConnCheckpointerTestProbe
initInputLayer	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::initInputLayer() {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initInputLayer	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::initInputLayer() {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initInputLayer	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::initInputLayer() {$/;"	f	class:PoolingConnCheckpointerTestProbe
initKernelTestProbe	tests/KernelTest/src/KernelTestProbe.cpp	/^int KernelTestProbe::initKernelTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::KernelTestProbe
initKernelTestProbe_base	tests/KernelTest/src/KernelTestProbe.cpp	/^int KernelTestProbe::initKernelTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::KernelTestProbe
initL0NormLCAProbe	src/probes/L0NormLCAProbe.hpp	/^   int initL0NormLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L0NormLCAProbe
initL0NormProbe	src/probes/L0NormProbe.cpp	/^int L0NormProbe::initL0NormProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L0NormProbe
initL0NormProbe_base	src/probes/L0NormProbe.hpp	/^   int initL0NormProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::L0NormProbe
initL1NormLCAProbe	src/probes/L1NormLCAProbe.hpp	/^   int initL1NormLCAProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L1NormLCAProbe
initL1NormProbe	src/probes/L1NormProbe.cpp	/^int L1NormProbe::initL1NormProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L1NormProbe
initL1NormProbe_base	src/probes/L1NormProbe.hpp	/^   int initL1NormProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::L1NormProbe
initL2NormProbe	src/probes/L2NormProbe.cpp	/^int L2NormProbe::initL2NormProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::L2NormProbe
initL2NormProbe_base	src/probes/L2NormProbe.cpp	/^int L2NormProbe::initL2NormProbe_base() {$/;"	f	class:PV::L2NormProbe
initLIFTestProbe	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::initLIFTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::LIFTestProbe
initLayerPhaseTestProbe	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^int LayerPhaseTestProbe::initLayerPhaseTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::LayerPhaseTestProbe
initLayerPhaseTestProbe_base	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^int LayerPhaseTestProbe::initLayerPhaseTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::LayerPhaseTestProbe
initLogFile	src/columns/PV_Init.cpp	/^void PV_Init::initLogFile(bool appendFlag) {$/;"	f	class:PV::PV_Init
initMPIBlock	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::initMPIBlock(MPIBlock const *globalMPIBlock, Arguments const *arguments) {$/;"	f	class:PV::Checkpointer
initMPITestProbe	tests/MPITest/src/MPITestProbe.cpp	/^int MPITestProbe::initMPITestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::MPITestProbe
initMPITestProbe_base	tests/MPITest/src/MPITestProbe.cpp	/^int MPITestProbe::initMPITestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::MPITestProbe
initMaxThreads	src/columns/PV_Init.cpp	/^int PV_Init::initMaxThreads() {$/;"	f	class:PV::PV_Init
initMessage	src/probes/BaseProbe.cpp	/^int BaseProbe::initMessage(const char *msg) {$/;"	f	class:PV::BaseProbe
initNeighbors	src/utils/BorderExchange.cpp	/^void BorderExchange::initNeighbors() {$/;"	f	class:PV::BorderExchange
initNormalizeFlag	src/connections/GapConn.hpp	/^   bool initNormalizeFlag;$/;"	m	class:PV::GapConn
initNumDataPatches	src/connections/HyPerConn.cpp	/^int HyPerConn::initNumDataPatches() {$/;"	f	class:PV::HyPerConn
initNumValues	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::initNumValues() {$/;"	f	class:LocalizationProbe
initNumValues	src/probes/BaseProbe.cpp	/^int BaseProbe::initNumValues() { return setNumValues(parent->getNBatch()); }$/;"	f	class:PV::BaseProbe
initNumValues	src/probes/KernelProbe.cpp	/^int KernelProbe::initNumValues() { return setNumValues(-1); }$/;"	f	class:PV::KernelProbe
initNumValues	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::initNumValues() { return setNumValues(NUMBER_OF_VALUES); }$/;"	f	class:PV::PointLIFProbe
initNumValues	src/probes/PointProbe.cpp	/^int PointProbe::initNumValues() { return setNumValues(2); }$/;"	f	class:PV::PointProbe
initNumValues	src/probes/StatsProbe.cpp	/^int StatsProbe::initNumValues() { return setNumValues(-1); }$/;"	f	class:PV::StatsProbe
initNumValues	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^int MomentumTestConnProbe::initNumValues() { return setNumValues(-1); }$/;"	f	class:PV::MomentumTestConnProbe
initNumValues	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^int TestConnProbe::initNumValues() { return setNumValues(-1); }$/;"	f	class:PV::TestConnProbe
initNumWeightPatches	src/connections/HyPerConn.cpp	/^int HyPerConn::initNumWeightPatches() {$/;"	f	class:PV::HyPerConn
initOutputLayer	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::initOutputLayer() {$/;"	f	class:HyPerConnCheckpointerTestProbe
initOutputLayer	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::initOutputLayer() {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initOutputLayer	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::initOutputLayer() {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initOutputLayer	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::initOutputLayer() {$/;"	f	class:PoolingConnCheckpointerTestProbe
initOutputStream	src/probes/BaseProbe.cpp	/^int BaseProbe::initOutputStream(const char *filename) {$/;"	f	class:PV::BaseProbe
initOutputStream	src/probes/ColProbe.cpp	/^int ColProbe::initOutputStream(const char *filename) {$/;"	f	class:PV::ColProbe
initParameterSweepTestProbe	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^int ParameterSweepTestProbe::initParameterSweepTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ParameterSweepTestProbe
initPatchToDataLUT	src/connections/HyPerConn.cpp	/^void HyPerConn::initPatchToDataLUT() {$/;"	f	class:PV::HyPerConn
initPlasticityPatches	src/connections/HyPerConn.cpp	/^int HyPerConn::initPlasticityPatches() {$/;"	f	class:PV::HyPerConn
initPointLIFProbe_base	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::initPointLIFProbe_base() {$/;"	f	class:PV::PointLIFProbe
initPointProbe_base	src/probes/PointProbe.cpp	/^int PointProbe::initPointProbe_base() {$/;"	f	class:PV::PointProbe
initRNGs	src/weightinit/InitGaussianRandomWeights.cpp	/^int InitGaussianRandomWeights::initRNGs(bool isKernel) {$/;"	f	class:PV::InitGaussianRandomWeights
initRNGs	src/weightinit/InitRandomWeights.cpp	/^int InitRandomWeights::initRNGs(bool isKernel) {$/;"	f	class:PV::InitRandomWeights
initRNGs	src/weightinit/InitWeights.hpp	/^   virtual int initRNGs(bool isKernel) { return PV_SUCCESS; }$/;"	f	class:PV::InitWeights
initReceiveFromPostProbe	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^int ReceiveFromPostProbe::initReceiveFromPostProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ReceiveFromPostProbe
initReceiveFromPostProbe_base	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^int ReceiveFromPostProbe::initReceiveFromPostProbe_base() {$/;"	f	class:PV::ReceiveFromPostProbe
initRequireAllZeroActivityProbe	src/probes/RequireAllZeroActivityProbe.cpp	/^int RequireAllZeroActivityProbe::initRequireAllZeroActivityProbe($/;"	f	class:PV::RequireAllZeroActivityProbe
initRescaleLayerTestProbe	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^int RescaleLayerTestProbe::initRescaleLayerTestProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::RescaleLayerTestProbe
initRescaleLayerTestProbe_base	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^int RescaleLayerTestProbe::initRescaleLayerTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::RescaleLayerTestProbe
initShrunkenPatchTestProbe	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^int ShrunkenPatchTestProbe::initShrunkenPatchTestProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::ShrunkenPatchTestProbe
initShrunkenPatchTestProbe_base	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^int ShrunkenPatchTestProbe::initShrunkenPatchTestProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::ShrunkenPatchTestProbe
initSignalHandler	src/columns/PV_Init.cpp	/^int PV_Init::initSignalHandler() {$/;"	f	class:PV::PV_Init
initStatsProbe	src/probes/StatsProbe.cpp	/^int StatsProbe::initStatsProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::StatsProbe
initStatsProbe_base	src/probes/StatsProbe.cpp	/^int StatsProbe::initStatsProbe_base() {$/;"	f	class:PV::StatsProbe
initStochasticReleaseTestProbe	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^int StochasticReleaseTestProbe::initStochasticReleaseTestProbe(const char *name, HyPerCol *hc) {$/;"	f	class:PV::StochasticReleaseTestProbe
initTestNotAlwaysAllZerosProbe	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^int TestNotAlwaysAllZerosProbe::initTestNotAlwaysAllZerosProbe($/;"	f	class:PV::TestNotAlwaysAllZerosProbe
initTestNotAlwaysAllZerosProbe_base	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^int TestNotAlwaysAllZerosProbe::initTestNotAlwaysAllZerosProbe_base() {$/;"	f	class:PV::TestNotAlwaysAllZerosProbe
initVTypeString	src/layers/HyPerLayer.hpp	/^   char *initVTypeString   = nullptr;$/;"	m	class:PV::HyPerLayer
initWeight	src/weightinit/InitOneToOneWeightsParams.hpp	/^   float initWeight;$/;"	m	class:PV::InitOneToOneWeightsParams
initWeight	src/weightinit/InitOneToOneWeightsWithDelaysParams.hpp	/^   float initWeight;$/;"	m	class:PV::InitOneToOneWeightsWithDelaysParams
initWeight	src/weightinit/InitSpreadOverArborsWeightsParams.hpp	/^   float initWeight;$/;"	m	class:PV::InitSpreadOverArborsWeightsParams
initWeight	src/weightinit/InitUniformWeightsParams.hpp	/^   float initWeight;$/;"	m	class:PV::InitUniformWeightsParams
inited	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.hpp	/^   bool inited;$/;"	m	class:PV::DatastoreDelayTestLayer
initialValuesSetFlag	src/connections/BaseConnection.hpp	/^   bool initialValuesSetFlag;$/;"	m	class:PV::BaseConnection
initialWeightUpdateTime	src/connections/HyPerConn.hpp	/^   double initialWeightUpdateTime;$/;"	m	class:PV::HyPerConn
initialWriteTime	src/connections/HyPerConn.hpp	/^   double initialWriteTime;$/;"	m	class:PV::HyPerConn
initialWriteTime	src/layers/HyPerLayer.hpp	/^   double initialWriteTime; \/\/ time of next output$/;"	m	class:PV::HyPerLayer
initialize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::initialize(char const * name, PV::HyPerCol * hc) {$/;"	f	class:BBFindConfRemapLayer
initialize	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::initialize(char const * name, PV::HyPerCol * hc) {$/;"	f	class:BBFindConfRemapProbe
initialize	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::initialize(char const * name, PV::HyPerCol * hc) {$/;"	f	class:ConvertFromTable
initialize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^int LocalizationBBFindProbe::initialize(const char * probeName, PV::HyPerCol * hc) {$/;"	f	class:LocalizationBBFindProbe
initialize	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::initialize(const char * probeName, PV::HyPerCol * hc) {$/;"	f	class:LocalizationProbe
initialize	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::initialize(int device) {$/;"	f	class:PVCuda::CudaDevice
initialize	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^void CheckpointEntryWeightPvp::initialize($/;"	f	class:PV::CheckpointEntryWeightPvp
initialize	src/columns/Arguments.cpp	/^int Arguments::initialize(std::istream &configStream, bool allowUnrecognizedArguments) {$/;"	f	class:PV::Arguments
initialize	src/columns/BaseObject.cpp	/^int BaseObject::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BaseObject
initialize	src/columns/CommandLineArguments.cpp	/^int CommandLineArguments::initialize($/;"	f	class:PV::CommandLineArguments
initialize	src/columns/ConfigFileArguments.cpp	/^int ConfigFileArguments::initialize($/;"	f	class:PV::ConfigFileArguments
initialize	src/columns/HyPerCol.cpp	/^int HyPerCol::initialize(const char *name, PV_Init *initObj) {$/;"	f	class:PV::HyPerCol
initialize	src/columns/KeywordHandler.cpp	/^int KeywordHandler::initialize(char const *kw, ObjectCreateFn creator) {$/;"	f	class:PV::KeywordHandler
initialize	src/columns/PV_Init.cpp	/^int PV_Init::initialize() {$/;"	f	class:PV::PV_Init
initialize	src/columns/RandomSeed.cpp	/^void RandomSeed::initialize(unsigned int initialSeed) {$/;"	f	class:PV::RandomSeed
initialize	src/connections/BaseConnection.cpp	/^int BaseConnection::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BaseConnection
initialize	src/connections/CloneConn.cpp	/^int CloneConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CloneConn
initialize	src/connections/CloneKernelConn.cpp	/^int CloneKernelConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CloneKernelConn
initialize	src/connections/CopyConn.cpp	/^int CopyConn::initialize(char const *name, HyPerCol *hc) { return HyPerConn::initialize(name, hc); }$/;"	f	class:PV::CopyConn
initialize	src/connections/FeedbackConn.cpp	/^int FeedbackConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::FeedbackConn
initialize	src/connections/GapConn.cpp	/^int GapConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GapConn
initialize	src/connections/HyPerConn.cpp	/^int HyPerConn::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerConn
initialize	src/connections/IdentConn.cpp	/^int IdentConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::IdentConn
initialize	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PlasticCloneConn
initialize	src/connections/PoolingConn.cpp	/^int PoolingConn::initialize($/;"	f	class:PV::PoolingConn
initialize	src/connections/RescaleConn.cpp	/^int RescaleConn::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::RescaleConn
initialize	src/connections/TransposeConn.cpp	/^int TransposeConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TransposeConn
initialize	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TransposePoolingConn
initialize	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::initialize($/;"	f	class:PV::privateTransposeConn
initialize	src/initv/BaseInitV.cpp	/^int BaseInitV::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::BaseInitV
initialize	src/initv/ConstantV.cpp	/^int ConstantV::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ConstantV
initialize	src/initv/GaussianRandomV.cpp	/^int GaussianRandomV::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::GaussianRandomV
initialize	src/initv/InitVFromFile.cpp	/^int InitVFromFile::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitVFromFile
initialize	src/initv/UniformRandomV.cpp	/^int UniformRandomV::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::UniformRandomV
initialize	src/initv/ZeroV.cpp	/^int ZeroV::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ZeroV
initialize	src/io/ConfigParser.cpp	/^void ConfigParser::initialize(std::istream &configStream, bool allowUnrecognizedArguments) {$/;"	f	class:PV::ConfigParser
initialize	src/io/PVParams.cpp	/^int PVParams::initialize(size_t initialSize) {$/;"	f	class:PV::PVParams
initialize	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNErrorLayer
initialize	src/layers/ANNLayer.cpp	/^int ANNLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNLayer
initialize	src/layers/ANNSquaredLayer.cpp	/^int ANNSquaredLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNSquaredLayer
initialize	src/layers/ANNWhitenedLayer.cpp	/^int ANNWhitenedLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ANNWhitenedLayer
initialize	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BackgroundLayer
initialize	src/layers/BaseLayer.cpp	/^int BaseLayer::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::BaseLayer
initialize	src/layers/BinningLayer.cpp	/^int BinningLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::BinningLayer
initialize	src/layers/CloneVLayer.cpp	/^int CloneVLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CloneVLayer
initialize	src/layers/ConstantLayer.cpp	/^int ConstantLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ConstantLayer
initialize	src/layers/GapLayer.cpp	/^int GapLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::GapLayer
initialize	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerLCALayer
initialize	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerLayer
initialize	src/layers/ISTALayer.cpp	/^int ISTALayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ISTALayer
initialize	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::ImageFromMemoryBuffer
initialize	src/layers/InputLayer.cpp	/^int InputLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InputLayer
initialize	src/layers/KmeansLayer.cpp	/^int KmeansLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::KmeansLayer
initialize	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::initialize(const char *name, HyPerCol *hc, const char *kernel_name) {$/;"	f	class:PV::LCALIFLayer
initialize	src/layers/LIF.cpp	/^int LIF::initialize(const char *name, HyPerCol *hc, const char *kernel_name) {$/;"	f	class:PV::LIF
initialize	src/layers/LIFGap.cpp	/^int LIFGap::initialize(const char *name, HyPerCol *hc, const char *kernel_name) {$/;"	f	class:PV::LIFGap
initialize	src/layers/LabelErrorLayer.cpp	/^int LabelErrorLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LabelErrorLayer
initialize	src/layers/LeakyIntegrator.cpp	/^int LeakyIntegrator::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::LeakyIntegrator
initialize	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MomentumLCALayer
initialize	src/layers/PoolingIndexLayer.cpp	/^int PoolingIndexLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PoolingIndexLayer
initialize	src/layers/PtwiseProductLayer.cpp	/^int PtwiseProductLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PtwiseProductLayer
initialize	src/layers/PtwiseQuotientLayer.cpp	/^int PtwiseQuotientLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PtwiseQuotientLayer
initialize	src/layers/RescaleLayer.cpp	/^int RescaleLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::RescaleLayer
initialize	src/layers/Retina.cpp	/^int Retina::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::Retina
initialize	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::RunningAverageLayer
initialize	src/layers/SegmentLayer.cpp	/^int SegmentLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SegmentLayer
initialize	src/layers/Segmentify.cpp	/^int Segmentify::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::Segmentify
initialize	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ShuffleLayer
initialize	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::SigmoidLayer
initialize	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeBase
initialize	src/normalizers/NormalizeContrastZeroMean.cpp	/^int NormalizeContrastZeroMean::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeContrastZeroMean
initialize	src/normalizers/NormalizeGap.cpp	/^int NormalizeGap::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeGap
initialize	src/normalizers/NormalizeGroup.cpp	/^int NormalizeGroup::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeGroup
initialize	src/normalizers/NormalizeL2.cpp	/^int NormalizeL2::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeL2
initialize	src/normalizers/NormalizeMax.cpp	/^int NormalizeMax::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeMax
initialize	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeMultiply
initialize	src/normalizers/NormalizeSum.cpp	/^int NormalizeSum::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeSum
initialize	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
initialize	src/probes/BaseConnectionProbe.cpp	/^int BaseConnectionProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BaseConnectionProbe
initialize	src/probes/BaseHyPerConnProbe.cpp	/^int BaseHyPerConnProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BaseHyPerConnProbe
initialize	src/probes/BaseProbe.cpp	/^int BaseProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::BaseProbe
initialize	src/probes/ColProbe.cpp	/^int ColProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::ColProbe
initialize	src/probes/KernelProbe.cpp	/^int KernelProbe::initialize(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::KernelProbe
initialize	src/probes/LayerProbe.cpp	/^int LayerProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::LayerProbe
initialize	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::PointLIFProbe
initialize	src/probes/PointProbe.cpp	/^int PointProbe::initialize(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::PointProbe
initialize	src/weightinit/InitCocircWeights.cpp	/^int InitCocircWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitCocircWeights
initialize	src/weightinit/InitCocircWeightsParams.cpp	/^int InitCocircWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitCocircWeightsParams
initialize	src/weightinit/InitGauss2DWeights.cpp	/^int InitGauss2DWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGauss2DWeights
initialize	src/weightinit/InitGauss2DWeightsParams.cpp	/^int InitGauss2DWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitGauss2DWeightsParams
initialize	src/weightinit/InitGaussianRandomWeights.cpp	/^int InitGaussianRandomWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaussianRandomWeights
initialize	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^int InitGaussianRandomWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaussianRandomWeightsParams
initialize	src/weightinit/InitIdentWeights.cpp	/^int InitIdentWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitIdentWeights
initialize	src/weightinit/InitIdentWeightsParams.cpp	/^int InitIdentWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitIdentWeightsParams
initialize	src/weightinit/InitMaxPoolingWeights.cpp	/^int InitMaxPoolingWeights::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitMaxPoolingWeights
initialize	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^int InitMaxPoolingWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitMaxPoolingWeightsParams
initialize	src/weightinit/InitOneToOneWeights.cpp	/^int InitOneToOneWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeights
initialize	src/weightinit/InitOneToOneWeightsParams.cpp	/^int InitOneToOneWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeightsParams
initialize	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^int InitOneToOneWeightsWithDelays::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeightsWithDelays
initialize	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^int InitOneToOneWeightsWithDelaysParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
initialize	src/weightinit/InitRandomWeights.cpp	/^int InitRandomWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitRandomWeights
initialize	src/weightinit/InitSmartWeights.cpp	/^int InitSmartWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitSmartWeights
initialize	src/weightinit/InitSpreadOverArborsWeights.cpp	/^int InitSpreadOverArborsWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitSpreadOverArborsWeights
initialize	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^int InitSpreadOverArborsWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
initialize	src/weightinit/InitUniformRandomWeights.cpp	/^int InitUniformRandomWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformRandomWeights
initialize	src/weightinit/InitUniformRandomWeightsParams.cpp	/^int InitUniformRandomWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformRandomWeightsParams
initialize	src/weightinit/InitUniformWeights.cpp	/^int InitUniformWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformWeights
initialize	src/weightinit/InitUniformWeightsParams.cpp	/^int InitUniformWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitUniformWeightsParams
initialize	src/weightinit/InitWeights.cpp	/^int InitWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitWeights
initialize	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitWeightsParams
initialize	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^int FailBeforeExpectedStartTimeLayer::initialize(char const *name, PV::HyPerCol *hc) {$/;"	f	class:FailBeforeExpectedStartTimeLayer
initialize	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^int DatastoreDelayTestLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::DatastoreDelayTestLayer
initialize	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^int AlwaysFailsLayer::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::AlwaysFailsLayer
initialize	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::initialize(const char *probeName, PV::HyPerCol *hc) {$/;"	f	class:HyPerConnCheckpointerTestProbe
initialize	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^int ImportParamsConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImportParamsConn
initialize	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^int ImportParamsLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ImportParamsLayer
initialize	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::HyPerConnDebugInitWeights
initialize	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^int InitGaborWeights::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaborWeights
initialize	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^int InitGaborWeightsParams::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::InitGaborWeightsParams
initialize	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::KernelConnDebugInitWeights
initialize	tests/LIFTest/src/AverageRateConn.cpp	/^int AverageRateConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::AverageRateConn
initialize	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::MPITestLayer
initialize	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::initialize(const char *probeName, PV::HyPerCol *hc) {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initialize	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::initialize($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initialize	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^int MomentumConnTestProbe::initialize(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::MomentumConnTestProbe
initialize	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^int NormalizeL3::initialize(char const *name, HyPerCol *hc) {$/;"	f	class:PV::NormalizeL3
initialize	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::PlasticConnTestLayer
initialize	tests/PlasticConnTest/src/PlasticConnTestProbe.cpp	/^int PlasticConnTestProbe::initialize(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::PlasticConnTestProbe
initialize	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::initialize(const char *probeName, PV::HyPerCol *hc) {$/;"	f	class:PoolingConnCheckpointerTestProbe
initialize	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^int ResetStateOnTriggerTestProbe::initialize(char const *probeName, PV::HyPerCol *hc) {$/;"	f	class:ResetStateOnTriggerTestProbe
initialize	tests/Shared/CPTestInputLayer.cpp	/^int CPTestInputLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::CPTestInputLayer
initialize	tests/Shared/VaryingHyPerConn.cpp	/^int VaryingHyPerConn::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::VaryingHyPerConn
initialize	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::ShrunkenPatchTestLayer
initialize	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::initialize(const char *name, HyPerCol *hc) {$/;"	f	class:PV::TestImage
initializeActivity	src/layers/BinningLayer.cpp	/^int BinningLayer::initializeActivity() { return PV_SUCCESS; }$/;"	f	class:PV::BinningLayer
initializeActivity	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initializeActivity() {$/;"	f	class:PV::HyPerLayer
initializeActivity	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::initializeActivity(double time, double dt) {$/;"	f	class:PV::ImageFromMemoryBuffer
initializeActivity	src/layers/InputLayer.cpp	/^int InputLayer::initializeActivity() { return PV_SUCCESS; }$/;"	f	class:PV::InputLayer
initializeActivity	src/layers/Retina.cpp	/^int Retina::initializeActivity() {$/;"	f	class:PV::Retina
initializeActivity	src/layers/SegmentLayer.cpp	/^int SegmentLayer::initializeActivity() { return PV_SUCCESS; }$/;"	f	class:PV::SegmentLayer
initializeActivity	src/layers/Segmentify.cpp	/^int Segmentify::initializeActivity() { return PV_SUCCESS; }$/;"	f	class:PV::Segmentify
initializeActivity	src/layers/WTALayer.cpp	/^int WTALayer::initializeActivity() { return PV_SUCCESS; }$/;"	f	class:PV::WTALayer
initializeActivity	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::initializeActivity() {$/;"	f	class:PV::TestImage
initializeBatch	src/components/BatchIndexer.cpp	/^void BatchIndexer::initializeBatch(int localBatchIndex) {$/;"	f	class:PV::BatchIndexer
initializeBatchIndexer	src/layers/InputLayer.cpp	/^void InputLayer::initializeBatchIndexer(int fileCount) {$/;"	f	class:PV::InputLayer
initializeCocircWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^PVPatch **HyPerConnDebugInitWeights::initializeCocircWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
initializeCocircWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^PVPatch **KernelConnDebugInitWeights::initializeCocircWeights($/;"	f	class:PV::KernelConnDebugInitWeights
initializeColumnEnergyProbe	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::initializeColumnEnergyProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::ColumnEnergyProbe
initializeCorrectValues	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^void HyPerConnCheckpointerTestProbe::initializeCorrectValues(double timevalue) {$/;"	f	class:HyPerConnCheckpointerTestProbe
initializeCorrectValues	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^void MomentumConnSimpleCheckpointerTestProbe::initializeCorrectValues(double timevalue) {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initializeCorrectValues	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^void MomentumConnViscosityCheckpointerTestProbe::initializeCorrectValues(double timevalue) {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initializeCorrectValues	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^void PoolingConnCheckpointerTestProbe::initializeCorrectValues(double timevalue) {$/;"	f	class:PoolingConnCheckpointerTestProbe
initializeDelays	src/connections/BaseConnection.cpp	/^int BaseConnection::initializeDelays(const float *fDelayArray, int size) {$/;"	f	class:PV::BaseConnection
initializeDelays	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::initializeDelays(const float *fDelayArray, int size) {$/;"	f	class:PV::privateTransposeConn
initializeDeliverKernelArgs	src/connections/PoolingConn.cpp	/^int PoolingConn::initializeDeliverKernelArgs() {$/;"	f	class:PV::PoolingConn
initializeDistChordCocircKurvePreAndKurvePost	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::initializeDistChordCocircKurvePreAndKurvePost() {$/;"	f	class:PV::InitCocircWeightsParams
initializeFromCheckpointFlag	src/connections/BaseConnection.hpp	/^   bool initializeFromCheckpointFlag;$/;"	m	class:PV::BaseConnection
initializeFromCheckpointFlag	src/layers/HyPerLayer.hpp	/^   bool initializeFromCheckpointFlag; \/\/ Whether to load initial state using directory$/;"	m	class:PV::HyPerLayer
initializeFromCount	src/columns/GaussianRandom.cpp	/^int GaussianRandom::initializeFromCount(unsigned int count) {$/;"	f	class:PV::GaussianRandom
initializeFromCount	src/columns/Random.cpp	/^int Random::initializeFromCount(int count) {$/;"	f	class:PV::Random
initializeFromLoc	src/columns/GaussianRandom.cpp	/^int GaussianRandom::initializeFromLoc(const PVLayerLoc *locptr, bool isExtended) {$/;"	f	class:PV::GaussianRandom
initializeFromLoc	src/columns/Random.cpp	/^int Random::initializeFromLoc(const PVLayerLoc *locptr, bool isExtended) {$/;"	f	class:PV::Random
initializeGaborWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^PVPatch **HyPerConnDebugInitWeights::initializeGaborWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
initializeGaborWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^PVPatch **KernelConnDebugInitWeights::initializeGaborWeights($/;"	f	class:PV::KernelConnDebugInitWeights
initializeGaussian	src/columns/GaussianRandom.cpp	/^int GaussianRandom::initializeGaussian() {$/;"	f	class:PV::GaussianRandom
initializeGaussian2DWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^PVPatch **HyPerConnDebugInitWeights::initializeGaussian2DWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
initializeGaussian2DWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^PVPatch **KernelConnDebugInitWeights::initializeGaussian2DWeights($/;"	f	class:PV::KernelConnDebugInitWeights
initializeQuotientColProbe	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::initializeQuotientColProbe(const char *probename, HyPerCol *hc) {$/;"	f	class:PV::QuotientColProbe
initializeReceivePostKernelArgs	src/connections/HyPerConn.cpp	/^int HyPerConn::initializeReceivePostKernelArgs() {$/;"	f	class:PV::HyPerConn
initializeReceivePreKernelArgs	src/connections/HyPerConn.cpp	/^int HyPerConn::initializeReceivePreKernelArgs() {$/;"	f	class:PV::HyPerConn
initializeSmartWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^PVPatch **HyPerConnDebugInitWeights::initializeSmartWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
initializeSmartWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^PVPatch **KernelConnDebugInitWeights::initializeSmartWeights($/;"	f	class:PV::KernelConnDebugInitWeights
initializeState	src/columns/BaseObject.hpp	/^   virtual int initializeState() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
initializeState	src/connections/BaseConnection.cpp	/^int BaseConnection::initializeState() { return setInitialValues(); }$/;"	f	class:PV::BaseConnection
initializeState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initializeState() {$/;"	f	class:PV::HyPerLayer
initializeThreads	src/columns/HyPerCol.cpp	/^int HyPerCol::initializeThreads(char const *in_device) {$/;"	f	class:PV::HyPerCol
initializeTransposePoolingDeliverKernelArgs	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::initializeTransposePoolingDeliverKernelArgs() {$/;"	f	class:PV::TransposePoolingConn
initializeV	src/layers/BinningLayer.cpp	/^int BinningLayer::initializeV() {$/;"	f	class:PV::BinningLayer
initializeV	src/layers/CloneVLayer.cpp	/^int CloneVLayer::initializeV() { return PV_SUCCESS; }$/;"	f	class:PV::CloneVLayer
initializeV	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initializeV() {$/;"	f	class:PV::HyPerLayer
initializeV	src/layers/InputLayer.cpp	/^int InputLayer::initializeV() {$/;"	f	class:PV::InputLayer
initializeV	src/layers/Retina.cpp	/^int Retina::initializeV() {$/;"	f	class:PV::Retina
initializeV	src/layers/SegmentLayer.cpp	/^int SegmentLayer::initializeV() {$/;"	f	class:PV::SegmentLayer
initializeV	src/layers/Segmentify.cpp	/^int Segmentify::initializeV() {$/;"	f	class:PV::Segmentify
initializeV	src/layers/WTALayer.cpp	/^int WTALayer::initializeV() {$/;"	f	class:PV::WTALayer
initializeV	tests/Shared/CPTestInputLayer.cpp	/^int CPTestInputLayer::initializeV() {$/;"	f	class:PV::CPTestInputLayer
initializeWeights	src/connections/CloneConn.cpp	/^PVPatch ***CloneConn::initializeWeights(PVPatch ***patches, float **dataStart) {$/;"	f	class:PV::CloneConn
initializeWeights	src/connections/CopyConn.cpp	/^PVPatch ***CopyConn::initializeWeights(PVPatch ***patches, float **dataStart) {$/;"	f	class:PV::CopyConn
initializeWeights	src/connections/HyPerConn.cpp	/^PVPatch ***HyPerConn::initializeWeights(PVPatch ***patches, float **dataStart) {$/;"	f	class:PV::HyPerConn
initializeWeights	src/connections/TransposeConn.cpp	/^PVPatch ***TransposeConn::initializeWeights(PVPatch ***patches, float **dataStart) {$/;"	f	class:PV::TransposeConn
initializeWeights	src/connections/privateTransposeConn.cpp	/^PVPatch ***privateTransposeConn::initializeWeights(PVPatch ***patches, float **dataStart) {$/;"	f	class:PV::privateTransposeConn
initializeWeights	src/weightinit/InitWeights.cpp	/^int InitWeights::initializeWeights($/;"	f	class:PV::InitWeights
initializeWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^PVPatch ***HyPerConnDebugInitWeights::initializeWeights($/;"	f	class:PV::HyPerConnDebugInitWeights
initializeWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^PVPatch ***KernelConnDebugInitWeights::initializeWeights($/;"	f	class:PV::KernelConnDebugInitWeights
initialize_base	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::initialize_base() {$/;"	f	class:BBFindConfRemapLayer
initialize_base	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::initialize_base() {$/;"	f	class:BBFindConfRemapProbe
initialize_base	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::initialize_base() {$/;"	f	class:ConvertFromTable
initialize_base	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^int LocalizationBBFindProbe::initialize_base() {$/;"	f	class:LocalizationBBFindProbe
initialize_base	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::initialize_base() {$/;"	f	class:LocalizationProbe
initialize_base	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^int MaskFromMemoryBuffer::initialize_base(){$/;"	f	class:MaskFromMemoryBuffer
initialize_base	src/columns/Arguments.cpp	/^int Arguments::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::Arguments
initialize_base	src/columns/BaseObject.cpp	/^int BaseObject::initialize_base() {$/;"	f	class:PV::BaseObject
initialize_base	src/columns/CommandLineArguments.cpp	/^int CommandLineArguments::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::CommandLineArguments
initialize_base	src/columns/ConfigFileArguments.cpp	/^int ConfigFileArguments::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::ConfigFileArguments
initialize_base	src/columns/GaussianRandom.cpp	/^int GaussianRandom::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::GaussianRandom
initialize_base	src/columns/HyPerCol.cpp	/^int HyPerCol::initialize_base() {$/;"	f	class:PV::HyPerCol
initialize_base	src/columns/Random.cpp	/^int Random::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::Random
initialize_base	src/connections/BaseConnection.cpp	/^int BaseConnection::initialize_base() {$/;"	f	class:PV::BaseConnection
initialize_base	src/connections/CloneConn.cpp	/^int CloneConn::initialize_base() {$/;"	f	class:PV::CloneConn
initialize_base	src/connections/CopyConn.cpp	/^int CopyConn::initialize_base() {$/;"	f	class:PV::CopyConn
initialize_base	src/connections/FeedbackConn.cpp	/^int FeedbackConn::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::FeedbackConn
initialize_base	src/connections/GapConn.cpp	/^int GapConn::initialize_base() {$/;"	f	class:PV::GapConn
initialize_base	src/connections/HyPerConn.cpp	/^int HyPerConn::initialize_base() {$/;"	f	class:PV::HyPerConn
initialize_base	src/connections/IdentConn.cpp	/^int IdentConn::initialize_base() {$/;"	f	class:PV::IdentConn
initialize_base	src/connections/ImprintConn.cpp	/^int ImprintConn::initialize_base() {$/;"	f	class:PV::ImprintConn
initialize_base	src/connections/MomentumConn.cpp	/^int MomentumConn::initialize_base() {$/;"	f	class:PV::MomentumConn
initialize_base	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::PlasticCloneConn
initialize_base	src/connections/PoolingConn.cpp	/^int PoolingConn::initialize_base() {$/;"	f	class:PV::PoolingConn
initialize_base	src/connections/RescaleConn.cpp	/^int RescaleConn::initialize_base() {$/;"	f	class:PV::RescaleConn
initialize_base	src/connections/TransposeConn.cpp	/^int TransposeConn::initialize_base() {$/;"	f	class:PV::TransposeConn
initialize_base	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::initialize_base() {$/;"	f	class:PV::TransposePoolingConn
initialize_base	src/initv/BaseInitV.cpp	/^int BaseInitV::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::BaseInitV
initialize_base	src/initv/ConstantV.cpp	/^int ConstantV::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::ConstantV
initialize_base	src/initv/GaussianRandomV.cpp	/^int GaussianRandomV::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::GaussianRandomV
initialize_base	src/initv/InitVFromFile.cpp	/^int InitVFromFile::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitVFromFile
initialize_base	src/initv/UniformRandomV.cpp	/^int UniformRandomV::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::UniformRandomV
initialize_base	src/initv/ZeroV.cpp	/^int ZeroV::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::ZeroV
initialize_base	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::initialize_base() {$/;"	f	class:PV::ANNErrorLayer
initialize_base	src/layers/ANNLayer.cpp	/^int ANNLayer::initialize_base() {$/;"	f	class:PV::ANNLayer
initialize_base	src/layers/ANNSquaredLayer.cpp	/^int ANNSquaredLayer::initialize_base() {$/;"	f	class:PV::ANNSquaredLayer
initialize_base	src/layers/ANNWhitenedLayer.cpp	/^int ANNWhitenedLayer::initialize_base() {$/;"	f	class:PV::ANNWhitenedLayer
initialize_base	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::initialize_base() {$/;"	f	class:PV::BackgroundLayer
initialize_base	src/layers/BinningLayer.cpp	/^int BinningLayer::initialize_base() {$/;"	f	class:PV::BinningLayer
initialize_base	src/layers/CloneVLayer.cpp	/^int CloneVLayer::initialize_base() {$/;"	f	class:PV::CloneVLayer
initialize_base	src/layers/ConstantLayer.cpp	/^int ConstantLayer::initialize_base() {$/;"	f	class:PV::ConstantLayer
initialize_base	src/layers/GapLayer.cpp	/^int GapLayer::initialize_base() {$/;"	f	class:PV::GapLayer
initialize_base	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::initialize_base() {$/;"	f	class:PV::HyPerLCALayer
initialize_base	src/layers/HyPerLayer.cpp	/^int HyPerLayer::initialize_base() {$/;"	f	class:PV::HyPerLayer
initialize_base	src/layers/ISTALayer.cpp	/^int ISTALayer::initialize_base() {$/;"	f	class:PV::ISTALayer
initialize_base	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::initialize_base() {$/;"	f	class:PV::ImageFromMemoryBuffer
initialize_base	src/layers/KmeansLayer.cpp	/^int KmeansLayer::initialize_base() {$/;"	f	class:PV::KmeansLayer
initialize_base	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::initialize_base() {$/;"	f	class:PV::LCALIFLayer
initialize_base	src/layers/LIF.cpp	/^int LIF::initialize_base() {$/;"	f	class:PV::LIF
initialize_base	src/layers/LIFGap.cpp	/^int LIFGap::initialize_base() {$/;"	f	class:PV::LIFGap
initialize_base	src/layers/LabelErrorLayer.cpp	/^int LabelErrorLayer::initialize_base() {$/;"	f	class:PV::LabelErrorLayer
initialize_base	src/layers/LeakyIntegrator.cpp	/^int LeakyIntegrator::initialize_base() {$/;"	f	class:PV::LeakyIntegrator
initialize_base	src/layers/MaskLayer.cpp	/^int MaskLayer::initialize_base() {$/;"	f	class:PV::MaskLayer
initialize_base	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::initialize_base() {$/;"	f	class:PV::MomentumLCALayer
initialize_base	src/layers/PoolingIndexLayer.cpp	/^int PoolingIndexLayer::initialize_base() {$/;"	f	class:PV::PoolingIndexLayer
initialize_base	src/layers/PtwiseProductLayer.cpp	/^int PtwiseProductLayer::initialize_base() {$/;"	f	class:PV::PtwiseProductLayer
initialize_base	src/layers/PtwiseQuotientLayer.cpp	/^int PtwiseQuotientLayer::initialize_base() {$/;"	f	class:PV::PtwiseQuotientLayer
initialize_base	src/layers/RescaleLayer.cpp	/^int RescaleLayer::initialize_base() {$/;"	f	class:PV::RescaleLayer
initialize_base	src/layers/Retina.cpp	/^int Retina::initialize_base() {$/;"	f	class:PV::Retina
initialize_base	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::initialize_base() {$/;"	f	class:PV::RunningAverageLayer
initialize_base	src/layers/SegmentLayer.cpp	/^int SegmentLayer::initialize_base() {$/;"	f	class:PV::SegmentLayer
initialize_base	src/layers/Segmentify.cpp	/^int Segmentify::initialize_base() {$/;"	f	class:PV::Segmentify
initialize_base	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::initialize_base() {$/;"	f	class:PV::ShuffleLayer
initialize_base	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::SigmoidLayer
initialize_base	src/layers/WTALayer.cpp	/^int WTALayer::initialize_base() {$/;"	f	class:PV::WTALayer
initialize_base	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::initialize_base() {$/;"	f	class:PV::NormalizeBase
initialize_base	src/normalizers/NormalizeContrastZeroMean.cpp	/^int NormalizeContrastZeroMean::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeContrastZeroMean
initialize_base	src/normalizers/NormalizeGap.cpp	/^int NormalizeGap::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeGap
initialize_base	src/normalizers/NormalizeGroup.cpp	/^int NormalizeGroup::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeGroup
initialize_base	src/normalizers/NormalizeL2.cpp	/^int NormalizeL2::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeL2
initialize_base	src/normalizers/NormalizeMax.cpp	/^int NormalizeMax::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeMax
initialize_base	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::initialize_base() {$/;"	f	class:PV::NormalizeMultiply
initialize_base	src/normalizers/NormalizeSum.cpp	/^int NormalizeSum::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeSum
initialize_base	src/probes/BaseConnectionProbe.cpp	/^int BaseConnectionProbe::initialize_base() {$/;"	f	class:PV::BaseConnectionProbe
initialize_base	src/probes/BaseHyPerConnProbe.cpp	/^int BaseHyPerConnProbe::initialize_base() {$/;"	f	class:PV::BaseHyPerConnProbe
initialize_base	src/probes/BaseProbe.cpp	/^int BaseProbe::initialize_base() {$/;"	f	class:PV::BaseProbe
initialize_base	src/probes/ColProbe.cpp	/^int ColProbe::initialize_base() {$/;"	f	class:PV::ColProbe
initialize_base	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::initialize_base() {$/;"	f	class:PV::ColumnEnergyProbe
initialize_base	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^   int initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
initialize_base	src/probes/KernelProbe.cpp	/^int KernelProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::KernelProbe
initialize_base	src/probes/L0NormLCAProbe.hpp	/^   int initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::L0NormLCAProbe
initialize_base	src/probes/L1NormLCAProbe.hpp	/^   int initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::L1NormLCAProbe
initialize_base	src/probes/L2ConnProbe.cpp	/^int L2ConnProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::L2ConnProbe
initialize_base	src/probes/LayerProbe.cpp	/^int LayerProbe::initialize_base() {$/;"	f	class:PV::LayerProbe
initialize_base	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::initialize_base() {$/;"	f	class:PV::QuotientColProbe
initialize_base	src/probes/RequireAllZeroActivityProbe.cpp	/^int RequireAllZeroActivityProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::RequireAllZeroActivityProbe
initialize_base	src/weightinit/InitCloneKernelWeights.cpp	/^int InitCloneKernelWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitCloneKernelWeights
initialize_base	src/weightinit/InitCocircWeights.cpp	/^int InitCocircWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitCocircWeights
initialize_base	src/weightinit/InitCocircWeightsParams.cpp	/^int InitCocircWeightsParams::initialize_base() {$/;"	f	class:PV::InitCocircWeightsParams
initialize_base	src/weightinit/InitGauss2DWeights.cpp	/^int InitGauss2DWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitGauss2DWeights
initialize_base	src/weightinit/InitGauss2DWeightsParams.cpp	/^int InitGauss2DWeightsParams::initialize_base() {$/;"	f	class:PV::InitGauss2DWeightsParams
initialize_base	src/weightinit/InitGaussianRandomWeights.cpp	/^int InitGaussianRandomWeights::initialize_base() {$/;"	f	class:PV::InitGaussianRandomWeights
initialize_base	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^int InitGaussianRandomWeightsParams::initialize_base() {$/;"	f	class:PV::InitGaussianRandomWeightsParams
initialize_base	src/weightinit/InitIdentWeights.cpp	/^int InitIdentWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitIdentWeights
initialize_base	src/weightinit/InitIdentWeightsParams.cpp	/^int InitIdentWeightsParams::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitIdentWeightsParams
initialize_base	src/weightinit/InitMaxPoolingWeights.cpp	/^int InitMaxPoolingWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitMaxPoolingWeights
initialize_base	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^int InitMaxPoolingWeightsParams::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitMaxPoolingWeightsParams
initialize_base	src/weightinit/InitOneToOneWeights.cpp	/^int InitOneToOneWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitOneToOneWeights
initialize_base	src/weightinit/InitOneToOneWeightsParams.cpp	/^int InitOneToOneWeightsParams::initialize_base() {$/;"	f	class:PV::InitOneToOneWeightsParams
initialize_base	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^int InitOneToOneWeightsWithDelays::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitOneToOneWeightsWithDelays
initialize_base	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^int InitOneToOneWeightsWithDelaysParams::initialize_base() {$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
initialize_base	src/weightinit/InitRandomWeights.cpp	/^int InitRandomWeights::initialize_base() {$/;"	f	class:PV::InitRandomWeights
initialize_base	src/weightinit/InitSmartWeights.cpp	/^int InitSmartWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitSmartWeights
initialize_base	src/weightinit/InitSpreadOverArborsWeights.cpp	/^int InitSpreadOverArborsWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitSpreadOverArborsWeights
initialize_base	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^int InitSpreadOverArborsWeightsParams::initialize_base() {$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
initialize_base	src/weightinit/InitUniformRandomWeights.cpp	/^int InitUniformRandomWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitUniformRandomWeights
initialize_base	src/weightinit/InitUniformRandomWeightsParams.cpp	/^int InitUniformRandomWeightsParams::initialize_base() {$/;"	f	class:PV::InitUniformRandomWeightsParams
initialize_base	src/weightinit/InitUniformWeights.cpp	/^int InitUniformWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitUniformWeights
initialize_base	src/weightinit/InitUniformWeightsParams.cpp	/^int InitUniformWeightsParams::initialize_base() {$/;"	f	class:PV::InitUniformWeightsParams
initialize_base	src/weightinit/InitWeights.cpp	/^int InitWeights::initialize_base() {$/;"	f	class:PV::InitWeights
initialize_base	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::initialize_base() {$/;"	f	class:PV::InitWeightsParams
initialize_base	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^int FailBeforeExpectedStartTimeLayer::initialize_base() { return PV_SUCCESS; }$/;"	f	class:FailBeforeExpectedStartTimeLayer
initialize_base	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^int AlwaysFailsLayer::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::AlwaysFailsLayer
initialize_base	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^int AllConstantValueProbe::initialize_base() {$/;"	f	class:PV::AllConstantValueProbe
initialize_base	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:HyPerConnCheckpointerTestProbe
initialize_base	tests/ImportParamsTest/src/ImportParamsConn.cpp	/^int ImportParamsConn::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::ImportParamsConn
initialize_base	tests/ImportParamsTest/src/ImportParamsLayer.cpp	/^int ImportParamsLayer::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::ImportParamsLayer
initialize_base	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::initialize_base() {$/;"	f	class:PV::HyPerConnDebugInitWeights
initialize_base	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^int InitGaborWeights::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::InitGaborWeights
initialize_base	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^int InitGaborWeightsParams::initialize_base() {$/;"	f	class:PV::InitGaborWeightsParams
initialize_base	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::initialize_base() {$/;"	f	class:PV::KernelConnDebugInitWeights
initialize_base	tests/LIFTest/src/AverageRateConn.cpp	/^int AverageRateConn::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::AverageRateConn
initialize_base	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::initialize_base() {$/;"	f	class:PV::LIFTestProbe
initialize_base	tests/MaskLayerTest/src/MaskTestLayer.hpp	/^   int initialize_base() {$/;"	f	class:PV::MaskTestLayer
initialize_base	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
initialize_base	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
initialize_base	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^int NormalizeL3::initialize_base() {$/;"	f	class:PV::NormalizeL3
initialize_base	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PoolingConnCheckpointerTestProbe
initialize_base	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^int ResetStateOnTriggerTestProbe::initialize_base() {$/;"	f	class:ResetStateOnTriggerTestProbe
initialize_base	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^int StochasticReleaseTestProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::StochasticReleaseTestProbe
initialize_base	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^int MomentumTestConnProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::MomentumTestConnProbe
initialize_base	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^int TestConnProbe::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::TestConnProbe
initialize_base	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::initialize_base() { return PV_SUCCESS; }$/;"	f	class:PV::TestImage
initialize_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::initialize_dW(int arborId) {$/;"	f	class:PV::HyPerConn
initialize_dW	src/connections/ImprintConn.cpp	/^int ImprintConn::initialize_dW(int arborId) {$/;"	f	class:PV::ImprintConn
initidenticalBatchProbe	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^int identicalBatchProbe::initidenticalBatchProbe(const char *probeName, HyPerCol *hc) {$/;"	f	class:PV::identicalBatchProbe
initidenticalBatchProbe_base	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^int identicalBatchProbe::initidenticalBatchProbe_base() { return PV_SUCCESS; }$/;"	f	class:PV::identicalBatchProbe
input	python/analysis_parse.py	/^input = []$/;"	v
inputMethod	src/layers/Segmentify.hpp	/^   char *inputMethod;$/;"	m	class:PV::Segmentify
insertFileIntoMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::insertFileIntoMontage(char const * labelFilename, int xOffset, int yOffset, int xExpectedSize, int yExpectedSize) {$/;"	f	class:BBFindConfRemapProbe
insertFileIntoMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::insertFileIntoMontage(char const * labelFilename, int xOffset, int yOffset, int xExpectedSize, int yExpectedSize) {$/;"	f	class:LocalizationProbe
insertImageIntoMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::insertImageIntoMontage(int xStart, int yStart, float const * sourceData, PVLayerLoc const * loc, bool extended) {$/;"	f	class:BBFindConfRemapProbe
insertImageIntoMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::insertImageIntoMontage(int xStart, int yStart, float const * sourceData, PVLayerLoc const * loc, bool extended) {$/;"	f	class:LocalizationProbe
insertProbe	src/columns/HyPerCol.cpp	/^int HyPerCol::insertProbe(ColProbe *p) {$/;"	f	class:PV::HyPerCol
insertProbe	src/connections/BaseConnection.cpp	/^int BaseConnection::insertProbe(BaseConnectionProbe *p) {$/;"	f	class:PV::BaseConnection
insertProbe	src/connections/HyPerConn.cpp	/^int HyPerConn::insertProbe(BaseConnectionProbe *p) {$/;"	f	class:PV::HyPerConn
insertProbe	src/layers/HyPerLayer.cpp	/^int HyPerLayer::insertProbe(LayerProbe *p) {$/;"	f	class:PV::HyPerLayer
instance	src/columns/Factory.hpp	/^   static Factory *instance() {$/;"	f	class:PV::Factory
instance	src/columns/RandomSeed.cpp	/^RandomSeed *RandomSeed::instance() {$/;"	f	class:PV::RandomSeed
integratedSpikeCount	src/layers/LCALIFLayer.hpp	/^   float *integratedSpikeCount; \/\/ plasticity decrement variable for postsynaptic layer$/;"	m	class:PV::LCALIFLayer
integrationTime	src/layers/LeakyIntegrator.hpp	/^   float integrationTime;$/;"	m	class:PV::LeakyIntegrator
internalMapHeight	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int internalMapHeight;$/;"	m	class:BBFindConfRemapLayer
internalMapHeight	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int internalMapHeight;$/;"	m	class:LocalizationBBFindProbe
internalMapWidth	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int internalMapWidth;$/;"	m	class:BBFindConfRemapLayer
internalMapWidth	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int internalMapWidth;$/;"	m	class:LocalizationBBFindProbe
interpret	python/param_draw.py	/^    def interpret(self, pattern, match):$/;"	m	class:Param_Reader
interpret	python/pvtools/display.py	/^def interpret(arg):$/;"	f
intersecting	demos/HeatMapLocalization/src/BBFind.cpp	/^float BBFind::Rectangle::intersecting(const Rectangle &rectA, const Rectangle &rectB)$/;"	f	class:BBFind::Rectangle
invert	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   bool invert;$/;"	m	class:PV::InitGaborWeightsParams
io	src/io/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon6
ioAppend	src/connections/HyPerConn.hpp	/^   bool ioAppend; \/\/ controls opening of binary files$/;"	m	class:PV::HyPerConn
ioAppend	src/layers/HyPerLayer.hpp	/^   int ioAppend; \/\/ controls opening of binary files$/;"	m	class:PV::HyPerLayer
ioParamArray	src/io/PVParams.hpp	/^void PVParams::ioParamArray($/;"	f	class:PV::PVParams
ioParamString	src/io/PVParams.cpp	/^void PVParams::ioParamString($/;"	f	class:PV::PVParams
ioParamStringRequired	src/io/PVParams.cpp	/^void PVParams::ioParamStringRequired($/;"	f	class:PV::PVParams
ioParamValue	src/io/PVParams.cpp	/^void PVParams::ioParamValue<int>($/;"	f	class:PV::PVParams
ioParamValue	src/io/PVParams.hpp	/^void PVParams::ioParamValue($/;"	f	class:PV::PVParams
ioParamValueRequired	src/io/PVParams.cpp	/^void PVParams::ioParamValueRequired<int>($/;"	f	class:PV::PVParams
ioParamValueRequired	src/io/PVParams.hpp	/^void PVParams::ioParamValueRequired($/;"	f	class:PV::PVParams
ioParam_AMax	src/layers/ANNErrorLayer.hpp	/^   virtual void ioParam_AMax(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::ANNErrorLayer
ioParam_AMax	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_AMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_AMin	src/layers/ANNErrorLayer.hpp	/^   virtual void ioParam_AMin(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::ANNErrorLayer
ioParam_AMin	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_AMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_AShift	src/layers/ANNErrorLayer.hpp	/^   virtual void ioParam_AShift(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::ANNErrorLayer
ioParam_AShift	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_AShift(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_InitVType	src/layers/CloneVLayer.cpp	/^void CloneVLayer::ioParam_InitVType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneVLayer
ioParam_InitVType	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_InitVType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_InitVType	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_InitVType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_InitVType	src/layers/Retina.cpp	/^void Retina::ioParam_InitVType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_InitVType	tests/test_constant_input/src/TestImage.cpp	/^void TestImage::ioParam_InitVType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TestImage
ioParam_InverseFlag	src/layers/SigmoidLayer.cpp	/^void SigmoidLayer::ioParam_InverseFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParam_LCAMomentumRate	src/layers/MomentumLCALayer.cpp	/^void MomentumLCALayer::ioParam_LCAMomentumRate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumLCALayer
ioParam_SigmoidAlpha	src/layers/SigmoidLayer.cpp	/^void SigmoidLayer::ioParam_SigmoidAlpha(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParam_SigmoidFlag	src/layers/SigmoidLayer.cpp	/^void SigmoidLayer::ioParam_SigmoidFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParam_TrainingFlag	src/layers/KmeansLayer.cpp	/^void KmeansLayer::ioParam_TrainingFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KmeansLayer
ioParam_VThresh	src/layers/ANNErrorLayer.hpp	/^   virtual void ioParam_VThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNErrorLayer
ioParam_VThresh	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_VThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_VThresh	src/probes/FirmThresholdCostFnProbe.cpp	/^void FirmThresholdCostFnProbe::ioParam_VThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FirmThresholdCostFnProbe
ioParam_VWidth	src/layers/ANNErrorLayer.hpp	/^   virtual void ioParam_VWidth(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::ANNErrorLayer
ioParam_VWidth	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_VWidth(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_VWidth	src/probes/FirmThresholdCostFnProbe.cpp	/^void FirmThresholdCostFnProbe::ioParam_VWidth(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FirmThresholdCostFnProbe
ioParam_Vexc	src/layers/LIF.cpp	/^void LIF::ioParam_Vexc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_Vfilename	src/initv/InitVFromFile.cpp	/^void InitVFromFile::ioParam_Vfilename(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitVFromFile
ioParam_Vinh	src/layers/LIF.cpp	/^void LIF::ioParam_Vinh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_VinhB	src/layers/LIF.cpp	/^void LIF::ioParam_VinhB(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_Vrest	src/layers/LIF.cpp	/^void LIF::ioParam_Vrest(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_Vrest	src/layers/SigmoidLayer.cpp	/^void SigmoidLayer::ioParam_Vrest(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParam_Vscale	src/layers/LCALIFLayer.cpp	/^void LCALIFLayer::ioParam_Vscale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LCALIFLayer
ioParam_VthRest	src/layers/LIF.cpp	/^void LIF::ioParam_VthRest(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_VthRest	src/layers/SigmoidLayer.cpp	/^void SigmoidLayer::ioParam_VthRest(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParam_absRefractoryPeriod	src/layers/Retina.cpp	/^void Retina::ioParam_absRefractoryPeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_accumulateAmount	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_accumulateAmount(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_accumulateAmount	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_accumulateAmount(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_adaptiveTimeScaleProbe	src/layers/HyPerLCALayer.cpp	/^void HyPerLCALayer::ioParam_adaptiveTimeScaleProbe(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLCALayer
ioParam_adaptiveTimeScaleProbe	src/layers/ISTALayer.cpp	/^void ISTALayer::ioParam_adaptiveTimeScaleProbe(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ISTALayer
ioParam_ampSpikelet	src/layers/GapLayer.cpp	/^void GapLayer::ioParam_ampSpikelet(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GapLayer
ioParam_arborId	src/probes/KernelProbe.cpp	/^void KernelProbe::ioParam_arborId(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParam_aspect	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_aspect(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_aspectRatioAdjustment	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_aspectRatioAdjustment(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_aspectRelatedParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_aspectRelatedParams(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_autoResizeFlag	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_autoResizeFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_backgroundRate	src/layers/Retina.cpp	/^void Retina::ioParam_backgroundRate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_baseMax	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_baseMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_baseMin	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_baseMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_batchLoc	src/probes/PointProbe.cpp	/^void PointProbe::ioParam_batchLoc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointProbe
ioParam_batchMethod	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_batchMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_batchPeriod	src/connections/MomentumConn.cpp	/^void MomentumConn::ioParam_batchPeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConn
ioParam_beginStim	src/layers/Retina.cpp	/^void Retina::ioParam_beginStim(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_binMaxMin	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_binMaxMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_binMaxMin	src/layers/WTALayer.cpp	/^void WTALayer::ioParam_binMaxMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::WTALayer
ioParam_binSigma	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_binSigma(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_boundingBoxLineWidth	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_boundingBoxLineWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_boundingBoxLineWidth	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_boundingBoxLineWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_boundingboxGuessSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_boundingboxGuessSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_boundingboxGuessSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_boundingboxGuessSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_bowtieAngle	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_bowtieAngle(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_bowtieFlag	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_bowtieFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_buffer	src/probes/RequireAllZeroActivityProbe.cpp	/^void RequireAllZeroActivityProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RequireAllZeroActivityProbe
ioParam_buffer	src/probes/StatsProbe.cpp	/^void StatsProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::StatsProbe
ioParam_buffer	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^void ArborTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ArborTestProbe
ioParam_buffer	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^void BatchSweepTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::BatchSweepTestProbe
ioParam_buffer	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^void DatastoreDelayTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::DatastoreDelayTestProbe
ioParam_buffer	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^void GPUSystemTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::GPUSystemTestProbe
ioParam_buffer	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^void identicalBatchProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::identicalBatchProbe
ioParam_buffer	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^void InitWeightTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::InitWeightTestProbe
ioParam_buffer	tests/KernelTest/src/KernelTestProbe.cpp	/^void KernelTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::KernelTestProbe
ioParam_buffer	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^void LayerPhaseTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufV); }$/;"	f	class:PV::LayerPhaseTestProbe
ioParam_buffer	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^void ParameterSweepTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::ParameterSweepTestProbe
ioParam_buffer	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^void ReceiveFromPostProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::ReceiveFromPostProbe
ioParam_buffer	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^void RescaleLayerTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::RescaleLayerTestProbe
ioParam_buffer	tests/SegmentTest/src/AssertZerosProbe.cpp	/^void AssertZerosProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::AssertZerosProbe
ioParam_buffer	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^void ShrunkenPatchTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) { requireType(BufActivity); }$/;"	f	class:PV::ShrunkenPatchTestProbe
ioParam_buffer	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^void StochasticReleaseTestProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::StochasticReleaseTestProbe
ioParam_buffer	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^void TestNotAlwaysAllZerosProbe::ioParam_buffer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TestNotAlwaysAllZerosProbe
ioParam_burstDuration	src/layers/Retina.cpp	/^void Retina::ioParam_burstDuration(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_burstFreq	src/layers/Retina.cpp	/^void Retina::ioParam_burstFreq(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_channelCode	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_channelCode(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_channelCode	src/connections/GapConn.cpp	/^void GapConn::ioParam_channelCode(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GapConn
ioParam_channelCode	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_channelCode(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_channelCode	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^void HyPerConnDebugInitWeights::ioParam_channelCode(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConnDebugInitWeights
ioParam_channelCode	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^void KernelConnDebugInitWeights::ioParam_channelCode(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelConnDebugInitWeights
ioParam_checkpointIndexWidth	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointIndexWidth(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointRead	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_checkpointRead(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_checkpointWrite	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWrite(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteClockInterval	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteClockInterval($/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteClockUnit	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteClockUnit(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteDir	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteDir(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteStepInterval	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteStepInterval(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteTimeInterval	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteTimeInterval(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_checkpointWriteTriggerMode	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_checkpointWriteTriggerMode(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_classList	src/layers/FilenameParsingGroundTruthLayer.cpp	/^void FilenameParsingGroundTruthLayer::ioParam_classList(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
ioParam_classNamesFile	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_classNamesFile(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_classNamesFile	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_classNamesFile(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_clearGSynInterval	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_clearGSynInterval(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_cocircSelf	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_cocircSelf(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_coefficient	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_coefficient(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_coefficient	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^   virtual void ioParam_coefficient(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
ioParam_coefficient	src/probes/L0NormLCAProbe.hpp	/^   virtual void ioParam_coefficient(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L0NormLCAProbe
ioParam_coefficient	src/probes/L1NormLCAProbe.hpp	/^   virtual void ioParam_coefficient(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L1NormLCAProbe
ioParam_combineWeightFiles	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::ioParam_combineWeightFiles(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeightsParams
ioParam_combine_dW_with_W_flag	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_combine_dW_with_W_flag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_combine_dW_with_W_flag	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_combine_dW_with_W_flag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_combine_dW_with_W_flag	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_combine_dW_with_W_flag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_combine_dW_with_W_flag	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_combine_dW_with_W_flag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_connectOnlySameFeatures	src/weightinit/InitUniformWeightsParams.cpp	/^void InitUniformWeightsParams::ioParam_connectOnlySameFeatures(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformWeightsParams
ioParam_constantVal	tests/test_constant_input/src/TestImage.cpp	/^void TestImage::ioParam_constantVal(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TestImage
ioParam_contrast	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_contrast(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_contrast	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_contrast(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_contrastStrength	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_contrastStrength(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_contrastStrength	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_contrastStrength(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_convertRateToSpikeCount	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_convertRateToSpikeCount(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_convertRateToSpikeCount	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_convertRateToSpikeCount(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_copiedConn	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^void HyPerConnDebugInitWeights::ioParam_copiedConn(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConnDebugInitWeights
ioParam_copiedConn	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^void KernelConnDebugInitWeights::ioParam_copiedConn(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelConnDebugInitWeights
ioParam_correctValue	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^void AllConstantValueProbe::ioParam_correctValue(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AllConstantValueProbe
ioParam_dWMax	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_dWMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_dWMax	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_dWMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_dWMax	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_dWMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_dWMax	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_dWMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_dWMaxDecayFactor	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_dWMaxDecayFactor(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_dWMaxDecayInterval	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_dWMaxDecayInterval(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_dataFile	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^void ConvertFromTable::ioParam_dataFile(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:ConvertFromTable
ioParam_dataType	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_dataType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_dataType	src/layers/PoolingIndexLayer.cpp	/^void PoolingIndexLayer::ioParam_dataType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingIndexLayer
ioParam_defaultInitializeFromCheckpointFlag	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_defaultInitializeFromCheckpointFlag($/;"	f	class:PV::Checkpointer
ioParam_delay	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_delay(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_delay	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_delay(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_deleteOlderCheckpoints	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_deleteOlderCheckpoints(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_deltaGIB	src/layers/LIF.cpp	/^void LIF::ioParam_deltaGIB(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_deltaRadiusCurvature	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_deltaRadiusCurvature(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_deltaThetaMax	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_deltaThetaMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_deltaVth	src/layers/LIF.cpp	/^void LIF::ioParam_deltaVth(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_denominator	src/probes/QuotientColProbe.cpp	/^void QuotientColProbe::ioParam_denominator(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::QuotientColProbe
ioParam_detectionThreshold	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_detectionThreshold(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_detectionWait	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_detectionWait(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_detectionWait	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_detectionWait(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_displayCategoryIndexEnd	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_displayCategoryIndexEnd(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_displayCategoryIndexStart	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_displayCategoryIndexStart(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_displayCommand	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_displayCommand(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_displayCommand	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_displayCommand(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_displayPeriod	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_displayPeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_displayedCategories	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_displayedCategories(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_displayedCategories	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_displayedCategories(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_drawMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_drawMontage(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_drawMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_drawMontage(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_dt	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dt(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtAdaptController	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtAdaptController(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtAdaptFlag	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtAdaptFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtAdaptTriggerLayerName	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtAdaptTriggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtAdaptTriggerOffset	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtAdaptTriggerOffset(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtChangeMax	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtChangeMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtChangeMin	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtChangeMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtMinToleratedTimeScale	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtMinToleratedTimeScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtMinToleratedTimeScale	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_dtMinToleratedTimeScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_dtScaleMax	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtScaleMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtScaleMax2	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtScaleMax2(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_dtScaleMin	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_dtScaleMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_endStim	src/layers/Retina.cpp	/^void Retina::ioParam_endStim(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_endingTime	tests/LIFTest/src/LIFTestProbe.cpp	/^void LIFTestProbe::ioParam_endingTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIFTestProbe
ioParam_energyProbe	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_energyProbe(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_equilibriumTime	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^void LayerPhaseTestProbe::ioParam_equilibriumTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LayerPhaseTestProbe
ioParam_equilibriumValue	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^void LayerPhaseTestProbe::ioParam_equilibriumValue(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LayerPhaseTestProbe
ioParam_errScale	src/layers/ANNErrorLayer.cpp	/^void ANNErrorLayer::ioParam_errScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNErrorLayer
ioParam_errScale	src/layers/LabelErrorLayer.cpp	/^void LabelErrorLayer::ioParam_errScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LabelErrorLayer
ioParam_errorOnNotANumber	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_errorOnNotANumber(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_exitOnFailure	src/probes/RequireAllZeroActivityProbe.cpp	/^void RequireAllZeroActivityProbe::ioParam_exitOnFailure(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RequireAllZeroActivityProbe
ioParam_expectedMax	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^void BatchSweepTestProbe::ioParam_expectedMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BatchSweepTestProbe
ioParam_expectedMax	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^void ParameterSweepTestProbe::ioParam_expectedMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ParameterSweepTestProbe
ioParam_expectedMin	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^void BatchSweepTestProbe::ioParam_expectedMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BatchSweepTestProbe
ioParam_expectedMin	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^void ParameterSweepTestProbe::ioParam_expectedMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ParameterSweepTestProbe
ioParam_expectedSum	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^void BatchSweepTestProbe::ioParam_expectedSum(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BatchSweepTestProbe
ioParam_expectedSum	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^void ParameterSweepTestProbe::ioParam_expectedSum(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ParameterSweepTestProbe
ioParam_exponent	src/probes/L2NormProbe.cpp	/^void L2NormProbe::ioParam_exponent(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L2NormProbe
ioParam_fLoc	src/probes/PointProbe.cpp	/^void PointProbe::ioParam_fLoc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointProbe
ioParam_featureIdxs	src/layers/MaskLayer.cpp	/^void MaskLayer::ioParam_featureIdxs(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskLayer
ioParam_filenamesContainConnectionNames	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_filenamesContainConnectionNames(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_filenamesContainLayerNames	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_filenamesContainLayerNames(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_flankShift	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_flankShift(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_foregroundRate	src/layers/Retina.cpp	/^void Retina::ioParam_foregroundRate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_framesPerMap	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_framesPerMap(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_framesPerMap	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_framesPerMap(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_freqCollectTime	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::ioParam_freqCollectTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShuffleLayer
ioParam_freqFilename	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::ioParam_freqFilename(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShuffleLayer
ioParam_gpuGroupIdx	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_gpuGroupIdx(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_growthFactor	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_growthFactor(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_gtClassFalseValue	src/layers/FilenameParsingGroundTruthLayer.cpp	/^void FilenameParsingGroundTruthLayer::ioParam_gtClassFalseValue(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
ioParam_gtClassTrueValue	src/layers/FilenameParsingGroundTruthLayer.cpp	/^void FilenameParsingGroundTruthLayer::ioParam_gtClassTrueValue(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
ioParam_heatMapMaximum	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_heatMapMaximum(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_heatMapMaximum	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_heatMapMaximum(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_heatMapMontageDir	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_heatMapMontageDir(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_heatMapMontageDir	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_heatMapMontageDir(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_heatMapThreshold	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_heatMapThreshold(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_imageBlendCoeff	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_imageBlendCoeff(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_imageBlendCoeff	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_imageBlendCoeff(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_imageLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_imageLayer(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_imageLayer	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_imageLayer(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_imageLayer	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_imageLayer(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_imageLayerName	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^void MaskFromMemoryBuffer::ioParam_imageLayerName(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:MaskFromMemoryBuffer
ioParam_immediateExitOnFailure	src/probes/RequireAllZeroActivityProbe.cpp	/^void RequireAllZeroActivityProbe::ioParam_immediateExitOnFailure(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RequireAllZeroActivityProbe
ioParam_immediateWeightUpdate	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_immediateWeightUpdate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_imprintTimeThresh	src/connections/ImprintConn.cpp	/^void ImprintConn::ioParam_imprintTimeThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ImprintConn
ioParam_initWeightsFile	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::ioParam_initWeightsFile(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeightsParams
ioParam_initialWeightUpdateTime	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_initialWeightUpdateTime	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_initialWeightUpdateTime	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_initialWeightUpdateTime	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_initialWeightUpdateTime	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_initialWriteTime	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_initialWriteTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_initialWriteTime	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_initialWriteTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_initializeFromCheckpointDir	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_initializeFromCheckpointDir(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_initializeFromCheckpointFlag	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_initializeFromCheckpointFlag	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_initializeFromCheckpointFlag	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_initializeFromCheckpointFlag	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_initializeFromCheckpointFlag	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_initializeFromCheckpointFlag	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_initializeFromCheckpointFlag	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_initializeFromCheckpointFlag	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_inputLayerName	src/layers/FilenameParsingGroundTruthLayer.cpp	/^void FilenameParsingGroundTruthLayer::ioParam_inputLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
ioParam_inputMethod	src/layers/Segmentify.cpp	/^void Segmentify::ioParam_inputMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Segmentify
ioParam_inputPath	src/layers/ImageFromMemoryBuffer.hpp	/^   virtual void ioParam_inputPath(enum ParamsIOFlag ioFlag) { return; }$/;"	f	class:PV::ImageFromMemoryBuffer
ioParam_inputPath	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_inputPath(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_integrationTime	src/layers/LeakyIntegrator.cpp	/^void LeakyIntegrator::ioParam_integrationTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LeakyIntegrator
ioParam_internalMapHeight	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_internalMapHeight(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_internalMapHeight	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_internalMapHeight(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_internalMapWidth	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_internalMapWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_internalMapWidth	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_internalMapWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_interpolationMethod	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_interpolationMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_inverseFlag	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_inverseFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_invert	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^void InitGaborWeightsParams::ioParam_invert(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaborWeightsParams
ioParam_isBinary	src/layers/LabelErrorLayer.cpp	/^void LabelErrorLayer::ioParam_isBinary(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LabelErrorLayer
ioParam_isViscosity	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^void MomentumConnTestProbe::ioParam_isViscosity(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConnTestProbe
ioParam_keepKernelsSynchronized	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_keepKernelsSynchronized	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_keepKernelsSynchronized	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_keepKernelsSynchronized	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_keepKernelsSynchronized	src/connections/PlasticCloneConn.cpp	/^void PlasticCloneConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PlasticCloneConn
ioParam_keepKernelsSynchronized	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_keepKernelsSynchronized	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_kernelIndex	src/probes/KernelProbe.cpp	/^void KernelProbe::ioParam_kernelIndex(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParam_kneeSlope	src/probes/KneeTimeScaleProbe.cpp	/^void KneeTimeScaleProbe::ioParam_kneeSlope(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KneeTimeScaleProbe
ioParam_kneeThresh	src/probes/KneeTimeScaleProbe.cpp	/^void KneeTimeScaleProbe::ioParam_kneeThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KneeTimeScaleProbe
ioParam_lambda	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^void InitGaborWeightsParams::ioParam_lambda(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaborWeightsParams
ioParam_lastCheckpointDir	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_lastCheckpointDir(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_logSlope	src/probes/LogTimeScaleProbe.cpp	/^void LogTimeScaleProbe::ioParam_logSlope(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LogTimeScaleProbe
ioParam_logThresh	src/probes/LogTimeScaleProbe.cpp	/^void LogTimeScaleProbe::ioParam_logThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LogTimeScaleProbe
ioParam_maskFeatureIdx	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_maskFeatureIdx(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_maskLayerName	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_maskLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_maskLayerName	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_maskLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_maskLayerName	src/layers/MaskLayer.cpp	/^void MaskLayer::ioParam_maskLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskLayer
ioParam_maskLayerName	src/probes/AbstractNormProbe.cpp	/^void AbstractNormProbe::ioParam_maskLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AbstractNormProbe
ioParam_maskMethod	src/layers/MaskLayer.cpp	/^void MaskLayer::ioParam_maskMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskLayer
ioParam_maskMethod	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^void MaskTestLayer::ioParam_maskMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskTestLayer
ioParam_maxDetections	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_maxDetections(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_maxRectangleMemory	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_maxRectangleMemory(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_maxRectangleMemory	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_maxRectangleMemory(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_maxV	src/initv/UniformRandomV.cpp	/^void UniformRandomV::ioParam_maxV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::UniformRandomV
ioParam_meanV	src/initv/GaussianRandomV.cpp	/^void GaussianRandomV::ioParam_meanV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GaussianRandomV
ioParam_message	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_message(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_method	src/layers/LIF.cpp	/^void LIF::ioParam_method(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_minBlobSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_minBlobSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_minBlobSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_minBlobSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_minBoundingBoxHeight	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_minBoundingBoxHeight(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_minBoundingBoxHeight	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_minBoundingBoxHeight(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_minBoundingBoxWidth	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_minBoundingBoxWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_minBoundingBoxWidth	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_minBoundingBoxWidth(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_minL2NormTolerated	src/normalizers/NormalizeL2.cpp	/^void NormalizeL2::ioParam_minL2NormTolerated(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeL2
ioParam_minL3NormTolerated	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^void NormalizeL3::ioParam_minL3NormTolerated(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeL3
ioParam_minMaxTolerated	src/normalizers/NormalizeMax.cpp	/^void NormalizeMax::ioParam_minMaxTolerated(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMax
ioParam_minNNZ	src/weightinit/InitUniformRandomWeightsParams.cpp	/^void InitUniformRandomWeightsParams::ioParam_minNNZ(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformRandomWeightsParams
ioParam_minSumTolerated	src/normalizers/NormalizeContrastZeroMean.cpp	/^void NormalizeContrastZeroMean::ioParam_minSumTolerated(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeContrastZeroMean
ioParam_minSumTolerated	src/normalizers/NormalizeSum.cpp	/^void NormalizeSum::ioParam_minSumTolerated(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeSum
ioParam_minV	src/initv/UniformRandomV.cpp	/^void UniformRandomV::ioParam_minV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::UniformRandomV
ioParam_mirrorBCflag	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_mirrorBCflag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_momentumDecay	src/connections/MomentumConn.cpp	/^void MomentumConn::ioParam_momentumDecay(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConn
ioParam_momentumMethod	src/connections/MomentumConn.cpp	/^void MomentumConn::ioParam_momentumMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConn
ioParam_momentumTau	src/connections/MomentumConn.cpp	/^void MomentumConn::ioParam_momentumTau(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConn
ioParam_nBatch	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_nBatch(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_needPostIndexLayer	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_needPostIndexLayer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_nf	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_nf(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_nfp	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_nfp	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_nfp	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_nfp	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_nfp	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_nfp	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_nfp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_nnzThreshold	src/probes/L0NormProbe.cpp	/^void L0NormProbe::ioParam_nnzThreshold(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L0NormProbe
ioParam_nnzThreshold	src/probes/StatsProbe.cpp	/^void StatsProbe::ioParam_nnzThreshold(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::StatsProbe
ioParam_noiseAmpE	src/layers/LIF.cpp	/^void LIF::ioParam_noiseAmpE(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_noiseAmpI	src/layers/LIF.cpp	/^void LIF::ioParam_noiseAmpI(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_noiseAmpIB	src/layers/LIF.cpp	/^void LIF::ioParam_noiseAmpIB(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_noiseFreqE	src/layers/LIF.cpp	/^void LIF::ioParam_noiseFreqE(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_noiseFreqI	src/layers/LIF.cpp	/^void LIF::ioParam_noiseFreqI(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_noiseFreqIB	src/layers/LIF.cpp	/^void LIF::ioParam_noiseFreqIB(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_nonnegativeConstraintFlag	src/normalizers/NormalizeMultiply.cpp	/^void NormalizeMultiply::ioParam_nonnegativeConstraintFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParam_normalDist	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_normalDist(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_normalizeArborsIndividually	src/normalizers/NormalizeBase.cpp	/^void NormalizeBase::ioParam_normalizeArborsIndividually(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeBase
ioParam_normalizeArborsIndividually	src/normalizers/NormalizeGroup.cpp	/^void NormalizeGroup::ioParam_normalizeArborsIndividually(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::NormalizeGroup
ioParam_normalizeDw	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_normalizeDw(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_normalizeDw	src/connections/PlasticCloneConn.cpp	/^void PlasticCloneConn::ioParam_normalizeDw(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PlasticCloneConn
ioParam_normalizeFromPostPerspective	src/normalizers/NormalizeContrastZeroMean.cpp	/^void NormalizeContrastZeroMean::ioParam_normalizeFromPostPerspective(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeContrastZeroMean
ioParam_normalizeFromPostPerspective	src/normalizers/NormalizeGap.cpp	/^void NormalizeGap::ioParam_normalizeFromPostPerspective(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeGap
ioParam_normalizeFromPostPerspective	src/normalizers/NormalizeMultiply.cpp	/^void NormalizeMultiply::ioParam_normalizeFromPostPerspective(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParam_normalizeGroupName	src/normalizers/NormalizeGroup.cpp	/^void NormalizeGroup::ioParam_normalizeGroupName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeGroup
ioParam_normalizeInput	src/layers/LCALIFLayer.cpp	/^void LCALIFLayer::ioParam_normalizeInput(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LCALIFLayer
ioParam_normalizeLuminanceFlag	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_normalizeLuminanceFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_normalizeMethod	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_normalizeMethod	src/connections/GapConn.cpp	/^void GapConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GapConn
ioParam_normalizeMethod	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_normalizeMethod	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) { normalizer = NULL; }$/;"	f	class:PV::IdentConn
ioParam_normalizeMethod	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_normalizeMethod	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_normalizeMethod	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_normalizeOnInitialize	src/normalizers/NormalizeBase.cpp	/^void NormalizeBase::ioParam_normalizeOnInitialize(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeBase
ioParam_normalizeOnInitialize	src/normalizers/NormalizeGroup.cpp	/^void NormalizeGroup::ioParam_normalizeOnInitialize(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::NormalizeGroup
ioParam_normalizeOnWeightUpdate	src/normalizers/NormalizeBase.cpp	/^void NormalizeBase::ioParam_normalizeOnWeightUpdate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeBase
ioParam_normalizeOnWeightUpdate	src/normalizers/NormalizeGroup.cpp	/^void NormalizeGroup::ioParam_normalizeOnWeightUpdate(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::NormalizeGroup
ioParam_normalizeStdDev	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_normalizeStdDev(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_normalize_cutoff	src/normalizers/NormalizeMultiply.cpp	/^void NormalizeMultiply::ioParam_normalize_cutoff(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParam_numAxonalArbors	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_numAxonalArbors	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_numAxonalArbors	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_numAxonalArbors	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_numAxonalArbors	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::TransposeConn
ioParam_numAxonalArbors	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::TransposePoolingConn
ioParam_numCheckpointsKept	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_numCheckpointsKept(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParam_numFlanks	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_numFlanks(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_numImagesToAverage	src/layers/RunningAverageLayer.cpp	/^void RunningAverageLayer::ioParam_numImagesToAverage(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RunningAverageLayer
ioParam_numOrientationsPost	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_numOrientationsPost(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_numOrientationsPost	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_numOrientationsPost(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_numOrientationsPre	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_numOrientationsPre(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_numOrientationsPre	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_numOrientationsPre(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_numWeightFiles	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::ioParam_numWeightFiles(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeightsParams
ioParam_numerator	src/probes/QuotientColProbe.cpp	/^void QuotientColProbe::ioParam_numerator(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::QuotientColProbe
ioParam_nx	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_nx(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_nxScale	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_nxScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_nxp	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_nxp	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_nxp	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_nxp	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_nxp	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_nxp	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_nxp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_nxpShrunken	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_nxpShrunken(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_nxpShrunken	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^void ShrunkenPatchTestProbe::ioParam_nxpShrunken(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShrunkenPatchTestProbe
ioParam_ny	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_ny(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_nyScale	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_nyScale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_nyp	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_nyp	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_nyp	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_nyp	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_nyp	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_nyp	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_nyp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_nypShrunken	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_nypShrunken(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_nypShrunken	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^void ShrunkenPatchTestProbe::ioParam_nypShrunken(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShrunkenPatchTestProbe
ioParam_offsetAnchor	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_offsetAnchor(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_offsets	src/layers/InputLayer.cpp	/^int InputLayer::ioParam_offsets(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_originalConnName	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_originalConnName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_originalConnName	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_originalConnName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_originalConnName	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_originalConnName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_originalConnName	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_originalConnName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_originalLayerName	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_originalLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_originalLayerName	src/layers/CloneVLayer.cpp	/^void CloneVLayer::ioParam_originalLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneVLayer
ioParam_originalLayerName	src/layers/SegmentLayer.cpp	/^void SegmentLayer::ioParam_originalLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SegmentLayer
ioParam_originalLayerName	src/layers/Segmentify.cpp	/^void Segmentify::ioParam_originalLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Segmentify
ioParam_originalLayerName	src/layers/WTALayer.cpp	/^void WTALayer::ioParam_originalLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::WTALayer
ioParam_outputMethod	src/layers/Segmentify.cpp	/^void Segmentify::ioParam_outputMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Segmentify
ioParam_outputPatchIndices	src/probes/KernelProbe.cpp	/^void KernelProbe::ioParam_outputPatchIndices(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParam_outputPath	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_outputPath(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_outputPeriod	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_outputPeriod(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_outputPlasticIncr	src/probes/KernelProbe.cpp	/^void KernelProbe::ioParam_outputPlasticIncr(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParam_outputWeights	src/probes/KernelProbe.cpp	/^void KernelProbe::ioParam_outputWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParam_padValue	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_padValue(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_patchSize	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_patchSize(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_phase	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_phase(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_phi	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^void InitGaborWeightsParams::ioParam_phi(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaborWeightsParams
ioParam_plasticityFlag	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_plasticityFlag	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_plasticityFlag	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_plasticityFlag	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_plasticityFlag	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_plasticityFlag	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_plasticityFlag	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_plasticityFlag	tests/LIFTest/src/AverageRateConn.cpp	/^void AverageRateConn::ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AverageRateConn
ioParam_postIndexLayerName	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_postIndexLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_postLayerName	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_postLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_postLayerName	src/connections/FeedbackConn.cpp	/^void FeedbackConn::ioParam_postLayerName(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::FeedbackConn
ioParam_preLayerName	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_preLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_preLayerName	src/connections/FeedbackConn.cpp	/^void FeedbackConn::ioParam_preLayerName(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::FeedbackConn
ioParam_prevInfluence	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_prevInfluence(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_prevInfluence	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_prevInfluence(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_prevLeakTau	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_prevLeakTau(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_prevLeakTau	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_prevLeakTau(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_printParamsFilename	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_printParamsFilename(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_probability	src/layers/DropoutLayer.cpp	/^void DropoutLayer::ioParam_probability(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::DropoutLayer
ioParam_probeOutputFile	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_probeOutputFile(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_progressInterval	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_progressInterval(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_pvpatchAccumulateType	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_pvpatchAccumulateType	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_pvpatchAccumulateType	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_pvpatchAccumulateType	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_rMax	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_rMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_rMin	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_rMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_rMinX	src/normalizers/NormalizeMultiply.cpp	/^void NormalizeMultiply::ioParam_rMinX(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParam_rMinY	src/normalizers/NormalizeMultiply.cpp	/^void NormalizeMultiply::ioParam_rMinY(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParam_randomSeed	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_randomSeed(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_randomSeed	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_randomSeed(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_readFreqFromFile	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::ioParam_readFreqFromFile(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShuffleLayer
ioParam_receiveGpu	src/connections/BaseConnection.cpp	/^void BaseConnection::ioParam_receiveGpu(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParam_receiveGpu	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_receiveGpu(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_receiveGpu	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_receiveGpu(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_reconLayer	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::ioParam_reconLayer(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParam_reconLayer	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^void LocalizationProbe::ioParam_reconLayer(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParam_reductionInterval	src/probes/ColumnEnergyProbe.cpp	/^void ColumnEnergyProbe::ioParam_reductionInterval(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ColumnEnergyProbe
ioParam_refractoryPeriod	src/layers/Retina.cpp	/^void Retina::ioParam_refractoryPeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_repFeatureNum	src/layers/BackgroundLayer.cpp	/^void BackgroundLayer::ioParam_repFeatureNum(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BackgroundLayer
ioParam_rescaleMethod	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_rescaleMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_resetToStartOnLoop	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_resetToStartOnLoop(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_rotate	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_rotate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_scale	src/connections/RescaleConn.cpp	/^void RescaleConn::ioParam_scale(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleConn
ioParam_segmentLayerName	src/layers/Segmentify.cpp	/^void Segmentify::ioParam_segmentLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Segmentify
ioParam_segmentMethod	src/layers/SegmentLayer.cpp	/^void SegmentLayer::ioParam_segmentMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SegmentLayer
ioParam_selfFlag	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_selfFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_selfFlag	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_selfFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_selfInteract	src/layers/HyPerLCALayer.cpp	/^void HyPerLCALayer::ioParam_selfInteract(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLCALayer
ioParam_selfInteract	src/layers/ISTALayer.cpp	/^void ISTALayer::ioParam_selfInteract(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ISTALayer
ioParam_sharedWeights	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_sharedWeights	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_sharedWeights	src/connections/GapConn.cpp	/^void GapConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GapConn
ioParam_sharedWeights	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_sharedWeights	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_sharedWeights	src/connections/ImprintConn.cpp	/^void ImprintConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ImprintConn
ioParam_sharedWeights	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_sharedWeights	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_sharedWeights	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_sharedWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^void KernelConnDebugInitWeights::ioParam_sharedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelConnDebugInitWeights
ioParam_shrinkPatches	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_shrinkPatches	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_shrinkPatches	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_shrinkPatches	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_shrinkPatches	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_shrinkPatchesThresh	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_shrinkPatchesThresh(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_shuffleMethod	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::ioParam_shuffleMethod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShuffleLayer
ioParam_sigma	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_sigma(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_sigmaCocirc	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_sigmaCocirc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_sigmaKurve	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::ioParam_sigmaKurve(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParam_sigmaV	src/initv/GaussianRandomV.cpp	/^void GaussianRandomV::ioParam_sigmaV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GaussianRandomV
ioParam_skip_frame_index	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_skip_frame_index(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_slidingAverageSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_slidingAverageSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_slidingAverageSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_slidingAverageSize(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_slopeNegInf	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_slopeNegInf(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_slopePosInf	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_slopePosInf(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_sparseFraction	src/weightinit/InitUniformRandomWeightsParams.cpp	/^void InitUniformRandomWeightsParams::ioParam_sparseFraction(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformRandomWeightsParams
ioParam_sparseLayer	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_sparseLayer(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_spikingFlag	src/layers/Retina.cpp	/^void Retina::ioParam_spikingFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParam_startTime	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_startTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_start_frame_index	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_start_frame_index(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_stopTime	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_stopTime(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_strength	src/normalizers/NormalizeBase.cpp	/^void NormalizeBase::ioParam_strength(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeBase
ioParam_strength	src/normalizers/NormalizeGroup.cpp	/^void NormalizeGroup::ioParam_strength(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::NormalizeGroup
ioParam_strength	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_strength(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_suppressNonplasticCheckpoints	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParam_suppressNonplasticCheckpoints($/;"	f	class:PV::Checkpointer
ioParam_targetMax	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_targetMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_targetMean	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_targetMean(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_targetMin	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_targetMin(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_targetName	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_targetName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_targetName	src/probes/BaseConnectionProbe.cpp	/^void BaseConnectionProbe::ioParam_targetName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnectionProbe
ioParam_targetName	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_targetName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_targetName	src/probes/ColProbe.cpp	/^void ColProbe::ioParam_targetName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ColProbe
ioParam_targetName	src/probes/LayerProbe.cpp	/^void LayerProbe::ioParam_targetName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LayerProbe
ioParam_targetRate	src/layers/LCALIFLayer.cpp	/^void LCALIFLayer::ioParam_targetRate(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LCALIFLayer
ioParam_targetStd	src/layers/RescaleLayer.cpp	/^void RescaleLayer::ioParam_targetStd(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParam_tau	src/layers/LIF.cpp	/^void LIF::ioParam_tau(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_tauE	src/layers/LIF.cpp	/^void LIF::ioParam_tauE(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_tauFactor	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_tauFactor(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_tauI	src/layers/LIF.cpp	/^void LIF::ioParam_tauI(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_tauIB	src/layers/LIF.cpp	/^void LIF::ioParam_tauIB(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_tauTHR	src/layers/LCALIFLayer.cpp	/^void LCALIFLayer::ioParam_tauTHR(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LCALIFLayer
ioParam_tauVth	src/layers/LIF.cpp	/^void LIF::ioParam_tauVth(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParam_textOutputFlag	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_textOutputFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_textOutputFlag	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^void HyPerConnCheckpointerTestProbe::ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:HyPerConnCheckpointerTestProbe
ioParam_textOutputFlag	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^void MomentumConnSimpleCheckpointerTestProbe::ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
ioParam_textOutputFlag	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^void MomentumConnViscosityCheckpointerTestProbe::ioParam_textOutputFlag($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
ioParam_textOutputFlag	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^void PoolingConnCheckpointerTestProbe::ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:PoolingConnCheckpointerTestProbe
ioParam_textOutputFlag	tests/TriggerTest/src/TriggerTestLayerProbe.hpp	/^   virtual void ioParam_textOutputFlag(enum ParamsIOFlag ioFlag) {}$/;"	f	class:PV::TriggerTestLayerProbe
ioParam_thetaMax	src/weightinit/InitGauss2DWeightsParams.cpp	/^void InitGauss2DWeightsParams::ioParam_thetaMax(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParam_threshold	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::ioParam_threshold(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParam_threshold	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^void LocalizationBBFindProbe::ioParam_threshold(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParam_timeConstantTau	src/layers/HyPerLCALayer.cpp	/^void HyPerLCALayer::ioParam_timeConstantTau(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLCALayer
ioParam_timeConstantTau	src/layers/ISTALayer.cpp	/^void ISTALayer::ioParam_timeConstantTau(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ISTALayer
ioParam_tolerance	tests/LIFTest/src/LIFTestProbe.cpp	/^void LIFTestProbe::ioParam_tolerance(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIFTestProbe
ioParam_tolerance	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^void ReceiveFromPostProbe::ioParam_tolerance(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ReceiveFromPostProbe
ioParam_triggerBehavior	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_triggerBehavior(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_triggerFlag	src/connections/CloneConn.hpp	/^   ioParam_triggerFlag() { \/* deprecated as of Aug 17, 2015.  See HyPerConn::ioParam_triggerFlag. *\/$/;"	f	class:PV::CloneConn
ioParam_triggerFlag	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_triggerFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_triggerFlag	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_triggerFlag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_triggerLayerName	src/connections/CloneConn.hpp	/^   virtual void ioParam_triggerLayerName() {$/;"	f	class:PV::CloneConn
ioParam_triggerLayerName	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_triggerLayerName	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_triggerLayerName	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_triggerLayerName	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_triggerLayerName	src/layers/ConstantLayer.cpp	/^void ConstantLayer::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ConstantLayer
ioParam_triggerLayerName	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_triggerLayerName	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_triggerLayerName	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_triggerOffset	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_triggerOffset(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_triggerOffset	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_triggerOffset(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_triggerOffset	src/probes/BaseProbe.cpp	/^void BaseProbe::ioParam_triggerOffset(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParam_triggerResetLayerName	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_triggerResetLayerName(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_updateGSynFromPostPerspective	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_updateGSynFromPostPerspective(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_updateGSynFromPostPerspective	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_updateGSynFromPostPerspective(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_updateGpu	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_updateGpu(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_useAdaptMethodExp1stOrder	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_useAdaptMethodExp1stOrder(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_useInputBCflag	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_useInputBCflag(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_useListOfArborFiles	src/weightinit/InitWeightsParams.cpp	/^void InitWeightsParams::ioParam_useListOfArborFiles(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeightsParams
ioParam_useMask	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_useMask(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_useMask	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_useMask(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_valueBC	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_valueBC(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_valueDescription	src/probes/QuotientColProbe.cpp	/^void QuotientColProbe::ioParam_valueDescription(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::QuotientColProbe
ioParam_valueV	src/initv/ConstantV.cpp	/^void ConstantV::ioParam_valueV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ConstantV
ioParam_valueV	src/initv/ZeroV.cpp	/^void ZeroV::ioParam_valueV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ZeroV
ioParam_verifyWrites	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_verifyWrites(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_verticesA	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_verticesA(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_verticesV	src/layers/ANNLayer.cpp	/^void ANNLayer::ioParam_verticesV(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParam_wGaussMean	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^void InitGaussianRandomWeightsParams::ioParam_wGaussMean(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaussianRandomWeightsParams
ioParam_wGaussStdev	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^void InitGaussianRandomWeightsParams::ioParam_wGaussStdev(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaussianRandomWeightsParams
ioParam_wMaxInit	src/weightinit/InitUniformRandomWeightsParams.cpp	/^void InitUniformRandomWeightsParams::ioParam_wMaxInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformRandomWeightsParams
ioParam_wMinInit	src/weightinit/InitUniformRandomWeightsParams.cpp	/^void InitUniformRandomWeightsParams::ioParam_wMinInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformRandomWeightsParams
ioParam_weightInit	src/weightinit/InitOneToOneWeightsParams.cpp	/^void InitOneToOneWeightsParams::ioParam_weightInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitOneToOneWeightsParams
ioParam_weightInit	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^void InitOneToOneWeightsWithDelaysParams::ioParam_weightInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
ioParam_weightInit	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^void InitSpreadOverArborsWeightsParams::ioParam_weightInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
ioParam_weightInit	src/weightinit/InitUniformWeightsParams.cpp	/^void InitUniformWeightsParams::ioParam_weightInit(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformWeightsParams
ioParam_weightInitType	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_weightInitType	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_weightInitType	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_weightInitType	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_weightInitType	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_weightInitType	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_weightInitType	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_weightInitType(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_weightSparsity	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_weightSparsity(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_weightUpdatePeriod	src/connections/CopyConn.cpp	/^void CopyConn::ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParam_weightUpdatePeriod	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_weightUpdatePeriod	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_weightUpdatePeriod	src/connections/TransposeConn.cpp	/^void TransposeConn::ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParam_weightUpdatePeriod	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_writeCompressedCheckpoints	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_writeCompressedCheckpoints(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_writeCompressedCheckpoints	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_writeCompressedCheckpoints(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_writeCompressedCheckpoints	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_writeCompressedCheckpoints(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_writeCompressedCheckpoints	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_writeCompressedCheckpoints(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_writeCompressedWeights	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_writeCompressedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_writeCompressedWeights	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_writeCompressedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_writeCompressedWeights	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_writeCompressedWeights(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_writeFrameToTimestamp	src/layers/InputLayer.cpp	/^void InputLayer::ioParam_writeFrameToTimestamp(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParam_writeProgressToErr	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_writeProgressToErr(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_writeSparseValues	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_writeSparseValues(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_writeStep	src/connections/CloneConn.cpp	/^void CloneConn::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParam_writeStep	src/connections/HyPerConn.cpp	/^void HyPerConn::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParam_writeStep	src/connections/IdentConn.cpp	/^void IdentConn::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParam_writeStep	src/connections/PoolingConn.cpp	/^void PoolingConn::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParam_writeStep	src/connections/TransposePoolingConn.cpp	/^void TransposePoolingConn::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParam_writeStep	src/layers/HyPerLayer.cpp	/^void HyPerLayer::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParam_writeStep	src/probes/PointLIFProbe.cpp	/^void PointLIFProbe::ioParam_writeStep(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointLIFProbe
ioParam_writeTimeScaleFieldnames	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_writeTimeScaleFieldnames(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_writeTimeScaleFieldnames	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_writeTimeScaleFieldnames(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_writeTimeScales	src/probes/AdaptiveTimeScaleProbe.cpp	/^void AdaptiveTimeScaleProbe::ioParam_writeTimeScales(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParam_writeTimescales	src/columns/HyPerCol.cpp	/^void HyPerCol::ioParam_writeTimescales(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParam_xLoc	src/probes/PointProbe.cpp	/^void PointProbe::ioParam_xLoc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointProbe
ioParam_yLoc	src/probes/PointProbe.cpp	/^void PointProbe::ioParam_yLoc(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointProbe
ioParam_zeroDCR	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_zeroDCR(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParam_zeroNeg	src/layers/BinningLayer.cpp	/^void BinningLayer::ioParam_zeroNeg(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParams	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParams(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParams	src/columns/HyPerCol.cpp	/^int HyPerCol::ioParams(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParams	src/connections/BaseConnection.cpp	/^int BaseConnection::ioParams(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParams	src/layers/HyPerLayer.cpp	/^int HyPerLayer::ioParams(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParams	src/probes/BaseProbe.cpp	/^int BaseProbe::ioParams(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParamsFillGroup	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapLayer
ioParamsFillGroup	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:BBFindConfRemapProbe
ioParamsFillGroup	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:ConvertFromTable
ioParamsFillGroup	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^int LocalizationBBFindProbe::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationBBFindProbe
ioParamsFillGroup	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:LocalizationProbe
ioParamsFillGroup	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^int MaskFromMemoryBuffer::ioParamsFillGroup(enum PV::ParamsIOFlag ioFlag) {$/;"	f	class:MaskFromMemoryBuffer
ioParamsFillGroup	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::ioParamsFillGroup(enum ParamsIOFlag ioFlag, PVParams *params) {$/;"	f	class:PV::Checkpointer
ioParamsFillGroup	src/columns/HyPerCol.cpp	/^int HyPerCol::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParamsFillGroup	src/connections/BaseConnection.cpp	/^int BaseConnection::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseConnection
ioParamsFillGroup	src/connections/CloneConn.cpp	/^int CloneConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneConn
ioParamsFillGroup	src/connections/CopyConn.cpp	/^int CopyConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CopyConn
ioParamsFillGroup	src/connections/HyPerConn.cpp	/^int HyPerConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConn
ioParamsFillGroup	src/connections/IdentConn.cpp	/^int IdentConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::IdentConn
ioParamsFillGroup	src/connections/ImprintConn.cpp	/^int ImprintConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ImprintConn
ioParamsFillGroup	src/connections/MomentumConn.cpp	/^int MomentumConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConn
ioParamsFillGroup	src/connections/PlasticCloneConn.cpp	/^int PlasticCloneConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PlasticCloneConn
ioParamsFillGroup	src/connections/PoolingConn.cpp	/^int PoolingConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingConn
ioParamsFillGroup	src/connections/RescaleConn.cpp	/^int RescaleConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleConn
ioParamsFillGroup	src/connections/TransposeConn.cpp	/^int TransposeConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposeConn
ioParamsFillGroup	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TransposePoolingConn
ioParamsFillGroup	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::privateTransposeConn
ioParamsFillGroup	src/initv/BaseInitV.cpp	/^int BaseInitV::ioParamsFillGroup(enum ParamsIOFlag ioFlag) { return PV_SUCCESS; }$/;"	f	class:PV::BaseInitV
ioParamsFillGroup	src/initv/ConstantV.cpp	/^int ConstantV::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ConstantV
ioParamsFillGroup	src/initv/GaussianRandomV.cpp	/^int GaussianRandomV::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GaussianRandomV
ioParamsFillGroup	src/initv/InitVFromFile.cpp	/^int InitVFromFile::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitVFromFile
ioParamsFillGroup	src/initv/UniformRandomV.cpp	/^int UniformRandomV::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::UniformRandomV
ioParamsFillGroup	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNErrorLayer
ioParamsFillGroup	src/layers/ANNLayer.cpp	/^int ANNLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ANNLayer
ioParamsFillGroup	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BackgroundLayer
ioParamsFillGroup	src/layers/BinningLayer.cpp	/^int BinningLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BinningLayer
ioParamsFillGroup	src/layers/CloneVLayer.cpp	/^int CloneVLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::CloneVLayer
ioParamsFillGroup	src/layers/DropoutLayer.cpp	/^int DropoutLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::DropoutLayer
ioParamsFillGroup	src/layers/FilenameParsingGroundTruthLayer.cpp	/^int FilenameParsingGroundTruthLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
ioParamsFillGroup	src/layers/GapLayer.cpp	/^int GapLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::GapLayer
ioParamsFillGroup	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLCALayer
ioParamsFillGroup	src/layers/HyPerLayer.cpp	/^int HyPerLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerLayer
ioParamsFillGroup	src/layers/ISTALayer.cpp	/^int ISTALayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ISTALayer
ioParamsFillGroup	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ImageFromMemoryBuffer
ioParamsFillGroup	src/layers/InputLayer.cpp	/^int InputLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InputLayer
ioParamsFillGroup	src/layers/KmeansLayer.cpp	/^int KmeansLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KmeansLayer
ioParamsFillGroup	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LCALIFLayer
ioParamsFillGroup	src/layers/LIF.cpp	/^int LIF::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIF
ioParamsFillGroup	src/layers/LabelErrorLayer.cpp	/^int LabelErrorLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LabelErrorLayer
ioParamsFillGroup	src/layers/LeakyIntegrator.cpp	/^int LeakyIntegrator::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LeakyIntegrator
ioParamsFillGroup	src/layers/MaskLayer.cpp	/^int MaskLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskLayer
ioParamsFillGroup	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumLCALayer
ioParamsFillGroup	src/layers/PoolingIndexLayer.cpp	/^int PoolingIndexLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PoolingIndexLayer
ioParamsFillGroup	src/layers/RescaleLayer.cpp	/^int RescaleLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RescaleLayer
ioParamsFillGroup	src/layers/Retina.cpp	/^int Retina::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Retina
ioParamsFillGroup	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RunningAverageLayer
ioParamsFillGroup	src/layers/SegmentLayer.cpp	/^int SegmentLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SegmentLayer
ioParamsFillGroup	src/layers/Segmentify.cpp	/^int Segmentify::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::Segmentify
ioParamsFillGroup	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShuffleLayer
ioParamsFillGroup	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::SigmoidLayer
ioParamsFillGroup	src/layers/WTALayer.cpp	/^int WTALayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::WTALayer
ioParamsFillGroup	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeBase
ioParamsFillGroup	src/normalizers/NormalizeContrastZeroMean.cpp	/^int NormalizeContrastZeroMean::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeContrastZeroMean
ioParamsFillGroup	src/normalizers/NormalizeGroup.cpp	/^int NormalizeGroup::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeGroup
ioParamsFillGroup	src/normalizers/NormalizeL2.cpp	/^int NormalizeL2::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeL2
ioParamsFillGroup	src/normalizers/NormalizeMax.cpp	/^int NormalizeMax::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMax
ioParamsFillGroup	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeMultiply
ioParamsFillGroup	src/normalizers/NormalizeSum.cpp	/^int NormalizeSum::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeSum
ioParamsFillGroup	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AbstractNormProbe
ioParamsFillGroup	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
ioParamsFillGroup	src/probes/BaseProbe.cpp	/^int BaseProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BaseProbe
ioParamsFillGroup	src/probes/ColProbe.cpp	/^int ColProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ColProbe
ioParamsFillGroup	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ColumnEnergyProbe
ioParamsFillGroup	src/probes/FirmThresholdCostFnProbe.cpp	/^int FirmThresholdCostFnProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::FirmThresholdCostFnProbe
ioParamsFillGroup	src/probes/KernelProbe.cpp	/^int KernelProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelProbe
ioParamsFillGroup	src/probes/KneeTimeScaleProbe.cpp	/^int KneeTimeScaleProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KneeTimeScaleProbe
ioParamsFillGroup	src/probes/L0NormProbe.cpp	/^int L0NormProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L0NormProbe
ioParamsFillGroup	src/probes/L2NormProbe.cpp	/^int L2NormProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::L2NormProbe
ioParamsFillGroup	src/probes/LogTimeScaleProbe.cpp	/^int LogTimeScaleProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LogTimeScaleProbe
ioParamsFillGroup	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointLIFProbe
ioParamsFillGroup	src/probes/PointProbe.cpp	/^int PointProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::PointProbe
ioParamsFillGroup	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::QuotientColProbe
ioParamsFillGroup	src/probes/RequireAllZeroActivityProbe.cpp	/^int RequireAllZeroActivityProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::RequireAllZeroActivityProbe
ioParamsFillGroup	src/probes/StatsProbe.cpp	/^int StatsProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::StatsProbe
ioParamsFillGroup	src/weightinit/InitCocircWeightsParams.cpp	/^int InitCocircWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitCocircWeightsParams
ioParamsFillGroup	src/weightinit/InitGauss2DWeightsParams.cpp	/^int InitGauss2DWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGauss2DWeightsParams
ioParamsFillGroup	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^int InitGaussianRandomWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaussianRandomWeightsParams
ioParamsFillGroup	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^int InitMaxPoolingWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitMaxPoolingWeightsParams
ioParamsFillGroup	src/weightinit/InitOneToOneWeightsParams.cpp	/^int InitOneToOneWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitOneToOneWeightsParams
ioParamsFillGroup	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^int InitOneToOneWeightsWithDelaysParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
ioParamsFillGroup	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^int InitSpreadOverArborsWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
ioParamsFillGroup	src/weightinit/InitUniformRandomWeightsParams.cpp	/^int InitUniformRandomWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformRandomWeightsParams
ioParamsFillGroup	src/weightinit/InitUniformWeightsParams.cpp	/^int InitUniformWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitUniformWeightsParams
ioParamsFillGroup	src/weightinit/InitWeights.cpp	/^int InitWeights::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeights
ioParamsFillGroup	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitWeightsParams
ioParamsFillGroup	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^int BatchSweepTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::BatchSweepTestProbe
ioParamsFillGroup	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^int AllConstantValueProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AllConstantValueProbe
ioParamsFillGroup	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerConnDebugInitWeights
ioParamsFillGroup	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^int InitGaborWeightsParams::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::InitGaborWeightsParams
ioParamsFillGroup	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::KernelConnDebugInitWeights
ioParamsFillGroup	tests/LIFTest/src/AverageRateConn.cpp	/^int AverageRateConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::AverageRateConn
ioParamsFillGroup	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LIFTestProbe
ioParamsFillGroup	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^int LayerPhaseTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::LayerPhaseTestProbe
ioParamsFillGroup	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^int MaskTestLayer::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MaskTestLayer
ioParamsFillGroup	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^int MomentumConnTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::MomentumConnTestProbe
ioParamsFillGroup	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^int NormalizeL3::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::NormalizeL3
ioParamsFillGroup	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^int ParameterSweepTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ParameterSweepTestProbe
ioParamsFillGroup	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^int ReceiveFromPostProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ReceiveFromPostProbe
ioParamsFillGroup	tests/Shared/VaryingHyPerConn.cpp	/^int VaryingHyPerConn::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::VaryingHyPerConn
ioParamsFillGroup	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^int ShrunkenPatchTestProbe::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::ShrunkenPatchTestProbe
ioParamsFillGroup	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::ioParamsFillGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::TestImage
ioParamsFinishGroup	src/columns/HyPerCol.cpp	/^int HyPerCol::ioParamsFinishGroup(enum ParamsIOFlag ioFlag) {$/;"	f	class:PV::HyPerCol
ioParamsStartGroup	src/columns/HyPerCol.cpp	/^int HyPerCol::ioParamsStartGroup(enum ParamsIOFlag ioFlag, const char *group_name) {$/;"	f	class:PV::HyPerCol
io_timer	src/connections/HyPerConn.hpp	/^   Timer *io_timer;$/;"	m	class:PV::HyPerConn
io_timer	src/layers/HyPerLayer.hpp	/^   Timer *io_timer;$/;"	m	class:PV::HyPerLayer
io_user_data	src/io/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon6
iotimer	src/probes/StatsProbe.hpp	/^   Timer *iotimer; \/\/ A timer for the i\/o part of outputState$/;"	m	class:PV::StatsProbe
isAllInputReady	src/layers/HyPerLayer.cpp	/^bool HyPerLayer::isAllInputReady() {$/;"	f	class:PV::HyPerLayer
isBinary	src/layers/LabelErrorLayer.hpp	/^   int isBinary;$/;"	m	class:PV::LabelErrorLayer
isExchangeFinished	src/columns/Publisher.cpp	/^int Publisher::isExchangeFinished(int delay \/* default 0*\/) {$/;"	f	class:PV::Publisher
isExchangeFinished	src/layers/HyPerLayer.cpp	/^bool HyPerLayer::isExchangeFinished(int delay) { return publisher->isExchangeFinished(delay); }$/;"	f	class:PV::HyPerLayer
isExtended	src/layers/HyPerLayer.hpp	/^   bool isExtended() { return true; }$/;"	f	class:PV::HyPerLayer
isExtra	src/columns/Communicator.hpp	/^   bool isExtra; \/\/ Defines if the process is an extra process$/;"	m	class:PV::Communicator
isExtraProc	src/columns/Communicator.hpp	/^   bool isExtraProc() { return isExtra; }$/;"	f	class:PV::Communicator
isExtraProc	src/columns/PV_Init.hpp	/^   bool isExtraProc() { return mCommunicator->isExtraProc(); }$/;"	f	class:PV::PV_Init
isFrame	demos/HeatMapLocalization/src/main.cpp	/^   bool isFrame(char const * dirEntry) {$/;"	f	class:FrameServer	file:
isSameLocOrSelf	src/weightinit/InitGauss2DWeightsParams.cpp	/^bool InitGauss2DWeightsParams::isSameLocOrSelf(float xDelta, float yDelta, int fPost) {$/;"	f	class:PV::InitGauss2DWeightsParams
isSparse	src/columns/DataStore.hpp	/^   bool isSparse() const { return mSparseFlag; }$/;"	f	class:PV::DataStore
isSparse	src/cudakernels/CudaRecvPre.hpp	/^   bool isSparse;$/;"	m	struct:PVCuda::recv_pre_params
isSparse	src/include/pv_types.h	/^   int isSparse;$/;"	m	struct:PVLayerCube_
isViscosity	tests/MomentumTest/src/MomentumConnTestProbe.hpp	/^   int isViscosity;$/;"	m	class:PV::MomentumConnTestProbe
isWritingToFile	src/probes/BaseProbe.hpp	/^   inline bool isWritingToFile() const { return writingToFile; }$/;"	f	class:PV::BaseProbe
isfile	src/include/pv_types.h	/^   int isfile;$/;"	m	struct:PV_Stream_
isrgb	mlab/imgProc/isrgb.m	/^function y = isrgb(x)$/;"	f
j	python/get_names.py	/^    j = re.search(".+(?=cpp)", i)$/;"	v
join	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Rectangle BBFind::Rectangle::join(const Rectangle &rectA, const Rectangle &rectB)$/;"	f	class:BBFind::Rectangle
joinBoundingBoxes	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::joinBoundingBoxes(Rectangles &boundingBoxes)$/;"	f	class:BBFind
k	python/get_names.py	/^        k = re.search("\\w+", j.group())$/;"	v
kIndex	src/utils/conversions.h	/^static inline int kIndex(int kx, int ky, int kf, int nx, int ny, int nf) {$/;"	f
kIndexBatch	src/utils/conversions.h	/^static inline int kIndexBatch(int kb, int kx, int ky, int kf, int nb, int nx, int ny, int nf) {$/;"	f
kIndexExtended	src/utils/conversions.h	/^static inline int kIndexExtended(int k, int nx, int ny, int nf, int lt, int rt, int dn, int up) {$/;"	f
kIndexExtendedBatch	src/utils/conversions.h	/^kIndexExtendedBatch(int k, int nb, int nx, int ny, int nf, int lt, int rt, int dn, int up) {$/;"	f
kIndexRestricted	src/utils/conversions.h	/^kIndexRestricted(int k_ex, int nx, int ny, int nf, int lt, int rt, int dn, int up) {$/;"	f
kb0	src/include/PVLayerLoc.h	/^   int kb0, kx0, ky0; \/\/ origin of the local layer in global index space$/;"	m	struct:PVLayerLoc_
keepKernelsSynchronized_flag	src/connections/HyPerConn.hpp	/^   bool keepKernelsSynchronized_flag;$/;"	m	class:PV::HyPerConn
kernelIndex	src/probes/KernelProbe.hpp	/^   int kernelIndex; \/\/ which kernel index to investigate$/;"	m	class:PV::KernelProbe
kernelIndexCalculations	src/weightinit/InitWeightsParams.cpp	/^int InitWeightsParams::kernelIndexCalculations(int dataPatchIndex) {$/;"	f	class:PV::InitWeightsParams
kernelName	src/arch/cuda/CudaKernel.hpp	/^   char const *kernelName;$/;"	m	class:PVCuda::CudaKernel
keyIndex	python/probe_analysis/noArborReadProbe.py	/^    keyIndex = 0$/;"	v
keyLabel	python/probe_analysis/readProbe.py	/^                        keyLabel    = keySP[0]$/;"	v
keyLabel	python/probe_analysis/readProbe.py	/^                        keyLabel = key$/;"	v
keySP	python/probe_analysis/readProbe.py	/^                        keySP       = key.split("_")$/;"	v
keyword	src/columns/KeywordHandler.hpp	/^   char *keyword;$/;"	m	class:PV::KeywordHandler
keywordHandlerList	src/columns/Factory.hpp	/^   std::vector<KeywordHandler *> keywordHandlerList;$/;"	m	class:PV::Factory
krPoolingDeliver	src/connections/PoolingConn.hpp	/^   PVCuda::CudaPoolingDeliverKernel *krPoolingDeliver =$/;"	m	class:PV::PoolingConn
krRecvPost	src/connections/HyPerConn.hpp	/^   PVCuda::CudaRecvPost *krRecvPost; \/\/ Cuda kernel for update state call$/;"	m	class:PV::HyPerConn
krRecvPre	src/connections/HyPerConn.hpp	/^   PVCuda::CudaRecvPre *krRecvPre; \/\/ Cuda kernel for update state call$/;"	m	class:PV::HyPerConn
krUpdate	src/layers/HyPerLayer.hpp	/^   PVCuda::CudaKernel *krUpdate;$/;"	m	class:PV::HyPerLayer
kurvePost	src/weightinit/InitCocircWeightsParams.hpp	/^   float kurvePost;$/;"	m	class:PV::InitCocircWeightsParams
kurvePre	src/weightinit/InitCocircWeightsParams.hpp	/^   float kurvePre;$/;"	m	class:PV::InitCocircWeightsParams
kx0	src/include/PVLayerLoc.h	/^   int kb0, kx0, ky0; \/\/ origin of the local layer in global index space$/;"	m	struct:PVLayerLoc_
kx0	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
kxPos	src/utils/conversions.h	/^static inline int kxPos(int k, int nx, int ny, int nf) { return (k \/ nf) % nx; }$/;"	f
ky0	src/include/PVLayerLoc.h	/^   int kb0, kx0, ky0; \/\/ origin of the local layer in global index space$/;"	m	struct:PVLayerLoc_
ky0	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
kyPos	src/utils/conversions.h	/^static inline int kyPos(int k, int nx, int ny, int nf) { return k \/ (nx * nf) % ny; }$/;"	f
lParams	src/layers/LIF.hpp	/^   LIF_params lParams;$/;"	m	class:PV::LIF
labelBuf	src/layers/SegmentLayer.hpp	/^   int *labelBuf;$/;"	m	class:PV::SegmentLayer
labelBufSize	src/layers/SegmentLayer.hpp	/^   int labelBufSize;$/;"	m	class:PV::SegmentLayer
labelCount	src/layers/Segmentify.hpp	/^   int **labelCount;$/;"	m	class:PV::Segmentify
labelIdxBuf	src/layers/Segmentify.hpp	/^   int *labelIdxBuf;$/;"	m	class:PV::Segmentify
labelToIdx	src/layers/Segmentify.hpp	/^   std::map<int, int> labelToIdx;$/;"	m	class:PV::Segmentify
labelVals	src/layers/Segmentify.hpp	/^   float **labelVals;$/;"	m	class:PV::Segmentify
lambda	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   int lambda;$/;"	m	class:PV::InitGaborWeightsParams
lastActiveTime	src/connections/ImprintConn.hpp	/^   double *lastActiveTime;$/;"	m	class:PV::ImprintConn
lastTimeUpdateCalled	src/connections/HyPerConn.hpp	/^   double lastTimeUpdateCalled;$/;"	m	class:PV::HyPerConn
lastUpdateTime	src/connections/HyPerConn.hpp	/^   double lastUpdateTime;$/;"	m	class:PV::HyPerConn
lastUpdateTime	src/probes/BaseProbe.hpp	/^   double lastUpdateTime; \/\/ The time of the last time calcValues was called.$/;"	m	class:PV::BaseProbe
last_value	src/utils/cl_random.h	/^   float last_value;$/;"	m	struct:box_muller_state
lateralCompetitionPenalty	src/layers/updateStateFunctions.h	/^float lateralCompetitionPenalty(MEM_GLOBAL float *V, int num_features) {$/;"	f
layer	python/analysis_parse.py	/^                layer = re.search(type_regex, line)$/;"	v
layerIndexExt	src/utils/conversions.h	/^static inline int layerIndexExt(int kPreExt, const PVLayerLoc *inLoc, const PVLayerLoc *outLoc) {$/;"	f
layerIndexRes	src/utils/conversions.h	/^static inline int layerIndexRes(int kPreRes, const PVLayerLoc *inLoc, const PVLayerLoc *outLoc) {$/;"	f
layerIndexToUnitCellIndex	src/utils/conversions.c	/^int layerIndexToUnitCellIndex($/;"	f
layerListsVerticesInParams	src/layers/ANNLayer.hpp	/^   bool layerListsVerticesInParams() const { return verticesListInParams; }$/;"	f	class:PV::ANNLayer
layerLoc	tests/Shared/ColumnArchive.hpp	/^   PVLayerLoc layerLoc;$/;"	m	struct:LayerArchive
layerName	python/timerPie.py	/^layerName = []$/;"	v
layerTimes	python/timerPie.py	/^layerTimes = {}$/;"	v
layer_content	python/analysis_parse.py	/^layer_content= []$/;"	v
layer_default	python/analysis_parse.py	/^layer_default =  ["","","","",""] + layer_default$/;"	v
layer_default	python/analysis_parse.py	/^layer_default = ["",""]$/;"	v
layer_dict	python/analysis_parse.py	/^    layer_dict = [line.strip("\\n") for line in f1]$/;"	v
layer_ignore	python/analysis_parse.py	/^layer_ignore = ["","","","",""] + layer_ignore$/;"	v
layer_ignore	python/analysis_parse.py	/^layer_ignore = ["",""]$/;"	v
layer_loc	python/analysis_parse.py	/^layer_loc = (".\/layers.txt")$/;"	v
layer_names	python/analysis_parse.py	/^layer_names = []$/;"	v
layer_types	python/analysis_parse.py	/^layer_types = []$/;"	v
layer_values	python/analysis_parse.py	/^layer_values = []$/;"	v
layer_vars	python/analysis_parse.py	/^layer_vars = ["nxScale", "nyScale", "Layer_X_Dimension", "Layer_Y_Dimension", "nf"] + layer_vars$/;"	v
layer_vars	python/analysis_parse.py	/^layer_vars = ["originalLayerName","phase"]$/;"	v
layers	python/get_names.py	/^layers = []$/;"	v
layers	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^layers = [$/;"	v
left	demos/HeatMapLocalization/src/BBFind.hpp	/^            int left()   const { return x - width \/ 2; }$/;"	f	class:BBFind::Rectangle
left	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int left;$/;"	m	struct:LocalizationData
length	src/io/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon14
levelIndex	src/structures/RingBuffer.hpp	/^   int levelIndex(int level) const { return ((level + mCurrentLevel) % mNumLevels); }$/;"	f	class:PV::RingBuffer
lflags	src/io/stb_image.h	/^   int lflags;$/;"	m	struct:__anon20
lib_path	python/tmp/writePvpFile.py	/^lib_path = os.path.abspath("\/home\/sheng\/workspace\/OpenPV\/pv-core\/python\/")$/;"	v
line	python/probe_analysis/noArborReadProbe.py	/^                    line = f.readline() #might not be full line$/;"	v
line	python/probe_analysis/noArborReadProbe.py	/^                    line = f.readline()$/;"	v
line	python/probe_analysis/noArborReadProbe.py	/^            line = f.readline()$/;"	v
line	python/probe_analysis/noArborReadProbe.py	/^    line = f.readline() #is definitely a full line$/;"	v
line	python/probe_analysis/noArborReadProbe.py	/^    line = f.readline() #this possibly(probably?) does not start at the beginning of the line$/;"	v
line0	src/io/stb_image.h	/^   stbi_uc *line0, *line1;$/;"	m	struct:__anon11
line1	src/io/stb_image.h	/^   stbi_uc *line0, *line1;$/;"	m	struct:__anon11
lineLength	python/probe_analysis/noArborReadProbe.py	/^    lineLength = len(firstLine)$/;"	v
line_size	src/io/stb_image.h	/^   int line_size;$/;"	m	struct:__anon20
linebuf	src/io/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon9::__anon10
lines	python/probe_analysis/noArborReadProbe.py	/^    lines = []$/;"	v
lines	python/probe_analysis/noArborReadProbe.py	/^    lines = f.readlines()$/;"	v
lines	python/probe_analysis/noArborReadProbe.py	/^lines = [splitLine(line) for line in lines]$/;"	v
lines	python/probe_analysis/readProbe.py	/^    lines = [splitLine(line) for line in lines] #lines is now [time][variable][(key),(val)]$/;"	v
lines	python/probe_analysis/readProbe.py	/^    lines = readProbeFile(filename,startTime,endTime) #lines is [time][char]$/;"	v
llines	python/get_names.py	/^llines = listdir(sys.argv[1] + "\/src\/layers")$/;"	v
loadCenterIdxMap	src/layers/SegmentLayer.cpp	/^int SegmentLayer::loadCenterIdxMap(int batchIdx, int numLabels) {$/;"	f	class:PV::SegmentLayer
loadColumnEnergyProbe	tutorials/Total_Energy/analysis/loadColumnEnergyProbe.m	/^function [E,timestamps] = loadColumnEnergyProbe(outputFile)$/;"	f
loadConversionTable	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::loadConversionTable() {$/;"	f	class:ConvertFromTable
loadHyPerCol_timescales	tutorials/Total_Energy/analysis/loadHyPerCol_timescales.m	/^function [A,t] = loadHyPerCol_timescales(outputDir)$/;"	f
loadLabelBuf	src/layers/SegmentLayer.cpp	/^int SegmentLayer::loadLabelBuf() {$/;"	f	class:PV::SegmentLayer
loadNormProbe	tutorials/Total_Energy/analysis/loadNormProbe.m	/^function [normvalues, timestamps] = loadNormProbe(outputFile)$/;"	f
loadParamBuffer	src/io/PVParams.cpp	/^void PVParams::loadParamBuffer(char const *filename, std::string &paramsFileString) {$/;"	f	class:PV::PVParams
load_jpeg_image	src/io/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp) {$/;"	f
loc	src/include/pv_types.h	/^   PVLayerLoc loc;$/;"	m	struct:PVLayerCube_
loc	src/include/pv_types.h	/^   PVLayerLoc loc;$/;"	m	struct:PVLayer_
localDimensionsEqual	src/layers/HyPerLayer.cpp	/^bool HyPerLayer::localDimensionsEqual(PVLayerLoc const *loc1, PVLayerLoc const *loc2) {$/;"	f	class:PV::HyPerLayer
localExtToGlobalRes	src/utils/conversions.h	/^static inline int localExtToGlobalRes(int localExtK, const PVLayerLoc *loc) {$/;"	f
localIndexFromGlobal	src/utils/conversions.h	/^static inline int localIndexFromGlobal(int kGlobal, const PVLayerLoc loc) {$/;"	f
localMPIBlock	src/columns/Communicator.hpp	/^   MPIBlock *localMPIBlock  = nullptr;$/;"	m	class:PV::Communicator
localRank	src/columns/Communicator.hpp	/^   int localRank;$/;"	m	class:PV::Communicator
localSize	src/columns/Communicator.hpp	/^   int localSize;$/;"	m	class:PV::Communicator
lookup	src/io/PVParams.cpp	/^const char *ParameterStringStack::lookup(const char *targetname) {$/;"	f	class:PV::ParameterStringStack
lookup	src/observerpattern/ObserverTable.hpp	/^   S *lookup(char const *name) const {$/;"	f	class:PV::ObserverTable
lookup	src/observerpattern/ObserverTable.hpp	/^   S *lookup(std::string const &name) const {$/;"	f	class:PV::ObserverTable
lpal	src/io/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon20
lt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int lt;$/;"	m	struct:PVCuda::HyPerLCAParams
lt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int lt;$/;"	m	struct:PVCuda::ISTAParams
lt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int lt;$/;"	m	struct:PVCuda::MomentumLCAParams
lt	src/include/PVLayerLoc.h	/^   int lt, rt, dn, up; \/\/ padding in {left, right, down, up} directions$/;"	m	struct:PVHalo_
mAPos	src/structures/Image.hpp	/^   const int mAPos = 3;$/;"	m	class:PV::Image
mAccumulateAmount	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mAccumulateAmount = 0.05f;$/;"	m	class:BBFind
mAccumulatedConfMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mAccumulatedConfMap;$/;"	m	class:BBFind
mActiveIndices	src/columns/DataStore.hpp	/^   RingBuffer<SparseList<float>::Entry> *mActiveIndices = nullptr;$/;"	m	class:PV::DataStore
mAdaptiveTimeScaleController	src/probes/AdaptiveTimeScaleProbe.hpp	/^   AdaptiveTimeScaleController *mAdaptiveTimeScaleController = nullptr;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mAdaptiveTimeScaleProbe	src/layers/HyPerLCALayer.hpp	/^   AdaptiveTimeScaleProbe *mAdaptiveTimeScaleProbe = nullptr;$/;"	m	class:PV::HyPerLCALayer
mAdaptiveTimeScaleProbe	src/layers/ISTALayer.hpp	/^   AdaptiveTimeScaleProbe *mAdaptiveTimeScaleProbe = nullptr;$/;"	m	class:PV::ISTALayer
mAdaptiveTimeScaleProbeName	src/layers/HyPerLCALayer.hpp	/^   char *mAdaptiveTimeScaleProbeName               = nullptr;$/;"	m	class:PV::HyPerLCALayer
mAdaptiveTimeScaleProbeName	src/layers/ISTALayer.hpp	/^   char *mAdaptiveTimeScaleProbeName               = nullptr;$/;"	m	class:PV::ISTALayer
mAllowUnrecognizedArguments	src/io/ConfigParser.hpp	/^   bool mAllowUnrecognizedArguments = false;$/;"	m	class:PV::ConfigParser
mAnchor	src/layers/InputLayer.hpp	/^   Buffer<float>::Anchor mAnchor = Buffer<float>::CENTER;$/;"	m	class:PV::InputLayer
mArgC	src/columns/PV_Init.hpp	/^   int mArgC = 0;$/;"	m	class:PV::PV_Init
mArgV	src/columns/PV_Init.hpp	/^   std::vector<char const *> mArgV;$/;"	m	class:PV::PV_Init
mAutoResizeFlag	src/layers/InputLayer.hpp	/^   bool mAutoResizeFlag = false;$/;"	m	class:PV::InputLayer
mBBGuessSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mBBGuessSize = 24;$/;"	m	class:BBFind
mBPos	src/structures/Image.hpp	/^   const int mBPos = 2;$/;"	m	class:PV::Image
mBToGray	src/structures/Image.hpp	/^   static constexpr const float mBToGray = 0.11f;$/;"	m	class:PV::Image
mBaseMax	src/components/AdaptiveTimeScaleController.hpp	/^   double mBaseMax;$/;"	m	class:PV::AdaptiveTimeScaleController
mBaseMax	src/probes/AdaptiveTimeScaleProbe.hpp	/^   double mBaseMax                = 1.0;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mBaseMin	src/components/AdaptiveTimeScaleController.hpp	/^   double mBaseMin;$/;"	m	class:PV::AdaptiveTimeScaleController
mBaseMin	src/probes/AdaptiveTimeScaleProbe.hpp	/^   double mBaseMin                = 1.0;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mBaseProbes	src/columns/HyPerCol.hpp	/^   std::vector<BaseProbe *> mBaseProbes; \/\/ Why is this Base and not just$/;"	m	class:PV::HyPerCol
mBatchDimension	src/structures/MPIBlock.hpp	/^   int mBatchDimension       = 0;$/;"	m	class:PV::MPIBlock
mBatchIndex	src/structures/MPIBlock.hpp	/^   int mBatchIndex           = 0;$/;"	m	class:PV::MPIBlock
mBatchIndexer	src/layers/InputLayer.hpp	/^   std::unique_ptr<BatchIndexer> mBatchIndexer;$/;"	m	class:PV::InputLayer
mBatchMethod	src/components/BatchIndexer.hpp	/^   BatchMethod mBatchMethod;$/;"	m	class:PV::BatchIndexer
mBatchMethod	src/layers/InputLayer.hpp	/^   BatchIndexer::BatchMethod mBatchMethod;$/;"	m	class:PV::InputLayer
mBatchWidth	src/components/AdaptiveTimeScaleController.hpp	/^   int mBatchWidth;$/;"	m	class:PV::AdaptiveTimeScaleController
mBatchWidth	src/components/BatchIndexer.hpp	/^   int mBatchWidth          = 0;$/;"	m	class:PV::BatchIndexer
mBatchWidthIndex	src/components/BatchIndexer.hpp	/^   int mBatchWidthIndex     = 0;$/;"	m	class:PV::BatchIndexer
mBlockDirectoryName	src/checkpointing/Checkpointer.hpp	/^   std::string mBlockDirectoryName;$/;"	m	class:PV::Checkpointer
mBooleanConfigMap	src/io/Configuration.hpp	/^   std::map<std::string, bool> mBooleanConfigMap;$/;"	m	class:PV::Configuration
mBorderExcessX	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   int mBorderExcessX                           = 0;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mBorderExcessX	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   int mBorderExcessX                           = 0;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mBorderExcessY	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   int mBorderExcessY                           = 0;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mBorderExcessY	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   int mBorderExcessY                           = 0;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mBorderExchanger	src/columns/Publisher.hpp	/^   BorderExchange *mBorderExchanger = nullptr;$/;"	m	class:PV::Publisher
mBorderExchanger	src/layers/InputLayer.hpp	/^   BorderExchange *mBorderExchanger = nullptr;$/;"	m	class:PV::InputLayer
mBroadcastingFlag	src/checkpointing/CheckpointEntryData.hpp	/^   bool mBroadcastingFlag;$/;"	m	class:PV::CheckpointEntryData
mBuffer	src/columns/DataStore.hpp	/^   RingBuffer<float> *mBuffer                           = nullptr;$/;"	m	class:PV::DataStore
mBuffer	src/structures/RingBuffer.hpp	/^   std::vector<std::vector<T>> mBuffer;$/;"	m	class:PV::RingBuffer
mCheckpointIndexWidth	src/checkpointing/Checkpointer.hpp	/^   int mCheckpointIndexWidth                                               = -1;$/;"	m	class:PV::Checkpointer
mCheckpointReadDirectory	src/checkpointing/Checkpointer.hpp	/^   std::string mCheckpointReadDirectory;$/;"	m	class:PV::Checkpointer
mCheckpointReadFlag	src/columns/HyPerCol.hpp	/^   bool mCheckpointReadFlag; \/\/ whether to load from a checkpoint directory$/;"	m	class:PV::HyPerCol
mCheckpointRegistry	src/checkpointing/Checkpointer.hpp	/^   std::vector<std::shared_ptr<CheckpointEntry>> mCheckpointRegistry; \/\/ Needs to be a vector so$/;"	m	class:PV::Checkpointer
mCheckpointSignal	src/checkpointing/Checkpointer.hpp	/^   int mCheckpointSignal                = 0;$/;"	m	class:PV::Checkpointer
mCheckpointTimer	src/checkpointing/Checkpointer.hpp	/^   Timer *mCheckpointTimer = nullptr;$/;"	m	class:PV::Checkpointer
mCheckpointWriteDir	src/checkpointing/Checkpointer.hpp	/^   char *mCheckpointWriteDir                                               = nullptr;$/;"	m	class:PV::Checkpointer
mCheckpointWriteFlag	src/checkpointing/Checkpointer.hpp	/^   bool mCheckpointWriteFlag                                               = false;$/;"	m	class:PV::Checkpointer
mCheckpointWriteSimtimeInterval	src/checkpointing/Checkpointer.hpp	/^   double mCheckpointWriteSimtimeInterval                                  = 1.0;$/;"	m	class:PV::Checkpointer
mCheckpointWriteStepInterval	src/checkpointing/Checkpointer.hpp	/^   long int mCheckpointWriteStepInterval                                   = 1L;$/;"	m	class:PV::Checkpointer
mCheckpointWriteTriggerMode	src/checkpointing/Checkpointer.hpp	/^   enum CheckpointWriteTriggerMode mCheckpointWriteTriggerMode             = NONE;$/;"	m	class:PV::Checkpointer	typeref:enum:PV::Checkpointer::CheckpointWriteTriggerMode
mCheckpointWriteTriggerModeString	src/checkpointing/Checkpointer.hpp	/^   char *mCheckpointWriteTriggerModeString                                 = nullptr;$/;"	m	class:PV::Checkpointer
mCheckpointWriteWallclockInterval	src/checkpointing/Checkpointer.hpp	/^   std::time_t mCheckpointWriteWallclockInterval                           = 1L;$/;"	m	class:PV::Checkpointer
mCheckpointWriteWallclockIntervalSeconds	src/checkpointing/Checkpointer.hpp	/^   std::time_t mCheckpointWriteWallclockIntervalSeconds                    = 1L;$/;"	m	class:PV::Checkpointer
mCheckpointWriteWallclockUnit	src/checkpointing/Checkpointer.hpp	/^   char *mCheckpointWriteWallclockUnit                                     = nullptr;$/;"	m	class:PV::Checkpointer
mCheckpointer	src/columns/HyPerCol.hpp	/^   Checkpointer *mCheckpointer = nullptr; \/\/ manages checkpointing and, eventually,$/;"	m	class:PV::HyPerCol
mClassListFileName	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   char *mClassListFileName = nullptr;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mClasses	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   std::vector<std::string> mClasses;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mColProbes	src/columns/HyPerCol.hpp	/^   std::vector<ColProbe *> mColProbes; \/\/ ColProbe ** mColProbes;$/;"	m	class:PV::HyPerCol
mColumnIndex	src/structures/MPIBlock.hpp	/^   int mColumnIndex          = 0;$/;"	m	class:PV::MPIBlock
mComm	src/columns/Publisher.hpp	/^   Communicator *mComm;$/;"	m	class:PV::Publisher
mComm	src/structures/MPIBlock.hpp	/^   MPI_Comm mComm;$/;"	m	class:PV::MPIBlock
mCommunicator	src/columns/HyPerCol.hpp	/^   Communicator *mCommunicator; \/\/ manages communication between HyPerColumns};$/;"	m	class:PV::HyPerCol
mCommunicator	src/columns/PV_Init.hpp	/^   Communicator *mCommunicator;$/;"	m	class:PV::PV_Init
mCommunicator	src/components/AdaptiveTimeScaleController.hpp	/^   Communicator *mCommunicator;$/;"	m	class:PV::AdaptiveTimeScaleController
mCompressFlag	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   bool mCompressFlag;$/;"	m	class:PV::CheckpointEntryWeightPvp
mConfig	src/io/ConfigParser.hpp	/^   Configuration mConfig;$/;"	m	class:PV::ConfigParser
mConfigArguments	src/io/Configuration.hpp	/^   std::vector<std::string> mConfigArguments;$/;"	m	class:PV::Configuration
mConfigFromStream	src/columns/Arguments.hpp	/^   ConfigParser *mConfigFromStream = nullptr;$/;"	m	class:PV::Arguments
mConfigTypeMap	src/io/Configuration.hpp	/^   std::map<std::string, ConfigurationType> mConfigTypeMap;$/;"	m	class:PV::Configuration
mConnection	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   PV::HyPerConn *mConnection   = nullptr;$/;"	m	class:HyPerConnCheckpointerTestProbe
mConnection	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   PV::MomentumConn *mConnection = nullptr;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mConnection	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   PV::MomentumConn *mConnection = nullptr;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mConnection	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   PV::HyPerConn *mConnection   = nullptr;$/;"	m	class:PoolingConnCheckpointerTestProbe
mConnectionArraySize	src/columns/HyPerCol.hpp	/^   size_t mConnectionArraySize;$/;"	m	class:PV::HyPerCol
mConnectionStatus	src/columns/HyPerCol.hpp	/^   int *mConnectionStatus;$/;"	m	class:PV::HyPerCol
mConnections	src/columns/HyPerCol.hpp	/^   std::vector<BaseConnection *> mConnections; \/\/ BaseConnection  ** mConnections;$/;"	m	class:PV::HyPerCol
mContrast	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mContrast = 1.5f;$/;"	m	class:BBFind
mContrastStrength	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mContrastStrength = 1.0f;$/;"	m	class:BBFind
mCorrectInput	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectInput  = 0.0;$/;"	m	class:CorrectState
mCorrectInput	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectInput  = 0.0;$/;"	m	class:CorrectState
mCorrectInput	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectInput  = 0.0;$/;"	m	class:CorrectState
mCorrectInputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   PV::Buffer<float> mCorrectInputBuffer;$/;"	m	class:CorrectState
mCorrectOutput	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectOutput = 0.0;$/;"	m	class:CorrectState
mCorrectOutput	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectOutput = 0.0;$/;"	m	class:CorrectState
mCorrectOutput	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectOutput = 0.0;$/;"	m	class:CorrectState
mCorrectOutputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   PV::Buffer<float> mCorrectOutputBuffer;$/;"	m	class:CorrectState
mCorrectState	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   CorrectState *mCorrectState  = nullptr;$/;"	m	class:HyPerConnCheckpointerTestProbe
mCorrectState	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   CorrectState *mCorrectState   = nullptr;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mCorrectState	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   CorrectState *mCorrectState   = nullptr;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mCorrectState	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   CorrectState *mCorrectState  = nullptr;$/;"	m	class:PoolingConnCheckpointerTestProbe
mCorrectWeight	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectWeight = 0.0;$/;"	m	class:CorrectState
mCorrectWeight	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectWeight = 0.0;$/;"	m	class:CorrectState
mCorrectWeight	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float mCorrectWeight = 0.0;$/;"	m	class:CorrectState
mCorrect_dw	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   float mCorrect_dw    = 0.0;$/;"	m	class:CorrectState
mCorrect_dw	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   float mCorrect_dw    = 0.0;$/;"	m	class:CorrectState
mCreatedWithNew	src/utils/PVLog.cpp	/^   bool mCreatedWithNew           = false;$/;"	m	class:PV::LogFileStream	file:
mCudaDevice	src/columns/HyPerCol.hpp	/^   PVCuda::CudaDevice *mCudaDevice; \/\/ object for running kernels on OpenCL device$/;"	m	class:PV::HyPerCol
mCudnnDataStore	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnDataStore                  = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mCudnnDataStore	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnDataStore                  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mCudnnGSyn	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnGSyn                  = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mCudnnGSyn	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnGSyn                  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mCudnnOrigConnDataStore	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnOrigConnDataStore                  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mCudnnOrigConnGSyn	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   CudaBuffer *mCudnnOrigConnGSyn                  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mCurrentCheckpointStep	src/checkpointing/Checkpointer.hpp	/^      long int mCurrentCheckpointStep = 0L;$/;"	m	struct:PV::Checkpointer::TimeInfo
mCurrentConfMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mCurrentConfMap;$/;"	m	class:BBFind
mCurrentConfig	src/columns/Arguments.hpp	/^   Configuration mCurrentConfig;$/;"	m	class:PV::Arguments
mCurrentFrame	demos/HeatMapLocalization/src/main.cpp	/^   std::list<std::string>::iterator mCurrentFrame = mListOfFrames.begin();$/;"	m	class:FrameServer	file:
mCurrentLevel	src/columns/DataStore.hpp	/^   int mCurrentLevel;$/;"	m	class:PV::DataStore
mCurrentLevel	src/structures/RingBuffer.hpp	/^   int mCurrentLevel;$/;"	m	class:PV::RingBuffer
mCurrentStep	src/columns/HyPerCol.hpp	/^   long int mCurrentStep;$/;"	m	class:PV::HyPerCol
mDWMaxDecayFactor	src/connections/HyPerConn.hpp	/^   float mDWMaxDecayFactor = 0.0f; \/\/ Each modification is dWMax = dWMax * (1.0 - decayFactor);$/;"	m	class:PV::HyPerConn
mDWMaxDecayInterval	src/connections/HyPerConn.hpp	/^   int mDWMaxDecayInterval = 0; \/\/ How many weight updates between each dWMax modification$/;"	m	class:PV::HyPerConn
mDWMaxDecayTimer	src/connections/HyPerConn.hpp	/^   int mDWMaxDecayTimer    = 0; \/\/ Number of updates left before next dWMax modification$/;"	m	class:PV::HyPerConn
mData	src/structures/Buffer.hpp	/^   std::vector<T> mData;$/;"	m	class:PV::Buffer
mDataPointer	src/checkpointing/CheckpointEntryData.hpp	/^   T *mDataPointer;$/;"	m	class:PV::CheckpointEntryData
mDataPointer	src/checkpointing/CheckpointEntryPvp.hpp	/^   T *mDataPointer             = nullptr;$/;"	m	class:PV::CheckpointEntryPvp
mDataPointer	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   T *mDataPointer = nullptr;$/;"	m	class:PV::CheckpointEntryPvpBuffer
mDataPointer	src/checkpointing/CheckpointEntryRandState.hpp	/^   taus_uint4 *mDataPointer;$/;"	m	class:PV::CheckpointEntryRandState
mDataRegistry	src/columns/Messages.hpp	/^   T *mDataRegistry;$/;"	m	class:PV::ReadStateFromCheckpointMessage
mDataRegistry	src/columns/Messages.hpp	/^   T *mDataRegistry;$/;"	m	class:PV::RegisterDataMessage
mDataStore	src/checkpointing/CheckpointEntryDataStore.hpp	/^   DataStore *mDataStore = nullptr;$/;"	m	class:PV::CheckpointEntryDataStore
mDataStore	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   float *mDataStore                            = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mDataStore	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   float *mDataStore                            = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mDataStoreDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mDataStoreDescriptor = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mDataStoreDescriptor	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mDataStoreDescriptor = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mDataStructuresAllocatedFlag	src/columns/BaseObject.hpp	/^   bool mDataStructuresAllocatedFlag = false;$/;"	m	class:PV::BaseObject
mDataStructuresAllocatedFlag	src/probes/BaseProbe.hpp	/^   bool mDataStructuresAllocatedFlag = false;$/;"	m	class:PV::BaseProbe
mDatatypes	src/utils/BorderExchange.hpp	/^   std::vector<MPI_Datatype> mDatatypes;$/;"	m	class:PV::BorderExchange
mDefaultInitializeFromCheckpointFlag	src/checkpointing/Checkpointer.hpp	/^   bool mDefaultInitializeFromCheckpointFlag                               = false;$/;"	m	class:PV::Checkpointer
mDefaultOutputPath	src/checkpointing/Checkpointer.cpp	/^std::string const Checkpointer::mDefaultOutputPath = "output";$/;"	m	class:PV::std::Checkpointer	file:
mDefaultOutputPath	src/checkpointing/Checkpointer.hpp	/^   static std::string const mDefaultOutputPath;$/;"	m	class:PV::Checkpointer::std
mDefaultStream	src/utils/PVLog.cpp	/^   std::basic_ostream<T> &mDefaultStream;$/;"	m	class:PV::LogFileStream	file:
mDeleteOlderCheckpoints	src/checkpointing/Checkpointer.hpp	/^   bool mDeleteOlderCheckpoints                                            = false;$/;"	m	class:PV::Checkpointer
mDeltaT	src/columns/Messages.hpp	/^   double mDeltaT; \/\/ TODO: this should be the nbatch-sized vector of adaptive$/;"	m	class:PV::ConnectionFinalizeUpdateMessage
mDeltaT	src/columns/Messages.hpp	/^   double mDeltaT; \/\/ TODO: this should be the nbatch-sized vector of adaptive$/;"	m	class:PV::ConnectionUpdateMessage
mDeltaT	src/columns/Messages.hpp	/^   float mDeltaT; \/\/ TODO: this should be the nbatch-sized vector of adaptive$/;"	m	class:PV::LayerRecvSynapticInputMessage
mDeltaT	src/columns/Messages.hpp	/^   float mDeltaT; \/\/ TODO: this should be the nbatch-sized vector of adaptive$/;"	m	class:PV::LayerUpdateStateMessage
mDeltaTime	src/columns/HyPerCol.hpp	/^   double mDeltaTime; \/\/ time step interval$/;"	m	class:PV::HyPerCol
mDeltaTimes	src/layers/HyPerLCALayer.hpp	/^   std::vector<double> mDeltaTimes;$/;"	m	class:PV::HyPerLCALayer
mDeltaTimes	src/layers/ISTALayer.hpp	/^   std::vector<double> mDeltaTimes;$/;"	m	class:PV::ISTALayer
mDetectionWait	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mDetectionWait = 0;$/;"	m	class:BBFind
mDetectionWaitTimer	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mDetectionWaitTimer = 0;$/;"	m	class:BBFind
mDetections	demos/HeatMapLocalization/src/BBFind.hpp	/^      Rectangles mDetections;$/;"	m	class:BBFind
mDirectory	src/checkpointing/CheckpointingMessages.hpp	/^   std::string mDirectory;$/;"	m	class:PV::PrepareCheckpointWriteMessage
mDirectory	src/checkpointing/CheckpointingMessages.hpp	/^   std::string mDirectory;$/;"	m	class:PV::ProcessCheckpointReadMessage
mDisplayPeriod	src/layers/InputLayer.hpp	/^   int mDisplayPeriod = 0;$/;"	m	class:PV::InputLayer
mDistMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mDistMap;$/;"	m	class:BBFind
mErrorOnNotANumber	src/columns/HyPerCol.hpp	/^   bool mErrorOnNotANumber; \/\/ If true, check each layer's activity buffer for$/;"	m	class:PV::HyPerCol
mExpectedStartTime	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^   double mExpectedStartTime = std::numeric_limits<double>::infinity();$/;"	m	class:FailBeforeExpectedStartTimeLayer
mExtendedFlag	src/checkpointing/CheckpointEntryRandState.hpp	/^   bool mExtendedFlag;$/;"	m	class:PV::CheckpointEntryRandState
mFStream	src/io/FileStream.hpp	/^   std::fstream mFStream;$/;"	m	class:PV::FileStream
mFeatures	src/structures/Buffer.hpp	/^   int mFeatures = 0;$/;"	m	class:PV::Buffer
mFileCount	src/components/BatchIndexer.hpp	/^   int mFileCount           = 0;$/;"	m	class:PV::BatchIndexer
mFileList	src/layers/InputLayer.hpp	/^   std::vector<std::string> mFileList;$/;"	m	class:PV::InputLayer
mFileName	src/io/FileStream.hpp	/^   std::string mFileName;$/;"	m	class:PV::FileStream
mFileReadPos	src/checkpointing/CheckpointableFileStream.hpp	/^   long mFileReadPos  = 0;$/;"	m	class:PV::CheckpointableFileStream
mFileType	src/layers/PvpLayer.hpp	/^   int mFileType      = 0;$/;"	m	class:PV::PvpLayer
mFileWritePos	src/checkpointing/CheckpointableFileStream.hpp	/^   long mFileWritePos = 0;$/;"	m	class:PV::CheckpointableFileStream
mFilenamePattern	demos/HeatMapLocalization/src/main.cpp	/^   char const * mFilenamePattern = "XXXX";$/;"	m	class:FrameServer	file:
mFilenamePrefix	demos/HeatMapLocalization/src/main.cpp	/^   char const * mFilenamePrefix = "frame";$/;"	m	class:FrameServer	file:
mFilenameSuffix	demos/HeatMapLocalization/src/main.cpp	/^   char const * mFilenameSuffix = ".png";$/;"	m	class:FrameServer	file:
mFinalStep	src/columns/HyPerCol.hpp	/^   long int mFinalStep;$/;"	m	class:PV::HyPerCol
mFrameRate	demos/HeatMapLocalization/src/main.cpp	/^   int mFrameRate = 30;$/;"	m	class:FrameServer	file:
mFramesPerMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mFramesPerMap = 1;$/;"	m	class:BBFind
mFramesSinceNewMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mFramesSinceNewMap = 0;$/;"	m	class:BBFind
mGPos	src/structures/Image.hpp	/^   const int mGPos = 1;$/;"	m	class:PV::Image
mGSyn	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   float *mGSyn                            = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mGSyn	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   float *mGSyn                            = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mGSynDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mGSynDescriptor = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mGSynDescriptor	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mGSynDescriptor = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mGToGray	src/structures/Image.hpp	/^   static constexpr const float mGToGray = 0.59f;$/;"	m	class:PV::Image
mGlobalBatchCount	src/components/BatchIndexer.hpp	/^   int mGlobalBatchCount    = 0;$/;"	m	class:PV::BatchIndexer
mGlobalBatchDimension	src/structures/MPIBlock.hpp	/^   int mGlobalBatchDimension = 0;$/;"	m	class:PV::MPIBlock
mGlobalComm	src/structures/MPIBlock.hpp	/^   MPI_Comm mGlobalComm;$/;"	m	class:PV::MPIBlock
mGlobalNumColumns	src/structures/MPIBlock.hpp	/^   int mGlobalNumColumns     = 0;$/;"	m	class:PV::MPIBlock
mGlobalNumRows	src/structures/MPIBlock.hpp	/^   int mGlobalNumRows        = 0;$/;"	m	class:PV::MPIBlock
mGlobalRank	src/structures/MPIBlock.hpp	/^   int mGlobalRank           = 0;$/;"	m	class:PV::MPIBlock
mGpuGroupConns	src/columns/HyPerCol.hpp	/^   std::vector<BaseConnection *> mGpuGroupConns; \/\/ BaseConnection** mGpuGroupConns;$/;"	m	class:PV::HyPerCol
mGrowthFactor	src/components/AdaptiveTimeScaleController.hpp	/^   double mGrowthFactor;$/;"	m	class:PV::AdaptiveTimeScaleController
mGrowthFactor	src/probes/AdaptiveTimeScaleProbe.hpp	/^   double mGrowthFactor           = 1.0;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mGtClassFalseValue	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   float mGtClassFalseValue = 0.0f;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mGtClassTrueValue	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   float mGtClassTrueValue  = 1.0f;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mHasReceived	src/layers/HyPerLayer.hpp	/^   bool mHasReceived = false;$/;"	m	class:PV::HyPerLayer
mHasUpdated	src/layers/HyPerLayer.hpp	/^   bool mHasUpdated  = false;$/;"	m	class:PV::HyPerLayer
mHeight	src/structures/Buffer.hpp	/^   int mHeight   = 0;$/;"	m	class:PV::Buffer
mHierarchy	src/columns/Messages.hpp	/^   std::map<std::string, Observer *> mHierarchy;$/;"	m	class:PV::CommunicateInitInfoMessage
mImage	src/layers/ImageLayer.hpp	/^   std::unique_ptr<Image> mImage = nullptr;$/;"	m	class:PV::ImageLayer
mImageHeight	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mImageHeight = 256;$/;"	m	class:BBFind
mImageWidth	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mImageWidth = 256;$/;"	m	class:BBFind
mImmediateWeightUpdate	src/connections/HyPerConn.hpp	/^   bool mImmediateWeightUpdate = true;$/;"	m	class:PV::HyPerConn
mIndexLookupTable	src/components/BatchIndexer.hpp	/^   std::vector<int> mIndexLookupTable;$/;"	m	class:PV::BatchIndexer
mIndices	src/components/BatchIndexer.hpp	/^   std::vector<int> mIndices;$/;"	m	class:PV::BatchIndexer
mInitInfoCommunicatedFlag	src/columns/BaseObject.hpp	/^   bool mInitInfoCommunicatedFlag    = false;$/;"	m	class:PV::BaseObject
mInitInfoCommunicatedFlag	src/probes/BaseProbe.hpp	/^   bool mInitInfoCommunicatedFlag    = false;$/;"	m	class:PV::BaseProbe
mInitVObject	src/layers/HyPerLayer.hpp	/^   BaseInitV *mInitVObject = nullptr;$/;"	m	class:PV::HyPerLayer
mInitialSeed	src/columns/RandomSeed.hpp	/^   unsigned int mInitialSeed = 0U;$/;"	m	class:PV::RandomSeed
mInitialStep	src/columns/HyPerCol.hpp	/^   long int mInitialStep;$/;"	m	class:PV::HyPerCol
mInitialValuesSetFlag	src/columns/BaseObject.hpp	/^   bool mInitialValuesSetFlag        = false;$/;"	m	class:PV::BaseObject
mInitializeFromCheckpointDir	src/checkpointing/Checkpointer.hpp	/^   char *mInitializeFromCheckpointDir                                      = nullptr;$/;"	m	class:PV::Checkpointer
mInitialized	src/columns/RandomSeed.hpp	/^   bool mInitialized         = false;$/;"	m	class:PV::RandomSeed
mInputData	src/layers/InputLayer.hpp	/^   std::vector<Buffer<float>> mInputData;$/;"	m	class:PV::InputLayer
mInputLayer	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   InputLayer *mInputLayer  = nullptr;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mInputLayer	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   PV::InputLayer *mInputLayer  = nullptr;$/;"	m	class:HyPerConnCheckpointerTestProbe
mInputLayer	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   PV::InputLayer *mInputLayer   = nullptr;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mInputLayer	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   PV::InputLayer *mInputLayer   = nullptr;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mInputLayer	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   PV::InputLayer *mInputLayer  = nullptr;$/;"	m	class:PoolingConnCheckpointerTestProbe
mInputLayerName	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   char *mInputLayerName    = nullptr;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
mInputLoc	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   PVLayerLoc const mInputLoc;$/;"	m	class:CorrectState
mInputNf	src/layers/PvpLayer.hpp	/^   int mInputNf       = 0;$/;"	m	class:PV::PvpLayer
mInputNx	src/layers/PvpLayer.hpp	/^   int mInputNx       = 0;$/;"	m	class:PV::PvpLayer
mInputNy	src/layers/PvpLayer.hpp	/^   int mInputNy       = 0;$/;"	m	class:PV::PvpLayer
mInputPath	src/layers/InputLayer.hpp	/^   std::string mInputPath;$/;"	m	class:PV::InputLayer
mIntOptionalConfigMap	src/io/Configuration.hpp	/^   std::map<std::string, IntOptional> mIntOptionalConfigMap;$/;"	m	class:PV::Configuration
mIntegerConfigMap	src/io/Configuration.hpp	/^   std::map<std::string, int> mIntegerConfigMap;$/;"	m	class:PV::Configuration
mInternalConfidenceHeight	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mInternalConfidenceHeight = 64;$/;"	m	class:BBFind
mInternalConfidenceWidth	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mInternalConfidenceWidth = 64;$/;"	m	class:BBFind
mInterpNextMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mInterpNextMap;$/;"	m	class:BBFind
mInterpPreviousMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mInterpPreviousMap;$/;"	m	class:BBFind
mInterpolationMethod	src/layers/InputLayer.hpp	/^   BufferUtils::InterpolationMethod mInterpolationMethod = BufferUtils::BICUBIC;$/;"	m	class:PV::InputLayer
mInverseFlag	src/layers/InputLayer.hpp	/^   bool mInverseFlag = false;$/;"	m	class:PV::InputLayer
mKPreExtWeightSparsified	src/connections/HyPerConn.hpp	/^   std::set<int> mKPreExtWeightSparsified;$/;"	m	class:PV::HyPerConn
mKneeSlope	src/components/KneeTimeScaleController.hpp	/^   double mKneeSlope  = 1.0;$/;"	m	class:PV::KneeTimeScaleController
mKneeSlope	src/probes/KneeTimeScaleProbe.hpp	/^   double mKneeSlope  = 1.0;$/;"	m	class:PV::KneeTimeScaleProbe
mKneeThresh	src/components/KneeTimeScaleController.hpp	/^   double mKneeThresh = 1.0;$/;"	m	class:PV::KneeTimeScaleController
mKneeThresh	src/probes/KneeTimeScaleProbe.hpp	/^   double mKneeThresh = 1.0;$/;"	m	class:PV::KneeTimeScaleProbe
mLastCheckpointDir	src/checkpointing/Checkpointer.hpp	/^   char *mLastCheckpointDir                                                = nullptr;$/;"	m	class:PV::Checkpointer
mLastCheckpointWallclock	src/checkpointing/Checkpointer.hpp	/^   std::time_t mLastCheckpointWallclock = (std::time_t)0;$/;"	m	class:PV::Checkpointer
mLastTimeValue	src/probes/ColumnEnergyProbe.hpp	/^   double mLastTimeValue = -1;$/;"	m	class:PV::ColumnEnergyProbe
mLastTriggerTime	src/layers/HyPerLayer.hpp	/^   double mLastTriggerTime;$/;"	m	class:PV::HyPerLayer
mLastUpdateTime	src/layers/HyPerLayer.hpp	/^   double mLastUpdateTime;$/;"	m	class:PV::HyPerLayer
mLastUpdateTimes	src/columns/DataStore.hpp	/^   RingBuffer<double> *mLastUpdateTimes                 = nullptr;$/;"	m	class:PV::DataStore
mLayerArraySize	src/columns/HyPerCol.hpp	/^   size_t mLayerArraySize;$/;"	m	class:PV::HyPerCol
mLayerCube	src/columns/Publisher.hpp	/^   PVLayerCube *mLayerCube;$/;"	m	class:PV::Publisher
mLayerLoc	src/checkpointing/CheckpointEntryPvp.hpp	/^   PVLayerLoc const *mLayerLoc = nullptr;$/;"	m	class:PV::CheckpointEntryPvp
mLayerLoc	src/checkpointing/CheckpointEntryRandState.hpp	/^   PVLayerLoc const *mLayerLoc;$/;"	m	class:PV::CheckpointEntryRandState
mLayerLoc	src/utils/BorderExchange.hpp	/^   PVLayerLoc mLayerLoc;$/;"	m	class:PV::BorderExchange
mLayerStatus	src/columns/HyPerCol.hpp	/^   int *mLayerStatus;$/;"	m	class:PV::HyPerCol
mLayers	src/columns/HyPerCol.hpp	/^   std::vector<HyPerLayer *> mLayers; \/\/ HyPerLayer ** mLayers;$/;"	m	class:PV::HyPerCol
mList	src/structures/SparseList.hpp	/^   vector<Entry> mList;$/;"	m	class:PV::SparseList
mListOfFrames	demos/HeatMapLocalization/src/main.cpp	/^   std::list<std::string> mListOfFrames;$/;"	m	class:FrameServer	file:
mLogSlope	src/components/LogTimeScaleController.hpp	/^   double mLogSlope  = 1.0;$/;"	m	class:PV::LogTimeScaleController
mLogSlope	src/probes/LogTimeScaleProbe.hpp	/^   double mLogSlope  = 1.0;$/;"	m	class:PV::LogTimeScaleProbe
mLogThresh	src/components/LogTimeScaleController.hpp	/^   double mLogThresh = DBL_MAX_EXP;$/;"	m	class:PV::LogTimeScaleController
mLogThresh	src/probes/LogTimeScaleProbe.hpp	/^   double mLogThresh = DBL_MAX_EXP;$/;"	m	class:PV::LogTimeScaleProbe
mLuaPrintParamsStream	src/columns/HyPerCol.hpp	/^   PV_Stream *mLuaPrintParamsStream; \/\/ file pointer associated with the output lua file$/;"	m	class:PV::HyPerCol
mMPIBlock	src/checkpointing/CheckpointEntry.hpp	/^   MPIBlock const *mMPIBlock;$/;"	m	class:PV::CheckpointEntry
mMPIBlock	src/checkpointing/Checkpointer.hpp	/^   MPIBlock *mMPIBlock = nullptr;$/;"	m	class:PV::Checkpointer
mMPIBlock	src/utils/BorderExchange.hpp	/^   MPIBlock const *mMPIBlock = nullptr; \/\/ TODO: copy mpiBlock instead of storing a pointer.$/;"	m	class:PV::BorderExchange
mMaxAttempts	src/io/FileStream.hpp	/^   int const mMaxAttempts     = 5;$/;"	m	class:PV::FileStream
mMaxRectangleMemory	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mMaxRectangleMemory = 64;$/;"	m	class:BBFind
mMessageType	src/observerpattern/BaseMessage.hpp	/^   std::string mMessageType = "";$/;"	m	class:PV::BaseMessage
mMinBlobSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mMinBlobSize = 16;$/;"	m	class:BBFind
mMinNNZ	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   int mMinNNZ; \/\/ Minimum number of nonzero values$/;"	m	class:PV::InitUniformRandomWeightsParams
mMultiplier	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   float mMultiplier                            = 1.0f;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mMultiplier	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   float mMultiplier                            = 1.0f;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mName	src/checkpointing/CheckpointEntry.hpp	/^   std::string mName;$/;"	m	class:PV::CheckpointEntry
mName	src/checkpointing/Checkpointer.hpp	/^   std::string mName;$/;"	m	class:PV::Checkpointer
mName	src/columns/HyPerCol.hpp	/^   char *mName;$/;"	m	class:PV::HyPerCol
mName	src/components/AdaptiveTimeScaleController.hpp	/^   char *mName;$/;"	m	class:PV::AdaptiveTimeScaleController
mNeedToPublish	src/layers/HyPerLayer.hpp	/^   bool mNeedToPublish = true;$/;"	m	class:PV::HyPerLayer
mNextCheckpointSimtime	src/checkpointing/Checkpointer.hpp	/^   double mNextCheckpointSimtime        = 0.0;$/;"	m	class:PV::Checkpointer
mNextCheckpointStep	src/checkpointing/Checkpointer.hpp	/^   long int mNextCheckpointStep         = 0L; \/\/ kept only for consistency with HyPerCol$/;"	m	class:PV::Checkpointer
mNextCheckpointWallclock	src/checkpointing/Checkpointer.hpp	/^   std::time_t mNextCheckpointWallclock = (std::time_t)0;$/;"	m	class:PV::Checkpointer
mNextProgressTime	src/columns/HyPerCol.hpp	/^   double mNextProgressTime; \/\/ Next time to output a progress message$/;"	m	class:PV::HyPerCol
mNextSeed	src/columns/RandomSeed.hpp	/^   unsigned int mNextSeed    = 0U;$/;"	m	class:PV::RandomSeed
mNormalizeLuminanceFlag	src/layers/InputLayer.hpp	/^   bool mNormalizeLuminanceFlag = false;$/;"	m	class:PV::InputLayer
mNormalizeStdDev	src/layers/InputLayer.hpp	/^   bool mNormalizeStdDev = true;$/;"	m	class:PV::InputLayer
mNormalizerArraySize	src/columns/HyPerCol.hpp	/^   size_t mNormalizerArraySize;$/;"	m	class:PV::HyPerCol
mNormalizers	src/columns/HyPerCol.hpp	/^   std::vector<NormalizeBase *> mNormalizers; \/\/ NormalizeBase ** mNormalizers; \/\/ Objects for$/;"	m	class:PV::HyPerCol
mNumActive	src/columns/DataStore.hpp	/^   RingBuffer<long> *mNumActive                         = nullptr;$/;"	m	class:PV::DataStore
mNumArbors	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mNumArbors;$/;"	m	class:PV::CheckpointEntryWeightPvp
mNumBatch	src/columns/HyPerCol.hpp	/^   int mNumBatch;$/;"	m	class:PV::HyPerCol
mNumBatchGlobal	src/columns/HyPerCol.hpp	/^   int mNumBatchGlobal;$/;"	m	class:PV::HyPerCol
mNumBuffers	src/columns/DataStore.hpp	/^   int mNumBuffers;$/;"	m	class:PV::DataStore
mNumCheckpointsKept	src/checkpointing/Checkpointer.hpp	/^   int mNumCheckpointsKept                                                 = 2;$/;"	m	class:PV::Checkpointer
mNumColumns	src/structures/MPIBlock.hpp	/^   int mNumColumns           = 0;$/;"	m	class:PV::MPIBlock
mNumGpuGroup	src/columns/HyPerCol.hpp	/^   int mNumGpuGroup;$/;"	m	class:PV::HyPerCol
mNumItems	src/columns/DataStore.hpp	/^   int mNumItems;$/;"	m	class:PV::DataStore
mNumItems	src/structures/RingBuffer.hpp	/^   int mNumItems;$/;"	m	class:PV::RingBuffer
mNumLevels	src/columns/DataStore.hpp	/^   int mNumLevels;$/;"	m	class:PV::DataStore
mNumLevels	src/structures/RingBuffer.hpp	/^   int mNumLevels;$/;"	m	class:PV::RingBuffer
mNumNeighbors	src/utils/BorderExchange.hpp	/^   unsigned int mNumNeighbors;$/;"	m	class:PV::BorderExchange
mNumPhases	src/columns/HyPerCol.hpp	/^   int mNumPhases;$/;"	m	class:PV::HyPerCol
mNumRows	src/structures/MPIBlock.hpp	/^   int mNumRows              = 0;$/;"	m	class:PV::MPIBlock
mNumThreads	src/columns/HyPerCol.hpp	/^   int mNumThreads;$/;"	m	class:PV::HyPerCol
mNumValues	src/checkpointing/CheckpointEntryData.hpp	/^   size_t mNumValues;$/;"	m	class:PV::CheckpointEntryData
mNumXGlobal	src/columns/HyPerCol.hpp	/^   int mNumXGlobal;$/;"	m	class:PV::HyPerCol
mNumYGlobal	src/columns/HyPerCol.hpp	/^   int mNumYGlobal;$/;"	m	class:PV::HyPerCol
mObjName	src/checkpointing/CheckpointableFileStream.hpp	/^   string mObjName; \/\/ Used for CheckpointerDataInterface$/;"	m	class:PV::CheckpointableFileStream
mObjName	src/components/BatchIndexer.hpp	/^   std::string mObjName;$/;"	m	class:PV::BatchIndexer
mObjectHierarchy	src/columns/HyPerCol.hpp	/^   ObserverTable mObjectHierarchy;$/;"	m	class:PV::HyPerCol
mObjectMap	src/observerpattern/ObserverTable.hpp	/^   std::map<std::string, Observer *> mObjectMap;$/;"	m	class:PV::ObserverTable
mObjectVector	src/observerpattern/ObserverTable.hpp	/^   std::vector<Observer *> mObjectVector;$/;"	m	class:PV::ObserverTable
mObserverTable	src/checkpointing/Checkpointer.hpp	/^   ObserverTable mObserverTable;$/;"	m	class:PV::Checkpointer
mObsoleteParameterFound	src/columns/HyPerCol.hpp	/^   bool mObsoleteParameterFound = false;$/;"	m	class:PV::HyPerCol
mOffsetX	src/layers/InputLayer.hpp	/^   int mOffsetX = 0;$/;"	m	class:PV::InputLayer
mOffsetY	src/layers/InputLayer.hpp	/^   int mOffsetY = 0;$/;"	m	class:PV::InputLayer
mOldCheckpointDirectories	src/checkpointing/Checkpointer.hpp	/^   std::vector<std::string> mOldCheckpointDirectories; \/\/ A ring buffer of existing checkpoints,$/;"	m	class:PV::Checkpointer
mOldCheckpointDirectoriesIndex	src/checkpointing/Checkpointer.hpp	/^   int mOldCheckpointDirectoriesIndex =$/;"	m	class:PV::Checkpointer
mOldTimeScale	src/components/AdaptiveTimeScaleController.hpp	/^   std::vector<double> mOldTimeScale;$/;"	m	class:PV::AdaptiveTimeScaleController
mOldTimeScaleInfo	src/components/AdaptiveTimeScaleController.hpp	/^   TimeScaleInfo mTimeScaleInfo, mOldTimeScaleInfo;$/;"	m	class:PV::AdaptiveTimeScaleController
mOldTimeScaleTrue	src/components/AdaptiveTimeScaleController.hpp	/^   std::vector<double> mOldTimeScaleTrue;$/;"	m	class:PV::AdaptiveTimeScaleController
mOrigConnBorderExcessX	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   int mOrigConnBorderExcessX         = 0;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnBorderExcessY	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   int mOrigConnBorderExcessY         = 0;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnDataStore	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   float *mOrigConnDataStore                            = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnDataStoreDescriptor	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mOrigConnDataStoreDescriptor = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnGSyn	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   float *mOrigConnGSyn                            = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnGSynDescriptor	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnTensorDescriptor_t mOrigConnGSynDescriptor = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnPostLoc	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   PVLayerLoc const *mOrigConnPostLoc = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigConnPreLoc	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   PVLayerLoc const *mOrigConnPreLoc  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mOrigStdErr	src/columns/HyPerCol.hpp	/^   int mOrigStdErr;$/;"	m	class:PV::HyPerCol
mOrigStdOut	src/columns/HyPerCol.hpp	/^   int mOrigStdOut;$/;"	m	class:PV::HyPerCol
mOriginalConfidenceHeight	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mOriginalConfidenceHeight = -1;$/;"	m	class:BBFind
mOriginalConfidenceWidth	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mOriginalConfidenceWidth = -1;$/;"	m	class:BBFind
mOriginalConn	src/connections/TransposePoolingConn.hpp	/^   PoolingConn *mOriginalConn               = nullptr;$/;"	m	class:PV::TransposePoolingConn
mOriginalConnName	src/connections/TransposePoolingConn.hpp	/^   char *mOriginalConnName                  = nullptr;$/;"	m	class:PV::TransposePoolingConn
mOutStream	src/io/PrintStream.hpp	/^   std::ostream *mOutStream = nullptr;$/;"	m	class:PV::PrintStream
mOutputLayer	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   PV::HyPerLayer *mOutputLayer = nullptr;$/;"	m	class:HyPerConnCheckpointerTestProbe
mOutputLayer	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   PV::HyPerLayer *mOutputLayer  = nullptr;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mOutputLayer	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   PV::HyPerLayer *mOutputLayer  = nullptr;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mOutputLayer	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   PV::HyPerLayer *mOutputLayer = nullptr;$/;"	m	class:PoolingConnCheckpointerTestProbe
mOutputPath	src/columns/HyPerCol.hpp	/^   char *mOutputPath; \/\/ path to output file directory$/;"	m	class:PV::HyPerCol
mOutputStateStream	src/layers/HyPerLayer.hpp	/^   CheckpointableFileStream *mOutputStateStream = nullptr; \/\/ activity generated by outputState$/;"	m	class:PV::HyPerLayer
mOwnsCommunicator	src/columns/HyPerCol.hpp	/^   bool mOwnsCommunicator; \/\/ True if icComm was created by initialize, false if$/;"	m	class:PV::HyPerCol
mPVInitObj	src/columns/HyPerCol.hpp	/^   PV_Init *mPVInitObj;$/;"	m	class:PV::HyPerCol
mPadValue	src/layers/InputLayer.hpp	/^   float mPadValue = 0.0f;$/;"	m	class:PV::InputLayer
mParams	src/columns/HyPerCol.hpp	/^   PVParams *mParams; \/\/ manages input parameters$/;"	m	class:PV::HyPerCol
mParamsProcessedFlag	src/columns/HyPerCol.hpp	/^   bool mParamsProcessedFlag; \/\/ Initially false; set to true when processParams$/;"	m	class:PV::HyPerCol
mPatchData	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   PVPatch ***mPatchData;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPatchDataSize	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mPatchDataSize;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPatchSizeF	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mPatchSizeF;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPatchSizeX	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mPatchSizeX;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPatchSizeY	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mPatchSizeY;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerAdvanceDataStoreMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerCheckNotANumberMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerCopyFromGpuMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerOutputStateMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerPublishMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerRecvSynapticInputMessage
mPhase	src/columns/Messages.hpp	/^   int mPhase;$/;"	m	class:PV::LayerUpdateStateMessage
mPhaseRecvTimers	src/columns/HyPerCol.hpp	/^   std::vector<Timer *> mPhaseRecvTimers; \/\/ Timer ** mPhaseRecvTimers;$/;"	m	class:PV::HyPerCol
mPoolingDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   cudnnPoolingDescriptor_t mPoolingDescriptor  = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mPoolingDescriptor	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnPoolingDescriptor_t mPoolingDescriptor  = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mPoolingMode	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   cudnnPoolingMode_t mPoolingMode              = CUDNN_POOLING_MAX;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mPoolingMode	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   cudnnPoolingMode_t mPoolingMode              = CUDNN_POOLING_MAX;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mPoolingType	src/connections/TransposePoolingConn.hpp	/^   PoolingConn::AccumulateType mPoolingType = PoolingConn::MAX;$/;"	m	class:PV::TransposePoolingConn
mPostLoc	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   PVLayerLoc const *mPostLoc;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPostLoc	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   PVLayerLoc const *mPostLoc                   = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mPostLoc	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   PVLayerLoc const *mPostLoc                   = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mPreLoc	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   PVLayerLoc const *mPreLoc;$/;"	m	class:PV::CheckpointEntryWeightPvp
mPreLoc	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   PVLayerLoc const *mPreLoc                    = nullptr;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
mPreLoc	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   PVLayerLoc const *mPreLoc                    = nullptr;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
mPrevInfluence	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mPrevInfluence = 1.5f;$/;"	m	class:BBFind
mPrevLeakTau	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mPrevLeakTau = 16.0f;$/;"	m	class:BBFind
mPrintLuaStream	src/io/PVParams.hpp	/^   PV_Stream *mPrintLuaStream    = nullptr;$/;"	m	class:PV::PVParams
mPrintParamsFilename	src/columns/HyPerCol.hpp	/^   char *mPrintParamsFilename; \/\/ filename for outputting the mParams, including$/;"	m	class:PV::HyPerCol
mPrintParamsStream	src/columns/HyPerCol.hpp	/^   PV_Stream *mPrintParamsStream; \/\/ file pointer associated with mPrintParamsFilename$/;"	m	class:PV::HyPerCol
mPrintParamsStream	src/io/PVParams.hpp	/^   PV_Stream *mPrintParamsStream = nullptr;$/;"	m	class:PV::PVParams
mProbability	src/layers/DropoutLayer.hpp	/^   int mProbability = 0; \/\/ Value from 0-99 indicating per-neuron chance of dropout$/;"	m	class:PV::DropoutLayer
mProgressInterval	src/columns/HyPerCol.hpp	/^   double mProgressInterval; \/\/ Output progress after mSimTime increases by this$/;"	m	class:PV::HyPerCol
mPvpFrameCount	src/layers/PvpLayer.hpp	/^   int mPvpFrameCount = -1;$/;"	m	class:PV::PvpLayer
mRPos	src/structures/Image.hpp	/^   const int mRPos = 0;$/;"	m	class:PV::Image
mRToGray	src/structures/Image.hpp	/^   static constexpr const float mRToGray = 0.30f;$/;"	m	class:PV::Image
mRandomSeed	src/columns/HyPerCol.hpp	/^   unsigned int mRandomSeed;$/;"	m	class:PV::HyPerCol
mRandomSeed	src/components/BatchIndexer.hpp	/^   unsigned int mRandomSeed = 123456789;$/;"	m	class:PV::BatchIndexer
mRandomSeed	src/layers/InputLayer.hpp	/^   int mRandomSeed = 123456789;$/;"	m	class:PV::InputLayer
mRank	src/structures/MPIBlock.hpp	/^   int mRank                 = 0;$/;"	m	class:PV::MPIBlock
mReadyFlag	src/columns/HyPerCol.hpp	/^   bool mReadyFlag; \/\/ Initially false; set to true when communicateInitInfo,$/;"	m	class:PV::HyPerCol
mRectSizesPerCategory	demos/HeatMapLocalization/src/BBFind.hpp	/^      Map3 mRectSizesPerCategory;$/;"	m	class:BBFind
mRecvLayerBuffer	src/columns/HyPerCol.hpp	/^   std::vector<HyPerLayer *> mRecvLayerBuffer;$/;"	m	class:PV::HyPerCol
mRecvOnGpuFlag	src/columns/Messages.hpp	/^   bool mRecvOnGpuFlag;$/;"	m	class:PV::LayerRecvSynapticInputMessage
mRecvOnGpuFlag	src/columns/Messages.hpp	/^   bool mRecvOnGpuFlag;$/;"	m	class:PV::LayerUpdateStateMessage
mReductionPending	src/connections/HyPerConn.hpp	/^   bool mReductionPending = false;$/;"	m	class:PV::HyPerConn
mRescaleMethod	src/layers/InputLayer.hpp	/^   BufferUtils::RescaleMethod mRescaleMethod;$/;"	m	class:PV::InputLayer
mResetToStartOnLoop	src/layers/InputLayer.hpp	/^   bool mResetToStartOnLoop = false;$/;"	m	class:PV::InputLayer
mRowIndex	src/structures/MPIBlock.hpp	/^   int mRowIndex             = 0;$/;"	m	class:PV::MPIBlock
mRunTimer	src/columns/HyPerCol.hpp	/^   Timer *mRunTimer;$/;"	m	class:PV::HyPerCol
mRunWithoutHarnessFlag	demos/HeatMapLocalization/src/main.cpp	/^   bool mRunWithoutHarnessFlag = false;$/;"	m	class:FrameServer	file:
mSharedWeights	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   bool mSharedWeights;$/;"	m	class:PV::CheckpointEntryWeightPvp
mSimTime	src/checkpointing/Checkpointer.hpp	/^      double mSimTime                 = 0.0;$/;"	m	struct:PV::Checkpointer::TimeInfo
mSimTime	src/columns/HyPerCol.hpp	/^   double mSimTime;$/;"	m	class:PV::HyPerCol
mSkipAmounts	src/components/BatchIndexer.hpp	/^   std::vector<int> mSkipAmounts;$/;"	m	class:PV::BatchIndexer
mSkipFrameIndex	src/layers/InputLayer.hpp	/^   std::vector<int> mSkipFrameIndex;$/;"	m	class:PV::InputLayer
mSkipInterval	src/probes/ColumnEnergyProbe.hpp	/^   int mSkipInterval     = 0;$/;"	m	class:PV::ColumnEnergyProbe
mSkipTimer	src/probes/ColumnEnergyProbe.hpp	/^   int mSkipTimer        = 0;$/;"	m	class:PV::ColumnEnergyProbe
mSlidingAverageSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      int mSlidingAverageSize = 4;$/;"	m	class:BBFind
mSparseFlag	src/columns/DataStore.hpp	/^   bool mSparseFlag;$/;"	m	class:PV::DataStore
mSparseFraction	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   float mSparseFraction; \/\/ Percent of zero values in weight patch$/;"	m	class:PV::InitUniformRandomWeightsParams
mSparseWeightIndices	src/connections/HyPerConn.hpp	/^   IndexMapType mSparseWeightIndices;$/;"	m	class:PV::HyPerConn
mSparseWeightInfo	src/connections/HyPerConn.hpp	/^   SparseWeightInfo mSparseWeightInfo;$/;"	m	class:PV::HyPerConn
mSparseWeightValues	src/connections/HyPerConn.hpp	/^   WeightMapType mSparseWeightValues;$/;"	m	class:PV::HyPerConn
mSparseWeightsAllocated	src/connections/HyPerConn.hpp	/^   std::vector<bool> mSparseWeightsAllocated;$/;"	m	class:PV::HyPerConn
mStartBatch	src/structures/MPIBlock.hpp	/^   int mStartBatch           = 0;$/;"	m	class:PV::MPIBlock
mStartColumn	src/structures/MPIBlock.hpp	/^   int mStartColumn          = 0;$/;"	m	class:PV::MPIBlock
mStartFrameIndex	src/layers/InputLayer.hpp	/^   std::vector<int> mStartFrameIndex;$/;"	m	class:PV::InputLayer
mStartIndices	src/components/BatchIndexer.hpp	/^   std::vector<int> mStartIndices;$/;"	m	class:PV::BatchIndexer
mStartRow	src/structures/MPIBlock.hpp	/^   int mStartRow             = 0;$/;"	m	class:PV::MPIBlock
mStartTime	src/columns/HyPerCol.hpp	/^   double mStartTime;$/;"	m	class:PV::HyPerCol
mStartingUpdateNumber	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   int mStartingUpdateNumber    = 0;$/;"	m	class:HyPerConnCheckpointerTestProbe
mStartingUpdateNumber	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   int mStartingUpdateNumber     = 0;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mStartingUpdateNumber	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   int mStartingUpdateNumber     = 0;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mStartingUpdateNumber	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   int mStartingUpdateNumber    = 0;$/;"	m	class:PoolingConnCheckpointerTestProbe
mStepNumber	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   long int mStepNumber; \/\/ The current step number, based on the values of timed and dt passed to outputState.  Should be the same as the number of times HyPerCol::advanceTime has been called, but we want to avoid calling HyPerCol methods.$/;"	m	class:BBFindConfRemapProbe
mStepNumber	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   long int mStepNumber; \/\/ The current step number, based on the values of timed and dt passed to outputState.  Should be the same as the number of times HyPerCol::advanceTime has been called, but we want to avoid calling HyPerCol methods.$/;"	m	class:LocalizationProbe
mStopTime	src/columns/HyPerCol.hpp	/^   double mStopTime; \/\/ time to stop time$/;"	m	class:PV::HyPerCol
mStream	src/utils/PVLog.cpp	/^   std::basic_ostream<T> *mStream = nullptr;$/;"	m	class:PV::LogFileStream	file:
mStringConfigMap	src/io/Configuration.hpp	/^   std::map<std::string, std::string> mStringConfigMap;$/;"	m	class:PV::Configuration
mSuppressNonplasticCheckpoints	src/checkpointing/Checkpointer.hpp	/^   bool mSuppressNonplasticCheckpoints                                     = false;$/;"	m	class:PV::Checkpointer
mTags	src/utils/BorderExchange.cpp	/^std::vector<int> const BorderExchange::mTags = {0, 33, 34, 35, 34, 34, 35, 34, 33};$/;"	m	class:PV::std::BorderExchange	file:
mTags	src/utils/BorderExchange.hpp	/^   static std::vector<int> const mTags;$/;"	m	class:PV::BorderExchange::std
mTargetProbe	src/probes/AdaptiveTimeScaleProbe.hpp	/^   BaseProbe *mTargetProbe                                   = nullptr;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mTauFactor	src/components/AdaptiveTimeScaleController.hpp	/^   double mTauFactor;$/;"	m	class:PV::AdaptiveTimeScaleController
mTestFailed	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   bool mTestFailed             = false;$/;"	m	class:HyPerConnCheckpointerTestProbe
mTestFailed	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   bool mTestFailed              = false;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mTestFailed	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   bool mTestFailed              = false;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mTestFailed	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   bool mTestFailed             = false;$/;"	m	class:PoolingConnCheckpointerTestProbe
mThreshold	demos/HeatMapLocalization/src/BBFind.hpp	/^      float mThreshold = 0.95f;$/;"	m	class:BBFind
mTime	src/columns/Messages.hpp	/^   double mTime;$/;"	m	class:PV::ConnectionFinalizeUpdateMessage
mTime	src/columns/Messages.hpp	/^   double mTime;$/;"	m	class:PV::ConnectionOutputMessage
mTime	src/columns/Messages.hpp	/^   double mTime;$/;"	m	class:PV::ConnectionUpdateMessage
mTime	src/columns/Messages.hpp	/^   double mTime;$/;"	m	class:PV::LayerOutputStateMessage
mTime	src/columns/Messages.hpp	/^   double mTime;$/;"	m	class:PV::LayerPublishMessage
mTime	src/columns/Messages.hpp	/^   float mTime;$/;"	m	class:PV::LayerRecvSynapticInputMessage
mTime	src/columns/Messages.hpp	/^   float mTime;$/;"	m	class:PV::LayerUpdateStateMessage
mTimeInfo	src/checkpointing/Checkpointer.hpp	/^   TimeInfo mTimeInfo;$/;"	m	class:PV::Checkpointer
mTimeInfoCheckpointEntry	src/checkpointing/Checkpointer.hpp	/^   std::shared_ptr<CheckpointEntryData<TimeInfo>> mTimeInfoCheckpointEntry = nullptr;$/;"	m	class:PV::Checkpointer
mTimeScale	src/components/AdaptiveTimeScaleController.hpp	/^      std::vector<double> mTimeScale;$/;"	m	struct:PV::AdaptiveTimeScaleController::TimeScaleInfo
mTimeScaleInfo	src/components/AdaptiveTimeScaleController.hpp	/^   TimeScaleInfo mTimeScaleInfo, mOldTimeScaleInfo;$/;"	m	class:PV::AdaptiveTimeScaleController
mTimeScaleInfoPtr	src/components/AdaptiveTimeScaleController.hpp	/^   AdaptiveTimeScaleController::TimeScaleInfo *mTimeScaleInfoPtr;$/;"	m	class:PV::CheckpointEntryTimeScaleInfo
mTimeScaleMax	src/components/AdaptiveTimeScaleController.hpp	/^      std::vector<double> mTimeScaleMax;$/;"	m	struct:PV::AdaptiveTimeScaleController::TimeScaleInfo
mTimeScaleStream	src/columns/HyPerCol.hpp	/^   std::ofstream mTimeScaleStream;$/;"	m	class:PV::HyPerCol
mTimeScaleTrue	src/components/AdaptiveTimeScaleController.hpp	/^      std::vector<double> mTimeScaleTrue;$/;"	m	struct:PV::AdaptiveTimeScaleController::TimeScaleInfo
mTimer	src/columns/Messages.hpp	/^   Timer *mTimer;$/;"	m	class:PV::LayerCopyFromGpuMessage
mTimer	src/columns/Messages.hpp	/^   Timer *mTimer;$/;"	m	class:PV::LayerRecvSynapticInputMessage
mTimers	src/checkpointing/Checkpointer.hpp	/^   std::vector<Timer const *> mTimers;$/;"	m	class:PV::Checkpointer
mTimestampStream	src/layers/InputLayer.hpp	/^   CheckpointableFileStream *mTimestampStream = nullptr;$/;"	m	class:PV::InputLayer
mTmpDir	demos/HeatMapLocalization/src/main.cpp	/^   char * mTmpDir = nullptr;$/;"	m	class:FrameServer	file:
mTransposePoolingDeliverKernel	src/connections/TransposePoolingConn.hpp	/^   PVCuda::CudaTransposePoolingDeliverKernel *mTransposePoolingDeliverKernel = nullptr;$/;"	m	class:PV::TransposePoolingConn
mUnsignedIntConfigMap	src/io/Configuration.hpp	/^   std::map<std::string, unsigned int> mUnsignedIntConfigMap;$/;"	m	class:PV::Configuration
mUpdateLayerBuffer	src/columns/HyPerCol.hpp	/^   std::vector<HyPerLayer *> mUpdateLayerBuffer;$/;"	m	class:PV::HyPerCol
mUpdateLayerBufferGpu	src/columns/HyPerCol.hpp	/^   std::vector<HyPerLayer *> mUpdateLayerBufferGpu;$/;"	m	class:PV::HyPerCol
mUpdateNumber	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   int mUpdateNumber    = 0;$/;"	m	class:CorrectState
mUpdateNumber	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   int mUpdateNumber    = 0;$/;"	m	class:CorrectState
mUpdateNumber	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   int mUpdateNumber    = 0;$/;"	m	class:CorrectState
mUpdateNumber	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   int mUpdateNumber = 0;$/;"	m	class:CorrectState
mUpdateOnGpuFlag	src/columns/Messages.hpp	/^   bool mUpdateOnGpuFlag;$/;"	m	class:PV::LayerUpdateStateMessage
mUseDefault	src/io/Configuration.hpp	/^      bool mUseDefault = false;$/;"	m	struct:PV::Configuration::IntOptional
mUseInputBCflag	src/layers/InputLayer.hpp	/^   bool mUseInputBCflag = false;$/;"	m	class:PV::InputLayer
mUsingFileList	src/layers/InputLayer.hpp	/^   bool mUsingFileList = false;$/;"	m	class:PV::InputLayer
mValue	src/io/Configuration.hpp	/^      int mValue       = -1;$/;"	m	struct:PV::Configuration::IntOptional
mValueV	src/initv/ConstantV.hpp	/^   float mValueV;$/;"	m	class:PV::ConstantV
mValuesSet	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   bool mValuesSet              = false;$/;"	m	class:HyPerConnCheckpointerTestProbe
mValuesSet	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   bool mValuesSet               = false;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
mValuesSet	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   bool mValuesSet               = false;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
mValuesSet	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   bool mValuesSet              = false;$/;"	m	class:PoolingConnCheckpointerTestProbe
mVerifyWrites	src/columns/HyPerCol.hpp	/^   bool mVerifyWrites; \/\/ Flag to indicate whether calls to PV_fwrite do a$/;"	m	class:PV::HyPerCol
mVerifyWrites	src/components/AdaptiveTimeScaleController.hpp	/^   bool mVerifyWrites;$/;"	m	class:PV::AdaptiveTimeScaleController
mVerifyWrites	src/io/FileStream.hpp	/^   bool mVerifyWrites         = false;$/;"	m	class:PV::FileStream
mVerifyWritesFlag	src/checkpointing/Checkpointer.hpp	/^   bool mVerifyWritesFlag                                                  = true;$/;"	m	class:PV::Checkpointer
mVfilename	src/initv/InitVFromFile.hpp	/^   char *mVfilename = nullptr;$/;"	m	class:PV::InitVFromFile
mWMax	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   float mWMax;$/;"	m	class:PV::InitUniformRandomWeightsParams
mWMin	src/weightinit/InitUniformRandomWeightsParams.hpp	/^   float mWMin;$/;"	m	class:PV::InitUniformRandomWeightsParams
mWarmStart	src/checkpointing/Checkpointer.hpp	/^   bool mWarmStart                                                         = false;$/;"	m	class:PV::Checkpointer
mWeightData	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   float **mWeightData;$/;"	m	class:PV::CheckpointEntryWeightPvp
mWeightDataSize	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   int mWeightDataSize;$/;"	m	class:PV::CheckpointEntryWeightPvp
mWeightSparsity	src/connections/HyPerConn.hpp	/^   float mWeightSparsity;$/;"	m	class:PV::HyPerConn
mWidth	src/structures/Buffer.hpp	/^   int mWidth    = 0;$/;"	m	class:PV::Buffer
mWidthOfFinalStepNumber	src/checkpointing/Checkpointer.hpp	/^   int mWidthOfFinalStepNumber          = 0;$/;"	m	class:PV::Checkpointer
mWrapToStartIndex	src/components/BatchIndexer.hpp	/^   bool mWrapToStartIndex   = true;$/;"	m	class:PV::BatchIndexer
mWriteFrameToTimestamp	src/layers/InputLayer.hpp	/^   bool mWriteFrameToTimestamp = true;$/;"	m	class:PV::InputLayer
mWriteProgressToErr	src/columns/HyPerCol.hpp	/^   bool mWriteProgressToErr; \/\/ Whether to write progress step to standard error$/;"	m	class:PV::HyPerCol
mWriteTimeScaleFieldnames	src/columns/HyPerCol.hpp	/^   bool mWriteTimeScaleFieldnames; \/\/ determines whether fieldnames are written to$/;"	m	class:PV::HyPerCol
mWriteTimeScaleFieldnames	src/components/AdaptiveTimeScaleController.hpp	/^   bool mWriteTimeScaleFieldnames;$/;"	m	class:PV::AdaptiveTimeScaleController
mWriteTimeScaleFieldnames	src/probes/AdaptiveTimeScaleProbe.hpp	/^   bool mWriteTimeScaleFieldnames = true;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mWriteTimeScales	src/components/AdaptiveTimeScaleController.hpp	/^   bool mWriteTimeScales;$/;"	m	class:PV::AdaptiveTimeScaleController
mWriteTimeScales	src/probes/AdaptiveTimeScaleProbe.hpp	/^   bool mWriteTimeScales          = true;$/;"	m	class:PV::AdaptiveTimeScaleProbe
mWriteTimescales	src/columns/HyPerCol.hpp	/^   bool mWriteTimescales;$/;"	m	class:PV::HyPerCol
mWriteVerifier	src/io/FileStream.hpp	/^   FileStream *mWriteVerifier = nullptr;$/;"	m	class:PV::FileStream
mXMargins	src/checkpointing/CheckpointEntryPvp.hpp	/^   int mXMargins = 0;$/;"	m	class:PV::CheckpointEntryPvp
mYMargins	src/checkpointing/CheckpointEntryPvp.hpp	/^   int mYMargins = 0;$/;"	m	class:PV::CheckpointEntryPvp
m_conndata	tests/Shared/ColumnArchive.hpp	/^   std::vector<ConnArchive> m_conndata;$/;"	m	class:ColumnArchive
m_cycle_end	src/utils/Clock.hpp	/^   uint64_t m_cycle_end;$/;"	m	class:PV::Clock
m_cycle_start	src/utils/Clock.hpp	/^   uint64_t m_cycle_start;$/;"	m	class:PV::Clock
m_dWReduceRequests	src/connections/HyPerConn.hpp	/^   std::vector<MPI_Request> m_dWReduceRequests;$/;"	m	class:PV::HyPerConn
m_end	src/utils/Clock.hpp	/^   clock_t m_end;$/;"	m	class:PV::Clock
m_layerdata	tests/Shared/ColumnArchive.hpp	/^   std::vector<LayerArchive> m_layerdata;$/;"	m	class:ColumnArchive
m_mach_end	src/utils/Clock.hpp	/^   uint64_t m_mach_end;$/;"	m	class:PV::Clock
m_mach_start	src/utils/Clock.hpp	/^   uint64_t m_mach_start;$/;"	m	class:PV::Clock
m_rend	src/utils/Clock.hpp	/^   double m_rend;$/;"	m	class:PV::Clock
m_rstart	src/utils/Clock.hpp	/^   double m_rstart;$/;"	m	class:PV::Clock
m_start	src/utils/Clock.hpp	/^   clock_t m_start;$/;"	m	class:PV::Clock
m_tend	src/utils/Clock.hpp	/^   double m_tend;$/;"	m	class:PV::Clock
m_tstart	src/utils/Clock.hpp	/^   double m_tstart;$/;"	m	class:PV::Clock
m_tv_end	src/utils/Clock.hpp	/^   struct timeval m_tv_end;$/;"	m	class:PV::Clock	typeref:struct:PV::Clock::timeval
m_tv_start	src/utils/Clock.hpp	/^   struct timeval m_tv_start;$/;"	m	class:PV::Clock	typeref:struct:PV::Clock::timeval
ma	src/io/stb_image.h	/^   unsigned int mr, mg, mb, ma, all_a;$/;"	m	struct:__anon17
mach_time_to_sec	src/utils/Clock.cpp	/^double Clock::mach_time_to_sec(uint64_t elapsed) {$/;"	f	class:PV::Clock
main	cmake/ExampleProject/src/main.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	demos/HeatMapLocalization/src/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/io/PVParams.cpp	/^int main() {$/;"	f
main	tests/ANNLayerVerticesTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/AdjustAxonalArborsTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ArborSystemTest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/AvgPoolTest/src/AvgPoolTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BackgroundLayerTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BasicSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BatchCheckpointSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BatchIndexerTest/src/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/BatchMPICheckpointSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BatchSweepTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BinningLayerTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/BufferTest/src/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/BufferUtilsMPITest/src/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/BufferUtilsPvpTest/src/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/CheckpointEntryTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CheckpointSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CheckpointWeightTest/src/CheckpointWeightTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CheckpointerClassTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CheckpointerMPIBlockTest/src/CheckpointerMPIBlockTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CloneHyPerConnTest/src/CloneHyPerConnTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CloneKernelConnTest/src/CloneKernelConnTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CloneVLayerTest/src/CloneVLayerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CommandLineRestartTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConfigFileSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConfigParserTest/src/ConfigParserTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConnectionRestartTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConstantLayerTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConvertRateToSpikeCountTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ConvertToGrayscaleTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/CopyConnTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/DataStoreTest/src/DataStoreTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/DatastoreDelayTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/DelaysToFeaturesTest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/DeleteOlderCheckpointsTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/DryRunFlagTest/src/DryRunFlagTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/GPULCATest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/GPUSystemTest/src/GPUSystemTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/GenericSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/GroupNormalizationTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ImageOffsetTest/src/ImageOffsetTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ImageSystemTest/src/ImageSystemTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ImageTest/src/main.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/ImportParamsTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ImprintConnTest/src/ImprintConnTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/InitWeightsTest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/InitializeFromCheckpointDirTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/InputSystemTest/src/MovieSystemTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/KernelActivationTest/src/KernelActivationTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/KernelTest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/LCATest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/LIFTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/LayerPhaseTest/src/LayerPhaseTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/LayerRestartTest/src/LayerRestartTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MPIBlockTest/src/MPIBlockTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MPITest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MarginWidthTest/src/MarginWidthTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MaskLayerTest/src/MaskTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MaxPoolTest/src/MaxPoolTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MomentumLCATest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/MomentumTest/src/MomentumTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/NormalizeSubclassSystemTest/src/NormalizeSubclassSystemTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/NormalizeSystemTest/src/NormalizeSystemTest.cpp	/^int main(int argc, char *argv[]) { return buildandrun(argc, argv, NULL, customexit); }$/;"	f
main	tests/ParameterSweepTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ParamsLuaTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/PlasticConnTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/PlasticTransposeConnTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/PointProbeTest/src/PointProbeTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/PoolingGPUTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/RandStateSystemTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/RandomOrderTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ReadArborFileTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ReceiveFromPostTest/src/ReceiveFromPostTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ReduceAcrossBatchTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/RescaleLayerTest/src/RescaleLayerTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ResetStateOnTriggerTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/SegmentTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ShrunkenPatchFlagTest/src/ShrunkenPatchFlagTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/ShrunkenPatchTest/src/pv.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/StochasticReleaseTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/SumPoolTest/src/SumPoolTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/TotalEnergyTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/TriggerTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/UnequalPatchSizeTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/UpdateFromCloneTest/src/UpdateFromCloneTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/WriteActivitySparseTest/src/WriteActivitySparseTest.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/WriteSparseFileTest/src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_border_activity/src/test_border_activity.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_cocirc/src/test_cocirc.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_constant_input/src/test_constant_input.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_datatypes/src/test_datatypes.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_delta/src/test_delta.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_delta_pos/src/test_delta_pos.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_extend_border/src/test_extend_border.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_gauss2d/src/test_gauss2d.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_kg/src/test_kg.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_kxpos/src/test_kxpos.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_kypos/src/test_kypos.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_mirror_BCs/src/test_mirror_BCs.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_mpi_specifyrowscolumns/src/test_mpi_specifyrowscolumns.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_nearby_neighbor/src/test_nearby_neighbor.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_patch_head/src/test_patch_head.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_post_weights/src/test_post_weights.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/test_sign/src/test_sign.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tools/readpvpheader.c	/^int main(int argc, char * argv[])$/;"	f
main	tutorials/Total_Energy/src/main.cpp	/^int main(int argc, char * argv[]) {$/;"	f
makeDirectory	src/io/fileio.cpp	/^static inline int makeDirectory(char const *dir) {$/;"	f	namespace:PV
makeEdgeDistanceMap	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map2 BBFind::makeEdgeDistanceMap(const Map2 confMap)$/;"	f	class:BBFind
makeGrayScaleImage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::makeGrayScaleImage(int b) {$/;"	f	class:BBFindConfRemapProbe
makeGrayScaleImage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::makeGrayScaleImage() {$/;"	f	class:LocalizationProbe
makeMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::makeMontage(int b) {$/;"	f	class:BBFindConfRemapProbe
makeMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::makeMontage() {$/;"	f	class:LocalizationProbe
make_original_layer_conns	python/param_draw.py	/^    def make_original_layer_conns(self):$/;"	m	class:Param_Parser
make_pooling_layer_conns	python/param_draw.py	/^    def make_pooling_layer_conns(self):$/;"	m	class:Param_Parser
manyScaleX	src/cudakernels/CudaRecvPost.hpp	/^   int manyScaleX;$/;"	m	struct:PVCuda::recv_post_params
manyScaleY	src/cudakernels/CudaRecvPost.hpp	/^   int manyScaleY;$/;"	m	struct:PVCuda::recv_post_params
marginIndices	src/layers/HyPerLayer.hpp	/^   int *marginIndices; \/\/ indices of neurons in margin$/;"	m	class:PV::HyPerLayer
markActiveIndicesOutOfSync	src/columns/DataStore.cpp	/^void DataStore::markActiveIndicesOutOfSync(int bufferId, int level) {$/;"	f	class:PV::DataStore
marker	src/io/stb_image.h	/^   unsigned char marker; \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon9
mask	src/connections/HyPerConn.hpp	/^   HyPerLayer *mask;$/;"	m	class:PV::HyPerConn
maskFeatureIdx	src/connections/HyPerConn.hpp	/^   int maskFeatureIdx;$/;"	m	class:PV::HyPerConn
maskHasSingleFeature	src/probes/AbstractNormProbe.hpp	/^   bool maskHasSingleFeature() { return singleFeatureMask; }$/;"	f	class:PV::AbstractNormProbe
maskLayer	src/layers/MaskLayer.hpp	/^   HyPerLayer *maskLayer;$/;"	m	class:PV::MaskLayer
maskLayer	src/probes/AbstractNormProbe.hpp	/^   HyPerLayer *maskLayer;$/;"	m	class:PV::AbstractNormProbe
maskLayerName	src/connections/HyPerConn.hpp	/^   char *maskLayerName;$/;"	m	class:PV::HyPerConn
maskLayerName	src/layers/MaskLayer.hpp	/^   char *maskLayerName;$/;"	m	class:PV::MaskLayer
maskLayerName	src/probes/AbstractNormProbe.hpp	/^   char *maskLayerName;$/;"	m	class:PV::AbstractNormProbe
maskMethod	src/layers/MaskLayer.hpp	/^   char *maskMethod;$/;"	m	class:PV::MaskLayer
maskMethod	tests/MaskLayerTest/src/MaskTestLayer.hpp	/^   char *maskMethod;$/;"	m	class:PV::MaskTestLayer
master_list	python/timers_txt_to_csv.py	/^master_list = file.readlines();$/;"	v
masterlist	python/analysis_parse.py	/^masterlist = []$/;"	v
matToImage	python/deprecated/plotRecon.py	/^def matToImage(mat):$/;"	f
matToImage	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^def matToImage(mat):$/;"	f
maxCount	src/io/PVParams.hpp	/^   int maxCount;$/;"	m	class:PV::ParameterStack
maxCount	src/layers/ShuffleLayer.hpp	/^   long *maxCount;$/;"	m	class:PV::ShuffleLayer
maxDelaySteps	src/connections/BaseConnection.cpp	/^int BaseConnection::maxDelaySteps() {$/;"	f	class:PV::BaseConnection
maxDetections	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   unsigned int maxDetections;$/;"	m	class:LocalizationProbe
maxRate	src/layers/HyPerLayer.hpp	/^   float maxRate; \/\/ Maximum rate of activity.  HyPerLayer sets to 1\/dt during initialize(); derived$/;"	m	class:PV::HyPerLayer
maxRecon	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   float maxRecon;$/;"	m	struct:convTableStruct_
maxRectangleMemory	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int maxRectangleMemory;$/;"	m	class:BBFindConfRemapLayer
maxRectangleMemory	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int maxRectangleMemory;$/;"	m	class:LocalizationBBFindProbe
maxThreads	src/columns/PV_Init.hpp	/^   int maxThreads;$/;"	m	class:PV::PV_Init
maxV	src/initv/UniformRandomV.hpp	/^   float maxV = (float)1;$/;"	m	class:PV::UniformRandomV
maxVal	python/probe_analysis/noArborReadProbe.py	/^        maxVal = max(max(workingLines)) #min of all vals across all time$/;"	v
maxVals	python/probe_analysis/readProbe.py	/^                maxVals    = [max(max(workingLines[arborID][:][:])) for arborID in range(numArbors[tok])]$/;"	v
maxWeight	python/probe_analysis/noArborReadProbe.py	/^            maxWeight = maxVal$/;"	v
maxWeight	src/connections/HyPerConn.cpp	/^float HyPerConn::maxWeight(int arborId) {$/;"	f	class:PV::HyPerConn
maxWeight	src/connections/PoolingConn.cpp	/^float PoolingConn::maxWeight(int arborId) {$/;"	f	class:PV::PoolingConn
maxX	src/layers/SegmentLayer.hpp	/^   std::map<int, int> maxX;$/;"	m	class:PV::SegmentLayer
maxXBuf	src/layers/SegmentLayer.hpp	/^   int *maxXBuf;$/;"	m	class:PV::SegmentLayer
maxY	src/layers/SegmentLayer.hpp	/^   std::map<int, int> maxY;$/;"	m	class:PV::SegmentLayer
maxYBuf	src/layers/SegmentLayer.hpp	/^   int *maxYBuf;$/;"	m	class:PV::SegmentLayer
max_x	src/io/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
max_y	src/io/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
maxcode	src/io/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon12
maxcode	src/io/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon8
mb	src/io/stb_image.h	/^   unsigned int mr, mg, mb, ma, all_a;$/;"	m	struct:__anon17
meanV	src/initv/GaussianRandomV.hpp	/^   float meanV  = (float)0;$/;"	m	class:PV::GaussianRandomV
mermaid_writeout	python/param_draw.py	/^def mermaid_writeout(parser_output, colorby, legend):$/;"	f
message	src/utils/Timer.hpp	/^   char *message;$/;"	m	class:PV::Timer
method	src/layers/LIF.hpp	/^   char method; \/\/ 'a', 'b', or 'o', the first character of methodString$/;"	m	class:PV::LIF
methodString	src/layers/LIF.hpp	/^   char *methodString; \/\/ 'arma', 'before', or 'original'$/;"	m	class:PV::LIF
mg	src/io/stb_image.h	/^   unsigned int mr, mg, mb, ma, all_a;$/;"	m	struct:__anon17
minBlobSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int minBlobSize;$/;"	m	class:BBFindConfRemapLayer
minBlobSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int minBlobSize;$/;"	m	class:LocalizationBBFindProbe
minBoundingBoxHeight	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int minBoundingBoxHeight = 6;$/;"	m	class:BBFindConfRemapProbe
minBoundingBoxHeight	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int minBoundingBoxHeight;$/;"	m	class:LocalizationProbe
minBoundingBoxWidth	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int minBoundingBoxWidth = 6;$/;"	m	class:BBFindConfRemapProbe
minBoundingBoxWidth	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int minBoundingBoxWidth;$/;"	m	class:LocalizationProbe
minL2NormTolerated	src/normalizers/NormalizeL2.hpp	/^   float minL2NormTolerated; \/\/ Error if sqrt(sum(weights^2)) in any patch is less than this amount.$/;"	m	class:PV::NormalizeL2
minL3NormTolerated	tests/NormalizeSubclassSystemTest/src/NormalizeL3.hpp	/^   float minL3NormTolerated; \/\/ Error if sqrt(sum(|weights|^3)) in any patch is less than this$/;"	m	class:PV::NormalizeL3
minMaxTolerated	src/normalizers/NormalizeMax.hpp	/^   float minMaxTolerated; \/\/ Error if abs(sum(weights)) in any patch is less than this amount.$/;"	m	class:PV::NormalizeMax
minRecon	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   float minRecon;$/;"	m	struct:convTableStruct_
minSeed	src/columns/RandomSeed.cpp	/^unsigned int constexpr RandomSeed::minSeed;$/;"	m	class:PV::RandomSeed	file:
minSeed	src/columns/RandomSeed.hpp	/^   static unsigned int constexpr minSeed = 10000000U;$/;"	m	class:PV::RandomSeed
minSumTolerated	src/normalizers/NormalizeContrastZeroMean.hpp	/^   float minSumTolerated; \/\/ Error if abs(sum(weights)) in any patch is less than this amount.$/;"	m	class:PV::NormalizeContrastZeroMean
minSumTolerated	src/normalizers/NormalizeSum.hpp	/^   float minSumTolerated; \/\/ Error if abs(sum(weights)) in any patch is less than this amount.$/;"	m	class:PV::NormalizeSum
minV	src/initv/UniformRandomV.hpp	/^   float minV = (float)0;$/;"	m	class:PV::UniformRandomV
minVal	python/probe_analysis/noArborReadProbe.py	/^        minVal = min(min(workingLines)) #max of all vals across all time$/;"	v
minVals	python/probe_analysis/readProbe.py	/^                minVals    = [min(min(workingLines[arborID][:][:])) for arborID in range(numArbors[tok])]$/;"	v
minWeight	src/connections/HyPerConn.cpp	/^float HyPerConn::minWeight(int arborId) {$/;"	f	class:PV::HyPerConn
minWeight	src/connections/PoolingConn.cpp	/^float PoolingConn::minWeight(int arborId) {$/;"	f	class:PV::PoolingConn
minX	src/layers/SegmentLayer.hpp	/^   std::map<int, int> minX;$/;"	m	class:PV::SegmentLayer
minXBuf	src/layers/SegmentLayer.hpp	/^   int *minXBuf;$/;"	m	class:PV::SegmentLayer
minY	src/layers/SegmentLayer.hpp	/^   std::map<int, int> minY;$/;"	m	class:PV::SegmentLayer
minYBuf	src/layers/SegmentLayer.hpp	/^   int *minYBuf;$/;"	m	class:PV::SegmentLayer
min_weight	src/weightinit/InitCocircWeightsParams.hpp	/^   float min_weight; \/\/ read in as param$/;"	m	class:PV::InitCocircWeightsParams
mirrorBCflag	src/layers/HyPerLayer.hpp	/^   bool mirrorBCflag; \/\/ true when mirror BC are to be applied$/;"	m	class:PV::HyPerLayer
mirrorInteriorToBorder	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorInteriorToBorder(PVLayerCube *cube, PVLayerCube *border) {$/;"	f	class:PV::HyPerLayer
mirrorToEast	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToEast(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToNorth	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToNorth(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToNorthEast	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToNorthEast(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToNorthWest	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToNorthWest(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToSouth	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToSouth(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToSouthEast	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToSouthEast(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToSouthWest	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToSouthWest(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mirrorToWest	src/layers/HyPerLayer.cpp	/^int HyPerLayer::mirrorToWest(PVLayerCube *dest, PVLayerCube *src) {$/;"	f	class:PV::HyPerLayer
mode	src/include/pv_types.h	/^   char *mode;$/;"	m	struct:PV_Stream_
momentumDecay	src/connections/MomentumConn.hpp	/^   float momentumDecay;$/;"	m	class:PV::MomentumConn
momentumEnergy	tests/MomentumLCATest/scripts/plotEnergy.py	/^momentumEnergy = [float(m.split(',')[3]) for m in momentumLines]$/;"	v
momentumFilename	tests/MomentumLCATest/scripts/plotEnergy.py	/^momentumFilename = "\/home\/sheng\/workspace\/OpenPV\/PVSystemTests\/MomentumLCATest\/output\/total_energy.txt"$/;"	v
momentumLines	tests/MomentumLCATest/scripts/plotEnergy.py	/^momentumLines = f.readlines()$/;"	v
momentumMethod	src/connections/MomentumConn.hpp	/^   char *momentumMethod;$/;"	m	class:PV::MomentumConn
momentumTau	src/connections/MomentumConn.hpp	/^   float momentumTau;$/;"	m	class:PV::MomentumConn
montageDimX	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int montageDimX = -1;$/;"	m	class:BBFindConfRemapProbe
montageDimX	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int montageDimX;$/;"	m	class:LocalizationProbe
montageDimY	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int montageDimY = -1;$/;"	m	class:BBFindConfRemapProbe
montageDimY	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int montageDimY;$/;"	m	class:LocalizationProbe
montageImage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   unsigned char * montageImage = NULL;$/;"	m	class:BBFindConfRemapProbe
montageImage	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   unsigned char * montageImage;$/;"	m	class:LocalizationProbe
montageImageComm	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   unsigned char * montageImageComm = NULL;$/;"	m	class:BBFindConfRemapProbe
montageImageComm	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   unsigned char * montageImageComm;$/;"	m	class:LocalizationProbe
montageImageLocal	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   unsigned char * montageImageLocal = NULL;$/;"	m	class:BBFindConfRemapProbe
montageImageLocal	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   unsigned char * montageImageLocal;$/;"	m	class:LocalizationProbe
mpiRequestsBuffer	src/columns/Publisher.hpp	/^   RingBuffer<std::vector<MPI_Request>> *mpiRequestsBuffer = nullptr;$/;"	m	class:PV::Publisher
mpiexchangesize	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::mpiexchangesize($/;"	f	class:PV::privateTransposeConn
mpitimer	src/probes/StatsProbe.hpp	/^   Timer *mpitimer; \/\/ A timer for the MPI part of outputState$/;"	m	class:PV::StatsProbe
mr	src/io/stb_image.h	/^   unsigned int mr, mg, mb, ma, all_a;$/;"	m	struct:__anon17
msgparams	src/probes/BaseProbe.hpp	/^   char *msgparams; \/\/ the message parameter in the params$/;"	m	class:PV::BaseProbe
msgstring	src/probes/BaseProbe.hpp	/^   char *msgstring; \/\/ the string that gets printed by outputState ("" if message$/;"	m	class:PV::BaseProbe
multiplier	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      float multiplier;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
nBands	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nBatch	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nKurvePost	src/weightinit/InitCocircWeightsParams.hpp	/^   int nKurvePost;$/;"	m	class:PV::InitCocircWeightsParams
nKurvePre	src/weightinit/InitCocircWeightsParams.hpp	/^   int nKurvePre;$/;"	m	class:PV::InitCocircWeightsParams
name	src/columns/BaseObject.hpp	/^   char *name       = nullptr;$/;"	m	class:PV::BaseObject
name	src/include/pv_types.h	/^   char *name;$/;"	m	struct:PV_Stream_
name	src/io/PVParams.hpp	/^   const char *name() { return groupName; }$/;"	f	class:PV::ParameterGroup
name	src/io/PVParams.hpp	/^   const char *name() { return paramName; }$/;"	f	class:PV::Parameter
name	src/io/PVParams.hpp	/^   const char *name() { return paramName; }$/;"	f	class:PV::ParameterArray
name	src/weightinit/InitWeightsParams.hpp	/^   char *name; \/\/ this is actually the Connection name$/;"	m	class:PV::InitWeightsParams
name	tests/Shared/ColumnArchive.hpp	/^   std::string name;$/;"	m	struct:ConnArchive
name	tests/Shared/ColumnArchive.hpp	/^   std::string name;$/;"	m	struct:LayerArchive
name_regex	python/analysis_parse.py	/^                name_regex = ["(?<=" + i + ").+", "\\w+"]$/;"	v
nbatch	src/cudakernels/CudaRecvPost.hpp	/^   int nbatch;$/;"	m	struct:PVCuda::recv_post_params
nbatch	src/cudakernels/CudaRecvPre.hpp	/^   int nbatch;$/;"	m	struct:PVCuda::recv_pre_params
nbatch	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nbatch;$/;"	m	struct:PVCuda::HyPerLCAParams
nbatch	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nbatch;$/;"	m	struct:PVCuda::ISTAParams
nbatch	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nbatch;$/;"	m	struct:PVCuda::MomentumLCAParams
nbatch	src/include/PVLayerLoc.h	/^   int nbatch, nx, ny, nf; \/\/ local number of grid pts in each dimension$/;"	m	struct:PVLayerLoc_
nbatchGlobal	src/include/PVLayerLoc.h	/^   int nbatchGlobal, nxGlobal, nyGlobal; \/\/ total number of grid pts in the global space$/;"	m	struct:PVLayerLoc_
nbdn	src/cudakernels/CudaRecvPost.hpp	/^   int nbdn; \/\/ Border of orig$/;"	m	struct:PVCuda::recv_post_params
nblt	src/cudakernels/CudaRecvPost.hpp	/^   int nblt; \/\/ Border of orig$/;"	m	struct:PVCuda::recv_post_params
nbrt	src/cudakernels/CudaRecvPost.hpp	/^   int nbrt; \/\/ Border of orig$/;"	m	struct:PVCuda::recv_post_params
nbup	src/cudakernels/CudaRecvPost.hpp	/^   int nbup; \/\/ Border of orig$/;"	m	struct:PVCuda::recv_post_params
nearby_neighbor	src/utils/conversions.h	/^static inline int nearby_neighbor(int kzPre, int zScaleLog2Pre, int zScaleLog2Post) {$/;"	f
nearestNeighborInterp	src/utils/BufferUtilsRescale.cpp	/^void nearestNeighborInterp($/;"	f	namespace:PV::BufferUtils::__anon2
needAllocPostWeights	src/connections/HyPerConn.hpp	/^   bool needAllocPostWeights;$/;"	m	class:PV::HyPerConn
needAllocWeights	src/connections/privateTransposeConn.hpp	/^   bool needAllocWeights;$/;"	m	class:PV::privateTransposeConn
needAspectParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^bool InitGauss2DWeightsParams::needAspectParams() {$/;"	f	class:PV::InitGauss2DWeightsParams
needFinalize	src/connections/HyPerConn.hpp	/^   bool needFinalize;$/;"	m	class:PV::HyPerConn
needPost	src/connections/HyPerConn.hpp	/^   bool needPost; \/\/ needPost is set during the communicate stage.  During the allocate stage, the$/;"	m	class:PV::HyPerConn
needPostIndex	src/connections/PoolingConn.hpp	/^   bool needPostIndex() { return needPostIndexLayer; }$/;"	f	class:PV::PoolingConn
needPostIndexLayer	src/connections/PoolingConn.hpp	/^   bool needPostIndexLayer;$/;"	m	class:PV::PoolingConn
needRecalc	src/probes/BaseHyPerConnProbe.cpp	/^bool BaseHyPerConnProbe::needRecalc(double timevalue) {$/;"	f	class:PV::BaseHyPerConnProbe
needRecalc	src/probes/ColumnEnergyProbe.cpp	/^bool ColumnEnergyProbe::needRecalc(double timevalue) { return true; }$/;"	f	class:PV::ColumnEnergyProbe
needRecalc	src/probes/LayerProbe.cpp	/^bool LayerProbe::needRecalc(double timevalue) {$/;"	f	class:PV::LayerProbe
needRecalc	src/probes/QuotientColProbe.hpp	/^   virtual bool needRecalc(double timevalue) { return true; }$/;"	f	class:PV::QuotientColProbe
needRecalc	tests/TriggerTest/src/TriggerTestLayerProbe.hpp	/^   virtual bool needRecalc(double timevalue) { return true; }$/;"	f	class:PV::TriggerTestLayerProbe
needRecalc	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.hpp	/^   bool needRecalc(double timevalue) { return false; }$/;"	f	class:PV::MomentumTestConnProbe
needRecalc	tests/UpdateFromCloneTest/src/TestConnProbe.hpp	/^   bool needRecalc(double timevalue) { return false; }$/;"	f	class:PV::TestConnProbe
needReset	src/layers/HyPerLayer.cpp	/^bool HyPerLayer::needReset(double simTime, double dt) {$/;"	f	class:PV::HyPerLayer
needUpdate	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^bool LocalizationProbe::needUpdate(double timed, double dt) {$/;"	f	class:LocalizationProbe
needUpdate	src/connections/CopyConn.cpp	/^bool CopyConn::needUpdate(double time, double dt) {$/;"	f	class:PV::CopyConn
needUpdate	src/connections/HyPerConn.cpp	/^bool HyPerConn::needUpdate(double simTime, double dt) {$/;"	f	class:PV::HyPerConn
needUpdate	src/connections/TransposeConn.cpp	/^bool TransposeConn::needUpdate(double timed, double dt) { return false; }$/;"	f	class:PV::TransposeConn
needUpdate	src/connections/TransposePoolingConn.cpp	/^bool TransposePoolingConn::needUpdate(double timed, double dt) {$/;"	f	class:PV::TransposePoolingConn
needUpdate	src/connections/privateTransposeConn.cpp	/^bool privateTransposeConn::needUpdate(double timed, double dt) {$/;"	f	class:PV::privateTransposeConn
needUpdate	src/layers/ConstantLayer.cpp	/^bool ConstantLayer::needUpdate(double time, double dt) {$/;"	f	class:PV::ConstantLayer
needUpdate	src/layers/FilenameParsingGroundTruthLayer.cpp	/^bool FilenameParsingGroundTruthLayer::needUpdate(double time, double dt) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
needUpdate	src/layers/HyPerLayer.cpp	/^bool HyPerLayer::needUpdate(double simTime, double dt) {$/;"	f	class:PV::HyPerLayer
needUpdate	src/layers/ImageFromMemoryBuffer.hpp	/^   virtual bool needUpdate(double time, double dt) { return hasNewImageFlag; }$/;"	f	class:PV::ImageFromMemoryBuffer
needUpdate	src/probes/BaseProbe.cpp	/^bool BaseProbe::needUpdate(double simTime, double dt) {$/;"	f	class:PV::BaseProbe
needUpdate	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^bool AlwaysFailsLayer::needUpdate(double simTime, double dt) {$/;"	f	class:PV::AlwaysFailsLayer
neighborDatatypes	src/columns/Publisher.hpp	/^   MPI_Datatype *neighborDatatypes;$/;"	m	class:PV::Publisher
neighborIndex	src/columns/Communicator.cpp	/^int Communicator::neighborIndex(int commId, int direction) {$/;"	f	class:PV::Communicator
neighborIndex	src/utils/BorderExchange.cpp	/^int BorderExchange::neighborIndex(int commId, int direction) {$/;"	f	class:PV::BorderExchange
neighborInit	src/columns/Communicator.cpp	/^int Communicator::neighborInit() {$/;"	f	class:PV::Communicator
neighbors	src/columns/Communicator.hpp	/^   int neighbors[NUM_NEIGHBORHOOD]; \/\/ [0] is interior (local)$/;"	m	class:PV::Communicator
neighbors	src/utils/BorderExchange.hpp	/^   std::vector<int> neighbors;$/;"	m	class:PV::BorderExchange
neuronLabel	python/probe_analysis/readProbe.py	/^                            neuronLabel = 'Avg'$/;"	v
neuronLabel	python/probe_analysis/readProbe.py	/^                            neuronLabel = 'Post'$/;"	v
neuronLabel	python/probe_analysis/readProbe.py	/^                        neuronLabel = keySP[2]$/;"	v
newActiveBatchSweep	src/io/PVParams.cpp	/^int PVParams::newActiveBatchSweep() {$/;"	f	class:PV::PVParams
newActiveParamSweep	src/io/PVParams.cpp	/^int PVParams::newActiveParamSweep() {$/;"	f	class:PV::PVParams
newDatatypes	src/utils/BorderExchange.cpp	/^void BorderExchange::newDatatypes() {$/;"	f	class:PV::BorderExchange
newLevel	src/structures/RingBuffer.hpp	/^   void newLevel() { mCurrentLevel = (mNumLevels + mCurrentLevel - 1) % mNumLevels; }$/;"	f	class:PV::RingBuffer
newLevelIndex	src/columns/DataStore.hpp	/^   void newLevelIndex() {$/;"	f	class:PV::DataStore
nextIndex	src/components/BatchIndexer.cpp	/^int BatchIndexer::nextIndex(int localBatchIndex) {$/;"	f	class:PV::BatchIndexer
nextInput	src/layers/InputLayer.cpp	/^void InputLayer::nextInput(double timef, double dt) {$/;"	f	class:PV::InputLayer
nextOutputTime	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double nextOutputTime; \/\/ Warning: this does not get checkpointed but it should.  Probes have no checkpointing infrastructure yet.$/;"	m	class:LocalizationProbe
nf	src/cudakernels/CudaRecvPost.hpp	/^   int nf;$/;"	m	struct:PVCuda::recv_post_params
nf	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nf;$/;"	m	struct:PVCuda::HyPerLCAParams
nf	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nf;$/;"	m	struct:PVCuda::ISTAParams
nf	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nf;$/;"	m	struct:PVCuda::MomentumLCAParams
nf	src/include/PVLayerLoc.h	/^   int nbatch, nx, ny, nf; \/\/ local number of grid pts in each dimension$/;"	m	struct:PVLayerLoc_
nf	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
nfp	src/connections/HyPerConn.hpp	/^   int nxp, nyp, nfp; \/\/ size of weight dimensions$/;"	m	class:PV::HyPerConn
nfp	src/cudakernels/CudaRecvPost.hpp	/^   int nfp;$/;"	m	struct:PVCuda::recv_post_params
nfp	src/cudakernels/CudaRecvPre.hpp	/^   int nfp;$/;"	m	struct:PVCuda::recv_pre_params
nfp	tests/Shared/ColumnArchive.hpp	/^   int nfp;$/;"	m	struct:ConnArchive
nfpPost	src/connections/HyPerConn.hpp	/^   int nxpPost, nypPost, nfpPost;$/;"	m	class:PV::HyPerConn
nnz	src/probes/StatsProbe.hpp	/^   int *nnz;$/;"	m	class:PV::StatsProbe
nnzThreshold	src/probes/L0NormProbe.hpp	/^   float nnzThreshold;$/;"	m	class:PV::L0NormProbe
nnzThreshold	src/probes/StatsProbe.hpp	/^   float nnzThreshold;$/;"	m	class:PV::StatsProbe
nodraw_flag	python/param_draw.py	/^    nodraw_flag = False$/;"	v	class:Param_Reader
noiseAmpE	src/layers/LIF.hpp	/^   float noiseAmpE;$/;"	m	struct:LIF_params
noiseAmpI	src/layers/LIF.hpp	/^   float noiseAmpI;$/;"	m	struct:LIF_params
noiseAmpIB	src/layers/LIF.hpp	/^   float noiseAmpIB;$/;"	m	struct:LIF_params
noiseFreqE	src/layers/LIF.hpp	/^   float noiseFreqE;$/;"	m	struct:LIF_params
noiseFreqI	src/layers/LIF.hpp	/^   float noiseFreqI;$/;"	m	struct:LIF_params
noiseFreqIB	src/layers/LIF.hpp	/^   float noiseFreqIB;$/;"	m	struct:LIF_params
nomore	src/io/stb_image.h	/^   int nomore; \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon9
nonblockingLayerUpdate	src/columns/HyPerCol.cpp	/^void HyPerCol::nonblockingLayerUpdate($/;"	f	class:PV::HyPerCol
nonnegativeConstraintFlag	src/normalizers/NormalizeMultiply.hpp	/^   bool nonnegativeConstraintFlag; \/\/ If true, negative weights are truncated to zero.$/;"	m	class:PV::NormalizeMultiply
nonzeroFound	src/probes/RequireAllZeroActivityProbe.hpp	/^   bool nonzeroFound           = false;$/;"	m	class:PV::RequireAllZeroActivityProbe
nonzeroFoundMessage	src/probes/RequireAllZeroActivityProbe.cpp	/^void RequireAllZeroActivityProbe::nonzeroFoundMessage($/;"	f	class:PV::RequireAllZeroActivityProbe
nonzeroTime	src/probes/RequireAllZeroActivityProbe.hpp	/^   double nonzeroTime          = 0.0;$/;"	m	class:PV::RequireAllZeroActivityProbe
nonzeroValueHasOccurred	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.hpp	/^   bool nonzeroValueHasOccurred() { return nonzeroValueOccurred; }$/;"	f	class:PV::TestNotAlwaysAllZerosProbe
nonzeroValueOccurred	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.hpp	/^   bool nonzeroValueOccurred;$/;"	m	class:PV::TestNotAlwaysAllZerosProbe
normDescription	src/probes/AbstractNormProbe.hpp	/^   char *normDescription;$/;"	m	class:PV::AbstractNormProbe
normalDist	src/layers/BinningLayer.hpp	/^   bool normalDist;$/;"	m	class:PV::BinningLayer
normalizeArborsIndividually	src/normalizers/NormalizeBase.hpp	/^   bool normalizeArborsIndividually; \/\/ If true, each arbor is treated as its own connection.  If$/;"	m	class:PV::NormalizeBase
normalizeDwFlag	src/connections/HyPerConn.hpp	/^   bool normalizeDwFlag;$/;"	m	class:PV::HyPerConn
normalizeFromPostPerspective	src/normalizers/NormalizeMultiply.hpp	/^   bool normalizeFromPostPerspective; \/\/ If false, group all weights with a common presynaptic$/;"	m	class:PV::NormalizeMultiply
normalizeGroupName	src/normalizers/NormalizeGroup.hpp	/^   char *normalizeGroupName = nullptr;$/;"	m	class:PV::NormalizeGroup
normalizeInputFlag	src/layers/LCALIFLayer.hpp	/^   bool normalizeInputFlag;$/;"	m	class:PV::LCALIFLayer
normalizeMethod	src/connections/HyPerConn.hpp	/^   char *normalizeMethod;$/;"	m	class:PV::HyPerConn
normalizeOnInitialize	src/normalizers/NormalizeBase.hpp	/^   bool normalizeOnInitialize; \/\/ Whether to normalize weights when setting the weights' initial$/;"	m	class:PV::NormalizeBase
normalizeOnWeightUpdate	src/normalizers/NormalizeBase.hpp	/^   bool normalizeOnWeightUpdate; \/\/ Whether to normalize weights when the weights have been updated$/;"	m	class:PV::NormalizeBase
normalizePatch	src/normalizers/NormalizeBase.cpp	/^void NormalizeBase::normalizePatch(float *dataStartPatch, int weights_per_patch, float multiplier) {$/;"	f	class:PV::NormalizeBase
normalizeTotalToPost	src/connections/HyPerConn.hpp	/^   bool normalizeTotalToPost; \/\/ if false, normalize the sum of weights from each presynaptic$/;"	m	class:PV::HyPerConn
normalizeWeights	src/columns/HyPerCol.cpp	/^int HyPerCol::normalizeWeights() {$/;"	f	class:PV::HyPerCol
normalizeWeights	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::normalizeWeights() {$/;"	f	class:PV::NormalizeBase
normalizeWeights	src/normalizers/NormalizeContrastZeroMean.cpp	/^int NormalizeContrastZeroMean::normalizeWeights() {$/;"	f	class:PV::NormalizeContrastZeroMean
normalizeWeights	src/normalizers/NormalizeGroup.cpp	/^int NormalizeGroup::normalizeWeights() { return PV_SUCCESS; }$/;"	f	class:PV::NormalizeGroup
normalizeWeights	src/normalizers/NormalizeL2.cpp	/^int NormalizeL2::normalizeWeights() {$/;"	f	class:PV::NormalizeL2
normalizeWeights	src/normalizers/NormalizeMax.cpp	/^int NormalizeMax::normalizeWeights() {$/;"	f	class:PV::NormalizeMax
normalizeWeights	src/normalizers/NormalizeMultiply.cpp	/^int NormalizeMultiply::normalizeWeights() {$/;"	f	class:PV::NormalizeMultiply
normalizeWeights	src/normalizers/NormalizeSum.cpp	/^int NormalizeSum::normalizeWeights() {$/;"	f	class:PV::NormalizeSum
normalizeWeights	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^int NormalizeL3::normalizeWeights() {$/;"	f	class:PV::NormalizeL3
normalizeWeightsWrapper	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::normalizeWeightsWrapper() {$/;"	f	class:PV::NormalizeBase
normalize_cutoff	src/normalizers/NormalizeMultiply.hpp	/^   float normalize_cutoff; \/\/ If positive, weights with abs(w)<max(abs(w))*normalize_cutoff are$/;"	m	class:PV::NormalizeMultiply
normalize_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::normalize_dW(int arbor_ID) {$/;"	f	class:PV::HyPerConn
normalize_dW	src/connections/HyPerConn.cpp	/^void HyPerConn::normalize_dW() {$/;"	f	class:PV::HyPerConn
normalizer	src/connections/HyPerConn.hpp	/^   NormalizeBase *normalizer;$/;"	m	class:PV::HyPerConn
north	src/columns/Communicator.cpp	/^int Communicator::north(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
north	src/utils/BorderExchange.cpp	/^int BorderExchange::north(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
northeast	src/columns/Communicator.cpp	/^int Communicator::northeast(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
northeast	src/utils/BorderExchange.cpp	/^int BorderExchange::northeast(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
northwest	src/columns/Communicator.cpp	/^int Communicator::northwest(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
northwest	src/utils/BorderExchange.cpp	/^int BorderExchange::northwest(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
notify	src/columns/HyPerCol.hpp	/^   inline void notify(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::HyPerCol
notify	src/columns/HyPerCol.hpp	/^   inline void notify(std::vector<std::shared_ptr<BaseMessage const>> messages) {$/;"	f	class:PV::HyPerCol
notify	src/observerpattern/Subject.cpp	/^void Subject::notify($/;"	f	class:PV::Subject
notify	src/observerpattern/Subject.hpp	/^   notify(ObserverTable const &table, std::shared_ptr<BaseMessage const> message, bool printFlag) {$/;"	f	class:PV::Subject
numActive	src/cudakernels/CudaRecvPre.hpp	/^   long *numActive;$/;"	m	class:PVCuda::CudaRecvPre
numActive	src/cudakernels/CudaRecvPre.hpp	/^   long *numActive;$/;"	m	struct:PVCuda::recv_pre_params
numActive	src/include/pv_types.h	/^   long const *numActive;$/;"	m	struct:PVLayerCube_
numActiveBuffer	src/columns/DataStore.hpp	/^   long *numActiveBuffer(int bufferId) { return mNumActive->getBuffer(bufferId); }$/;"	f	class:PV::DataStore
numActiveBuffer	src/columns/DataStore.hpp	/^   long *numActiveBuffer(int bufferId, int level) { return mNumActive->getBuffer(level, bufferId); }$/;"	f	class:PV::DataStore
numArbors	python/probe_analysis/readProbe.py	/^    numArbors     = {}$/;"	v
numArbors	tests/Shared/ColumnArchive.hpp	/^   int numArbors;$/;"	m	struct:ConnArchive
numAxonalArborLists	src/connections/BaseConnection.hpp	/^   int numAxonalArborLists; \/\/ number of axonal arbors from presynaptic layer$/;"	m	class:PV::BaseConnection
numBack	python/probe_analysis/noArborReadProbe.py	/^            numBack = 3 #should allow you to back up a single line.$/;"	v
numBatchSweeps	src/io/PVParams.hpp	/^   int numBatchSweeps; \/\/ The number of different parameters that are changed during the sweep.$/;"	m	class:PV::PVParams
numChannels	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numChannels;$/;"	m	struct:PVCuda::HyPerLCAParams
numChannels	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numChannels;$/;"	m	struct:PVCuda::ISTAParams
numChannels	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numChannels;$/;"	m	struct:PVCuda::MomentumLCAParams
numChannels	src/layers/HyPerLayer.hpp	/^   int numChannels; \/\/ number of channels$/;"	m	class:PV::HyPerLayer
numCols	src/columns/Communicator.hpp	/^   int numCols;$/;"	m	class:PV::Communicator
numCommBatches	src/columns/Communicator.hpp	/^   int numCommBatches() { return batchWidth; }$/;"	f	class:PV::Communicator
numCommBatches	src/columns/HyPerCol.hpp	/^   int numCommBatches() { return mCommunicator->numCommBatches(); }$/;"	f	class:PV::HyPerCol
numCommColumns	src/columns/Communicator.hpp	/^   int numCommColumns() { return numCols; }$/;"	f	class:PV::Communicator
numCommColumns	src/columns/HyPerCol.hpp	/^   int numCommColumns() { return mCommunicator->numCommColumns(); }$/;"	f	class:PV::HyPerCol
numCommRows	src/columns/Communicator.hpp	/^   int numCommRows() { return numRows; }$/;"	f	class:PV::Communicator
numCommRows	src/columns/HyPerCol.hpp	/^   int numCommRows() { return mCommunicator->numCommRows(); }$/;"	f	class:PV::HyPerCol
numConnections	src/normalizers/NormalizeBase.hpp	/^   int numConnections;$/;"	m	class:PV::NormalizeBase
numConvKernels	src/arch/cuda/CudaDevice.hpp	/^   size_t numConvKernels;$/;"	m	class:PVCuda::CudaDevice
numDataPatches	src/connections/HyPerConn.hpp	/^   int numDataPatches; \/\/ Number of blocks of float's in buffer pointed to by wDataStart[arbor]$/;"	m	class:PV::HyPerConn
numDataPatches	tests/Shared/ColumnArchive.hpp	/^   int numDataPatches;$/;"	m	struct:ConnArchive
numDelayLevels	src/layers/HyPerLayer.hpp	/^   int numDelayLevels; \/\/ The number of timesteps in the datastore ring buffer to store older$/;"	m	class:PV::HyPerLayer
numDetectionThresholds	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int numDetectionThresholds;$/;"	m	class:LocalizationProbe
numDisplayedCategories	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int numDisplayedCategories = 0;$/;"	m	class:BBFindConfRemapLayer
numDisplayedCategories	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int numDisplayedCategories;$/;"	m	class:LocalizationProbe
numExtended	src/include/pv_types.h	/^   int numExtended;$/;"	m	struct:PVLayer_
numExtendedAllBatches	src/include/pv_types.h	/^   int numExtendedAllBatches;$/;"	m	struct:PVLayer_
numFeatures	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   int numFeatures;$/;"	m	struct:convTableStruct_
numFeatures	src/layers/HyPerLayer.hpp	/^   int numFeatures;$/;"	m	class:PV::HyPerLayer
numFlanks	src/weightinit/InitCocircWeightsParams.hpp	/^   int numFlanks;$/;"	m	class:PV::InitCocircWeightsParams
numFlanks	src/weightinit/InitGauss2DWeightsParams.hpp	/^   int numFlanks;$/;"	m	class:PV::InitGauss2DWeightsParams
numGroups	src/io/PVParams.hpp	/^   int numGroups;$/;"	m	class:PV::PVParams
numHeatMapMaxima	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int numHeatMapMaxima = 0;$/;"	m	class:BBFindConfRemapProbe
numHeatMapMaxima	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int numHeatMapMaxima;$/;"	m	class:LocalizationProbe
numHeatMapThresholds	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int numHeatMapThresholds = 0;$/;"	m	class:BBFindConfRemapProbe
numHistBins	python/probe_analysis/noArborReadProbe.py	/^    numHistBins = -1$/;"	v
numHistBins	python/probe_analysis/noArborReadProbe.py	/^numHistBins = 20    #number of bins for histogram of weights (-1 means no histogram)$/;"	v
numImagesToAverage	src/layers/RunningAverageLayer.hpp	/^   int numImagesToAverage;$/;"	m	class:PV::RunningAverageLayer
numItems	src/include/pv_types.h	/^   int numItems;$/;"	m	struct:PVLayerCube_
numKernelActivations	src/connections/HyPerConn.hpp	/^   long **numKernelActivations;$/;"	m	class:PV::HyPerConn
numLabelVals	src/layers/Segmentify.hpp	/^   int numLabelVals;$/;"	m	class:PV::Segmentify
numMargin	src/layers/HyPerLayer.hpp	/^   int numMargin; \/\/ number of neurons in margin$/;"	m	class:PV::HyPerLayer
numMontageColumns	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int numMontageColumns = -1;$/;"	m	class:BBFindConfRemapProbe
numMontageColumns	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int numMontageColumns;$/;"	m	class:LocalizationProbe
numMontageRows	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   int numMontageRows = -1;$/;"	m	class:BBFindConfRemapProbe
numMontageRows	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   int numMontageRows;$/;"	m	class:LocalizationProbe
numNeighbors	src/columns/Communicator.hpp	/^   int numNeighbors; \/\/ # of remote neighbors plus local.  NOT the size of the$/;"	m	class:PV::Communicator
numNeurons	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numNeurons;$/;"	m	struct:PVCuda::HyPerLCAParams
numNeurons	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numNeurons;$/;"	m	struct:PVCuda::ISTAParams
numNeurons	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numNeurons;$/;"	m	struct:PVCuda::MomentumLCAParams
numNeurons	src/include/pv_types.h	/^   int numNeurons;$/;"	m	struct:PVLayer_
numNeuronsAllBatches	src/include/pv_types.h	/^   int numNeuronsAllBatches;$/;"	m	struct:PVLayer_
numOrientationsPost	src/weightinit/InitGauss2DWeightsParams.hpp	/^   int numOrientationsPost;$/;"	m	class:PV::InitGauss2DWeightsParams
numOrientationsPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   int numOrientationsPre;$/;"	m	class:PV::InitGauss2DWeightsParams
numParamSweeps	src/io/PVParams.hpp	/^   int numParamSweeps; \/\/ The number of different parameters that are changed during the sweep.$/;"	m	class:PV::PVParams
numParams	src/connections/HyPerConn.hpp	/^   int numParams;$/;"	m	class:PV::HyPerConn
numParams	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
numPerFrame	python/deprecated/readPvpFile.py	/^   numPerFrame = shape[0] * shape[1] * shape[2]$/;"	v
numPerFrame	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   numPerFrame = shape[0] * shape[1] * shape[2]$/;"	v
numPerFrame	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^   numPerFrame = shape[0] * shape[1] * shape[2]$/;"	v
numPerStride	src/cudakernels/CudaRecvPost.hpp	/^   int numPerStride;$/;"	m	struct:PVCuda::recv_post_params
numPoints	demos/HeatMapLocalization/src/ConvertFromTable.hpp	/^   int numPoints;$/;"	m	struct:convTableStruct_
numPostRes	src/cudakernels/CudaRecvPre.hpp	/^   int numPostRes;$/;"	m	struct:PVCuda::recv_pre_params
numPreConns	python/probe_analysis/readProbe.py	/^    numPreConns   = {}$/;"	v
numPreExt	src/cudakernels/CudaRecvPre.hpp	/^   int numPreExt;$/;"	m	struct:PVCuda::recv_pre_params
numPreNeurons	python/probe_analysis/readProbe.py	/^    numPreNeurons = {}$/;"	v
numProbes	src/connections/BaseConnection.hpp	/^   int numProbes;$/;"	m	class:PV::BaseConnection
numProbes	src/layers/HyPerLayer.hpp	/^   int numProbes;$/;"	m	class:PV::HyPerLayer
numRecords	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
numRows	src/columns/Communicator.hpp	/^   int numRows;$/;"	m	class:PV::Communicator
numSpecifiedFeatures	src/layers/MaskLayer.hpp	/^   int numSpecifiedFeatures;$/;"	m	class:PV::MaskLayer
numSynchronizedMarginWidthLayers	src/layers/HyPerLayer.hpp	/^   int numSynchronizedMarginWidthLayers;$/;"	m	class:PV::HyPerLayer
numTCBins	python/probe_analysis/noArborReadProbe.py	/^    numTCBins = 1$/;"	v
numTCBins	python/probe_analysis/noArborReadProbe.py	/^numTCBins   = 2     #number of bins for time course plot$/;"	v
numTCBins	python/probe_analysis/readProbeParams.py	/^numTCBins   = 2     #number of bins for time course plot$/;"	v
numTerms	src/probes/ColumnEnergyProbe.hpp	/^   size_t numTerms;$/;"	m	class:PV::ColumnEnergyProbe
numTimeSteps	python/probe_analysis/readProbe.py	/^    numTimeSteps  = len(lines) #Uniform for all keys$/;"	v
numUpdateTimes	src/layers/RunningAverageLayer.hpp	/^   int numUpdateTimes;$/;"	m	class:PV::RunningAverageLayer
numValues	src/io/PVParams.hpp	/^   int numValues;$/;"	m	class:PV::ParameterSweep
numValues	src/probes/BaseProbe.hpp	/^   int numValues;$/;"	m	class:PV::BaseProbe
numVertices	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numVertices;$/;"	m	struct:PVCuda::HyPerLCAParams
numVertices	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int numVertices;$/;"	m	struct:PVCuda::MomentumLCAParams
numVertices	src/layers/ANNLayer.hpp	/^   int numVertices  = 0;$/;"	m	class:PV::ANNLayer
numWeightFiles	src/weightinit/InitWeightsParams.hpp	/^   int numWeightFiles;$/;"	m	class:PV::InitWeightsParams
numWeightPatches	src/connections/HyPerConn.hpp	/^   int numWeightPatches; \/\/ Number of PVPatch structures in buffer pointed to by wPatches[arbor]$/;"	m	class:PV::HyPerConn
numWeights	python/probe_analysis/noArborReadProbe.py	/^numWeights = 25 #number of weights in map$/;"	v
num_bits	src/io/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon13
num_devices	src/arch/cuda/CudaDevice.hpp	/^   int num_devices; \/\/ number of computing devices$/;"	m	class:PVCuda::CudaDevice
numberOfAxonalArborLists	src/connections/BaseConnection.hpp	/^   inline int numberOfAxonalArborLists() { return numAxonalArborLists; }$/;"	f	class:PV::BaseConnection
numberOfBaseProbes	src/columns/HyPerCol.hpp	/^   int numberOfBaseProbes() const { return mBaseProbes.size(); }$/;"	f	class:PV::HyPerCol
numberOfBatchSweeps	src/io/PVParams.hpp	/^   int numberOfBatchSweeps() { return numBatchSweeps; }$/;"	f	class:PV::PVParams
numberOfBorderRegions	src/columns/HyPerCol.hpp	/^   int numberOfBorderRegions() const { return MAX_NEIGHBORS; }$/;"	f	class:PV::HyPerCol
numberOfColumns	src/columns/HyPerCol.hpp	/^   int numberOfColumns() { return mCommunicator->commSize(); }$/;"	f	class:PV::HyPerCol
numberOfConnections	src/columns/HyPerCol.hpp	/^   int numberOfConnections() const { return mConnections.size(); }$/;"	f	class:PV::HyPerCol
numberOfGlobalColumns	src/columns/HyPerCol.hpp	/^   int numberOfGlobalColumns() { return mCommunicator->globalCommSize(); }$/;"	f	class:PV::HyPerCol
numberOfGroups	src/io/PVParams.hpp	/^   int numberOfGroups() { return numGroups; }$/;"	f	class:PV::PVParams
numberOfLayers	src/columns/HyPerCol.hpp	/^   int numberOfLayers() const { return mLayers.size(); }$/;"	f	class:PV::HyPerCol
numberOfNeighbors	src/columns/Communicator.cpp	/^int Communicator::numberOfNeighbors() {$/;"	f	class:PV::Communicator
numberOfNormalizers	src/columns/HyPerCol.hpp	/^   int numberOfNormalizers() const { return mNormalizers.size(); }$/;"	f	class:PV::HyPerCol
numberOfParameterSweeps	src/io/PVParams.hpp	/^   int numberOfParameterSweeps() { return numParamSweeps; }$/;"	f	class:PV::PVParams
numberOfProbes	src/columns/HyPerCol.hpp	/^   int numberOfProbes() const { return mColProbes.size(); }$/;"	f	class:PV::HyPerCol
numerProbe	src/probes/QuotientColProbe.hpp	/^   BaseProbe *numerProbe; \/\/ A pointer to the probe that supplies the numerator.$/;"	m	class:PV::QuotientColProbe
numerator	src/probes/QuotientColProbe.hpp	/^   char *numerator; \/\/ The name of the probe that supplies the numerator$/;"	m	class:PV::QuotientColProbe
nx	src/cudakernels/CudaRecvPre.hpp	/^   unsigned short nx, ny;$/;"	m	struct:PVCuda::PVPatch_
nx	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nx;$/;"	m	struct:PVCuda::HyPerLCAParams
nx	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nx;$/;"	m	struct:PVCuda::ISTAParams
nx	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int nx;$/;"	m	struct:PVCuda::MomentumLCAParams
nx	src/include/PVLayerLoc.h	/^   int nbatch, nx, ny, nf; \/\/ local number of grid pts in each dimension$/;"	m	struct:PVLayerLoc_
nx	src/include/pv_types.h	/^   unsigned short nx, ny;$/;"	m	struct:PVPatch_
nx	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
nxGlobal	src/include/PVLayerLoc.h	/^   int nbatchGlobal, nxGlobal, nyGlobal; \/\/ total number of grid pts in the global space$/;"	m	struct:PVLayerLoc_
nxGlobal	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nxProcs	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nxRes	src/cudakernels/CudaRecvPost.hpp	/^   int nxRes; \/\/ num post neurons$/;"	m	struct:PVCuda::recv_post_params
nxScale	src/layers/HyPerLayer.hpp	/^   float nxScale, nyScale; \/\/ Size of layer relative to column$/;"	m	class:PV::HyPerLayer
nxp	src/connections/HyPerConn.hpp	/^   int nxp, nyp, nfp; \/\/ size of weight dimensions$/;"	m	class:PV::HyPerConn
nxp	src/cudakernels/CudaRecvPost.hpp	/^   int nxp;$/;"	m	struct:PVCuda::recv_post_params
nxp	src/cudakernels/CudaRecvPre.hpp	/^   int nxp;$/;"	m	struct:PVCuda::recv_pre_params
nxp	tests/Shared/ColumnArchive.hpp	/^   int nxp;$/;"	m	struct:ConnArchive
nxpPost	src/connections/HyPerConn.hpp	/^   int nxpPost, nypPost, nfpPost;$/;"	m	class:PV::HyPerConn
nxpShrunken	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^   int nxpShrunken;$/;"	m	class:PV::ShrunkenPatchTestProbe
ny	src/cudakernels/CudaRecvPre.hpp	/^   unsigned short nx, ny;$/;"	m	struct:PVCuda::PVPatch_
ny	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int ny;$/;"	m	struct:PVCuda::HyPerLCAParams
ny	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int ny;$/;"	m	struct:PVCuda::ISTAParams
ny	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int ny;$/;"	m	struct:PVCuda::MomentumLCAParams
ny	src/include/PVLayerLoc.h	/^   int nbatch, nx, ny, nf; \/\/ local number of grid pts in each dimension$/;"	m	struct:PVLayerLoc_
ny	src/include/pv_types.h	/^   unsigned short nx, ny;$/;"	m	struct:PVPatch_
ny	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
nyGlobal	src/include/PVLayerLoc.h	/^   int nbatchGlobal, nxGlobal, nyGlobal; \/\/ total number of grid pts in the global space$/;"	m	struct:PVLayerLoc_
nyGlobal	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nyProcs	src/utils/BufferUtilsPvp.hpp	/^         nxProcs, nyProcs, nxGlobal, nyGlobal, kx0, ky0, nBatch, nBands;$/;"	m	struct:PV::BufferUtils::ActivityHeader
nyRes	src/cudakernels/CudaRecvPost.hpp	/^   int nyRes;$/;"	m	struct:PVCuda::recv_post_params
nyScale	src/layers/HyPerLayer.hpp	/^   float nxScale, nyScale; \/\/ Size of layer relative to column$/;"	m	class:PV::HyPerLayer
nyp	src/connections/HyPerConn.hpp	/^   int nxp, nyp, nfp; \/\/ size of weight dimensions$/;"	m	class:PV::HyPerConn
nyp	src/cudakernels/CudaRecvPost.hpp	/^   int nyp;$/;"	m	struct:PVCuda::recv_post_params
nyp	src/cudakernels/CudaRecvPre.hpp	/^   int nyp;$/;"	m	struct:PVCuda::recv_pre_params
nyp	tests/Shared/ColumnArchive.hpp	/^   int nyp;$/;"	m	struct:ConnArchive
nypPost	src/connections/HyPerConn.hpp	/^   int nxpPost, nypPost, nfpPost;$/;"	m	class:PV::HyPerConn
nypShrunken	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^   int nypShrunken;$/;"	m	class:PV::ShrunkenPatchTestProbe
objectFlag	python/analysis_parse.py	/^                    objectFlag = "Conn"$/;"	v
objectFlag	python/analysis_parse.py	/^                    objectFlag = "Layer"$/;"	v
objectFlag	python/analysis_parse.py	/^objectFlag = ""$/;"	v
official_lists	python/param_draw.py	/^    def official_lists(self,layer_dir,conn_dir):$/;"	m	class:Param_Parser
offset	src/cudakernels/CudaRecvPre.hpp	/^   unsigned int offset;$/;"	m	struct:PVCuda::PVPatch_
offset	src/include/pv_types.h	/^   unsigned int offset;$/;"	m	struct:PVPatch_
offset	src/io/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon17
old_out	src/io/stb_image.h	/^   stbi_uc *out, *old_out; \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
openFile	src/io/FileStream.cpp	/^void FileStream::openFile(char const *path, std::ios_base::openmode mode, bool verifyWrites) {$/;"	f	class:PV::FileStream
openOutputStateFile	src/layers/HyPerLayer.cpp	/^int HyPerLayer::openOutputStateFile() {$/;"	f	class:PV::HyPerLayer
operator !=	tests/Shared/ColumnArchive.hpp	/^   bool operator!=(ColumnArchive const &comparison) const { return !(operator==(comparison)); }$/;"	f	class:ColumnArchive
operator !=	tests/Shared/ColumnArchive.hpp	/^   bool operator!=(ConnArchive const &comparison) const { return !(operator==(comparison)); }$/;"	f	struct:ConnArchive
operator !=	tests/Shared/ColumnArchive.hpp	/^   bool operator!=(LayerArchive const &comparison) const { return !(operator==(comparison)); }$/;"	f	struct:LayerArchive
operator <<	src/io/PrintStream.hpp	/^   PrintStream &operator<<(const T &x) {$/;"	f	class:PV::PrintStream
operator <<	src/utils/PVLog.hpp	/^   Log &operator<<(V const &value) {$/;"	f	struct:PV::Log
operator <<	src/utils/PVLog.hpp	/^   Log &operator<<(typename LogStreamType::StrFunc func) {$/;"	f	struct:PV::Log
operator =	src/columns/KeywordHandler.cpp	/^KeywordHandler &KeywordHandler::operator=(KeywordHandler const &orig) {$/;"	f	class:PV::KeywordHandler
operator ==	tests/Shared/ColumnArchive.cpp	/^bool ColumnArchive::operator==(ColumnArchive const &comparison) const {$/;"	f	class:ColumnArchive
operator ==	tests/Shared/ColumnArchive.cpp	/^bool ConnArchive::operator==(ConnArchive const &comparison) const {$/;"	f	class:ConnArchive
operator ==	tests/Shared/ColumnArchive.cpp	/^bool LayerArchive::operator==(LayerArchive const &comparison) const {$/;"	f	class:LayerArchive
order	src/io/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
originalConn	src/connections/CloneConn.hpp	/^   HyPerConn *originalConn;$/;"	m	class:PV::CloneConn
originalConn	src/connections/CopyConn.hpp	/^   HyPerConn *originalConn;$/;"	m	class:PV::CopyConn
originalConn	src/connections/TransposeConn.hpp	/^   HyPerConn *originalConn;$/;"	m	class:PV::TransposeConn
originalConnName	src/connections/CloneConn.hpp	/^   char *originalConnName;$/;"	m	class:PV::CloneConn
originalConnName	src/connections/CopyConn.hpp	/^   char *originalConnName;$/;"	m	class:PV::CopyConn
originalConnName	src/connections/TransposeConn.hpp	/^   char *originalConnName;$/;"	m	class:PV::TransposeConn
originalLayer	src/layers/BinningLayer.hpp	/^   HyPerLayer *originalLayer;$/;"	m	class:PV::BinningLayer
originalLayer	src/layers/CloneVLayer.hpp	/^   HyPerLayer *originalLayer;$/;"	m	class:PV::CloneVLayer
originalLayer	src/layers/SegmentLayer.hpp	/^   HyPerLayer *originalLayer;$/;"	m	class:PV::SegmentLayer
originalLayer	src/layers/Segmentify.hpp	/^   HyPerLayer *originalLayer;$/;"	m	class:PV::Segmentify
originalLayer	src/layers/WTALayer.hpp	/^   HyPerLayer *originalLayer;$/;"	m	class:PV::WTALayer
originalLayerName	src/layers/BinningLayer.hpp	/^   char *originalLayerName;$/;"	m	class:PV::BinningLayer
originalLayerName	src/layers/CloneVLayer.hpp	/^   char *originalLayerName;$/;"	m	class:PV::CloneVLayer
originalLayerName	src/layers/SegmentLayer.hpp	/^   char *originalLayerName;$/;"	m	class:PV::SegmentLayer
originalLayerName	src/layers/Segmentify.hpp	/^   char *originalLayerName;$/;"	m	class:PV::Segmentify
originalLayerName	src/layers/WTALayer.hpp	/^   char *originalLayerName;$/;"	m	class:PV::WTALayer
original_conn_label	python/param_draw.py	/^    def original_conn_label(self,conn):$/;"	m	class:Param_Parser
otherConn	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	/^   HyPerConn *otherConn;$/;"	m	class:PV::HyPerConnDebugInitWeights
otherConn	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	/^   HyPerConn *otherConn;$/;"	m	class:PV::KernelConnDebugInitWeights
otherConnName	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	/^   char *otherConnName;$/;"	m	class:PV::HyPerConnDebugInitWeights
otherConnName	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	/^   char *otherConnName;$/;"	m	class:PV::KernelConnDebugInitWeights
out	src/io/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon15
out	src/io/stb_image.h	/^   stbi_uc *out, *old_out; \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
outdata	python/pvtools/pvpFile.py	/^    outdata = rf.read(progress=100)$/;"	v	class:pvpOpen
outfile	tests/test_constant_input/src/test_constant_input.cpp	/^const char outfile[]  = "output\/test_layer_direct_out.bin";$/;"	v
outlist	python/timers_txt_to_csv.py	/^outlist = zip(*[output_names,output_values])$/;"	v
output	src/probes/BaseProbe.hpp	/^   PrintStream &output() { return *outputStream; }$/;"	f	class:PV::BaseProbe
output	src/utils/PVLog.hpp	/^inline bool DebugLogType::output() {$/;"	f	class:PV::DebugLogType
output	src/utils/PVLog.hpp	/^inline bool ErrorLogType::output() {$/;"	f	class:PV::ErrorLogType
output	src/utils/PVLog.hpp	/^inline bool FatalType::output() {$/;"	f	class:PV::FatalType
output	src/utils/PVLog.hpp	/^inline bool InfoLogType::output() {$/;"	f	class:PV::InfoLogType
output	src/utils/PVLog.hpp	/^inline bool StackTraceType::output() {$/;"	f	class:PV::StackTraceType
output	src/utils/PVLog.hpp	/^inline bool WarnLogType::output() {$/;"	f	class:PV::WarnLogType
outputDir	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^outputDir = "\/nh\/compneuro\/Data\/temp\/output\/"$/;"	v
outputDirectory	python/timerPie.py	/^outputDirectory = "\/home\/sheng\/mountData\/KITTI\/KITTI_Deep_2X3frames\/benchmark0\/"$/;"	v
outputFileLine	src/utils/PVLog.hpp	/^inline bool DebugLogType::outputFileLine() {$/;"	f	class:PV::DebugLogType
outputFileLine	src/utils/PVLog.hpp	/^inline bool ErrorLogType::outputFileLine() {$/;"	f	class:PV::ErrorLogType
outputFileLine	src/utils/PVLog.hpp	/^inline bool FatalType::outputFileLine() {$/;"	f	class:PV::FatalType
outputFileLine	src/utils/PVLog.hpp	/^inline bool InfoLogType::outputFileLine() {$/;"	f	class:PV::InfoLogType
outputFileLine	src/utils/PVLog.hpp	/^inline bool StackTraceType::outputFileLine() {$/;"	f	class:PV::StackTraceType
outputFileLine	src/utils/PVLog.hpp	/^inline bool WarnLogType::outputFileLine() {$/;"	f	class:PV::WarnLogType
outputFilenameBase	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * outputFilenameBase = NULL;$/;"	m	class:BBFindConfRemapProbe
outputFilenameBase	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * outputFilenameBase;$/;"	m	class:LocalizationProbe
outputHeader	src/probes/ColProbe.hpp	/^   virtual int outputHeader() { return PV_SUCCESS; }$/;"	f	class:PV::ColProbe
outputHeader	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::outputHeader() {$/;"	f	class:PV::ColumnEnergyProbe
outputHeader	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::outputHeader() {$/;"	f	class:PV::QuotientColProbe
outputMethod	src/layers/Segmentify.hpp	/^   char *outputMethod;$/;"	m	class:PV::Segmentify
outputParams	src/columns/HyPerCol.cpp	/^int HyPerCol::outputParams(char const *path) {$/;"	f	class:PV::HyPerCol
outputParamsHeadComments	src/columns/HyPerCol.cpp	/^int HyPerCol::outputParamsHeadComments(FILE *fp, char const *commentToken) {$/;"	f	class:PV::HyPerCol
outputPatchIndices	src/probes/KernelProbe.hpp	/^   bool outputPatchIndices; \/\/ whether to output which presynaptic neurons using$/;"	m	class:PV::KernelProbe
outputPeriod	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   double outputPeriod;$/;"	m	class:LocalizationProbe
outputPlasticIncr	src/probes/KernelProbe.hpp	/^   bool outputPlasticIncr; \/\/ whether to output dW$/;"	m	class:PV::KernelProbe
outputPrefix	src/utils/PVLog.hpp	/^   void outputPrefix(const char *file, int line) {$/;"	f	struct:PV::Log
outputProbeParams	src/connections/BaseConnection.cpp	/^int BaseConnection::outputProbeParams() {$/;"	f	class:PV::BaseConnection
outputProbeParams	src/connections/HyPerConn.cpp	/^int HyPerConn::outputProbeParams() {$/;"	f	class:PV::HyPerConn
outputProbeParams	src/layers/HyPerLayer.cpp	/^int HyPerLayer::outputProbeParams() {$/;"	f	class:PV::HyPerLayer
outputState	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::outputState(double timevalue) {$/;"	f	class:BBFindConfRemapProbe
outputState	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::outputState(double timevalue) {$/;"	f	class:LocalizationProbe
outputState	src/columns/HyPerCol.cpp	/^int HyPerCol::outputState(double time) {$/;"	f	class:PV::HyPerCol
outputState	src/connections/CloneConn.hpp	/^   virtual int outputState(double time, bool last = false) { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
outputState	src/connections/HyPerConn.cpp	/^int HyPerConn::outputState(double timef, bool last) {$/;"	f	class:PV::HyPerConn
outputState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::outputState(double timef, bool last) {$/;"	f	class:PV::HyPerLayer
outputState	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::outputState(double timevalue) {$/;"	f	class:PV::AbstractNormProbe
outputState	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::outputState(double timeValue) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
outputState	src/probes/ColProbe.hpp	/^   virtual int outputState(double timed) { return PV_SUCCESS; }$/;"	f	class:PV::ColProbe
outputState	src/probes/ColumnEnergyProbe.cpp	/^int ColumnEnergyProbe::outputState(double timevalue) {$/;"	f	class:PV::ColumnEnergyProbe
outputState	src/probes/KernelProbe.cpp	/^int KernelProbe::outputState(double timed) {$/;"	f	class:PV::KernelProbe
outputState	src/probes/L2ConnProbe.cpp	/^int L2ConnProbe::outputState(double timed) {$/;"	f	class:PV::L2ConnProbe
outputState	src/probes/PointProbe.cpp	/^int PointProbe::outputState(double timef) {$/;"	f	class:PV::PointProbe
outputState	src/probes/QuotientColProbe.cpp	/^int QuotientColProbe::outputState(double timevalue) {$/;"	f	class:PV::QuotientColProbe
outputState	src/probes/RequireAllZeroActivityProbe.cpp	/^int RequireAllZeroActivityProbe::outputState(double timed) {$/;"	f	class:PV::RequireAllZeroActivityProbe
outputState	src/probes/StatsProbe.cpp	/^int StatsProbe::outputState(double timed) {$/;"	f	class:PV::StatsProbe
outputState	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^int ArborTestForOnesProbe::outputState(double timed) {$/;"	f	class:PV::ArborTestForOnesProbe
outputState	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^int ArborTestProbe::outputState(double timed) {$/;"	f	class:PV::ArborTestProbe
outputState	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^int BatchSweepTestProbe::outputState(double timed) {$/;"	f	class:PV::BatchSweepTestProbe
outputState	tests/CloneHyPerConnTest/src/CloneHyPerConnTestProbe.cpp	/^int CloneHyPerConnTestProbe::outputState(double timed) {$/;"	f	class:PV::CloneHyPerConnTestProbe
outputState	tests/CloneKernelConnTest/src/CloneKernelConnTestProbe.cpp	/^int CloneKernelConnTestProbe::outputState(double timed) {$/;"	f	class:PV::CloneKernelConnTestProbe
outputState	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^int DatastoreDelayTestProbe::outputState(double timed) {$/;"	f	class:PV::DatastoreDelayTestProbe
outputState	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^int DelayTestProbe::outputState(double timed) {$/;"	f	class:PV::DelayTestProbe
outputState	tests/GPUSystemTest/src/GPUSystemTestProbe.cpp	/^int GPUSystemTestProbe::outputState(double timed) {$/;"	f	class:PV::GPUSystemTestProbe
outputState	tests/GPUSystemTest/src/identicalBatchProbe.cpp	/^int identicalBatchProbe::outputState(double timed) {$/;"	f	class:PV::identicalBatchProbe
outputState	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^int AllConstantValueProbe::outputState(double timed) {$/;"	f	class:PV::AllConstantValueProbe
outputState	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::outputState(double timevalue) {$/;"	f	class:HyPerConnCheckpointerTestProbe
outputState	tests/InitWeightsTest/src/InitWeightTestProbe.cpp	/^int InitWeightTestProbe::outputState(double timed) {$/;"	f	class:PV::InitWeightTestProbe
outputState	tests/KernelTest/src/KernelTestProbe.cpp	/^int KernelTestProbe::outputState(double timed) {$/;"	f	class:PV::KernelTestProbe
outputState	tests/LIFTest/src/LIFTestProbe.cpp	/^int LIFTestProbe::outputState(double timed) {$/;"	f	class:PV::LIFTestProbe
outputState	tests/LayerPhaseTest/src/LayerPhaseTestProbe.cpp	/^int LayerPhaseTestProbe::outputState(double timed) {$/;"	f	class:PV::LayerPhaseTestProbe
outputState	tests/MPITest/src/MPITestProbe.cpp	/^int MPITestProbe::outputState(double timed) {$/;"	f	class:PV::MPITestProbe
outputState	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::outputState(double timevalue) {$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
outputState	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::outputState(double timevalue) {$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
outputState	tests/MomentumTest/src/MomentumConnTestProbe.cpp	/^int MomentumConnTestProbe::outputState(double timed) {$/;"	f	class:PV::MomentumConnTestProbe
outputState	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^int ParameterSweepTestProbe::outputState(double timed) {$/;"	f	class:PV::ParameterSweepTestProbe
outputState	tests/PlasticConnTest/src/PlasticConnTestProbe.cpp	/^int PlasticConnTestProbe::outputState(double timed) {$/;"	f	class:PV::PlasticConnTestProbe
outputState	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::outputState(double timevalue) {$/;"	f	class:PoolingConnCheckpointerTestProbe
outputState	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.cpp	/^int ReceiveFromPostProbe::outputState(double timed) {$/;"	f	class:PV::ReceiveFromPostProbe
outputState	tests/RescaleLayerTest/src/RescaleLayerTestProbe.cpp	/^int RescaleLayerTestProbe::outputState(double timed) {$/;"	f	class:PV::RescaleLayerTestProbe
outputState	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^int ResetStateOnTriggerTestProbe::outputState(double timevalue) {$/;"	f	class:ResetStateOnTriggerTestProbe
outputState	tests/SegmentTest/src/AssertZerosProbe.cpp	/^int AssertZerosProbe::outputState(double timed) {$/;"	f	class:PV::AssertZerosProbe
outputState	tests/Shared/Example.cpp	/^int Example::outputState(double timef, bool last) {$/;"	f	class:PV::Example
outputState	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^int ShrunkenPatchTestProbe::outputState(double timed) {$/;"	f	class:PV::ShrunkenPatchTestProbe
outputState	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^int StochasticReleaseTestProbe::outputState(double timed) {$/;"	f	class:PV::StochasticReleaseTestProbe
outputState	tests/TriggerTest/src/TriggerTestLayerProbe.cpp	/^int TriggerTestLayerProbe::outputState(double timef) { return 0; }$/;"	f	class:PV::TriggerTestLayerProbe
outputState	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^int MomentumTestConnProbe::outputState(double timed) {$/;"	f	class:PV::MomentumTestConnProbe
outputState	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^int TestConnProbe::outputState(double timed) {$/;"	f	class:PV::TestConnProbe
outputState	tests/WriteActivitySparseTest/src/TestNotAlwaysAllZerosProbe.cpp	/^int TestNotAlwaysAllZerosProbe::outputState(double timed) {$/;"	f	class:PV::TestNotAlwaysAllZerosProbe
outputStateWrapper	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^int BBFindConfRemapProbe::outputStateWrapper(double timef, double dt){$/;"	f	class:BBFindConfRemapProbe
outputStateWrapper	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::outputStateWrapper(double timef, double dt){$/;"	f	class:LocalizationProbe
outputStateWrapper	src/probes/BaseProbe.cpp	/^int BaseProbe::outputStateWrapper(double timef, double dt) {$/;"	f	class:PV::BaseProbe
outputStateWrapper	tests/TriggerTest/src/TriggerTestLayerProbe.cpp	/^int TriggerTestLayerProbe::outputStateWrapper(double time, double dt) {$/;"	f	class:PV::TriggerTestLayerProbe
outputStream	src/probes/BaseProbe.hpp	/^   PrintStream *outputStream;$/;"	m	class:PV::BaseProbe
outputWeights	src/probes/KernelProbe.hpp	/^   bool outputWeights; \/\/ whether to output W$/;"	m	class:PV::KernelProbe
output_dir	python/analysis_parse.py	/^output_dir = (".")$/;"	v
output_names	python/timers_txt_to_csv.py	/^output_names = ['label']$/;"	v
output_values	python/timers_txt_to_csv.py	/^output_values = ['count']$/;"	v
override	src/checkpointing/CheckpointEntryData.hpp	/^         const override;$/;"	m	class:PV::CheckpointEntryData
override	src/checkpointing/CheckpointEntryData.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const override;$/;"	m	class:PV::CheckpointEntryData
override	src/checkpointing/CheckpointEntryData.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const override;$/;"	m	class:PV::CheckpointEntryData
override	src/checkpointing/CheckpointEntryDataStore.hpp	/^   virtual float *calcBatchElementStart(int batchElement) const override;$/;"	m	class:PV::CheckpointEntryDataStore
override	src/checkpointing/CheckpointEntryDataStore.hpp	/^   virtual int calcMPIBatchIndex(int frame) const override;$/;"	m	class:PV::CheckpointEntryDataStore
override	src/checkpointing/CheckpointEntryDataStore.hpp	/^   virtual int getNumFrames() const override;$/;"	m	class:PV::CheckpointEntryDataStore
override	src/checkpointing/CheckpointEntryPvp.hpp	/^         const override;$/;"	m	class:PV::CheckpointEntryPvp
override	src/checkpointing/CheckpointEntryPvp.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const override;$/;"	m	class:PV::CheckpointEntryPvp
override	src/checkpointing/CheckpointEntryPvp.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const override;$/;"	m	class:PV::CheckpointEntryPvp
override	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   virtual T *calcBatchElementStart(int batchElement) const override;$/;"	m	class:PV::CheckpointEntryPvpBuffer
override	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   virtual int calcMPIBatchIndex(int frame) const override;$/;"	m	class:PV::CheckpointEntryPvpBuffer
override	src/checkpointing/CheckpointEntryPvpBuffer.hpp	/^   virtual int getNumFrames() const override;$/;"	m	class:PV::CheckpointEntryPvpBuffer
override	src/checkpointing/CheckpointEntryRandState.hpp	/^         const override;$/;"	m	class:PV::CheckpointEntryRandState
override	src/checkpointing/CheckpointEntryRandState.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const override;$/;"	m	class:PV::CheckpointEntryRandState
override	src/checkpointing/CheckpointEntryRandState.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const override;$/;"	m	class:PV::CheckpointEntryRandState
override	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^         const override;$/;"	m	class:PV::CheckpointEntryWeightPvp
override	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const override;$/;"	m	class:PV::CheckpointEntryWeightPvp
override	src/checkpointing/CheckpointEntryWeightPvp.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const override;$/;"	m	class:PV::CheckpointEntryWeightPvp
override	src/checkpointing/CheckpointableFileStream.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override;$/;"	m	class:PV::CheckpointableFileStream
override	src/checkpointing/Checkpointer.hpp	/^   virtual void addObserver(Observer *observer, BaseMessage const &message) override;$/;"	m	class:PV::Checkpointer
override	src/columns/BaseObject.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override; \/\/ TODO: should return$/;"	m	class:PV::BaseObject
override	src/columns/HyPerCol.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override;$/;"	m	class:PV::HyPerCol
override	src/components/AdaptiveTimeScaleController.hpp	/^         const override;$/;"	m	class:PV::CheckpointEntryTimeScaleInfo
override	src/components/AdaptiveTimeScaleController.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::AdaptiveTimeScaleController
override	src/components/AdaptiveTimeScaleController.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const override;$/;"	m	class:PV::CheckpointEntryTimeScaleInfo
override	src/components/AdaptiveTimeScaleController.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const override;$/;"	m	class:PV::CheckpointEntryTimeScaleInfo
override	src/components/BatchIndexer.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::BatchIndexer
override	src/components/BatchIndexer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::BatchIndexer
override	src/connections/BaseConnection.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::BaseConnection
override	src/connections/BaseConnection.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override;$/;"	m	class:PV::BaseConnection
override	src/connections/HyPerConn.hpp	/^   int outputProbeParams() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual bool needUpdate(double time, double dt) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int cleanup() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int deliver() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int finalizeUpdate(double timed, double dt) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int insertProbe(BaseConnectionProbe *p) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int outputState(double time, bool last = false) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int prepareCheckpointWrite() override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int setInitialValues() override; \/\/ returns PV_SUCCESS if successful,$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::HyPerConn
override	src/connections/HyPerConn.hpp	/^   virtual void ioParam_channelCode(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::HyPerConn
override	src/connections/ImprintConn.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::ImprintConn
override	src/connections/MomentumConn.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::MomentumConn
override	src/connections/MomentumConn.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::MomentumConn
override	src/connections/PoolingConn.hpp	/^   virtual float maxWeight(int arborId = 0) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual float minWeight(int arborId = 0) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int constructWeights() override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int deliverPostsynapticPerspective(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int deliverPostsynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int deliverPresynapticPerspectiveGPU(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual int setInitialValues() override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual void ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual void ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual void ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual void ioParam_sharedWeights(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   virtual void ioParam_weightInitType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   void ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   void ioParam_writeCompressedCheckpoints(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/PoolingConn.hpp	/^   void ioParam_writeStep(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::PoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual bool needUpdate(double timed, double dt) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual double computeNewWeightUpdateTime(double time, double currentUpdateTime) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int constructWeights() override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int deliverPostsynapticPerspective(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int deliverPresynapticPerspective(PVLayerCube const *activity, int arborID) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int setInitialValues() override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int setPatchSize() override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_combine_dW_with_W_flag(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_dWMax(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_initialWeightUpdateTime(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_initializeFromCheckpointFlag(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_keepKernelsSynchronized(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_nfp(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_normalizeMethod(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_numAxonalArbors(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_nxp(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_nyp(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_plasticityFlag(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_pvpatchAccumulateType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_receiveGpu(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_sharedWeights(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_shrinkPatches(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_weightInitType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_weightUpdatePeriod(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/connections/TransposePoolingConn.hpp	/^   virtual void ioParam_writeStep(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::TransposePoolingConn
override	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^   virtual int do_run() override;$/;"	m	class:PVCuda::CudaPoolingDeliverKernel
override	src/cudakernels/CudaTransposePoolingDeliverKernel.hpp	/^   virtual int do_run() override;$/;"	m	class:PVCuda::CudaTransposePoolingDeliverKernel
override	src/initv/ConstantV.hpp	/^   virtual int calcV(float *V, PVLayerLoc const *loc) override;$/;"	m	class:PV::ConstantV
override	src/initv/ConstantV.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::ConstantV
override	src/initv/GaussianRandomV.hpp	/^   virtual int calcV(float *V, PVLayerLoc const *loc) override;$/;"	m	class:PV::GaussianRandomV
override	src/initv/GaussianRandomV.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::GaussianRandomV
override	src/initv/InitVFromFile.hpp	/^   virtual int calcV(float *V, PVLayerLoc const *loc) override;$/;"	m	class:PV::InitVFromFile
override	src/initv/InitVFromFile.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::InitVFromFile
override	src/initv/UniformRandomV.hpp	/^   virtual int calcV(float *V, PVLayerLoc const *loc) override;$/;"	m	class:PV::UniformRandomV
override	src/initv/UniformRandomV.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::UniformRandomV
override	src/initv/ZeroV.hpp	/^   virtual void ioParam_valueV(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::ZeroV
override	src/layers/CloneVLayer.hpp	/^   requireMarginWidth(int marginWidthNeeded, int *marginWidthResult, char axis) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int allocateGSyn() override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int allocateV() override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int initializeV() override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int readVFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int requireChannel(int channelNeeded, int *numChannelsResult) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual int updateState(double timed, double dt) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/CloneVLayer.hpp	/^   virtual void ioParam_InitVType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::CloneVLayer
override	src/layers/FilenameParsingGroundTruthLayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::FilenameParsingGroundTruthLayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual double getDeltaUpdateTime() override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual int requireChannel(int channelNeeded, int *numChannelsResult) override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLCALayer.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::HyPerLCALayer
override	src/layers/HyPerLayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int copyInitialStateToGPU() override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int processCheckpointRead() override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::HyPerLayer
override	src/layers/HyPerLayer.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override;$/;"	m	class:PV::HyPerLayer
override	src/layers/InputLayer.hpp	/^   virtual double getDeltaUpdateTime() override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int allocateV() override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int initializeActivity() override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int initializeV() override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int requireChannel(int channelNeeded, int *numChannelsResult) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual void ioParam_InitVType(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::InputLayer
override	src/layers/InputLayer.hpp	/^   virtual void ioParam_triggerLayerName(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::InputLayer
override	src/layers/LCALIFLayer.hpp	/^   int allocateBuffers() override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LCALIFLayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LCALIFLayer.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LCALIFLayer.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LCALIFLayer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LCALIFLayer.hpp	/^   virtual int updateState(double timef, double dt) override;$/;"	m	class:PV::LCALIFLayer
override	src/layers/LIF.hpp	/^   virtual float getChannelTimeConst(enum ChannelType channel_type) override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int allocateBuffers() override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int setActivity() override;$/;"	m	class:PV::LIF
override	src/layers/LIF.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::LIF
override	src/layers/LIFGap.hpp	/^   int virtual readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::LIFGap
override	src/layers/LIFGap.hpp	/^   int virtual updateState(double time, double dt) override;$/;"	m	class:PV::LIFGap
override	src/layers/LIFGap.hpp	/^   virtual int allocateConductances(int num_channels) override;$/;"	m	class:PV::LIFGap
override	src/layers/LIFGap.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::LIFGap
override	src/layers/MomentumLCALayer.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/MomentumLCALayer.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/MomentumLCALayer.hpp	/^   virtual int prepareCheckpointWrite() override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/MomentumLCALayer.hpp	/^   virtual int processCheckpointRead() override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/MomentumLCALayer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/MomentumLCALayer.hpp	/^   virtual int updateState(double time, double dt) override;$/;"	m	class:PV::MomentumLCALayer
override	src/layers/Retina.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) override;$/;"	m	class:PV::Retina
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   int calcValues(double timeValue) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual int allocateDataStructures() override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual int outputState(double timeValue) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/AdaptiveTimeScaleProbe.hpp	/^   virtual void ioParam_targetName(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::AdaptiveTimeScaleProbe
override	src/probes/KneeTimeScaleProbe.hpp	/^   int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::KneeTimeScaleProbe
override	src/probes/LogTimeScaleProbe.hpp	/^   int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::LogTimeScaleProbe
override	src/probes/StatsProbe.hpp	/^   virtual int initNumValues() override;$/;"	m	class:PV::StatsProbe
override	src/probes/StatsProbe.hpp	/^   virtual int ioParamsFillGroup(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::StatsProbe
override	src/probes/StatsProbe.hpp	/^   virtual int outputState(double timef) override;$/;"	m	class:PV::StatsProbe
override	src/probes/StatsProbe.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) override;$/;"	m	class:PV::StatsProbe
override	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^   virtual int updateState(double simTime, double dt) override;$/;"	m	class:FailBeforeExpectedStartTimeLayer
override	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^   virtual int updateStateGpu(double simTime, double dt) override;$/;"	m	class:FailBeforeExpectedStartTimeLayer
override	tests/DryRunFlagTest/src/AlwaysFailsLayer.hpp	/^   virtual bool needUpdate(double simTime, double dt) override;$/;"	m	class:PV::AlwaysFailsLayer
override	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:HyPerConnCheckpointerTestProbe
override	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   virtual int readStateFromCheckpoint(PV::Checkpointer *checkpointer) override;$/;"	m	class:HyPerConnCheckpointerTestProbe
override	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.hpp	/^   virtual void ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) override;$/;"	m	class:HyPerConnCheckpointerTestProbe
override	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
override	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   virtual int readStateFromCheckpoint(PV::Checkpointer *checkpointer) override;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
override	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.hpp	/^   virtual void ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) override;$/;"	m	class:MomentumConnSimpleCheckpointerTestProbe
override	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
override	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   virtual int readStateFromCheckpoint(PV::Checkpointer *checkpointer) override;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
override	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.hpp	/^   virtual void ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) override;$/;"	m	class:MomentumConnViscosityCheckpointerTestProbe
override	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PoolingConnCheckpointerTestProbe
override	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   virtual int readStateFromCheckpoint(PV::Checkpointer *checkpointer) override;$/;"	m	class:PoolingConnCheckpointerTestProbe
override	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.hpp	/^   virtual void ioParam_textOutputFlag(enum PV::ParamsIOFlag ioFlag) override;$/;"	m	class:PoolingConnCheckpointerTestProbe
override	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^   virtual int communicateInitInfo() override;$/;"	m	class:PV::StochasticReleaseTestProbe
override	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^   virtual int outputState(double timed) override;$/;"	m	class:PV::StochasticReleaseTestProbe
override	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^   virtual void ioParam_buffer(enum ParamsIOFlag ioFlag) override;$/;"	m	class:PV::StochasticReleaseTestProbe
padGray	mlab/imgProc/padGray.m	/^function [pad_image] = padGray(gray_chip, pad_size, gray_val)$/;"	f
pal	src/io/stb_image.h	/^   stbi_uc pal[256][4];$/;"	m	struct:__anon20
paramDblValue	src/io/PVParams.hpp	/^   double paramDblValue;$/;"	m	class:PV::Parameter
paramMovedToColumnEnergyProbe	src/columns/HyPerCol.cpp	/^void HyPerCol::paramMovedToColumnEnergyProbe(enum ParamsIOFlag ioFlag, char const *paramName) {$/;"	f	class:PV::HyPerCol
paramName	src/io/PVParams.hpp	/^   char *paramName;$/;"	m	class:PV::Parameter
paramName	src/io/PVParams.hpp	/^   char *paramName;$/;"	m	class:PV::ParameterArray
paramName	src/io/PVParams.hpp	/^   char *paramName;$/;"	m	class:PV::ParameterString
paramName	src/io/PVParams.hpp	/^   char *paramName;$/;"	m	class:PV::ParameterSweep
paramNameSet	src/io/PVParams.hpp	/^   bool paramNameSet;$/;"	m	class:PV::ParameterArray
paramSweeps	src/io/PVParams.hpp	/^   ParameterSweep **paramSweeps;$/;"	m	class:PV::PVParams
paramValue	src/io/PVParams.hpp	/^   char *paramValue;$/;"	m	class:PV::ParameterString
paramValue	src/io/PVParams.hpp	/^   float paramValue;$/;"	m	class:PV::Parameter
param_location	python/analysis_parse.py	/^    param_location = ".\/" + foundparams[0]$/;"	v
param_location	python/analysis_parse.py	/^param_location = ""$/;"	v
parameterArrays	src/io/PVParams.hpp	/^   ParameterArray **parameterArrays;$/;"	m	class:PV::ParameterArrayStack
parameterStrings	src/io/PVParams.hpp	/^   ParameterString **parameterStrings;$/;"	m	class:PV::ParameterStringStack
parameterSweepSize	src/io/PVParams.hpp	/^   int parameterSweepSize; \/\/ The number of parameter value sets in the sweep.  Each ParameterSweep$/;"	m	class:PV::PVParams
parameter_array	src/io/parser/params.y	/^parameter_array : '[' parameter_array_values ']'$/;"	l
parameter_array_def	src/io/parser/params.y	/^parameter_array_def : T_ID '=' parameter_array ';'$/;"	l
parameter_array_value	src/io/parser/params.y	/^parameter_array_value : T_NUMBER$/;"	l
parameter_array_values	src/io/parser/params.y	/^parameter_array_values : parameter_array_value$/;"	l
parameter_def	src/io/parser/params.y	/^parameter_def : T_ID '=' T_NUMBER ';'$/;"	l
parameter_defs	src/io/parser/params.y	/^parameter_defs : \/* empty *\/$/;"	l
parameter_group	src/io/parser/params.y	/^parameter_group : parameter_group_id '{' parameter_defs '}' ';'$/;"	l
parameter_group_id	src/io/parser/params.y	/^parameter_group_id : T_ID T_STRING '='$/;"	l
parameter_string_def	src/io/parser/params.y	/^parameter_string_def : T_ID '=' T_STRING ';'$/;"	l
parameter_sweep	src/io/parser/params.y	/^parameter_sweep : parameter_sweep_id '{' parameter_sweep_values '}' ';'$/;"	l
parameter_sweep_id	src/io/parser/params.y	/^parameter_sweep_id : T_PARAM_SWEEP T_STRING ':' T_ID '='$/;"	l
parameter_sweep_values	src/io/parser/params.y	/^parameter_sweep_values : \/* empty *\/$/;"	l
parameter_sweep_values_filename	src/io/parser/params.y	/^parameter_sweep_values_filename : T_FILENAME ';'$/;"	l
parameter_sweep_values_filenames	src/io/parser/params.y	/^parameter_sweep_values_filenames : parameter_sweep_values_filename$/;"	l
parameter_sweep_values_number	src/io/parser/params.y	/^parameter_sweep_values_number : T_NUMBER ';'$/;"	l
parameter_sweep_values_numbers	src/io/parser/params.y	/^parameter_sweep_values_numbers : parameter_sweep_values_number$/;"	l
parameter_sweep_values_string	src/io/parser/params.y	/^parameter_sweep_values_string : T_STRING ';'$/;"	l
parameter_sweep_values_strings	src/io/parser/params.y	/^parameter_sweep_values_strings : parameter_sweep_values_string$/;"	l
parameters	src/columns/HyPerCol.hpp	/^   PVParams *parameters() const { return mParams; }$/;"	f	class:PV::HyPerCol
parameters	src/io/PVParams.hpp	/^   Parameter **parameters;$/;"	m	class:PV::ParameterStack
params	src/columns/PV_Init.hpp	/^   PVParams *params;$/;"	m	class:PV::PV_Init
params	src/cudakernels/CudaRecvPost.hpp	/^   recv_post_params params;$/;"	m	class:PVCuda::CudaRecvPost
params	src/cudakernels/CudaRecvPre.hpp	/^   recv_pre_params params;$/;"	m	class:PVCuda::CudaRecvPre
params	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   HyPerLCAParams params;$/;"	m	class:PVCuda::CudaUpdateHyPerLCALayer
params	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   ISTAParams params;$/;"	m	class:PVCuda::CudaUpdateISTALayer
params	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   MomentumLCAParams params;$/;"	m	class:PVCuda::CudaUpdateMomentumLCALayer
parent	src/columns/BaseObject.hpp	/^   HyPerCol *parent = nullptr; \/\/ TODO: eliminate HyPerCol argument to$/;"	m	class:PV::BaseObject
parent	src/weightinit/InitWeightsParams.hpp	/^   HyPerCol *parent;$/;"	m	class:PV::InitWeightsParams
parentConn	src/weightinit/InitWeightsParams.hpp	/^   HyPerConn *parentConn;$/;"	m	class:PV::InitWeightsParams
parse	python/param_draw.py	/^    def parse(self):$/;"	m	class:Param_Parser
parse	src/io/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
parseAccumulateTypeString	src/connections/PoolingConn.cpp	/^PoolingConn::AccumulateType PoolingConn::parseAccumulateTypeString(char const *poolingTypeString) {$/;"	f	class:PV::PoolingConn
parseBoolean	src/io/Configuration.cpp	/^bool Configuration::parseBoolean(std::string const &valueString) const {$/;"	f	class:PV::Configuration
parseBuffer	src/io/PVParams.cpp	/^int PVParams::parseBuffer(char const *buffer, long int bufferLength) {$/;"	f	class:PV::PVParams
parseFile	src/io/PVParams.cpp	/^int PVParams::parseFile(const char *filename) {$/;"	f	class:PV::PVParams
parseIntOptional	src/io/Configuration.cpp	/^Configuration::IntOptional Configuration::parseIntOptional(std::string const &valueString) const {$/;"	f	class:PV::Configuration
parseInteger	src/io/Configuration.cpp	/^int Configuration::parseInteger(std::string const &valueString) const {$/;"	f	class:PV::Configuration
parseStatus	src/io/PVParams.hpp	/^   int parseStatus;$/;"	m	class:PV::PVParams
parseString	src/io/Configuration.cpp	/^std::string Configuration::parseString(std::string const &valueString) const { return valueString; }$/;"	f	class:PV::Configuration
parseUnsignedInt	src/io/Configuration.cpp	/^unsigned int Configuration::parseUnsignedInt(std::string const &valueString) const {$/;"	f	class:PV::Configuration
parse_options	src/io/io.cpp	/^int parse_options($/;"	f	namespace:PV
parseheader	tools/readpvpheader.c	/^int parseheader(FILE * fid)$/;"	f
patch2datalookuptable	src/connections/HyPerConn.hpp	/^   int *patch2datalookuptable;$/;"	m	class:PV::HyPerConn
patch2datalookuptable	src/cudakernels/CudaRecvPost.hpp	/^   int *patch2datalookuptable;$/;"	m	struct:PVCuda::recv_post_params
patch2datalookuptable	src/cudakernels/CudaRecvPre.hpp	/^   int *patch2datalookuptable;$/;"	m	struct:PVCuda::recv_pre_params
patchIndexToDataIndex	src/connections/HyPerConn.cpp	/^int HyPerConn::patchIndexToDataIndex($/;"	f	class:PV::HyPerConn
patchIndices	src/probes/KernelProbe.cpp	/^int KernelProbe::patchIndices(HyPerConn *conn) {$/;"	f	class:PV::KernelProbe
patchSize	src/layers/RescaleLayer.hpp	/^   int patchSize;$/;"	m	class:PV::RescaleLayer
patchStartIndex	src/connections/HyPerConn.hpp	/^   inline size_t patchStartIndex(int patchIndex) {$/;"	f	class:PV::HyPerConn
patchToDataLUT	src/connections/HyPerConn.cpp	/^int HyPerConn::patchToDataLUT(int patchIndex) {$/;"	f	class:PV::HyPerConn
patches	src/cudakernels/CudaRecvPre.hpp	/^   PVPatch *patches;$/;"	m	struct:PVCuda::recv_pre_params
patchgeometry	mlab/util/writepvpweightfile.m	/^function [nx,ny,offset] = patchgeometry(nxLocalPre,nyLocalPre,nbPre,nxLocalPost,nyLocalPost,nxp,nyp,nfp)$/;"	f
patchgeometryonedimension	mlab/util/writepvpweightfile.m	/^function [start,width] = patchgeometryonedimension(nLocalPreExt,nb,nLocalPostRes,patchwidth)$/;"	f
peek	src/io/PVParams.hpp	/^   Parameter *peek(int index) { return parameters[index]; }$/;"	f	class:PV::ParameterStack
peek	src/io/PVParams.hpp	/^   ParameterArray *peek(int index) {$/;"	f	class:PV::ParameterArrayStack
peek	src/io/PVParams.hpp	/^   ParameterString *peek(int index) {$/;"	f	class:PV::ParameterStringStack
peek	src/io/PVParams.hpp	/^   double peek(int index) { return valuesDbl[index]; }$/;"	f	class:PV::ParameterArray
percentile	src/connections/HyPerConn.hpp	/^   float percentile;$/;"	m	struct:PV::SparseWeightInfo
period	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.hpp	/^   int period; \/\/ The periodicity of the V buffer, in pixels.$/;"	m	class:PV::DatastoreDelayTestLayer
permuteDatastorePVToCudnn	src/cudakernels/CudaRecvPost.cpp	/^void CudaRecvPost::permuteDatastorePVToCudnn() {$/;"	f	class:PVCuda::CudaRecvPost
permuteGSynCudnnToPV	src/cudakernels/CudaRecvPost.cpp	/^void CudaRecvPost::permuteGSynCudnnToPV(int channel) {$/;"	f	class:PVCuda::CudaRecvPost
permuteGSynPVToCudnn	src/cudakernels/CudaRecvPost.cpp	/^void CudaRecvPost::permuteGSynPVToCudnn(int channel) {$/;"	f	class:PVCuda::CudaRecvPost
permuteWeightsPVToCudnn	src/arch/cuda/CudaBuffer.cpp	/^void CudaBuffer::permuteWeightsPVToCudnn($/;"	f	class:PVCuda::CudaBuffer
phase	src/layers/HyPerLayer.hpp	/^   int phase; \/\/ All layers with phase 0 get updated before any with phase 1, etc.$/;"	m	class:PV::HyPerLayer
phi	tests/InitWeightsTest/src/InitGaborWeightsParams.hpp	/^   float phi;$/;"	m	class:PV::InitGaborWeightsParams
pinknoisecube	mlab/util/pinknoisecube.m	/^function [Yre,Yim] = pinknoisecube(ny,nx,nz)$/;"	f
pinknoiseimage	mlab/util/pinknoiseimage.m	/^function [Yre,Yim] = pinknoiseimage(m,n)$/;"	f
pixelTypeConvert	src/layers/ImageFromMemoryBuffer.cpp	/^float ImageFromMemoryBuffer::pixelTypeConvert(pixeltype q, pixeltype zeroval, pixeltype oneval) {$/;"	f	class:PV::ImageFromMemoryBuffer
placePotentialBoxes	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Rectangles BBFind::placePotentialBoxes(const Map3 fullMap)$/;"	f	class:BBFind
plasticityFlag	src/connections/BaseConnection.hpp	/^   bool plasticityFlag;$/;"	m	class:PV::BaseConnection
plotMe	python/probe_analysis/noArborReadProbe.py	/^                    plotMe = time * data[key][i][0] + data[key][i][1]$/;"	v
plotMe	python/probe_analysis/noArborReadProbe.py	/^            plotMe = array(data[key])$/;"	v
plotMe	python/probe_analysis/noArborReadProbe.py	/^        plotMe = array(data[key])$/;"	v
plotMe	python/probe_analysis/readProbe.py	/^                            plotMe = time * data[key][arborID][TCBin][0] + data[key][arborID][TCBin][1]$/;"	v
plotMe	python/probe_analysis/readProbe.py	/^                plotMe = array(data[key][arborID][preNeuronID][:])$/;"	v
plotPercErr	python/deprecated/plotError.py	/^def plotPercErr(preLayer,postLayer,showPlot=False,savePlot=False,saveName=''):$/;"	f
plotPercentActive	python/deprecated/plotActivity.py	/^def plotPercentActive(layer,showPlot=False,savePlot=False,saveName=''):$/;"	f
plotPercentChange	python/deprecated/plotActivity.py	/^def plotPercentChange(layer,showPlot=False,savePlot=False,saveName=''):$/;"	f
plotRecon	python/deprecated/plotRecon.py	/^def plotRecon(layernames, dataDir, skipFrames, startFrames=0, scale=True, outputDir=None, suffix=""):$/;"	f
plotReconError	python/deprecated/plotReconError.py	/^def plotReconError(preErrLayers, postErrLayers, preToPostScale, outputDir, showPlots, skipFrames=1, gtLayers=None, gtThresh=.7) :$/;"	f
plotSnrDbErr	python/deprecated/plotError.py	/^def plotSnrDbErr(preLayer,postLayer,showPlot=False,savePlot=False,saveName=''):$/;"	f
plotWeights	python/deprecated/plotWeights.py	/^def plotWeights(weightDat,activityDat=None,arborIdxList=None,i_frame=0,margin=0,plotColor=True,showPlot=False,savePlot=False,saveName=''):$/;"	f
point2PreSynapticWeights	src/connections/HyPerConn.cpp	/^PVPatch ****HyPerConn::point2PreSynapticWeights() {$/;"	f	class:PV::HyPerConn
point_writeState	tests/PointProbeTest/src/TestPointProbe.cpp	/^int TestPointProbe::point_writeState(double timef, float outVVal, float outAVal) {$/;"	f	class:PV::TestPointProbe
poolingDescriptor	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      void *poolingDescriptor;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
poolingMode	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      cudnnPoolingMode_t poolingMode;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
poolingType	src/connections/PoolingConn.hpp	/^   AccumulateType poolingType;$/;"	m	class:PV::PoolingConn
pop	src/io/PVParams.cpp	/^Parameter *ParameterStack::pop() {$/;"	f	class:PV::ParameterStack
pop	src/io/PVParams.cpp	/^ParameterString *ParameterStringStack::pop() {$/;"	f	class:PV::ParameterStringStack
populateFileList	src/layers/InputLayer.cpp	/^void InputLayer::populateFileList() {$/;"	f	class:PV::InputLayer
post	src/connections/BaseConnection.hpp	/^   HyPerLayer *post;$/;"	m	class:PV::BaseConnection
post	src/weightinit/InitWeightsParams.hpp	/^   HyPerLayer *post;$/;"	m	class:PV::InitWeightsParams
postBufNum	src/cudakernels/CudaRecvPost.hpp	/^   size_t postBufNum;$/;"	m	struct:PVCuda::recv_post_params
postConn	src/connections/HyPerConn.hpp	/^   HyPerConn *postConn;$/;"	m	class:PV::HyPerConn
postExtStrides	src/connections/HyPerConn.hpp	/^         postExtStrides; \/\/ sx,sy,sf for a patch mapping into an extended post-synaptic layer$/;"	m	class:PV::HyPerConn
postGSyn	src/cudakernels/CudaRecvPre.hpp	/^   float *postGSyn;$/;"	m	struct:PVCuda::recv_pre_params
postGsyn	src/cudakernels/CudaRecvPost.hpp	/^   float *postGsyn;$/;"	m	struct:PVCuda::recv_post_params
postIndexLayer	src/connections/PoolingConn.hpp	/^   PoolingIndexLayer *postIndexLayer;$/;"	m	class:PV::PoolingConn
postIndexLayerName	src/connections/PoolingConn.hpp	/^   char *postIndexLayerName;$/;"	m	class:PV::PoolingConn
postLayerName	src/connections/BaseConnection.hpp	/^   char *postLayerName;$/;"	m	class:PV::BaseConnection
postLoc	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      PVLayerLoc const *postLoc;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
postNonextStrides	src/connections/HyPerConn.hpp	/^         postNonextStrides; \/\/ sx,sy,sf for a patch mapping into a non-extended post-synaptic layer$/;"	m	class:PV::HyPerConn
postPatchStartIndex	src/connections/HyPerConn.hpp	/^   inline size_t postPatchStartIndex(int patchIndex) {$/;"	f	class:PV::HyPerConn
postProcess	src/layers/InputLayer.cpp	/^int InputLayer::postProcess(double timef, double dt) {$/;"	f	class:PV::InputLayer
postSynapticLayer	src/connections/BaseConnection.hpp	/^   inline HyPerLayer *postSynapticLayer() { return post; }$/;"	f	class:PV::BaseConnection
postSynapticPatchHead	src/connections/HyPerConn.cpp	/^int HyPerConn::postSynapticPatchHead($/;"	f	class:PV::HyPerConn
postToPreActivity	src/connections/HyPerConn.hpp	/^   long *postToPreActivity;$/;"	m	class:PV::HyPerConn
post_index	python/analysis_parse.py	/^post_index = []$/;"	v
pre	src/connections/BaseConnection.hpp	/^   HyPerLayer *pre;$/;"	m	class:PV::BaseConnection
pre	src/weightinit/InitWeightsParams.hpp	/^   HyPerLayer *pre;$/;"	m	class:PV::InitWeightsParams
preBufNum	src/cudakernels/CudaRecvPost.hpp	/^   size_t preBufNum;$/;"	m	struct:PVCuda::recv_post_params
preData	src/cudakernels/CudaRecvPost.hpp	/^   float *preData;$/;"	m	struct:PVCuda::recv_post_params
preData	src/cudakernels/CudaRecvPre.hpp	/^   float *preData;$/;"	m	struct:PVCuda::recv_pre_params
preLayerName	src/connections/BaseConnection.hpp	/^   char *preLayerName;$/;"	m	class:PV::BaseConnection
preLoc	src/cudakernels/CudaPoolingDeliverKernel.hpp	/^      PVLayerLoc const *preLoc;$/;"	m	struct:PVCuda::CudaPoolingDeliverKernel::Params
preNbdn	src/cudakernels/CudaRecvPost.hpp	/^   int preNbdn;$/;"	m	struct:PVCuda::recv_post_params
preNblt	src/cudakernels/CudaRecvPost.hpp	/^   int preNblt;$/;"	m	struct:PVCuda::recv_post_params
preNbrt	src/cudakernels/CudaRecvPost.hpp	/^   int preNbrt;$/;"	m	struct:PVCuda::recv_post_params
preNbup	src/cudakernels/CudaRecvPost.hpp	/^   int preNbup;$/;"	m	struct:PVCuda::recv_post_params
preNf	src/cudakernels/CudaRecvPost.hpp	/^   int preNf;$/;"	m	struct:PVCuda::recv_post_params
preNx	src/cudakernels/CudaRecvPost.hpp	/^   int preNx;$/;"	m	struct:PVCuda::recv_post_params
preNy	src/cudakernels/CudaRecvPost.hpp	/^   int preNy;$/;"	m	struct:PVCuda::recv_post_params
preSynapticLayer	src/connections/BaseConnection.hpp	/^   inline HyPerLayer *preSynapticLayer() { return pre; }$/;"	f	class:PV::BaseConnection
preSynapticPatchHead	src/connections/HyPerConn.cpp	/^int HyPerConn::preSynapticPatchHead(int kxPost, int kyPost, int kfPost, int *kxPre, int *kyPre) {$/;"	f	class:PV::HyPerConn
preToPostScaleX	src/cudakernels/CudaRecvPost.hpp	/^   float preToPostScaleX;$/;"	m	struct:PVCuda::recv_post_params
preToPostScaleY	src/cudakernels/CudaRecvPost.hpp	/^   float preToPostScaleY;$/;"	m	struct:PVCuda::recv_post_params
pre_index	python/analysis_parse.py	/^pre_index = []$/;"	v
prefix	src/io/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon19
prefix	src/utils/PVLog.hpp	/^inline std::string DebugLogType::prefix() {$/;"	f	class:PV::DebugLogType
prefix	src/utils/PVLog.hpp	/^inline std::string ErrorLogType::prefix() {$/;"	f	class:PV::ErrorLogType
prefix	src/utils/PVLog.hpp	/^inline std::string FatalType::prefix() {$/;"	f	class:PV::FatalType
prefix	src/utils/PVLog.hpp	/^inline std::string InfoLogType::prefix() {$/;"	f	class:PV::InfoLogType
prefix	src/utils/PVLog.hpp	/^inline std::string StackTraceType::prefix() {$/;"	f	class:PV::StackTraceType
prefix	src/utils/PVLog.hpp	/^inline std::string WarnLogType::prefix() {$/;"	f	class:PV::WarnLogType
prepareCheckpointWrite	src/columns/BaseObject.hpp	/^   virtual int prepareCheckpointWrite() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
prepareCheckpointWrite	src/connections/HyPerConn.cpp	/^int HyPerConn::prepareCheckpointWrite() {$/;"	f	class:PV::HyPerConn
prepareCheckpointWrite	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::prepareCheckpointWrite() {$/;"	f	class:PV::MomentumLCALayer
prependPrefix	src/utils/PVLog.hpp	/^inline bool DebugLogType::prependPrefix() {$/;"	f	class:PV::DebugLogType
prependPrefix	src/utils/PVLog.hpp	/^inline bool ErrorLogType::prependPrefix() {$/;"	f	class:PV::ErrorLogType
prependPrefix	src/utils/PVLog.hpp	/^inline bool FatalType::prependPrefix() {$/;"	f	class:PV::FatalType
prependPrefix	src/utils/PVLog.hpp	/^inline bool InfoLogType::prependPrefix() {$/;"	f	class:PV::InfoLogType
prependPrefix	src/utils/PVLog.hpp	/^inline bool StackTraceType::prependPrefix() {$/;"	f	class:PV::StackTraceType
prependPrefix	src/utils/PVLog.hpp	/^inline bool WarnLogType::prependPrefix() {$/;"	f	class:PV::WarnLogType
preprocess.ds2_white_rescale	parameterWrapper/params/preprocess.lua	/^function preprocess.ds2_white_rescale(prefix, inputLayerName, inputLayer, outputLayerName, outputLayer, normPatchSize)$/;"	f
present	src/io/PVParams.cpp	/^int PVParams::present(const char *groupName, const char *paramName) {$/;"	f	class:PV::PVParams
present	src/io/PVParams.cpp	/^int ParameterGroup::present(const char *name) {$/;"	f	class:PV::ParameterGroup
presentAndNotBeenRead	src/io/PVParams.cpp	/^bool PVParams::presentAndNotBeenRead(const char *group_name, const char *param_name) {$/;"	f	class:PV::PVParams
prevActivity	src/include/pv_types.h	/^   float *prevActivity;$/;"	m	struct:PVLayer_
prevDrive	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *prevDrive;$/;"	m	struct:PVCuda::MomentumLCAParams
prevDrive	src/layers/MomentumLCALayer.hpp	/^   float *prevDrive;$/;"	m	class:PV::MomentumLCALayer
prevInfluence	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float prevInfluence;$/;"	m	class:BBFindConfRemapLayer
prevInfluence	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float prevInfluence;$/;"	m	class:LocalizationBBFindProbe
prevLeakTau	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float prevLeakTau;$/;"	m	class:BBFindConfRemapLayer
prevLeakTau	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float prevLeakTau;$/;"	m	class:LocalizationBBFindProbe
prev_dwDataStart	src/connections/MomentumConn.hpp	/^   float **prev_dwDataStart;$/;"	m	class:PV::MomentumConn
print	src/checkpointing/CheckpointEntryData.hpp	/^void print(T const *dataPointer, size_t numValues, PrintStream &stream) {$/;"	f	namespace:PV::TextOutput
printArgument	src/io/Configuration.cpp	/^std::string Configuration::printArgument(std::string const &name) const {$/;"	f	class:PV::Configuration
printBooleanArgument	src/io/Configuration.cpp	/^std::string Configuration::printBooleanArgument(std::string const &name, bool const &value) {$/;"	f	class:PV::Configuration
printCheckpointedFirstLevelWeights	mlab/util/printCheckpointedFirstLevelWeights.m	/^function printCheckpointedFirstLevelWeights(weightspvpfile)$/;"	f
printCheckpointedSecondLevelWeights	mlab/util/printCheckpointedSecondLevelWeights.m	/^function printCheckpointedSecondLevelWeights(input_pvps, weights_1_pvps, weights_2_pvps, numProcs)$/;"	f
printCheckpointedThirdLevelWeights	mlab/util/printCheckpointedThirdLevelWeights.m	/^function printCheckpointedThirdLevelWeights(input_pvps, weights_1_pvps, weights_2_pvps, weights_3_pvps, numProcs)$/;"	f
printConfig	src/io/ConfigParser.hpp	/^   std::string printConfig() const { return mConfig.printConfig(); }$/;"	f	class:PV::ConfigParser
printConfig	src/io/Configuration.cpp	/^std::string Configuration::printConfig() const {$/;"	f	class:PV::Configuration
printGroup	parameterWrapper/PVModule.lua	/^local function printGroup(paramStringTable, key, group)$/;"	f
printInitMessage	src/columns/PV_Init.cpp	/^void PV_Init::printInitMessage() {$/;"	f	class:PV::PV_Init
printIntOptionalArgument	src/io/Configuration.cpp	/^Configuration::printIntOptionalArgument(std::string const &name, IntOptional const &value) {$/;"	f	class:PV::Configuration
printIntegerArgument	src/io/Configuration.cpp	/^std::string Configuration::printIntegerArgument(std::string const &name, int const &value) {$/;"	f	class:PV::Configuration
printKeyValue	parameterWrapper/PVModule.lua	/^local function printKeyValue(paramStringTable, key, val)$/;"	f
printLoc	tests/test_constant_input/src/test_constant_input.cpp	/^int printLoc(const PVLayerLoc *loc) {$/;"	f
printState	src/columns/Arguments.cpp	/^int Arguments::printState() const {$/;"	f	class:PV::Arguments
printState	src/columns/PV_Init.hpp	/^   void printState() const { arguments->printState(); }$/;"	f	class:PV::PV_Init
printStringArgument	src/io/Configuration.cpp	/^std::string Configuration::printStringArgument(std::string const &name, std::string const &value) {$/;"	f	class:PV::Configuration
printUnsignedArgument	src/io/Configuration.cpp	/^Configuration::printUnsignedArgument(std::string const &name, unsigned int const &value) {$/;"	f	class:PV::Configuration
print_elapsed	src/utils/Clock.cpp	/^void Clock::print_elapsed(std::ostream &stream) {$/;"	f	class:PV::Clock
print_stacktrace	src/utils/PVAssert.hpp	/^static inline void print_stacktrace(FILE *out = stderr, unsigned int max_frames = 63) {$/;"	f	namespace:PV
printf	src/io/PrintStream.hpp	/^   int printf(const char *fmt, ...) {$/;"	f	class:PV::PrintStream
printf	src/utils/PVLog.hpp	/^   int printf(char const *fmt, ...) {$/;"	f	struct:PV::Log
privateTransposeConn	src/connections/privateTransposeConn.cpp	/^privateTransposeConn::privateTransposeConn($/;"	f	class:PV::privateTransposeConn
privateTransposeConn	src/connections/privateTransposeConn.hpp	/^class privateTransposeConn : public HyPerConn {$/;"	c	namespace:PV
probBase	src/layers/Retina.hpp	/^   float probBase;$/;"	m	struct:Retina_params
probBaseParam	src/layers/Retina.hpp	/^   float probBaseParam;$/;"	m	class:PV::Retina
probStim	src/layers/Retina.hpp	/^   float probStim;$/;"	m	struct:Retina_params
probStimParam	src/layers/Retina.hpp	/^   float probStimParam;$/;"	m	class:PV::Retina
probeFileDir	python/probe_analysis/readProbeParams.py	/^probeFileDir  = workspaceDir+"\/iHouse\/output"$/;"	v
probeName	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.hpp	/^   char *probeName;$/;"	m	class:PV::ShrunkenPatchTestProbe
probeOutputFilename	src/probes/BaseProbe.hpp	/^   char *probeOutputFilename;$/;"	m	class:PV::BaseProbe
probeStatus	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.hpp	/^   int probeStatus;$/;"	m	class:ResetStateOnTriggerTestProbe
probeValues	src/probes/BaseProbe.hpp	/^   double *probeValues;$/;"	m	class:PV::BaseProbe
probes	src/connections/BaseConnection.hpp	/^   BaseConnectionProbe **probes; \/\/ probes used to output data$/;"	m	class:PV::BaseConnection
probes	src/layers/HyPerLayer.hpp	/^   LayerProbe **probes;$/;"	m	class:PV::HyPerLayer
processCheckpointRead	src/columns/BaseObject.hpp	/^   virtual int processCheckpointRead() { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
processCheckpointRead	src/layers/HyPerLayer.cpp	/^int HyPerLayer::processCheckpointRead() { return updateAllActiveIndices(); }$/;"	f	class:PV::HyPerLayer
processCheckpointRead	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::processCheckpointRead() {$/;"	f	class:PV::MomentumLCALayer
processParams	src/columns/HyPerCol.cpp	/^int HyPerCol::processParams(char const *path) {$/;"	f	class:PV::HyPerCol
processRank	src/io/PVParams.hpp	/^   int processRank;$/;"	m	class:PV::ParameterGroup
progressive	src/io/stb_image.h	/^   int progressive;$/;"	m	struct:__anon9
provideFinalStep	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::provideFinalStep(long int finalStep) {$/;"	f	class:PV::Checkpointer
publish	src/columns/Publisher.cpp	/^int Publisher::publish(double lastUpdateTime) {$/;"	f	class:PV::Publisher
publish	src/layers/HyPerLayer.cpp	/^int HyPerLayer::publish(Communicator *comm, double simTime) {$/;"	f	class:PV::HyPerLayer
publish	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::publish(Communicator *comm, double timed) {$/;"	f	class:PV::MPITestLayer
publish	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::publish(Communicator *comm, double timef) {$/;"	f	class:PV::PlasticConnTestLayer
publish	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::publish(Communicator *comm, double timed) {$/;"	f	class:PV::ShrunkenPatchTestLayer
publish_timer	src/layers/HyPerLayer.hpp	/^   Timer *publish_timer;$/;"	m	class:PV::HyPerLayer
publisher	src/layers/HyPerLayer.hpp	/^   Publisher *publisher = nullptr;$/;"	m	class:PV::HyPerLayer
push	src/io/PVParams.cpp	/^int ParameterArrayStack::push(ParameterArray *array) {$/;"	f	class:PV::ParameterArrayStack
push	src/io/PVParams.cpp	/^int ParameterStack::push(Parameter *param) {$/;"	f	class:PV::ParameterStack
push	src/io/PVParams.cpp	/^int ParameterStringStack::push(ParameterString *param) {$/;"	f	class:PV::ParameterStringStack
pushNumericValue	src/io/PVParams.cpp	/^int ParameterSweep::pushNumericValue(double val) {$/;"	f	class:PV::ParameterSweep
pushNumerical	src/io/PVParams.cpp	/^int ParameterGroup::pushNumerical(Parameter *param) { return stack->push(param); }$/;"	f	class:PV::ParameterGroup
pushString	src/io/PVParams.cpp	/^int ParameterGroup::pushString(ParameterString *param) { return stringStack->push(param); }$/;"	f	class:PV::ParameterGroup
pushStringValue	src/io/PVParams.cpp	/^int ParameterSweep::pushStringValue(const char *sval) {$/;"	f	class:PV::ParameterSweep
pushValue	src/io/PVParams.cpp	/^int ParameterArray::pushValue(double value) {$/;"	f	class:PV::ParameterArray
pvAssert	src/utils/PVAssert.hpp	29;"	d
pvAssert	src/utils/PVAssert.hpp	38;"	d
pvAssertMessage	src/utils/PVAssert.hpp	30;"	d
pvAssertMessage	src/utils/PVAssert.hpp	45;"	d
pvBuild	src/bindings/pyBindings.cpp	/^HyPerCol *pvBuild(int argc, char *argv[]) {$/;"	f
pvCalloc	src/utils/PVAlloc.hpp	37;"	d
pvCallocError	src/utils/PVAlloc.hpp	49;"	d
pvDelete	src/utils/PVAlloc.hpp	56;"	d
pvMalloc	src/utils/PVAlloc.hpp	31;"	d
pvMallocError	src/utils/PVAlloc.hpp	43;"	d
pvObj	src/bindings/pyPV.py	/^   pvObj = pyHyPerCol(args)$/;"	v
pvRun	src/bindings/pyBindings.cpp	/^int pvRun(HyPerCol *hc) { return hc->run(); }$/;"	f
pv_abort_message	src/utils/PVAssert.cpp	/^void pv_abort_message(const char *file, int line, const char *fmt, ...) {$/;"	f	namespace:PV
pv_assert_failed	src/utils/PVAssert.cpp	/^void pv_assert_failed(const char *file, int line, const char *condition) {$/;"	f	namespace:PV
pv_assert_failed_message	src/utils/PVAssert.cpp	/^void pv_assert_failed_message($/;"	f	namespace:PV
pv_calloc	src/utils/PVAlloc.cpp	/^void *pv_calloc(const char *file, int line, size_t count, size_t size) {$/;"	f	namespace:PV
pv_calloc	src/utils/PVAlloc.cpp	/^void *pv_calloc(const char *file, int line, size_t count, size_t size, const char *fmt, ...) {$/;"	f	namespace:PV
pv_delete	src/utils/PVAlloc.hpp	/^void pv_delete(const char *file, int line, T *ptr) {$/;"	f	namespace:PV
pv_getopt	src/io/io.cpp	/^int pv_getopt(int argc, char const *const *argv, char const *opt, bool *paramusage) {$/;"	f	namespace:PV
pv_getopt_int	src/io/io.cpp	/^int pv_getopt_int(int argc, char const *const *argv, char const *opt, int *iVal, bool *paramusage) {$/;"	f	namespace:PV
pv_getopt_long	src/io/io.cpp	/^int pv_getopt_long($/;"	f	namespace:PV
pv_getopt_str	src/io/io.cpp	/^int pv_getopt_str($/;"	f	namespace:PV
pv_getopt_unsigned	src/io/io.cpp	/^int pv_getopt_unsigned($/;"	f	namespace:PV
pv_getoptionalopt_int	src/io/io.cpp	/^int pv_getoptionalopt_int($/;"	f	namespace:PV
pv_malloc	src/utils/PVAlloc.cpp	/^void *pv_malloc(const char *file, int line, size_t size) {$/;"	f	namespace:PV
pv_malloc	src/utils/PVAlloc.cpp	/^void *pv_malloc(const char *file, int line, size_t size, const char *fmt, ...) {$/;"	f	namespace:PV
pv_mpi_noop	src/arch/mpi/mpi.c	/^void pv_mpi_noop() {}$/;"	f
pv_sizeof	src/io/fileio.cpp	/^size_t pv_sizeof(int datatype) {$/;"	f	namespace:PV
pv_sizeof_patch	src/io/fileio.cpp	/^size_t pv_sizeof_patch(int count, int datatype) {$/;"	f	namespace:PV
pv_text_write_patch	src/io/fileio.cpp	/^int pv_text_write_patch($/;"	f	namespace:PV
pvalues	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.hpp	/^   std::vector<double> pvalues; \/\/ The two-tailed p-value of the nnz value of each timestep.$/;"	m	class:PV::StochasticReleaseTestProbe
pvconductance_t	src/layers/LIF.hpp	21;"	d
pvcube_delete	src/layers/PVLayerCube.cpp	/^int pvcube_delete(PVLayerCube *cube) {$/;"	f	namespace:PV
pvcube_init	src/layers/PVLayerCube.cpp	/^PVLayerCube *pvcube_init(PVLayerCube *cube, const PVLayerLoc *loc, int numItems) {$/;"	f	namespace:PV
pvcube_new	src/layers/PVLayerCube.cpp	/^PVLayerCube *pvcube_new(const PVLayerLoc *loc, int numItems) {$/;"	f	namespace:PV
pvcube_setAddr	src/layers/PVLayerCube.cpp	/^int pvcube_setAddr(PVLayerCube *cube) {$/;"	f	namespace:PV
pvcube_size	src/layers/PVLayerCube.cpp	/^size_t pvcube_size(int numItems) { return sizeof(PVLayerCube) + numItems * sizeof(float); }$/;"	f	namespace:PV
pvmpiInitialized	src/arch/mpi/mpi.c	/^int pvmpiInitialized = 0;$/;"	v
pvpFile	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^      pvpFile = open(checkpointDir + layername + ".pvp", 'rb')$/;"	v
pvpFile	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^      pvpFile = open(outputDir + layername + ".pvp", 'rb')$/;"	v
pvpOpen	python/pvtools/pvpFile.py	/^class pvpOpen(object):$/;"	c
pvp_check_file_header	src/io/fileio.cpp	/^int pvp_check_file_header($/;"	f	namespace:PV
pvp_close_file	src/io/fileio.cpp	/^int pvp_close_file(PV_Stream *pvstream, MPIBlock const *mpiBlock) {$/;"	f	namespace:PV
pvp_copy_patches	src/io/fileio.cpp	/^int pvp_copy_patches($/;"	f	namespace:PV
pvp_open_read_file	src/io/fileio.cpp	/^PV_Stream *pvp_open_read_file(const char *filename, MPIBlock const *mpiBlock) {$/;"	f	namespace:PV
pvp_open_write_file	src/io/fileio.cpp	/^PV_Stream *pvp_open_write_file(const char *filename, MPIBlock const *mpiBlock, bool append) {$/;"	f	namespace:PV
pvp_read_header	src/io/fileio.cpp	/^int pvp_read_header($/;"	f	namespace:PV
pvp_read_header	src/io/fileio.cpp	/^int pvp_read_header(PV_Stream *pvstream, MPIBlock const *mpiBlock, int *params, int *numParams) {$/;"	f	namespace:PV
pvp_read_time	src/io/fileio.cpp	/^int pvp_read_time(PV_Stream *pvstream, Communicator *comm, int root_process, double *timed) {$/;"	f	namespace:PV
pvp_set_kernel_params	src/io/fileio.cpp	/^int *pvp_set_kernel_params($/;"	f	namespace:PV
pvp_set_nonspiking_act_params	src/io/fileio.cpp	/^int *pvp_set_nonspiking_act_params($/;"	f	namespace:PV
pvp_set_nonspiking_sparse_act_params	src/io/fileio.cpp	/^int *pvp_set_nonspiking_sparse_act_params($/;"	f	namespace:PV
pvp_set_patches	src/io/fileio.cpp	/^int pvp_set_patches($/;"	f	namespace:PV
pvp_write_header	src/io/fileio.cpp	/^int pvp_write_header($/;"	f	namespace:PV
pvp_write_header	src/io/fileio.cpp	/^int pvp_write_header(PV_Stream *pvstream, MPIBlock const *mpiBlock, int *params, int numParams) {$/;"	f	namespace:PV
pvparams_directive	src/io/parser/params.y	/^pvparams_directive : T_ID '=' T_NUMBER ';'$/;"	l
pvpatchAccumulateType	src/connections/HyPerConn.hpp	/^   AccumulateType pvpatchAccumulateType;$/;"	m	class:PV::HyPerConn
pvpatchAccumulateTypeString	src/connections/HyPerConn.hpp	/^   char *pvpatchAccumulateTypeString;$/;"	m	class:PV::HyPerConn
pvpatch_accumulate	src/connections/accumulate_functions.cpp	/^int pvpatch_accumulate($/;"	f
pvpatch_accumulate	src/connections/accumulate_functions.cpp	/^void pvpatch_accumulate($/;"	f
pvpatch_accumulate2	src/connections/accumulate_functions.cpp	/^int pvpatch_accumulate2(int nk, float *RESTRICT v, float a, float *RESTRICT w, float *RESTRICT m) {$/;"	f
pvpatch_accumulate_from_post	src/connections/accumulate_functions.cpp	/^int pvpatch_accumulate_from_post($/;"	f
pvpatch_accumulate_stochastic	src/connections/accumulate_functions.cpp	/^int pvpatch_accumulate_stochastic($/;"	f
pvpatch_accumulate_stochastic_from_post	src/connections/accumulate_functions.cpp	/^int pvpatch_accumulate_stochastic_from_post($/;"	f
pvpatch_adjust	src/connections/HyPerConn.hpp	/^   pvpatch_adjust(PVPatch *p, int sx, int sy, int nxNew, int nyNew, int dx, int dy) {$/;"	f	class:PV::HyPerConn
pvpatch_init	src/connections/HyPerConn.hpp	/^   static inline void pvpatch_init(PVPatch *p, int nx, int ny) {$/;"	f	class:PV::HyPerConn
pvpatch_max_pooling	src/connections/accumulate_functions.cpp	/^int pvpatch_max_pooling($/;"	f
pvpatch_max_pooling_from_post	src/connections/accumulate_functions.cpp	/^int pvpatch_max_pooling_from_post($/;"	f
pvpatch_sum_pooling	src/connections/accumulate_functions.cpp	/^int pvpatch_sum_pooling($/;"	f
pvpatch_sumpooling_from_post	src/connections/accumulate_functions.cpp	/^int pvpatch_sumpooling_from_post($/;"	f
pyHyPerCol	src/bindings/pyPV.py	/^class pyHyPerCol(object):$/;"	c
query_device	src/arch/cuda/CudaDevice.cpp	/^void CudaDevice::query_device(int id) {$/;"	f	class:PVCuda::CudaDevice
query_device_info	src/arch/cuda/CudaDevice.cpp	/^int CudaDevice::query_device_info() {$/;"	f	class:PVCuda::CudaDevice
r2Max	src/weightinit/InitCocircWeightsParams.hpp	/^   double r2Max;$/;"	m	class:PV::InitCocircWeightsParams
r2Max	src/weightinit/InitGauss2DWeightsParams.hpp	/^   double r2Max;$/;"	m	class:PV::InitGauss2DWeightsParams
r2Min	src/weightinit/InitGauss2DWeightsParams.hpp	/^   double r2Min;$/;"	m	class:PV::InitGauss2DWeightsParams
rMax	src/weightinit/InitCocircWeightsParams.hpp	/^   float rMax;$/;"	m	class:PV::InitCocircWeightsParams
rMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float rMax;$/;"	m	class:PV::InitGauss2DWeightsParams
rMin	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float rMin; \/\/ minimum radius for any connection$/;"	m	class:PV::InitGauss2DWeightsParams
rMinX	src/normalizers/NormalizeMultiply.hpp	/^   float rMinX,$/;"	m	class:PV::NormalizeMultiply
rMinY	src/normalizers/NormalizeMultiply.hpp	/^         rMinY; \/\/ zero all weights within rectangle rMinxY, rMInY aligned with center of patch$/;"	m	class:PV::NormalizeMultiply
rParams	src/layers/Retina.hpp	/^   Retina_params rParams; \/\/ used in update state$/;"	m	class:PV::Retina
radii	tests/LIFTest/src/LIFTestProbe.hpp	/^   double *radii;$/;"	m	class:PV::LIFTestProbe
randState	src/connections/HyPerConn.hpp	/^   Random *randState;$/;"	m	class:PV::HyPerConn
randState	src/layers/LIF.hpp	/^   Random *randState;$/;"	m	class:PV::LIF
randState	src/layers/Retina.hpp	/^   Random *randState;$/;"	m	class:PV::Retina
randState	src/weightinit/InitRandomWeights.hpp	/^   Random *randState;$/;"	m	class:PV::InitRandomWeights
randomShuffle	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::randomShuffle(const float *sourceData, float *activity) {$/;"	f	class:PV::ShuffleLayer
randomUInt	src/columns/Random.cpp	/^unsigned int Random::randomUInt(int localIndex) {$/;"	f	class:PV::Random
randomUInt	src/columns/Random.hpp	/^   void randomUInt(unsigned int *values, int localIndex, int count = 1) {$/;"	f	class:PV::Random
randomUIntMax	src/columns/Random.hpp	/^   static inline unsigned int randomUIntMax() { return CL_RANDOM_MAX; }$/;"	f	class:PV::Random
randomWeights	src/weightinit/InitGaussianRandomWeights.cpp	/^int InitGaussianRandomWeights::randomWeights($/;"	f	class:PV::InitGaussianRandomWeights
randomWeights	src/weightinit/InitUniformRandomWeights.cpp	/^int InitUniformRandomWeights::randomWeights($/;"	f	class:PV::InitUniformRandomWeights
rank	src/utils/Timer.hpp	/^   int rank;$/;"	m	class:PV::Timer
rankFromRowAndColumn	src/utils/conversions.h	/^static inline int rankFromRowAndColumn(int row, int column, int numRows, int numColumns) {$/;"	f
rates	tests/LIFTest/src/LIFTestProbe.hpp	/^   double *rates;$/;"	m	class:PV::LIFTestProbe
ratio	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
raw	python/timers_txt_to_csv.py	/^    raw = re.search(second_name_raw,line).group()$/;"	v
raw_coeff	src/io/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
raw_data	src/io/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon9::__anon10
read	python/param_draw.py	/^    def read(self):$/;"	m	class:Param_Reader
read	python/pvtools/pvpFile.py	/^    def read(self, start = 0, stop = -1, skip = 1, progress=0):$/;"	m	class:pvpOpen
read	src/checkpointing/CheckpointEntry.hpp	/^   virtual void read(std::string const &checkpointDirectory, double *simTimePtr) const { return; }$/;"	f	class:PV::CheckpointEntry
read	src/checkpointing/CheckpointEntryRandState.cpp	/^void CheckpointEntryRandState::read(std::string const &checkpointDirectory, double *simTimePtr)$/;"	f	class:PV::CheckpointEntryRandState
read	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^void CheckpointEntryWeightPvp::read(std::string const &checkpointDirectory, double *simTimePtr)$/;"	f	class:PV::CheckpointEntryWeightPvp
read	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::read(void *data, long length) {$/;"	f	class:PV::CheckpointableFileStream
read	src/components/AdaptiveTimeScaleController.cpp	/^void CheckpointEntryTimeScaleInfo::read(std::string const &checkpointDirectory, double *simTimePtr)$/;"	f	class:PV::CheckpointEntryTimeScaleInfo
read	src/io/FileStream.cpp	/^void FileStream::read(void *data, long length) {$/;"	f	class:PV::FileStream
read	src/io/stb_image.h	/^   int (*read)($/;"	m	struct:__anon5
read	src/structures/Image.cpp	/^void Image::read(std::string filename) {$/;"	f	class:PV::Image
readActivityFromCheckpoint	src/layers/HyPerLayer.cpp	/^int HyPerLayer::readActivityFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::HyPerLayer
readChannelCode	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.hpp	/^   virtual void readChannelCode(PVParams *params) { channel = CHANNEL_INH; }$/;"	f	class:PV::HyPerConnDebugInitWeights
readChannelCode	tests/InitWeightsTest/src/KernelConnDebugInitWeights.hpp	/^   virtual void readChannelCode(PVParams *params) { channel = CHANNEL_INH; }$/;"	f	class:PV::KernelConnDebugInitWeights
readCombinedWeightFiles	src/weightinit/InitWeights.cpp	/^int InitWeights::readCombinedWeightFiles($/;"	f	class:PV::InitWeights
readData	python/deprecated/readPvpFile.py	/^def readData(filestream, shape, numPerFrame):$/;"	f
readData	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^def readData(filestream, shape, numPerFrame):$/;"	f
readDelaysFromCheckpoint	src/layers/HyPerLayer.cpp	/^int HyPerLayer::readDelaysFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::HyPerLayer
readFreq	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::readFreq() { \/\/ TODO: Add MPI Bcast so that only root proc does this$/;"	f	class:PV::ShuffleLayer
readFreqFromFile	src/layers/ShuffleLayer.hpp	/^   bool readFreqFromFile;$/;"	m	class:PV::ShuffleLayer
readFromCheckpoint	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^readFromCheckpoint = False$/;"	v
readG_EFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readG_EFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readG_IBFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readG_IBFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readG_IFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readG_IFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readGapStrengthFromCheckpoint	src/layers/LIFGap.cpp	/^int LIFGap::readGapStrengthFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIFGap
readHeaderFile	python/deprecated/readPvpFile.py	/^def readHeaderFile(filestream, pos=None):$/;"	f
readHeaderFile	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^def readHeaderFile(filestream, pos=None):$/;"	f
readImage	src/layers/ImageLayer.cpp	/^void ImageLayer::readImage(std::string filename) {$/;"	f	class:PV::ImageLayer
readListOfArborFiles	src/weightinit/InitWeights.cpp	/^int InitWeights::readListOfArborFiles($/;"	f	class:PV::InitWeights
readNamedCheckpointEntry	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::readNamedCheckpointEntry($/;"	f	class:PV::Checkpointer
readNamedCheckpointEntry	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::readNamedCheckpointEntry(std::string const &checkpointEntryName) {$/;"	f	class:PV::Checkpointer
readProbeFile	python/probe_analysis/readProbeFunc.py	/^def readProbeFile(filename,startTime,endTime):$/;"	f
readRandState	src/io/randomstateio.cpp	/^double readRandState($/;"	f	namespace:PV
readRandStateFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readRandStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readRandStateFromCheckpoint	src/layers/Retina.cpp	/^int Retina::readRandStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::Retina
readStateFromCheckpoint	src/checkpointing/Checkpointer.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) { return PV_SUCCESS; }$/;"	f	class:PV::CheckpointerDataInterface
readStateFromCheckpoint	src/columns/BaseObject.hpp	/^   virtual int readStateFromCheckpoint(Checkpointer *checkpointer) { return PV_SUCCESS; }$/;"	f	class:PV::BaseObject
readStateFromCheckpoint	src/components/BatchIndexer.cpp	/^int BatchIndexer::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::BatchIndexer
readStateFromCheckpoint	src/connections/HyPerConn.cpp	/^int HyPerConn::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::HyPerConn
readStateFromCheckpoint	src/connections/MomentumConn.cpp	/^int MomentumConn::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::MomentumConn
readStateFromCheckpoint	src/layers/HyPerLayer.cpp	/^int HyPerLayer::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::HyPerLayer
readStateFromCheckpoint	src/layers/InputLayer.cpp	/^int InputLayer::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::InputLayer
readStateFromCheckpoint	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LCALIFLayer
readStateFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readStateFromCheckpoint	src/layers/LIFGap.cpp	/^int LIFGap::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIFGap
readStateFromCheckpoint	src/layers/Retina.cpp	/^int Retina::readStateFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::Retina
readStateFromCheckpoint	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^int HyPerConnCheckpointerTestProbe::readStateFromCheckpoint(PV::Checkpointer *checkpointer) {$/;"	f	class:HyPerConnCheckpointerTestProbe
readStateFromCheckpoint	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^int MomentumConnSimpleCheckpointerTestProbe::readStateFromCheckpoint($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
readStateFromCheckpoint	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^int MomentumConnViscosityCheckpointerTestProbe::readStateFromCheckpoint($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
readStateFromCheckpoint	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^int PoolingConnCheckpointerTestProbe::readStateFromCheckpoint(PV::Checkpointer *checkpointer) {$/;"	f	class:PoolingConnCheckpointerTestProbe
readVFromCheckpoint	src/layers/CloneVLayer.cpp	/^int CloneVLayer::readVFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::CloneVLayer
readVFromCheckpoint	src/layers/HyPerLayer.cpp	/^int HyPerLayer::readVFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::HyPerLayer
readVadptFromCheckpoint	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::readVadptFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LCALIFLayer
readVthFromCheckpoint	src/layers/LIF.cpp	/^int LIF::readVthFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LIF
readWeights	src/io/fileio.cpp	/^int readWeights($/;"	f	namespace:PV
readWeights	src/weightinit/InitWeights.cpp	/^int InitWeights::readWeights($/;"	f	class:PV::InitWeights
read_dense_data	python/deprecated/pvAnalysis.py	/^def read_dense_data(fileStream, dense_shape, numNeurons):$/;"	f
read_from_callbacks	src/io/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon6
read_header_err	src/io/fileio.cpp	/^void read_header_err($/;"	f	namespace:PV
read_header_file	python/deprecated/pvAnalysis.py	/^def read_header_file(fileStream, pos=0):$/;"	f
read_integratedSpikeCountFromCheckpoint	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::read_integratedSpikeCountFromCheckpoint(Checkpointer *checkpointer) {$/;"	f	class:PV::LCALIFLayer
read_sparse_data	python/deprecated/pvAnalysis.py	/^def read_sparse_data(fileStream,dense_shape):$/;"	f
readable	src/io/FileStream.hpp	/^   bool readable() { return mFStream.flags() & std::ios_base::in; }$/;"	f	class:PV::FileStream
readenergydata	tutorials/Total_Energy/analysis/readenergydata.m	/^function [t,E] = readenergydata(filename, formatstring, fields)$/;"	f
readpvpfile	mlab/util/readpvpfile.m	/^function [data,hdr] = readpvpfile(filename,progressperiod, last_frame, start_frame, skip_frames)$/;"	f
readpvpfile	python/deprecated/max_readpvpfile.py	/^def readpvpfile(filename,$/;"	f
readpvpfile	python/pvtools/readpvpfile.py	/^def readpvpfile(filename,$/;"	f
readpvpheader	mlab/util/readpvpheader.m	/^function hdr = readpvpheader(fid,pos)$/;"	f
readpvpheader	python/deprecated/max_readpvpheader.py	/^def readpvpheader(fileStream):$/;"	f
readpvpheader	python/pvtools/readpvpheader.py	/^def readpvpheader(fileStream):$/;"	f
readwrite	src/io/FileStream.hpp	/^   bool readwrite() { return readable() && writeable(); }$/;"	f	class:PV::FileStream
readyForNextFile	src/layers/InputLayer.cpp	/^bool InputLayer::readyForNextFile() {$/;"	f	class:PV::InputLayer
readyForNextFile	tests/ImageOffsetTest/src/ImageOffsetTestLayer.cpp	/^bool ImageOffsetTestLayer::readyForNextFile() { return false; }$/;"	f	class:PV::ImageOffsetTestLayer
readyForNextFile	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.cpp	/^bool ImagePvpOffsetTestLayer::readyForNextFile() { return false; }$/;"	f	class:PV::ImagePvpOffsetTestLayer
rebuildandrun	src/columns/buildandrun.cpp	/^int rebuildandrun($/;"	f
receiveGpu	src/connections/BaseConnection.hpp	/^   bool receiveGpu; \/\/ Whether to use GPU acceleration in updating post's GSyn$/;"	m	class:PV::BaseConnection
recon	python/analysis_parse.py	/^recon = []$/;"	v
reconDir	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^reconDir = outputDir + "Recon\/"$/;"	v
reconLayer	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   PV::HyPerLayer * reconLayer = NULL;$/;"	m	class:BBFindConfRemapProbe
reconLayer	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   PV::HyPerLayer * reconLayer;$/;"	m	class:LocalizationProbe
reconLayerName	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   char * reconLayerName = NULL;$/;"	m	class:BBFindConfRemapProbe
reconLayerName	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   char * reconLayerName;$/;"	m	class:LocalizationProbe
reconPVPFilePath	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   std::stringstream  reconPVPFilePath;$/;"	m	class:LocalizationProbe
recon_name	python/analysis_parse.py	/^recon_name = []$/;"	v
recordSize	src/utils/BufferUtilsPvp.hpp	/^   int headerSize, numParams, fileType, nx, ny, nf, numRecords, recordSize, dataSize, dataType,$/;"	m	struct:PV::BufferUtils::ActivityHeader
recvActiveIndicesBuffer	src/columns/Publisher.hpp	/^   SparseList<float>::Entry *recvActiveIndicesBuffer(int bufferId) {$/;"	f	class:PV::Publisher
recvActiveIndicesBuffer	src/columns/Publisher.hpp	/^   SparseList<float>::Entry *recvActiveIndicesBuffer(int bufferId, int delay) {$/;"	f	class:PV::Publisher
recvAllSynapticInput	src/layers/HyPerLayer.cpp	/^int HyPerLayer::recvAllSynapticInput() {$/;"	f	class:PV::HyPerLayer
recvBuffer	src/columns/Publisher.hpp	/^   float *recvBuffer(int bufferId) { return store->buffer(bufferId); }$/;"	f	class:PV::Publisher
recvBuffer	src/columns/Publisher.hpp	/^   float *recvBuffer(int bufferId, int delay) { return store->buffer(bufferId, delay); }$/;"	f	class:PV::Publisher
recvConns	src/layers/HyPerLayer.hpp	/^   std::vector<BaseConnection *> recvConns;$/;"	m	class:PV::HyPerLayer
recvGpu	src/layers/HyPerLayer.hpp	/^   bool recvGpu;$/;"	m	class:PV::HyPerLayer
recvNumActiveBuffer	src/columns/Publisher.hpp	/^   long *recvNumActiveBuffer(int bufferId) { return store->numActiveBuffer(bufferId); }$/;"	f	class:PV::Publisher
recvNumActiveBuffer	src/columns/Publisher.hpp	/^   long *recvNumActiveBuffer(int bufferId, int delay) {$/;"	f	class:PV::Publisher
recvOffset	src/utils/BorderExchange.cpp	/^std::size_t BorderExchange::recvOffset(int direction) {$/;"	f	class:PV::BorderExchange
recv_post_params	src/cudakernels/CudaRecvPost.hpp	/^struct recv_post_params {$/;"	s	namespace:PVCuda
recv_pre_params	src/cudakernels/CudaRecvPre.hpp	/^struct recv_pre_params {$/;"	s	namespace:PVCuda
recvsyn_timer	src/layers/HyPerLayer.hpp	/^   Timer *recvsyn_timer;$/;"	m	class:PV::HyPerLayer
reduceAcrossBatch	src/connections/HyPerConn.cpp	/^void HyPerConn::reduceAcrossBatch(int arborID) {$/;"	f	class:PV::HyPerConn
reduceActivations	src/connections/HyPerConn.cpp	/^int HyPerConn::reduceActivations(int arborID) {$/;"	f	class:PV::HyPerConn
reduceKernels	src/connections/HyPerConn.cpp	/^int HyPerConn::reduceKernels(int arborID) {$/;"	f	class:PV::HyPerConn
reduceKernels	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::reduceKernels(int arborID) {$/;"	f	class:PV::privateTransposeConn
reduce_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::reduce_dW(int arborId) {$/;"	f	class:PV::HyPerConn
reduce_dW	src/connections/HyPerConn.cpp	/^void HyPerConn::reduce_dW() {$/;"	f	class:PV::HyPerConn
referenceUpdateTime	src/probes/BaseHyPerConnProbe.cpp	/^double BaseHyPerConnProbe::referenceUpdateTime() const {$/;"	f	class:PV::BaseHyPerConnProbe
referenceUpdateTime	src/probes/ColumnEnergyProbe.cpp	/^double ColumnEnergyProbe::referenceUpdateTime() const { return parent->simulationTime(); }$/;"	f	class:PV::ColumnEnergyProbe
referenceUpdateTime	src/probes/LayerProbe.cpp	/^double LayerProbe::referenceUpdateTime() const { return targetLayer->getLastUpdateTime(); }$/;"	f	class:PV::LayerProbe
referenceUpdateTime	src/probes/QuotientColProbe.cpp	/^double QuotientColProbe::referenceUpdateTime() const { return parent->simulationTime(); }$/;"	f	class:PV::QuotientColProbe
refractory_period	src/layers/Retina.hpp	/^   float refractory_period;$/;"	m	struct:Retina_params
regEnergy	tests/MomentumLCATest/scripts/plotEnergy.py	/^regEnergy = [float(m.split(',')[3]) for m in regLines]$/;"	v
regFilename	tests/MomentumLCATest/scripts/plotEnergy.py	/^regFilename = "\/home\/sheng\/workspace\/OpenPV\/PVSystemTests\/LCATest\/output\/total_energy.txt"$/;"	v
regLines	tests/MomentumLCATest/scripts/plotEnergy.py	/^regLines = f.readlines()$/;"	v
regex_dict	python/param_draw.py	/^    regex_dict = {$/;"	v	class:Param_Reader
registerArgument	src/io/Configuration.cpp	/^void Configuration::registerArgument(std::string const &name, ConfigurationType type) {$/;"	f	class:PV::Configuration
registerBooleanArgument	src/io/Configuration.cpp	/^void Configuration::registerBooleanArgument(std::string const &name) {$/;"	f	class:PV::Configuration
registerCheckpointData	src/checkpointing/Checkpointer.hpp	/^bool Checkpointer::registerCheckpointData($/;"	f	class:PV::Checkpointer
registerCheckpointEntry	src/checkpointing/Checkpointer.cpp	/^bool Checkpointer::registerCheckpointEntry($/;"	f	class:PV::Checkpointer
registerCoreKeywords	src/columns/Factory.cpp	/^int Factory::registerCoreKeywords() {$/;"	f	class:PV::Factory
registerData	src/checkpointing/CheckpointableFileStream.cpp	/^int CheckpointableFileStream::registerData(Checkpointer *checkpointer, const string objName) {$/;"	f	class:PV::CheckpointableFileStream
registerData	src/checkpointing/Checkpointer.hpp	/^   virtual int registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::CheckpointerDataInterface
registerData	src/components/AdaptiveTimeScaleController.cpp	/^int AdaptiveTimeScaleController::registerData($/;"	f	class:PV::AdaptiveTimeScaleController
registerData	src/components/BatchIndexer.cpp	/^int BatchIndexer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::BatchIndexer
registerData	src/connections/HyPerConn.cpp	/^int HyPerConn::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::HyPerConn
registerData	src/connections/ImprintConn.cpp	/^int ImprintConn::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::ImprintConn
registerData	src/connections/MomentumConn.cpp	/^int MomentumConn::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::MomentumConn
registerData	src/layers/CloneVLayer.cpp	/^int CloneVLayer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::CloneVLayer
registerData	src/layers/HyPerLayer.cpp	/^int HyPerLayer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::HyPerLayer
registerData	src/layers/InputLayer.cpp	/^int InputLayer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::InputLayer
registerData	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::LCALIFLayer
registerData	src/layers/LIF.cpp	/^int LIF::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::LIF
registerData	src/layers/LIFGap.cpp	/^int LIFGap::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::LIFGap
registerData	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::MomentumLCALayer
registerData	src/layers/Retina.cpp	/^int Retina::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::Retina
registerData	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
registerData	src/probes/StatsProbe.cpp	/^int StatsProbe::registerData(Checkpointer *checkpointer, std::string const &objName) {$/;"	f	class:PV::StatsProbe
registerIntOptionalArgument	src/io/Configuration.cpp	/^void Configuration::registerIntOptionalArgument(std::string const &name) {$/;"	f	class:PV::Configuration
registerIntegerArgument	src/io/Configuration.cpp	/^void Configuration::registerIntegerArgument(std::string const &name) {$/;"	f	class:PV::Configuration
registerKeyword	src/columns/Factory.cpp	/^int Factory::registerKeyword(char const *keyword, ObjectCreateFn creator) {$/;"	f	class:PV::Factory
registerKeyword	src/columns/PV_Init.cpp	/^int PV_Init::registerKeyword(char const *keyword, ObjectCreateFn creator) {$/;"	f	class:PV::PV_Init
registerStringArgument	src/io/Configuration.cpp	/^void Configuration::registerStringArgument(std::string const &name) {$/;"	f	class:PV::Configuration
registerTimer	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::registerTimer(Timer const *timer) { mTimers.push_back(timer); }$/;"	f	class:PV::Checkpointer
registerUnsignedIntArgument	src/io/Configuration.cpp	/^void Configuration::registerUnsignedIntArgument(std::string const &name) {$/;"	f	class:PV::Configuration
rejectionShuffle	src/layers/ShuffleLayer.cpp	/^void ShuffleLayer::rejectionShuffle(const float *sourceData, float *activity) {$/;"	f	class:PV::ShuffleLayer
relate_objects	python/param_draw.py	/^    def relate_objects(self):$/;"	m	class:Param_Parser
remove	src/checkpointing/CheckpointEntry.hpp	/^   virtual void remove(std::string const &checkpointDirectory) const { return; }$/;"	f	class:PV::CheckpointEntry
remove	src/checkpointing/CheckpointEntryRandState.cpp	/^void CheckpointEntryRandState::remove(std::string const &checkpointDirectory) const {$/;"	f	class:PV::CheckpointEntryRandState
remove	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^void CheckpointEntryWeightPvp::remove(std::string const &checkpointDirectory) const {$/;"	f	class:PV::CheckpointEntryWeightPvp
remove	src/components/AdaptiveTimeScaleController.cpp	/^void CheckpointEntryTimeScaleInfo::remove(std::string const &checkpointDirectory) const {$/;"	f	class:PV::CheckpointEntryTimeScaleInfo
remove_nodraws	python/param_draw.py	/^    def remove_nodraws(self):$/;"	m	class:Param_Parser
repFeatureNum	src/layers/BackgroundLayer.hpp	/^   int repFeatureNum;$/;"	m	class:PV::BackgroundLayer
requireChannel	src/layers/CloneVLayer.cpp	/^int CloneVLayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::CloneVLayer
requireChannel	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::HyPerLCALayer
requireChannel	src/layers/HyPerLayer.cpp	/^int HyPerLayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::HyPerLayer
requireChannel	src/layers/ISTALayer.cpp	/^int ISTALayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::ISTALayer
requireChannel	src/layers/InputLayer.cpp	/^int InputLayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::InputLayer
requireChannel	src/layers/PoolingIndexLayer.cpp	/^int PoolingIndexLayer::requireChannel(int channelNeeded, int *numChannelsResult) {$/;"	f	class:PV::PoolingIndexLayer
requireMarginWidth	src/layers/BinningLayer.cpp	/^int BinningLayer::requireMarginWidth(int marginWidthNeeded, int *marginWidthResult, char axis) {$/;"	f	class:PV::BinningLayer
requireMarginWidth	src/layers/CloneVLayer.cpp	/^int CloneVLayer::requireMarginWidth(int marginWidthNeeded, int *marginWidthResult, char axis) {$/;"	f	class:PV::CloneVLayer
requireMarginWidth	src/layers/HyPerLayer.cpp	/^int HyPerLayer::requireMarginWidth(int marginWidthNeeded, int *marginWidthResult, char axis) {$/;"	f	class:PV::HyPerLayer
requireType	src/probes/StatsProbe.cpp	/^void StatsProbe::requireType(PVBufType requiredType) {$/;"	f	class:PV::StatsProbe
resample	src/io/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon11
resample_row_1	src/io/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
resample_row_func	src/io/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1, int w, int hs);$/;"	t
resample_row_hv_2_kernel	src/io/stb_image.h	/^         *resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon9
rescale	src/utils/BufferUtilsRescale.cpp	/^void rescale($/;"	f	namespace:PV::BufferUtils
rescaleMethod	src/layers/RescaleLayer.hpp	/^   char *rescaleMethod; \/\/ can be either maxmin or meanstd$/;"	m	class:PV::RescaleLayer
reserveMem	src/arch/cuda/CudaDevice.cpp	/^long CudaDevice::reserveMem(size_t size) {$/;"	f	class:PVCuda::CudaDevice
reset	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::reset()$/;"	f	class:BBFind
reset	src/utils/Timer.cpp	/^void Timer::reset(double init_time) {$/;"	f	class:PV::Timer
resetArraySize	src/io/PVParams.hpp	/^   void resetArraySize() { arraySize = 0; }$/;"	f	class:PV::ParameterArray
resetGSynBuffers	src/layers/ANNLayer.cpp	/^int ANNLayer::resetGSynBuffers(double timef, double dt) {$/;"	f	class:PV::ANNLayer
resetGSynBuffers	src/layers/HyPerLayer.cpp	/^int HyPerLayer::resetGSynBuffers(double timef, double dt) {$/;"	f	class:PV::HyPerLayer
resetGSynBuffers	src/layers/PoolingIndexLayer.cpp	/^int PoolingIndexLayer::resetGSynBuffers(double timef, double dt) {$/;"	f	class:PV::PoolingIndexLayer
resetGSynBuffers_HyPerLayer	src/layers/updateStateFunctions.h	/^int resetGSynBuffers_HyPerLayer($/;"	f
resetGSynBuffers_PoolingIndexLayer	src/layers/updateStateFunctions.h	/^int resetGSynBuffers_PoolingIndexLayer($/;"	f
resetGSynBuffers_SigmoidLayer	src/layers/updateStateFunctions.h	/^int resetGSynBuffers_SigmoidLayer() {$/;"	f
resetState	src/columns/Arguments.cpp	/^void Arguments::resetState() { mCurrentConfig = mConfigFromStream->getConfig(); }$/;"	f	class:PV::Arguments
resetState	src/columns/Arguments.cpp	/^void Arguments::resetState(std::istream &configStream, bool allowUnrecognizedArguments) {$/;"	f	class:PV::Arguments
resetState	src/columns/CommandLineArguments.cpp	/^void CommandLineArguments::resetState($/;"	f	class:PV::CommandLineArguments
resetState	src/columns/ConfigFileArguments.cpp	/^void ConfigFileArguments::resetState($/;"	f	class:PV::ConfigFileArguments
resetState	src/columns/PV_Init.cpp	/^int PV_Init::resetState() {$/;"	f	class:PV::PV_Init
resetStateOnTrigger	src/layers/HyPerLayer.cpp	/^int HyPerLayer::resetStateOnTrigger() {$/;"	f	class:PV::HyPerLayer
resetStats	src/probes/StatsProbe.cpp	/^void StatsProbe::resetStats() {$/;"	f	class:PV::StatsProbe
resizePatches	mlab/util/resizePatches.m	/^function resizePatches(inputweightfile, outputweightfile, new_nxp, new_nyp, nxGlobalPost, nyGlobalPost, x_offset, y_offset);$/;"	f
respond	src/checkpointing/CheckpointableFileStream.cpp	/^int CheckpointableFileStream::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::CheckpointableFileStream
respond	src/columns/BaseObject.cpp	/^int BaseObject::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::BaseObject
respond	src/columns/HyPerCol.cpp	/^int HyPerCol::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::HyPerCol
respond	src/connections/BaseConnection.cpp	/^int BaseConnection::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::BaseConnection
respond	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::HyPerLayer
respond	src/observerpattern/Observer.hpp	/^   virtual int respond(std::shared_ptr<BaseMessage const> message) { return PV_SUCCESS; }$/;"	f	class:PV::Observer
respond	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::respond(std::shared_ptr<BaseMessage const> message) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
respondAdaptTimestep	src/probes/AdaptiveTimeScaleProbe.cpp	/^int AdaptiveTimeScaleProbe::respondAdaptTimestep(AdaptTimestepMessage const *message) {$/;"	f	class:PV::AdaptiveTimeScaleProbe
respondAllocateData	src/columns/BaseObject.cpp	/^int BaseObject::respondAllocateData(AllocateDataMessage const *message) {$/;"	f	class:PV::BaseObject
respondCleanup	src/columns/BaseObject.cpp	/^int BaseObject::respondCleanup(CleanupMessage const *message) { return cleanup(); }$/;"	f	class:PV::BaseObject
respondCommunicateInitInfo	src/columns/BaseObject.cpp	/^int BaseObject::respondCommunicateInitInfo(CommunicateInitInfoMessage const *message) {$/;"	f	class:PV::BaseObject
respondConnectionFinalizeUpdate	src/connections/BaseConnection.hpp	/^   virtual int respondConnectionFinalizeUpdate(ConnectionFinalizeUpdateMessage const *message) {$/;"	f	class:PV::BaseConnection
respondConnectionOutput	src/connections/BaseConnection.hpp	/^   virtual int respondConnectionOutput(ConnectionOutputMessage const *message) {$/;"	f	class:PV::BaseConnection
respondConnectionUpdate	src/connections/BaseConnection.hpp	/^   virtual int respondConnectionUpdate(ConnectionUpdateMessage const *message) {$/;"	f	class:PV::BaseConnection
respondCopyInitialStateToGPUMessage	src/columns/BaseObject.cpp	/^int BaseObject::respondCopyInitialStateToGPUMessage(CopyInitialStateToGPUMessage const *message) {$/;"	f	class:PV::BaseObject
respondInitializeState	src/columns/BaseObject.cpp	/^int BaseObject::respondInitializeState(InitializeStateMessage const *message) {$/;"	f	class:PV::BaseObject
respondLayerAdvanceDataStore	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerAdvanceDataStore(LayerAdvanceDataStoreMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerCheckNotANumber	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerCheckNotANumber(LayerCheckNotANumberMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerCopyFromGpu	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerCopyFromGpu(LayerCopyFromGpuMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerOutputState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerOutputState(LayerOutputStateMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerPublish	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerPublish(LayerPublishMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerRecvSynapticInput	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerRecvSynapticInput(LayerRecvSynapticInputMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondLayerUpdateState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::respondLayerUpdateState(LayerUpdateStateMessage const *message) {$/;"	f	class:PV::HyPerLayer
respondPrepareCheckpointWrite	src/columns/BaseObject.cpp	/^int BaseObject::respondPrepareCheckpointWrite(PrepareCheckpointWriteMessage const *message) {$/;"	f	class:PV::BaseObject
respondPrepareCheckpointWrite	src/columns/HyPerCol.cpp	/^int HyPerCol::respondPrepareCheckpointWrite(PrepareCheckpointWriteMessage const *message) {$/;"	f	class:PV::HyPerCol
respondProcessCheckpointRead	src/checkpointing/CheckpointableFileStream.cpp	/^int CheckpointableFileStream::respondProcessCheckpointRead($/;"	f	class:PV::CheckpointableFileStream
respondProcessCheckpointRead	src/columns/BaseObject.cpp	/^int BaseObject::respondProcessCheckpointRead(ProcessCheckpointReadMessage const *message) {$/;"	f	class:PV::BaseObject
respondReadStateFromCheckpoint	src/columns/BaseObject.cpp	/^int BaseObject::respondReadStateFromCheckpoint($/;"	f	class:PV::BaseObject
respondRegisterData	src/columns/BaseObject.cpp	/^int BaseObject::respondRegisterData(RegisterDataMessage<Checkpointer> const *message) {$/;"	f	class:PV::BaseObject
restartFlag	src/layers/HyPerLayer.hpp	/^   bool restartFlag;$/;"	m	class:PV::HyPerLayer
restart_interval	src/io/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
resultPVPFilePath	demos/HeatMapLocalization/src/LocalizationProbe.hpp	/^   std::stringstream resultPVPFilePath;$/;"	m	class:LocalizationProbe
retrieveData	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::retrieveData(double timef, double dt, int batchIndex) {$/;"	f	class:PV::ImageFromMemoryBuffer
retrieveData	src/layers/ImageLayer.cpp	/^Buffer<float> ImageLayer::retrieveData(std::string filename, int batchIndex) {$/;"	f	class:PV::ImageLayer
retrieveData	src/layers/PvpLayer.cpp	/^Buffer<float> PvpLayer::retrieveData(std::string filename, int batchIndex) {$/;"	f	class:PV::PvpLayer
retrieveFrame	demos/HeatMapLocalization/src/main.cpp	/^   char const * retrieveFrame() {$/;"	f	class:FrameServer
returnDataType	src/io/randomstateio.cpp	/^HeaderDataType returnDataType<taus_uint4>() {$/;"	f	namespace:PV::BufferUtils
reverseDirection	src/columns/Communicator.cpp	/^int Communicator::reverseDirection(int commId, int direction) {$/;"	f	class:PV::Communicator
reverseDirection	src/utils/BorderExchange.cpp	/^int BorderExchange::reverseDirection(int commId, int direction) {$/;"	f	class:PV::BorderExchange
rewind	demos/HeatMapLocalization/src/main.cpp	/^   void rewind() {$/;"	f	class:FrameServer
rf	python/pvtools/pvpFile.py	/^    rf = pvpOpen(filename, 'r')$/;"	v	class:pvpOpen
rgb	src/io/stb_image.h	/^   int rgb;$/;"	m	struct:__anon9
right	demos/HeatMapLocalization/src/BBFind.hpp	/^            int right()  const { return x + width \/ 2; }$/;"	f	class:BBFind::Rectangle
right	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int right;$/;"	m	struct:LocalizationData
rngArray	src/columns/Random.hpp	/^   std::vector<taus_uint4> rngArray;$/;"	m	class:PV::Random
rngSeedBase	src/layers/HyPerLayer.hpp	/^   unsigned int rngSeedBase; \/\/ The starting seed for rng.  The parent HyPerCol reserves$/;"	m	class:PV::HyPerLayer
rootFigName	python/probe_analysis/readProbeParams.py	/^rootFigName   = 'pr4Oja'$/;"	v
rootFigOutDir	python/probe_analysis/readProbeParams.py	/^rootFigOutDir = probeFileDir+"\/analysis\/probeFigs"$/;"	v
rotate	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float rotate; \/\/ rotate so that axis isn't aligned$/;"	m	class:PV::InitGauss2DWeightsParams
rotateOldCheckpoints	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::rotateOldCheckpoints(std::string const &newCheckpointDirectory) {$/;"	f	class:PV::Checkpointer
rowFromRank	src/utils/conversions.h	/^static inline int rowFromRank(int rank, int numRows, int numColumns) {$/;"	f
rt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int rt;$/;"	m	struct:PVCuda::HyPerLCAParams
rt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int rt;$/;"	m	struct:PVCuda::ISTAParams
rt	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int rt;$/;"	m	struct:PVCuda::MomentumLCAParams
rt	src/include/PVLayerLoc.h	/^   int lt, rt, dn, up; \/\/ padding in {left, right, down, up} directions$/;"	m	struct:PVHalo_
run	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run($/;"	f	class:PVCuda::CudaKernel
run	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run() {$/;"	f	class:PVCuda::CudaKernel
run	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run(long gWorkSizeX, long gWorkSizeY, long lWorkSizeX, long lWorkSizeY) {$/;"	f	class:PVCuda::CudaKernel
run	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run(long global_work_size) {$/;"	f	class:PVCuda::CudaKernel
run	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run(long global_work_size, long local_work_size) {$/;"	f	class:PVCuda::CudaKernel
run	src/bindings/pyPV.py	/^   def run(self):$/;"	m	class:pyHyPerCol
run	src/columns/HyPerCol.cpp	/^int HyPerCol::run(double start_time, double stop_time, double dt) {$/;"	f	class:PV::HyPerCol
run	src/columns/HyPerCol.hpp	/^   int run() { return run(mStartTime, mStopTime, mDeltaTime); }$/;"	f	class:PV::HyPerCol
run	tests/CheckpointerMPIBlockTest/src/CheckpointerMPIBlockTest.cpp	/^int run(int argc, char *argv[]) {$/;"	f
run	tests/MPIBlockTest/src/MPIBlockTest.cpp	/^void run(std::string configString) {$/;"	f
runNoBatching	tests/MPIBlockTest/src/MPIBlockTest.cpp	/^void runNoBatching() {$/;"	f
runUpdateKernel	src/layers/HyPerLayer.cpp	/^int HyPerLayer::runUpdateKernel() {$/;"	f	class:PV::HyPerLayer
runWithBatching	tests/MPIBlockTest/src/MPIBlockTest.cpp	/^void runWithBatching() {$/;"	f
runWithHarness	demos/HeatMapLocalization/src/main.cpp	/^int runWithHarness(PV::HyPerCol * hc, int frameInterval) {$/;"	f
runWithoutHarness	demos/HeatMapLocalization/src/main.cpp	/^int runWithoutHarness(PV::HyPerCol * hc) {$/;"	f
run_nocheck	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run_nocheck(long gWorkSizeX, long gWorkSizeY, long lWorkSizeX, long lWorkSizeY) {$/;"	f	class:PVCuda::CudaKernel
run_nocheck	src/arch/cuda/CudaKernel.cpp	/^int CudaKernel::run_nocheck(long global_work_size, long local_work_size) {$/;"	f	class:PVCuda::CudaKernel
runparamsfile	tests/CopyConnTest/src/main.cpp	/^int runparamsfile(PV_Init *initObj, char const *paramsfile) {$/;"	f
s	src/io/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon15
s	src/io/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon9
s0	src/include/pv_types.h	/^   unsigned int s0;$/;"	m	struct:taus_uint4_
s1	src/include/pv_types.h	/^typedef struct { unsigned int s1, s2, s3; } taus_state_t;$/;"	m	struct:__anon22
s2	src/include/pv_types.h	/^typedef struct { unsigned int s1, s2, s3; } taus_state_t;$/;"	m	struct:__anon22
s3	src/include/pv_types.h	/^typedef struct { unsigned int s1, s2, s3; } taus_state_t;$/;"	m	struct:__anon22
sTimebaseInfo	src/utils/Clock.hpp	/^   mach_timebase_info_data_t sTimebaseInfo;$/;"	m	class:PV::Clock
savefile2	mlab/imgProc/savefile2.m	/^function savefile2(filename,image)$/;"	f
scale	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map2 BBFind::scale(const Map2 &source, int newWidth, int newHeight, bool bilinear)$/;"	f	class:BBFind
scale	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::scale(const Map3 &source, int newWidth, int newHeight, bool bilinear)$/;"	f	class:BBFind
scale	python/probe_analysis/readProbeParams.py	/^scale = {}$/;"	v
scale	src/connections/RescaleConn.hpp	/^   float scale;$/;"	m	class:PV::RescaleConn
scaleMat	python/deprecated/plotRecon.py	/^def scaleMat(mat):$/;"	f
scaleMat	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^def scaleMat(mat):$/;"	f
scan_n	src/io/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon9
scatterActivity	src/io/fileio.cpp	/^int scatterActivity($/;"	f	namespace:PV
scatterInput	src/layers/InputLayer.cpp	/^int InputLayer::scatterInput(int batchIndex) {$/;"	f	class:PV::InputLayer
score	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   double score;$/;"	m	struct:LocalizationData
second_name	python/timers_txt_to_csv.py	/^    second_name = re.search(first_name_pattern,raw).group()$/;"	v
second_name_raw	python/timers_txt_to_csv.py	/^second_name_raw = "(?<=total time in)\\s+\\w+\\s+\\w+"$/;"	v
seedRandomFromWallClock	src/columns/HyPerCol.cpp	/^unsigned int HyPerCol::seedRandomFromWallClock() {$/;"	f	class:PV::HyPerCol
segmentLayer	src/layers/Segmentify.hpp	/^   SegmentLayer *segmentLayer;$/;"	m	class:PV::Segmentify
segmentLayerName	src/layers/Segmentify.hpp	/^   char *segmentLayerName;$/;"	m	class:PV::Segmentify
segmentMethod	src/layers/SegmentLayer.hpp	/^   char *segmentMethod;$/;"	m	class:PV::SegmentLayer
self	src/weightinit/InitGauss2DWeightsParams.hpp	/^   bool self;$/;"	m	class:PV::InitGauss2DWeightsParams
selfFlag	src/connections/HyPerConn.hpp	/^   bool selfFlag; \/\/ indicates that connection is from a layer to itself (even though pre and post$/;"	m	class:PV::HyPerConn
selfInteract	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   bool selfInteract;$/;"	m	struct:PVCuda::HyPerLCAParams
selfInteract	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   bool selfInteract;$/;"	m	struct:PVCuda::ISTAParams
selfInteract	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   bool selfInteract;$/;"	m	struct:PVCuda::MomentumLCAParams
selfInteract	src/layers/HyPerLCALayer.hpp	/^   bool selfInteract;$/;"	m	class:PV::HyPerLCALayer
selfInteract	src/layers/ISTALayer.hpp	/^   bool selfInteract;$/;"	m	class:PV::ISTALayer
sendOffset	src/utils/BorderExchange.cpp	/^std::size_t BorderExchange::sendOffset(int direction) {$/;"	f	class:PV::BorderExchange
set	src/structures/SparseList.hpp	/^   void set(const vector<Entry> &values) { mList = values; }$/;"	f	class:PV::SparseList
setAPostOffset	src/connections/HyPerConn.hpp	/^   inline void setAPostOffset(size_t **postoffset) { aPostOffset = postoffset; }$/;"	f	class:PV::HyPerConn
setAccumulateAmount	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setAccumulateAmount(float accumulateAmt) { mAccumulateAmount = accumulateAmt; }$/;"	f	class:BBFind
setActivity	src/layers/ANNLayer.cpp	/^int ANNLayer::setActivity() {$/;"	f	class:PV::ANNLayer
setActivity	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::setActivity() {$/;"	f	class:PV::BackgroundLayer
setActivity	src/layers/GapLayer.cpp	/^int GapLayer::setActivity() {$/;"	f	class:PV::GapLayer
setActivity	src/layers/HyPerLayer.cpp	/^int HyPerLayer::setActivity() {$/;"	f	class:PV::HyPerLayer
setActivity	src/layers/KmeansLayer.cpp	/^int KmeansLayer::setActivity() {$/;"	f	class:PV::KmeansLayer
setActivity	src/layers/LIF.cpp	/^int LIF::setActivity() {$/;"	f	class:PV::LIF
setActivity	src/layers/RescaleLayer.cpp	/^int RescaleLayer::setActivity() {$/;"	f	class:PV::RescaleLayer
setActivity	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::setActivity() {$/;"	f	class:PV::RunningAverageLayer
setActivity	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::setActivity() {$/;"	f	class:PV::ShuffleLayer
setActivity	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::setActivity() {$/;"	f	class:PV::SigmoidLayer
setActivity_AccumulateLayer	src/layers/updateStateFunctions.h	/^int setActivity_AccumulateLayer($/;"	f
setActivity_GapLayer	src/layers/updateStateFunctions.h	/^int setActivity_GapLayer($/;"	f
setActivity_HyPerLayer	src/layers/updateStateFunctions.h	/^int setActivity_HyPerLayer($/;"	f
setActivity_KmeansLayer	src/layers/updateStateFunctions.h	/^int setActivity_KmeansLayer($/;"	f
setActivity_MLPSigmoidLayer	src/layers/updateStateFunctions.h	/^int setActivity_MLPSigmoidLayer($/;"	f
setActivity_PtwiseLinearTransferLayer	src/layers/updateStateFunctions.h	/^int setActivity_PtwiseLinearTransferLayer($/;"	f
setActivity_SigmoidLayer	src/layers/updateStateFunctions.h	/^int setActivity_SigmoidLayer($/;"	f
setActivitytoGlobalPos	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::setActivitytoGlobalPos() {$/;"	f	class:PV::MPITestLayer
setActivitytoGlobalPos	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::setActivitytoGlobalPos() {$/;"	f	class:PV::PlasticConnTestLayer
setActivitytoGlobalPos	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::setActivitytoGlobalPos() {$/;"	f	class:PV::ShrunkenPatchTestLayer
setAllocDeviceActiveIndices	src/layers/HyPerLayer.hpp	/^   void setAllocDeviceActiveIndices() { allocDeviceActiveIndices = true; }$/;"	f	class:PV::HyPerLayer
setAllocDeviceActivity	src/layers/HyPerLayer.hpp	/^   void setAllocDeviceActivity() { allocDeviceActivity = true; }$/;"	f	class:PV::HyPerLayer
setAllocDeviceDatastore	src/layers/HyPerLayer.hpp	/^   void setAllocDeviceDatastore() { allocDeviceDatastore = true; }$/;"	f	class:PV::HyPerLayer
setAllocDeviceGSyn	src/layers/HyPerLayer.hpp	/^   void setAllocDeviceGSyn() { allocDeviceGSyn = true; }$/;"	f	class:PV::HyPerLayer
setAllocDeviceV	src/layers/HyPerLayer.hpp	/^   void setAllocDeviceV() { allocDeviceV = true; }$/;"	f	class:PV::HyPerLayer
setAllocDeviceWeights	src/connections/CloneConn.hpp	/^   virtual void setAllocDeviceWeights() { originalConn->setAllocDeviceWeights(); }$/;"	f	class:PV::CloneConn
setAllocDeviceWeights	src/connections/HyPerConn.hpp	/^   virtual void setAllocDeviceWeights() { allocDeviceWeights = true; }$/;"	f	class:PV::HyPerConn
setAllocDeviceWeights	src/connections/TransposeConn.hpp	/^   virtual void setAllocDeviceWeights() { originalConn->setAllocPostDeviceWeights(); }$/;"	f	class:PV::TransposeConn
setAllocPostDeviceWeights	src/connections/CloneConn.hpp	/^   virtual void setAllocPostDeviceWeights() { originalConn->setAllocPostDeviceWeights(); }$/;"	f	class:PV::CloneConn
setAllocPostDeviceWeights	src/connections/HyPerConn.hpp	/^   virtual void setAllocPostDeviceWeights() { allocPostDeviceWeights = true; }$/;"	f	class:PV::HyPerConn
setAllocPostDeviceWeights	src/connections/TransposeConn.hpp	/^   virtual void setAllocPostDeviceWeights() { originalConn->setAllocDeviceWeights(); }$/;"	f	class:PV::TransposeConn
setArgs	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^void CudaPoolingDeliverKernel::setArgs($/;"	f	class:PVCuda::CudaPoolingDeliverKernel
setArgs	src/cudakernels/CudaRecvPost.cpp	/^void CudaRecvPost::setArgs($/;"	f	class:PVCuda::CudaRecvPost
setArgs	src/cudakernels/CudaRecvPre.cpp	/^void CudaRecvPre::setArgs($/;"	f	class:PVCuda::CudaRecvPre
setArgs	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^void CudaTransposePoolingDeliverKernel::setArgs($/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
setArgs	src/cudakernels/CudaUpdateStateFunctions.cpp	/^void CudaUpdateHyPerLCALayer::setArgs($/;"	f	class:PVCuda::CudaUpdateHyPerLCALayer
setArgs	src/cudakernels/CudaUpdateStateFunctions.cpp	/^void CudaUpdateISTALayer::setArgs($/;"	f	class:PVCuda::CudaUpdateISTALayer
setArgs	src/cudakernels/CudaUpdateStateFunctions.cpp	/^void CudaUpdateMomentumLCALayer::setArgs($/;"	f	class:PVCuda::CudaUpdateMomentumLCALayer
setArgsFlag	src/arch/cuda/CudaKernel.hpp	/^   void setArgsFlag() { argsSet = true; }$/;"	f	class:PVCuda::CudaKernel
setArgumentUsingString	src/io/Configuration.cpp	/^bool Configuration::setArgumentUsingString(std::string const &name, std::string const &value) {$/;"	f	class:PV::Configuration
setBBGuessSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setBBGuessSize(int bbGuessSize) { mBBGuessSize = bbGuessSize; }$/;"	f	class:BBFind
setBatchSweepSize	src/io/PVParams.cpp	/^int PVParams::setBatchSweepSize() {$/;"	f	class:PV::PVParams
setBatchSweepValues	src/io/PVParams.cpp	/^int PVParams::setBatchSweepValues() {$/;"	f	class:PV::PVParams
setBooleanArgument	src/columns/Arguments.hpp	/^   bool setBooleanArgument(std::string const &name, bool const &value) {$/;"	f	class:PV::Arguments
setBooleanArgument	src/columns/PV_Init.hpp	/^   bool setBooleanArgument(std::string const &name, bool const &value) {$/;"	f	class:PV::PV_Init
setBooleanArgument	src/io/Configuration.cpp	/^bool Configuration::setBooleanArgument(std::string const &name, bool const &value) {$/;"	f	class:PV::Configuration
setBoundingBoxFinderParams	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^void BBFindConfRemapLayer::setBoundingBoxFinderParams(BBFind& bbf) {$/;"	f	class:BBFindConfRemapLayer
setChannelType	src/connections/BaseConnection.cpp	/^void BaseConnection::setChannelType(ChannelType ch) {$/;"	f	class:PV::BaseConnection
setContrast	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setContrast(float contrast) { mContrast = contrast; }$/;"	f	class:BBFind
setContrastStrength	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setContrastStrength(float contrastStrength) { mContrastStrength = contrastStrength; }$/;"	f	class:BBFind
setConvertRateToSpikeCount	src/connections/BaseConnection.cpp	/^void BaseConnection::setConvertRateToSpikeCount(bool convertRateToSpikeCountFlag) {$/;"	f	class:PV::BaseConnection
setCudnnWData	src/connections/HyPerConn.hpp	/^   void setCudnnWData(PVCuda::CudaBuffer *inBuf) { cudnn_WData = inBuf; }$/;"	f	class:PV::HyPerConn
setDataStructuresAllocatedFlag	src/columns/BaseObject.hpp	/^   void setDataStructuresAllocatedFlag() { mDataStructuresAllocatedFlag = true; }$/;"	f	class:PV::BaseObject
setDelay	src/connections/BaseConnection.cpp	/^void BaseConnection::setDelay(int arborId, double delay) {$/;"	f	class:PV::BaseConnection
setDeltaThetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline void setDeltaThetaMax(float thetaMaxTmp) { deltaThetaMax = thetaMaxTmp; }$/;"	f	class:PV::InitGauss2DWeightsParams
setDescription	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::setDescription() {$/;"	f	class:PV::CheckpointableFileStream
setDescription	src/columns/BaseObject.cpp	/^int BaseObject::setDescription() {$/;"	f	class:PV::BaseObject
setDescription	src/columns/HyPerCol.cpp	/^void HyPerCol::setDescription() {$/;"	f	class:PV::HyPerCol
setDescription	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::setDescription() {$/;"	f	class:PV::privateTransposeConn
setDescription	src/normalizers/NormalizeBase.cpp	/^int NormalizeBase::setDescription() {$/;"	f	class:PV::NormalizeBase
setDescription	src/weightinit/InitWeights.cpp	/^int InitWeights::setDescription() {$/;"	f	class:PV::InitWeights
setDetectionWait	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setDetectionWait(int detectionWait) { mDetectionWait = detectionWait; }$/;"	f	class:BBFind
setDeviceWData	src/connections/HyPerConn.hpp	/^   void setDeviceWData(PVCuda::CudaBuffer *inBuf) { d_WData = inBuf; }$/;"	f	class:PV::HyPerConn
setDims	src/arch/cuda/CudaKernel.cpp	/^void CudaKernel::setDims($/;"	f	class:PVCuda::CudaKernel
setExpectedStartTime	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^   void setExpectedStartTime(double expectedStartTime) { mExpectedStartTime = expectedStartTime; }$/;"	f	class:FailBeforeExpectedStartTimeLayer
setFrameRate	demos/HeatMapLocalization/src/main.cpp	/^   void setFrameRate(int fr) { mFrameRate = fr; }$/;"	f	class:FrameServer
setFramesPerMap	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setFramesPerMap(int framesPerMap) { mFramesPerMap = framesPerMap; }$/;"	f	class:BBFind
setGSynPatchStart	src/connections/HyPerConn.hpp	/^   inline void setGSynPatchStart(size_t **patchstart) { gSynPatchStart = patchstart; }$/;"	f	class:PV::HyPerConn
setGroupAndParameter	src/io/PVParams.cpp	/^int ParameterSweep::setGroupAndParameter(const char *groupname, const char *parametername) {$/;"	f	class:PV::ParameterSweep
setGroupKeyword	src/io/PVParams.cpp	/^int ParameterGroup::setGroupKeyword(const char *keyword) {$/;"	f	class:PV::ParameterGroup
setImageLayerMemoryBuffer	demos/HeatMapLocalization/src/main.cpp	/^int setImageLayerMemoryBuffer(PV::Communicator * icComm, char const * imageFile, PV::ImageFromMemoryBuffer * imageLayer, uint8_t ** imageBufferPtr, size_t * imageBufferSizePtr)$/;"	f
setImageSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setImageSize(int width, int height)$/;"	f	class:BBFind
setInPos	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::setInPos(long pos, bool fromBeginning) {$/;"	f	class:PV::CheckpointableFileStream
setInPos	src/io/FileStream.cpp	/^void FileStream::setInPos(long pos, bool fromBeginning) {$/;"	f	class:PV::FileStream
setIndices	src/components/BatchIndexer.hpp	/^   void setIndices(const std::vector<int> &indices) { mIndices = indices; }$/;"	f	class:PV::BatchIndexer
setInitInfoCommunicatedFlag	src/columns/BaseObject.hpp	/^   void setInitInfoCommunicatedFlag() { mInitInfoCommunicatedFlag = true; }$/;"	f	class:PV::BaseObject
setInitialValues	src/connections/CopyConn.cpp	/^int CopyConn::setInitialValues() {$/;"	f	class:PV::CopyConn
setInitialValues	src/connections/HyPerConn.cpp	/^int HyPerConn::setInitialValues() {$/;"	f	class:PV::HyPerConn
setInitialValues	src/connections/PoolingConn.cpp	/^int PoolingConn::setInitialValues() {$/;"	f	class:PV::PoolingConn
setInitialValues	src/connections/TransposeConn.cpp	/^int TransposeConn::setInitialValues() {$/;"	f	class:PV::TransposeConn
setInitialValues	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::setInitialValues() {$/;"	f	class:PV::TransposePoolingConn
setInitialValues	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::setInitialValues() {$/;"	f	class:PV::privateTransposeConn
setInitialValues	src/layers/HyPerLayer.cpp	/^int HyPerLayer::setInitialValues() {$/;"	f	class:PV::HyPerLayer
setInitialValuesSetFlag	src/columns/BaseObject.hpp	/^   void setInitialValuesSetFlag() { mInitialValuesSetFlag = true; }$/;"	f	class:PV::BaseObject
setIntOptionalArgument	src/columns/Arguments.hpp	/^   bool setIntOptionalArgument(std::string const &name, Configuration::IntOptional const &value) {$/;"	f	class:PV::Arguments
setIntOptionalArgument	src/columns/PV_Init.hpp	/^   bool setIntOptionalArgument(std::string const &name, Configuration::IntOptional const &value) {$/;"	f	class:PV::PV_Init
setIntOptionalArgument	src/io/Configuration.cpp	/^bool Configuration::setIntOptionalArgument(std::string const &name, IntOptional const &value) {$/;"	f	class:PV::Configuration
setIntegerArgument	src/columns/Arguments.hpp	/^   bool setIntegerArgument(std::string const &name, int const &value) {$/;"	f	class:PV::Arguments
setIntegerArgument	src/columns/PV_Init.hpp	/^   bool setIntegerArgument(std::string const &name, int const &value) {$/;"	f	class:PV::PV_Init
setIntegerArgument	src/io/Configuration.cpp	/^bool Configuration::setIntegerArgument(std::string const &name, int const &value) {$/;"	f	class:PV::Configuration
setInternalMapSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setInternalMapSize(int width, int height)$/;"	f	class:BBFind
setLastUpdateTime	src/columns/DataStore.hpp	/^   void setLastUpdateTime(int bufferId, double t) { *mLastUpdateTimes->getBuffer(bufferId) = t; }$/;"	f	class:PV::DataStore
setLastUpdateTime	src/columns/DataStore.hpp	/^   void setLastUpdateTime(int bufferId, int level, double t) {$/;"	f	class:PV::DataStore
setLastUpdateTimes	src/checkpointing/CheckpointEntryDataStore.cpp	/^void CheckpointEntryDataStore::setLastUpdateTimes(std::vector<double> const &timestamps) const {$/;"	f	class:PV::CheckpointEntryDataStore
setLayerFromParam	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::setLayerFromParam(PV::HyPerLayer ** layer, char const * layerType, char const * layerName) {$/;"	f	class:BBFindConfRemapProbe
setLayerLoc	src/layers/HyPerLayer.cpp	/^int HyPerLayer::setLayerLoc($/;"	f	class:PV::HyPerLayer
setLogFile	src/columns/PV_Init.cpp	/^int PV_Init::setLogFile(char const *logFile, bool appendFlag) {$/;"	f	class:PV::PV_Init
setLogFile	src/utils/PVLog.cpp	/^void setLogFile(char const *logFile, std::ios_base::openmode mode) {$/;"	f	namespace:PV
setLogFile	src/utils/PVLog.cpp	/^void setLogFile(std::string const &logFile, std::ios_base::openmode mode) {$/;"	f	namespace:PV
setMPIConfiguration	src/columns/PV_Init.cpp	/^int PV_Init::setMPIConfiguration(int rows, int columns, int batchWidth) {$/;"	f	class:PV::PV_Init
setMaxRectangleMemory	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setMaxRectangleMemory(int maxRectangleMemory) { mMaxRectangleMemory = maxRectangleMemory; }$/;"	f	class:BBFind
setMemoryBuffer	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::setMemoryBuffer($/;"	f	class:PV::ImageFromMemoryBuffer
setMessageType	src/observerpattern/BaseMessage.hpp	/^   inline void setMessageType(char const *messageType) { mMessageType = messageType; }$/;"	f	class:PV::BaseMessage
setMessageType	src/observerpattern/BaseMessage.hpp	/^   inline void setMessageType(std::string const &messageType) { mMessageType = messageType; }$/;"	f	class:PV::BaseMessage
setMinBlobSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setMinBlobSize(int minBlobSize) { mMinBlobSize = minBlobSize; }$/;"	f	class:BBFind
setName	src/columns/BaseObject.cpp	/^int BaseObject::setName(char const *name) {$/;"	f	class:PV::BaseObject
setName	src/io/PVParams.cpp	/^int ParameterArray::setName(const char *name) {$/;"	f	class:PV::ParameterArray
setName	src/weightinit/InitWeightsParams.hpp	/^   inline void setName(const char *name) {$/;"	f	class:PV::InitWeightsParams
setNeedAllocPostWeights	src/connections/HyPerConn.hpp	/^   void setNeedAllocPostWeights(bool inBool) { needAllocPostWeights = inBool; }$/;"	f	class:PV::HyPerConn
setNeedPost	src/connections/HyPerConn.hpp	/^   void setNeedPost() { needPost = true; }$/;"	f	class:PV::HyPerConn
setNeededRNGSeeds	src/connections/TransposeConn.hpp	/^   virtual int setNeededRNGSeeds() { return 0; }$/;"	f	class:PV::TransposeConn
setNeededRNGSeeds	src/connections/privateTransposeConn.hpp	/^   virtual int setNeededRNGSeeds() { return 0; }$/;"	f	class:PV::privateTransposeConn
setNoPost	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline void setNoPost(int noPostTmp) { numOrientationsPost = noPostTmp; }$/;"	f	class:PV::InitGauss2DWeightsParams
setNoPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline void setNoPre(int noPreTmp) { numOrientationsPre = noPreTmp; }$/;"	f	class:PV::InitGauss2DWeightsParams
setNormDescription	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::setNormDescription() { return setNormDescriptionToString("norm"); }$/;"	f	class:PV::AbstractNormProbe
setNormDescription	src/probes/FirmThresholdCostFnProbe.cpp	/^int FirmThresholdCostFnProbe::setNormDescription() {$/;"	f	class:PV::FirmThresholdCostFnProbe
setNormDescription	src/probes/L0NormProbe.cpp	/^int L0NormProbe::setNormDescription() { return setNormDescriptionToString("L0-norm"); }$/;"	f	class:PV::L0NormProbe
setNormDescription	src/probes/L1NormProbe.cpp	/^int L1NormProbe::setNormDescription() { return setNormDescriptionToString("L1-norm"); }$/;"	f	class:PV::L1NormProbe
setNormDescription	src/probes/L2NormProbe.cpp	/^int L2NormProbe::setNormDescription() {$/;"	f	class:PV::L2NormProbe
setNormDescriptionToString	src/probes/AbstractNormProbe.cpp	/^int AbstractNormProbe::setNormDescriptionToString(char const *s) {$/;"	f	class:PV::AbstractNormProbe
setNumActive	src/columns/DataStore.hpp	/^   void setNumActive(int bufferId, long numActive) { *mNumActive->getBuffer(bufferId) = numActive; }$/;"	f	class:PV::DataStore
setNumThreads	src/columns/HyPerCol.cpp	/^int HyPerCol::setNumThreads(bool printMessagesFlag) {$/;"	f	class:PV::HyPerCol
setNumValues	src/probes/BaseProbe.cpp	/^int BaseProbe::setNumValues(int n) {$/;"	f	class:PV::BaseProbe
setNumberOfAxonalArborLists	src/connections/BaseConnection.cpp	/^void BaseConnection::setNumberOfAxonalArborLists(int numArbors) {$/;"	f	class:PV::BaseConnection
setOptimalMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::setOptimalMontage() {$/;"	f	class:BBFindConfRemapProbe
setOptimalMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::setOptimalMontage() {$/;"	f	class:LocalizationProbe
setOutPos	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::setOutPos(long pos, bool fromBeginning) {$/;"	f	class:PV::CheckpointableFileStream
setOutPos	src/io/FileStream.cpp	/^void FileStream::setOutPos(long pos, bool fromBeginning) {$/;"	f	class:PV::FileStream
setOutStream	src/io/PrintStream.hpp	/^   void setOutStream(std::ostream &stream) { mOutStream = &stream; }$/;"	f	class:PV::PrintStream
setOutputFilenameBase	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::setOutputFilenameBase(char const * fn) {$/;"	f	class:BBFindConfRemapProbe
setOutputFilenameBase	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::setOutputFilenameBase(char const * fn) {$/;"	f	class:LocalizationProbe
setOutputVals	src/layers/Segmentify.cpp	/^int Segmentify::setOutputVals(int batchIdx) {$/;"	f	class:PV::Segmentify
setParameterSweepSize	src/io/PVParams.cpp	/^int PVParams::setParameterSweepSize() {$/;"	f	class:PV::PVParams
setParameterSweepValues	src/io/PVParams.cpp	/^int PVParams::setParameterSweepValues(int n) {$/;"	f	class:PV::PVParams
setParams	src/columns/PV_Init.cpp	/^int PV_Init::setParams(char const *params_file) {$/;"	f	class:PV::PV_Init
setParent	src/columns/BaseObject.cpp	/^int BaseObject::setParent(HyPerCol *hc) {$/;"	f	class:PV::BaseObject
setPatchSize	src/connections/CloneConn.cpp	/^int CloneConn::setPatchSize() {$/;"	f	class:PV::CloneConn
setPatchSize	src/connections/CopyConn.cpp	/^int CopyConn::setPatchSize() {$/;"	f	class:PV::CopyConn
setPatchSize	src/connections/HyPerConn.cpp	/^int HyPerConn::setPatchSize() {$/;"	f	class:PV::HyPerConn
setPatchSize	src/connections/TransposeConn.cpp	/^int TransposeConn::setPatchSize() {$/;"	f	class:PV::TransposeConn
setPatchSize	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::setPatchSize() {$/;"	f	class:PV::TransposePoolingConn
setPatchSize	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::setPatchSize() {$/;"	f	class:PV::privateTransposeConn
setPatchStrides	src/connections/HyPerConn.cpp	/^int HyPerConn::setPatchStrides() {$/;"	f	class:PV::HyPerConn
setPixel	src/structures/Image.cpp	/^void Image::setPixel(int x, int y, float r, float g, float b) {$/;"	f	class:PV::Image
setPixel	src/structures/Image.cpp	/^void Image::setPixel(int x, int y, float r, float g, float b, float a) {$/;"	f	class:PV::Image
setPostLayerName	src/connections/BaseConnection.cpp	/^void BaseConnection::setPostLayerName(const char *post_name) {$/;"	f	class:PV::BaseConnection
setPostLayerName	src/connections/HyPerConn.cpp	/^int HyPerConn::setPostLayerName(const char *post_name) {$/;"	f	class:PV::HyPerConn
setPostPatchSize	src/connections/HyPerConn.cpp	/^int HyPerConn::setPostPatchSize() {$/;"	f	class:PV::HyPerConn
setPostSynapticLayer	src/connections/BaseConnection.cpp	/^void BaseConnection::setPostSynapticLayer(HyPerLayer *post) {$/;"	f	class:PV::BaseConnection
setPreAndPostLayerNames	src/connections/BaseConnection.cpp	/^int BaseConnection::setPreAndPostLayerNames() {$/;"	f	class:PV::BaseConnection
setPreAndPostLayerNames	src/connections/FeedbackConn.cpp	/^int FeedbackConn::setPreAndPostLayerNames() {$/;"	f	class:PV::FeedbackConn
setPreLayerName	src/connections/BaseConnection.cpp	/^void BaseConnection::setPreLayerName(const char *pre_name) {$/;"	f	class:PV::BaseConnection
setPreLayerName	src/connections/HyPerConn.cpp	/^int HyPerConn::setPreLayerName(const char *pre_name) {$/;"	f	class:PV::HyPerConn
setPreSynapticLayer	src/connections/BaseConnection.cpp	/^void BaseConnection::setPreSynapticLayer(HyPerLayer *pre) {$/;"	f	class:PV::BaseConnection
setPrevInfluence	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setPrevInfluence(float prevInfluence) { mPrevInfluence = prevInfluence; }$/;"	f	class:BBFind
setPrevLeakTau	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setPrevLeakTau(float prevLeakTau) { mPrevLeakTau = prevLeakTau; }$/;"	f	class:BBFind
setPrintLuaStream	src/io/PVParams.hpp	/^   void setPrintLuaStream(PV_Stream *printLuaStream) { mPrintLuaStream = printLuaStream; }$/;"	f	class:PV::PVParams
setPrintParamsStream	src/io/PVParams.hpp	/^   void setPrintParamsStream(PV_Stream *printParamsStream) {$/;"	f	class:PV::PVParams
setRandomSeed	src/components/BatchIndexer.cpp	/^void BatchIndexer::setRandomSeed(unsigned int seed) {$/;"	f	class:PV::BatchIndexer
setRetinaParams	src/layers/Retina.cpp	/^int Retina::setRetinaParams(PVParams *p) {$/;"	f	class:PV::Retina
setRotate	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline void setRotate(float rotateTmp) { rotate = rotateTmp; }$/;"	f	class:PV::InitGauss2DWeightsParams
setSlidingAverageSize	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setSlidingAverageSize(int slidingAverageSize) { mSlidingAverageSize = slidingAverageSize; }$/;"	f	class:BBFind
setSlopes	src/layers/ANNLayer.cpp	/^void ANNLayer::setSlopes() {$/;"	f	class:PV::ANNLayer
setStream	src/arch/cuda/CudaTimer.hpp	/^   void setStream(cudaStream_t stream) { this->stream = stream; }$/;"	f	class:PVCuda::CudaTimer
setStream	src/utils/PVLog.cpp	/^   void setStream(char const *path, std::ios_base::openmode mode = std::ios_base::out) {$/;"	f	class:PV::LogFileStream
setStream	src/utils/PVLog.cpp	/^   void setStream(std::basic_ostream<T> *stream) {$/;"	f	class:PV::LogFileStream
setStreamDefault	src/utils/PVLog.cpp	/^   void setStreamDefault() {$/;"	f	class:PV::LogFileStream
setStringArgument	src/columns/Arguments.hpp	/^   bool setStringArgument(std::string const &name, std::string const &value) {$/;"	f	class:PV::Arguments
setStringArgument	src/columns/PV_Init.hpp	/^   bool setStringArgument(std::string const &name, std::string const &value) {$/;"	f	class:PV::PV_Init
setStringArgument	src/io/Configuration.cpp	/^bool Configuration::setStringArgument(std::string const &name, std::string const &value) {$/;"	f	class:PV::Configuration
setStringStack	src/io/PVParams.cpp	/^int ParameterGroup::setStringStack(ParameterStringStack *stringStack) {$/;"	f	class:PV::ParameterGroup
setStringValue	src/io/PVParams.cpp	/^int ParameterGroup::setStringValue(const char *param_name, const char *svalue) {$/;"	f	class:PV::ParameterGroup
setTargetConn	src/probes/BaseConnectionProbe.cpp	/^int BaseConnectionProbe::setTargetConn(const char *connName) {$/;"	f	class:PV::BaseConnectionProbe
setTargetLayer	src/probes/LayerProbe.cpp	/^int LayerProbe::setTargetLayer(const char *layerName) {$/;"	f	class:PV::LayerProbe
setThetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   inline void setThetaMax(float thetaMaxTmp) { thetaMax = thetaMaxTmp; }$/;"	f	class:PV::InitGauss2DWeightsParams
setThreshold	demos/HeatMapLocalization/src/BBFind.hpp	/^      void setThreshold(float threshold) { mThreshold = threshold; }$/;"	f	class:BBFind
setUnsignedIntArgument	src/columns/Arguments.hpp	/^   bool setUnsignedIntArgument(std::string const &name, unsigned int const &value) {$/;"	f	class:PV::Arguments
setUnsignedIntArgument	src/columns/PV_Init.hpp	/^   bool setUnsignedIntArgument(std::string const &name, unsigned int const &value) {$/;"	f	class:PV::PV_Init
setUnsignedIntArgument	src/io/Configuration.cpp	/^bool Configuration::setUnsignedIntArgument(std::string const &name, unsigned int const &value) {$/;"	f	class:PV::Configuration
setUpdatedDeviceActivityFlag	src/layers/HyPerLayer.hpp	/^   void setUpdatedDeviceActivityFlag(bool in) { updatedDeviceActivity = in; }$/;"	f	class:PV::HyPerLayer
setUpdatedDeviceDatastoreFlag	src/layers/HyPerLayer.hpp	/^   void setUpdatedDeviceDatastoreFlag(bool in) { updatedDeviceDatastore = in; }$/;"	f	class:PV::HyPerLayer
setUpdatedDeviceGSynFlag	src/layers/HyPerLayer.hpp	/^   void setUpdatedDeviceGSynFlag(bool in) { updatedDeviceGSyn = in; }$/;"	f	class:PV::HyPerLayer
setValue	src/io/PVParams.cpp	/^int ParameterGroup::setValue(const char *param_name, double value) {$/;"	f	class:PV::ParameterGroup
setValue	src/io/PVParams.hpp	/^   void setValue(const char *s) {$/;"	f	class:PV::ParameterString
setValue	src/io/PVParams.hpp	/^   void setValue(double v) {$/;"	f	class:PV::Parameter
setVerifyWrites	src/checkpointing/Checkpointer.hpp	/^   void setVerifyWrites(bool verifyWritesFlag) { mVerifyWritesFlag = verifyWritesFlag; }$/;"	f	class:PV::Checkpointer
setVertices	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::setVertices() {$/;"	f	class:PV::ANNErrorLayer
setVertices	src/layers/ANNLayer.cpp	/^int ANNLayer::setVertices() {$/;"	f	class:PV::ANNLayer
setVtoGlobalPos	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::setVtoGlobalPos() {$/;"	f	class:PV::MPITestLayer
setVtoGlobalPos	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::setVtoGlobalPos() {$/;"	f	class:PV::ShrunkenPatchTestLayer
setWLogFile	src/utils/PVLog.cpp	/^void setWLogFile(char const *logFile, std::ios_base::openmode mode) {$/;"	f	namespace:PV
setWLogFile	src/utils/PVLog.cpp	/^void setWLogFile(std::wstring const &logFile, std::ios_base::openmode mode) {$/;"	f	namespace:PV
setWeightInitializer	src/connections/CloneConn.cpp	/^int CloneConn::setWeightInitializer() {$/;"	f	class:PV::CloneConn
setWeightInitializer	src/connections/HyPerConn.cpp	/^int HyPerConn::setWeightInitializer() {$/;"	f	class:PV::HyPerConn
setWeightInitializer	src/connections/IdentConn.cpp	/^int IdentConn::setWeightInitializer() {$/;"	f	class:PV::IdentConn
setWeightNormalizer	src/connections/HyPerConn.cpp	/^int HyPerConn::setWeightNormalizer() {$/;"	f	class:PV::HyPerConn
setWrapToStartIndex	src/components/BatchIndexer.hpp	/^   void setWrapToStartIndex(bool value) { mWrapToStartIndex = value; }$/;"	f	class:PV::BatchIndexer
set_dt_factor	src/cudakernels/CudaRecvPost.hpp	/^   void set_dt_factor(float new_dt_factor) { params.dt_factor = new_dt_factor; }$/;"	f	class:PVCuda::CudaRecvPost
set_dt_factor	src/cudakernels/CudaRecvPre.hpp	/^   void set_dt_factor(float new_dt_factor) { params.dt_factor = new_dt_factor; }$/;"	f	class:PVCuda::CudaRecvPre
set_dwDataStart	src/connections/HyPerConn.hpp	/^   inline void set_dwDataStart(float **datastart) { dwDataStart = datastart; }$/;"	f	class:PV::HyPerConn
set_dwDataStart	src/connections/HyPerConn.hpp	/^   inline void set_dwDataStart(int arborId, float *pIncrStart) {$/;"	f	class:PV::HyPerConn
set_wDataStart	src/connections/HyPerConn.hpp	/^   inline void set_wDataStart(float **datastart) { wDataStart = datastart; }$/;"	f	class:PV::HyPerConn
set_wDataStart	src/connections/HyPerConn.hpp	/^   inline void set_wDataStart(int arborId, float *pDataStart) { wDataStart[arborId] = pDataStart; }$/;"	f	class:PV::HyPerConn
set_wPatches	src/connections/HyPerConn.hpp	/^   inline void set_wPatches(PVPatch ***patches) { wPatches = patches; }$/;"	f	class:PV::HyPerConn
set_weight_params	src/io/fileio.cpp	/^int set_weight_params($/;"	f	namespace:PV
set_weights_to_source_index	tests/test_post_weights/src/test_post_weights.cpp	/^static int set_weights_to_source_index(HyPerConn *c) {$/;"	f	file:
sf	src/include/pv_types.h	/^   int sx, sy, sf; \/\/ stride in x,y,features$/;"	m	struct:PVPatchStrides_
sfp	src/connections/HyPerConn.hpp	/^   int sxp, syp, sfp; \/\/ stride in x,y,features$/;"	m	class:PV::HyPerConn
shape	python/deprecated/readPvpFile.py	/^   shape = (header["ny"], header["nx"], header["nf"])$/;"	v
shape	tests/ReceiveFromPostTest/scripts/readPvpFile.py	/^   shape = (header["ny"], header["nx"], header["nf"])$/;"	v
shape	tests/ReceiveFromPostTest/scripts/reconAnalysis.py	/^   shape = (header["ny"], header["nx"], header["nf"])$/;"	v
sharedWeights	src/connections/HyPerConn.hpp	/^   bool sharedWeights; \/\/ Set to true for the old KernelConn behavior$/;"	m	class:PV::HyPerConn
sharedWeights	src/cudakernels/CudaRecvPost.hpp	/^   int sharedWeights;$/;"	m	struct:PVCuda::recv_post_params
sharedWeights	src/cudakernels/CudaRecvPre.hpp	/^   int sharedWeights;$/;"	m	struct:PVCuda::recv_pre_params
sharedWeights	tests/Shared/ColumnArchive.hpp	/^   bool sharedWeights;$/;"	m	struct:ConnArchive
shift	src/weightinit/InitCocircWeightsParams.hpp	/^   float shift;$/;"	m	class:PV::InitCocircWeightsParams
shift	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float shift;$/;"	m	class:PV::InitGauss2DWeightsParams
showErrorPlot	python/pvtools/display.py	/^def showErrorPlot(image, *args):$/;"	f
showNumActivePlot	python/pvtools/display.py	/^def showNumActivePlot(data):$/;"	f
showSparsityPlot	python/pvtools/display.py	/^def showSparsityPlot(data):$/;"	f
shrinkPatch	src/connections/HyPerConn.cpp	/^int HyPerConn::shrinkPatch(int kExt, int arborId) {$/;"	f	class:PV::HyPerConn
shrinkPatches	src/connections/HyPerConn.cpp	/^int HyPerConn::shrinkPatches(int arborId) {$/;"	f	class:PV::HyPerConn
shrinkPatchesThresh	src/connections/HyPerConn.hpp	/^   float shrinkPatchesThresh;$/;"	m	class:PV::HyPerConn
shrinkPatches_flag	src/connections/HyPerConn.hpp	/^   bool shrinkPatches_flag;$/;"	m	class:PV::HyPerConn
shuffleLookupTable	src/components/BatchIndexer.cpp	/^void BatchIndexer::shuffleLookupTable() {$/;"	f	class:PV::BatchIndexer
shuffleMethod	src/layers/ShuffleLayer.hpp	/^   char *shuffleMethod;$/;"	m	class:PV::ShuffleLayer
sigma	src/probes/StatsProbe.hpp	/^   float *sigma;$/;"	m	class:PV::StatsProbe
sigma	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma;$/;"	m	class:PV::InitCocircWeightsParams
sigma	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float sigma;$/;"	m	class:PV::InitGauss2DWeightsParams
sigmaV	src/initv/GaussianRandomV.hpp	/^   float sigmaV = (float)1;$/;"	m	class:PV::GaussianRandomV
sigma_cocirc	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_cocirc;$/;"	m	class:PV::InitCocircWeightsParams
sigma_kurve	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_kurve; \/\/ fraction of delta_radius_curvature$/;"	m	class:PV::InitCocircWeightsParams
sigma_kurve_post	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_kurve_post;$/;"	m	class:PV::InitCocircWeightsParams
sigma_kurve_post2	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_kurve_post2;$/;"	m	class:PV::InitCocircWeightsParams
sigma_kurve_pre	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_kurve_pre;$/;"	m	class:PV::InitCocircWeightsParams
sigma_kurve_pre2	src/weightinit/InitCocircWeightsParams.hpp	/^   float sigma_kurve_pre2;$/;"	m	class:PV::InitCocircWeightsParams
sigmoidedRMS	demos/HeatMapLocalization/src/BBFind.cpp	/^float BBFind::sigmoidedRMS(const Map2 confMap, const Rectangle &bounds)$/;"	f	class:BBFind
sign	src/utils/conversions.h	/^static inline float sign(float x) { return (x < 0.0f) ? -1.0f : 1.0f; }$/;"	f
simulationTime	src/columns/HyPerCol.hpp	/^   double simulationTime() const { return mSimTime; }$/;"	f	class:PV::HyPerCol
singleFeatureMask	src/probes/AbstractNormProbe.hpp	/^   bool singleFeatureMask;$/;"	m	class:PV::AbstractNormProbe
size	src/arch/cuda/CudaBuffer.hpp	/^   size_t size;$/;"	m	class:PVCuda::CudaBuffer
size	src/connections/HyPerConn.hpp	/^   unsigned long size;$/;"	m	struct:PV::SparseWeightInfo
size	src/include/pv_types.h	/^   size_t size;$/;"	m	struct:PVLayerCube_
size	src/io/PVParams.hpp	/^   int size() { return count; }$/;"	f	class:PV::ParameterArrayStack
size	src/io/PVParams.hpp	/^   int size() { return count; }$/;"	f	class:PV::ParameterStack
size	src/io/PVParams.hpp	/^   int size() { return count; }$/;"	f	class:PV::ParameterStringStack
size	src/io/stb_image.h	/^   stbi_uc size[257];$/;"	m	struct:__anon8
size	src/io/stb_image.h	/^   stbi_uc size[288];$/;"	m	struct:__anon12
size	src/io/stb_image.h	/^typedef struct { stbi_uc size, type, channel; } stbi__pic_packet;$/;"	m	struct:__anon18
size	src/observerpattern/ObserverTable.cpp	/^std::vector<Observer *>::size_type ObserverTable::size() const {$/;"	f	class:PV::ObserverTable
skip	src/io/stb_image.h	/^   void (*skip)($/;"	m	struct:__anon5
skipPre	src/connections/HyPerConn.hpp	/^   virtual bool skipPre(float preact) { return preact == 0.0f; };$/;"	f	class:PV::HyPerConn
slidingAverageSize	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   int slidingAverageSize;$/;"	m	class:BBFindConfRemapLayer
slidingAverageSize	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   int slidingAverageSize;$/;"	m	class:LocalizationBBFindProbe
slopeNegInf	src/layers/ANNLayer.hpp	/^   float slopeNegInf = 1.0f;$/;"	m	class:PV::ANNLayer
slopePosInf	src/layers/ANNLayer.hpp	/^   float slopePosInf = 1.0f;$/;"	m	class:PV::ANNLayer
slopes	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *slopes;$/;"	m	struct:PVCuda::HyPerLCAParams
slopes	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *slopes;$/;"	m	struct:PVCuda::MomentumLCAParams
slopes	src/layers/ANNLayer.hpp	/^   float *slopes    = nullptr; \/\/ slopes[0]=slopeNegInf; slopes[numVertices]=slopePosInf;$/;"	m	class:PV::ANNLayer
smartWeights	src/weightinit/InitSmartWeights.cpp	/^int InitSmartWeights::smartWeights($/;"	f	class:PV::InitSmartWeights
smartWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^int HyPerConnDebugInitWeights::smartWeights(PVPatch *wp, float *dataStart, int k) {$/;"	f	class:PV::HyPerConnDebugInitWeights
smartWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^int KernelConnDebugInitWeights::smartWeights(float *dataStart, int k) {$/;"	f	class:PV::KernelConnDebugInitWeights
smoothBoundingBoxes	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::smoothBoundingBoxes(Rectangles &boundingBoxes)$/;"	f	class:BBFind
south	src/columns/Communicator.cpp	/^int Communicator::south(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
south	src/utils/BorderExchange.cpp	/^int BorderExchange::south(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
southeast	src/columns/Communicator.cpp	/^int Communicator::southeast(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
southeast	src/utils/BorderExchange.cpp	/^int BorderExchange::southeast(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
southwest	src/columns/Communicator.cpp	/^int Communicator::southwest(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
southwest	src/utils/BorderExchange.cpp	/^int BorderExchange::southwest(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
sparseLayer	src/layers/HyPerLayer.hpp	/^   bool sparseLayer; \/\/ if true, only nonzero activities are saved; if false, all values are saved.$/;"	m	class:PV::HyPerLayer
sparseTable	src/layers/PvpLayer.hpp	/^   struct BufferUtils::SparseFileTable sparseTable;$/;"	m	class:PV::PvpLayer	typeref:struct:PV::PvpLayer::SparseFileTable
sparse_layer	python/analysis_parse.py	/^sparse_layer = []$/;"	v
sparse_to_error	python/analysis_parse.py	/^sparse_to_error = []$/;"	v
spec_end	src/io/stb_image.h	/^   int spec_end;$/;"	m	struct:__anon9
spec_start	src/io/stb_image.h	/^   int spec_start;$/;"	m	struct:__anon9
specificKey	python/probe_analysis/readProbe.py	/^            specificKey = False$/;"	v
specificKey	python/probe_analysis/readProbe.py	/^        specificKey = True $/;"	v
specifyBatching	src/components/BatchIndexer.cpp	/^void BatchIndexer::specifyBatching(int localBatchIndex, int startIndex, int skipAmount) {$/;"	f	class:PV::BatchIndexer
spike	src/layers/Retina.cpp	/^spike(float timed,$/;"	f	file:
spikingFlag	src/layers/Retina.hpp	/^   bool spikingFlag; \/\/ specifies that layer is spiking$/;"	m	class:PV::Retina
split	python/timerPie.py	/^    split = l.split(":")$/;"	v
splitLine	python/probe_analysis/noArborReadProbe.py	/^def splitLine(line):$/;"	f
splitLine	python/probe_analysis/readProbeFunc.py	/^def splitLine(line):$/;"	f
spreadOverArborsWeights	src/weightinit/InitSpreadOverArborsWeights.cpp	/^int InitSpreadOverArborsWeights::spreadOverArborsWeights($/;"	f	class:PV::InitSpreadOverArborsWeights
squareV_ANNSquaredLayer	src/layers/updateStateFunctions.h	/^int squareV_ANNSquaredLayer(int nbatch, int numNeurons, MEM_GLOBAL float *V) {$/;"	f
squareVal	python/probe_analysis/readProbe.py	/^                    squareVal = ceil(sqrt(numPreNeurons[tok]))$/;"	v
squareVal	python/probe_analysis/readProbe.py	/^                    squareVal = sqrt(numPreNeurons[tok])$/;"	v
squash	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::squash(Map2 &map, float scaleMin, float scaleMax)$/;"	f	class:BBFind
squash	demos/HeatMapLocalization/src/BBFind.cpp	/^void BBFind::squash(Map3 &map, float scaleMin, float scaleMax)$/;"	f	class:BBFind
stack	src/io/PVParams.hpp	/^   ParameterStack *stack;$/;"	m	class:PV::PVParams
stack	src/io/PVParams.hpp	/^   ParameterStack *stack;$/;"	m	class:PV::ParameterGroup
start	src/arch/cuda/CudaTimer.cpp	/^double CudaTimer::start() {$/;"	f	class:PVCuda::CudaTimer
start	src/utils/Timer.cpp	/^double Timer::start() { return (double)(time_start = get_cpu_time()); }$/;"	f	class:PV::Timer
startEvent	src/arch/cuda/CudaTimer.hpp	/^   cudaEvent_t startEvent;$/;"	m	class:PVCuda::CudaTimer
startSourceExtBuf	src/cudakernels/CudaRecvPost.hpp	/^   long *startSourceExtBuf;$/;"	m	struct:PVCuda::recv_post_params
startTime	python/probe_analysis/noArborReadProbe.py	/^        startTime = fileStartTime$/;"	v
startTime	python/probe_analysis/noArborReadProbe.py	/^startTime = 1500000$/;"	v
startTime	python/probe_analysis/readProbeParams.py	/^startTime   = 2000000$/;"	v
start_clock	src/utils/Clock.cpp	/^void Clock::start_clock() {$/;"	f	class:PV::Clock
start_nodraw_regex	python/param_draw.py	/^    start_nodraw_regex = re.compile('^\/\/ START NODRAW')$/;"	v	class:Param_Reader
start_x	src/io/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
start_y	src/io/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
state	src/include/pv_types.h	/^   taus_state_t state;$/;"	m	struct:taus_uint4_
state	src/utils/cl_random.h	/^   taus_uint4 *state;$/;"	m	struct:box_muller_state
stb_image_write_test	src/io/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32) == 4 ? 1 : -1];$/;"	t
stbi__DNL	src/io/stb_image.h	3049;"	d
stbi__EOI	src/io/stb_image.h	3051;"	d
stbi__SOF	src/io/stb_image.h	3052;"	d
stbi__SOF_progressive	src/io/stb_image.h	3055;"	d
stbi__SOI	src/io/stb_image.h	3050;"	d
stbi__SOS	src/io/stb_image.h	3053;"	d
stbi__YCbCr_to_RGB_row	src/io/stb_image.h	/^static void stbi__YCbCr_to_RGB_row($/;"	f
stbi__YCbCr_to_RGB_simd	src/io/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd($/;"	f
stbi__at_eof	src/io/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s) {$/;"	f
stbi__bit_reverse	src/io/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits) {$/;"	f
stbi__bitcount	src/io/stb_image.h	/^static int stbi__bitcount(unsigned int a) {$/;"	f
stbi__bitreverse16	src/io/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n) {$/;"	f
stbi__bmask	src/io/stb_image.h	/^static stbi__uint32 stbi__bmask[17] =$/;"	v
stbi__bmp_data	src/io/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon17
stbi__bmp_info	src/io/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__bmp_load	src/io/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__bmp_parse_header	src/io/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info) {$/;"	f
stbi__bmp_test	src/io/stb_image.h	/^static int stbi__bmp_test(stbi__context *s) {$/;"	f
stbi__bmp_test_raw	src/io/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s) {$/;"	f
stbi__build_fast_ac	src/io/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h) {$/;"	f
stbi__build_huffman	src/io/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count) {$/;"	f
stbi__check_png_header	src/io/stb_image.h	/^static int stbi__check_png_header(stbi__context *s) {$/;"	f
stbi__clamp	src/io/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x) {$/;"	f
stbi__cleanup_jpeg	src/io/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j) {$/;"	f
stbi__compute_huffman_codes	src/io/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a) {$/;"	f
stbi__compute_transparency	src/io/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n) {$/;"	f
stbi__compute_transparency16	src/io/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n) {$/;"	f
stbi__compute_y	src/io/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b) {$/;"	f
stbi__context	src/io/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon6
stbi__convert_format	src/io/stb_image.h	/^stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y) {$/;"	f
stbi__copyval	src/io/stb_image.h	/^static void stbi__copyval(int channel, stbi_uc *dest, const stbi_uc *src) {$/;"	f
stbi__cpuid3	src/io/stb_image.h	/^static int stbi__cpuid3(void) {$/;"	f
stbi__create_png_image	src/io/stb_image.h	/^static int stbi__create_png_image($/;"	f
stbi__create_png_image_raw	src/io/stb_image.h	/^static int stbi__create_png_image_raw($/;"	f
stbi__de_iphone	src/io/stb_image.h	/^static void stbi__de_iphone(stbi__png *z) {$/;"	f
stbi__de_iphone_flag	src/io/stb_image.h	/^static int stbi__de_iphone_flag        = 0;$/;"	v
stbi__decode_jpeg_header	src/io/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan) {$/;"	f
stbi__decode_jpeg_image	src/io/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j) {$/;"	f
stbi__depth_scale_table	src/io/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = {0, 0xff, 0x55, 0, 0x11, 0, 0, 0, 0x01};$/;"	v
stbi__div16	src/io/stb_image.h	3179;"	d
stbi__div4	src/io/stb_image.h	3131;"	d
stbi__do_png	src/io/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp) {$/;"	f
stbi__do_zlib	src/io/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header) {$/;"	f
stbi__end_write_file	src/io/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s) { fclose((FILE *)s->context); }$/;"	f
stbi__err	src/io/stb_image.h	/^static int stbi__err(const char *str) {$/;"	f
stbi__err	src/io/stb_image.h	905;"	d
stbi__err	src/io/stb_image.h	907;"	d
stbi__err	src/io/stb_image.h	909;"	d
stbi__errpf	src/io/stb_image.h	912;"	d
stbi__errpuc	src/io/stb_image.h	913;"	d
stbi__expand_png_palette	src/io/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n) {$/;"	f
stbi__extend_receive	src/io/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n) {$/;"	f
stbi__f2f	src/io/stb_image.h	2049;"	d
stbi__fill_bits	src/io/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z) {$/;"	f
stbi__fill_gif_background	src/io/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1) {$/;"	f
stbi__float2int	src/io/stb_image.h	1412;"	d
stbi__float_postprocess	src/io/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__fopen	src/io/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode) {$/;"	f
stbi__fsh	src/io/stb_image.h	2050;"	d
stbi__g_failure_reason	src/io/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	src/io/stb_image.h	/^static int stbi__get16be(stbi__context *s) {$/;"	f
stbi__get16le	src/io/stb_image.h	/^static int stbi__get16le(stbi__context *s) {$/;"	f
stbi__get32be	src/io/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s) {$/;"	f
stbi__get32le	src/io/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s) {$/;"	f
stbi__get8	src/io/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s) {$/;"	f
stbi__get_chunk_header	src/io/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s) {$/;"	f
stbi__get_marker	src/io/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j) {$/;"	f
stbi__getn	src/io/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n) {$/;"	f
stbi__gif	src/io/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon20
stbi__gif_header	src/io/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info) {$/;"	f
stbi__gif_info	src/io/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__gif_info_raw	src/io/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__gif_load	src/io/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__gif_load_next	src/io/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp) {$/;"	f
stbi__gif_lzw	src/io/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon19
stbi__gif_parse_colortable	src/io/stb_image.h	/^stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp) {$/;"	f
stbi__gif_test	src/io/stb_image.h	/^static int stbi__gif_test(stbi__context *s) {$/;"	f
stbi__gif_test_raw	src/io/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s) {$/;"	f
stbi__grow_buffer_unsafe	src/io/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j) {$/;"	f
stbi__h2l_gamma_i	src/io/stb_image.h	/^static float stbi__h2l_gamma_i = 1.0f \/ 2.2f, stbi__h2l_scale_i = 1.0f;$/;"	v
stbi__h2l_scale_i	src/io/stb_image.h	/^static float stbi__h2l_gamma_i = 1.0f \/ 2.2f, stbi__h2l_scale_i = 1.0f;$/;"	v
stbi__hdr_convert	src/io/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp) {$/;"	f
stbi__hdr_gettoken	src/io/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer) {$/;"	f
stbi__hdr_info	src/io/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__hdr_load	src/io/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__hdr_test	src/io/stb_image.h	/^static int stbi__hdr_test(stbi__context *s) {$/;"	f
stbi__hdr_test_core	src/io/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s) {$/;"	f
stbi__hdr_to_ldr	src/io/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp) {$/;"	f
stbi__high_bit	src/io/stb_image.h	/^static int stbi__high_bit(unsigned int z) {$/;"	f
stbi__huffman	src/io/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon8
stbi__idct_block	src/io/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64]) {$/;"	f
stbi__idct_simd	src/io/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64]) {$/;"	f
stbi__info_main	src/io/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__init_zdefaults	src/io/stb_image.h	/^static void stbi__init_zdefaults(void) {$/;"	f
stbi__int16	src/io/stb_image.h	/^typedef int16_t stbi__int16;$/;"	t
stbi__int16	src/io/stb_image.h	/^typedef signed short stbi__int16;$/;"	t
stbi__int32	src/io/stb_image.h	/^typedef int32_t stbi__int32;$/;"	t
stbi__int32	src/io/stb_image.h	/^typedef signed int stbi__int32;$/;"	t
stbi__jbias	src/io/stb_image.h	/^static int const stbi__jbias[16] =$/;"	v
stbi__jpeg	src/io/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon9
stbi__jpeg_decode_block	src/io/stb_image.h	/^static int stbi__jpeg_decode_block($/;"	f
stbi__jpeg_decode_block_prog_ac	src/io/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac($/;"	f
stbi__jpeg_decode_block_prog_dc	src/io/stb_image.h	/^stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b) {$/;"	f
stbi__jpeg_dequantize	src/io/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant) {$/;"	f
stbi__jpeg_dezigzag	src/io/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64 + 15] = {0,$/;"	v
stbi__jpeg_finish	src/io/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z) {$/;"	f
stbi__jpeg_get_bit	src/io/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j) {$/;"	f
stbi__jpeg_get_bits	src/io/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n) {$/;"	f
stbi__jpeg_huff_decode	src/io/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h) {$/;"	f
stbi__jpeg_info	src/io/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__jpeg_info_raw	src/io/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp) {$/;"	f
stbi__jpeg_load	src/io/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__jpeg_reset	src/io/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j) {$/;"	f
stbi__jpeg_test	src/io/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s) {$/;"	f
stbi__l2h_gamma	src/io/stb_image.h	/^static float stbi__l2h_gamma = 2.2f, stbi__l2h_scale = 1.0f;$/;"	v
stbi__l2h_scale	src/io/stb_image.h	/^static float stbi__l2h_gamma = 2.2f, stbi__l2h_scale = 1.0f;$/;"	v
stbi__ldr_to_hdr	src/io/stb_image.h	/^static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp) {$/;"	f
stbi__load_flip	src/io/stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__load_main	src/io/stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__loadf_main	src/io/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__malloc	src/io/stb_image.h	/^static void *stbi__malloc(size_t size) { return STBI_MALLOC(size); }$/;"	f
stbi__out_gif_code	src/io/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code) {$/;"	f
stbi__paeth	src/io/stb_image.h	/^static int stbi__paeth(int a, int b, int c) {$/;"	f
stbi__parse_entropy_coded_data	src/io/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z) {$/;"	f
stbi__parse_huffman_block	src/io/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a) {$/;"	f
stbi__parse_png_file	src/io/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp) {$/;"	f
stbi__parse_uncompressed_block	src/io/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a) {$/;"	f
stbi__parse_zlib	src/io/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header) {$/;"	f
stbi__parse_zlib_header	src/io/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a) {$/;"	f
stbi__pic_info	src/io/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__pic_is4	src/io/stb_image.h	/^static int stbi__pic_is4(stbi__context *s, const char *str) {$/;"	f
stbi__pic_load	src/io/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s, int *px, int *py, int *comp, int req_comp) {$/;"	f
stbi__pic_load_core	src/io/stb_image.h	/^stbi__pic_load_core(stbi__context *s, int width, int height, int *comp, stbi_uc *result) {$/;"	f
stbi__pic_packet	src/io/stb_image.h	/^typedef struct { stbi_uc size, type, channel; } stbi__pic_packet;$/;"	t	typeref:struct:__anon18
stbi__pic_test	src/io/stb_image.h	/^static int stbi__pic_test(stbi__context *s) {$/;"	f
stbi__pic_test_core	src/io/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s) {$/;"	f
stbi__png	src/io/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon15
stbi__png_info	src/io/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__png_info_raw	src/io/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp) {$/;"	f
stbi__png_load	src/io/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__png_test	src/io/stb_image.h	/^static int stbi__png_test(stbi__context *s) {$/;"	f
stbi__pngchunk	src/io/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon14
stbi__pnm_getinteger	src/io/stb_image.h	/^static int stbi__pnm_getinteger(stbi__context *s, char *c) {$/;"	f
stbi__pnm_info	src/io/stb_image.h	/^static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__pnm_isdigit	src/io/stb_image.h	/^static int stbi__pnm_isdigit(char c) { return c >= '0' && c <= '9'; }$/;"	f
stbi__pnm_isspace	src/io/stb_image.h	/^static int stbi__pnm_isspace(char c) {$/;"	f
stbi__pnm_load	src/io/stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__pnm_skip_whitespace	src/io/stb_image.h	/^static void stbi__pnm_skip_whitespace(stbi__context *s, char *c) {$/;"	f
stbi__pnm_test	src/io/stb_image.h	/^static int stbi__pnm_test(stbi__context *s) {$/;"	f
stbi__process_frame_header	src/io/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan) {$/;"	f
stbi__process_gif_raster	src/io/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g) {$/;"	f
stbi__process_marker	src/io/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m) {$/;"	f
stbi__process_scan_header	src/io/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z) {$/;"	f
stbi__psd_info	src/io/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__psd_load	src/io/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__psd_test	src/io/stb_image.h	/^static int stbi__psd_test(stbi__context *s) {$/;"	f
stbi__readval	src/io/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest) {$/;"	f
stbi__reduce_png	src/io/stb_image.h	/^static int stbi__reduce_png(stbi__png *p) {$/;"	f
stbi__refill_buffer	src/io/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s) {$/;"	f
stbi__resample	src/io/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon11
stbi__resample_row_generic	src/io/stb_image.h	/^stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
stbi__resample_row_h_2	src/io/stb_image.h	/^stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
stbi__resample_row_hv_2	src/io/stb_image.h	/^stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
stbi__resample_row_hv_2_simd	src/io/stb_image.h	/^stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
stbi__resample_row_v_2	src/io/stb_image.h	/^stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) {$/;"	f
stbi__rewind	src/io/stb_image.h	/^static void stbi__rewind(stbi__context *s) {$/;"	f
stbi__setup_jpeg	src/io/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j) {$/;"	f
stbi__shiftsigned	src/io/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits) {$/;"	f
stbi__skip	src/io/stb_image.h	/^static void stbi__skip(stbi__context *s, int n) {$/;"	f
stbi__sse2_available	src/io/stb_image.h	/^static int stbi__sse2_available() {$/;"	f
stbi__start_callbacks	src/io/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user) {$/;"	f
stbi__start_file	src/io/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f) {$/;"	f
stbi__start_mem	src/io/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len) {$/;"	f
stbi__start_write_callbacks	src/io/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context) {$/;"	f
stbi__start_write_file	src/io/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename) {$/;"	f
stbi__stdio_callbacks	src/io/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks = {$/;"	v
stbi__stdio_eof	src/io/stb_image.h	/^static int stbi__stdio_eof(void *user) { return feof((FILE *)user); }$/;"	f
stbi__stdio_read	src/io/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size) {$/;"	f
stbi__stdio_skip	src/io/stb_image.h	/^static void stbi__stdio_skip(void *user, int n) { fseek((FILE *)user, n, SEEK_CUR); }$/;"	f
stbi__stdio_write	src/io/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size) {$/;"	f
stbi__tga_get_comp	src/io/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int *is_rgb16) {$/;"	f
stbi__tga_info	src/io/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp) {$/;"	f
stbi__tga_load	src/io/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi__tga_read_rgb16	src/io/stb_image.h	/^void stbi__tga_read_rgb16(stbi__context *s, stbi_uc *out) {$/;"	f
stbi__tga_test	src/io/stb_image.h	/^static int stbi__tga_test(stbi__context *s) {$/;"	f
stbi__uint16	src/io/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	src/io/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	src/io/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	src/io/stb_image.h	/^typedef unsigned int stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	src/io/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	src/io/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	src/io/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon21
stbi__zbuf	src/io/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon13
stbi__zbuild_huffman	src/io/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num) {$/;"	f
stbi__zdefault_distance	src/io/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	src/io/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	src/io/stb_image.h	/^static int stbi__zdist_base[32] = {$/;"	v
stbi__zdist_extra	src/io/stb_image.h	/^static int stbi__zdist_extra[32] = {0, 0, 0, 0, 1, 1, 2, 2,  3,  3,  4,  4,  5,  5,  6,$/;"	v
stbi__zexpand	src/io/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n) \/\/ need to make room for n bytes$/;"	f
stbi__zget8	src/io/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z) {$/;"	f
stbi__zhuffman	src/io/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon12
stbi__zhuffman_decode	src/io/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z) {$/;"	f
stbi__zhuffman_decode_slowpath	src/io/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z) {$/;"	f
stbi__zlength_base	src/io/stb_image.h	/^static int stbi__zlength_base[31] = {3,  4,   5,   6,   7,   8,   9,   10, 11, 13, 15,$/;"	v
stbi__zlength_extra	src/io/stb_image.h	/^static int stbi__zlength_extra[31] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,$/;"	v
stbi__zreceive	src/io/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n) {$/;"	f
stbi_convert_iphone_png_to_rgb	src/io/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert) {$/;"	f
stbi_failure_reason	src/io/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void) { return stbi__g_failure_reason; }$/;"	f
stbi_hdr_to_ldr_gamma	src/io/stb_image.h	/^STBIDEF void stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1 \/ gamma; }$/;"	f
stbi_hdr_to_ldr_scale	src/io/stb_image.h	/^STBIDEF void stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1 \/ scale; }$/;"	f
stbi_image_free	src/io/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load) { STBI_FREE(retval_from_stbi_load); }$/;"	f
stbi_info	src/io/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp) {$/;"	f
stbi_info_from_callbacks	src/io/stb_image.h	/^stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp) {$/;"	f
stbi_info_from_file	src/io/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp) {$/;"	f
stbi_info_from_memory	src/io/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp) {$/;"	f
stbi_inline	src/io/stb_image.h	604;"	d
stbi_inline	src/io/stb_image.h	606;"	d
stbi_inline	src/io/stb_image.h	609;"	d
stbi_io_callbacks	src/io/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon5
stbi_is_hdr	src/io/stb_image.h	/^STBIDEF int stbi_is_hdr(char const *filename) {$/;"	f
stbi_is_hdr_from_callbacks	src/io/stb_image.h	/^STBIDEF int stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user) {$/;"	f
stbi_is_hdr_from_file	src/io/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f) {$/;"	f
stbi_is_hdr_from_memory	src/io/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len) {$/;"	f
stbi_ldr_to_hdr_gamma	src/io/stb_image.h	/^STBIDEF void stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	src/io/stb_image.h	/^STBIDEF void stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	src/io/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_load_from_callbacks	src/io/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks($/;"	f
stbi_load_from_file	src/io/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_load_from_memory	src/io/stb_image.h	/^stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_loadf	src/io/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_loadf_from_callbacks	src/io/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks($/;"	f
stbi_loadf_from_file	src/io/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_loadf_from_memory	src/io/stb_image.h	/^stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp) {$/;"	f
stbi_lrot	src/io/stb_image.h	639;"	d
stbi_lrot	src/io/stb_image.h	641;"	d
stbi_set_flip_vertically_on_load	src/io/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip) {$/;"	f
stbi_set_unpremultiply_on_load	src/io/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply) {$/;"	f
stbi_uc	src/io/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_write_bmp	src/io/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data) {$/;"	f
stbi_write_bmp_core	src/io/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data) {$/;"	f
stbi_write_bmp_to_func	src/io/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func($/;"	f
stbi_write_func	src/io/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	src/io/stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data) {$/;"	f
stbi_write_hdr_core	src/io/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data) {$/;"	f
stbi_write_hdr_to_func	src/io/stb_image_write.h	/^int stbi_write_hdr_to_func($/;"	f
stbi_write_png	src/io/stb_image_write.h	/^stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes) {$/;"	f
stbi_write_png_to_func	src/io/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func($/;"	f
stbi_write_png_to_mem	src/io/stb_image_write.h	/^stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len) {$/;"	f
stbi_write_tga	src/io/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data) {$/;"	f
stbi_write_tga_core	src/io/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data) {$/;"	f
stbi_write_tga_to_func	src/io/stb_image_write.h	/^int stbi_write_tga_to_func($/;"	f
stbi_write_tga_with_rle	src/io/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	src/io/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	src/io/stb_image_write.h	/^unsigned char *stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality) {$/;"	f
stbi_zlib_decode_buffer	src/io/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen) {$/;"	f
stbi_zlib_decode_malloc	src/io/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen) {$/;"	f
stbi_zlib_decode_malloc_guesssize	src/io/stb_image.h	/^stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen) {$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	src/io/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag($/;"	f
stbi_zlib_decode_noheader_buffer	src/io/stb_image.h	/^stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen) {$/;"	f
stbi_zlib_decode_noheader_malloc	src/io/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen) {$/;"	f
stbiw__ZHASH	src/io/stb_image_write.h	865;"	d
stbiw__crc32	src/io/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len) {$/;"	f
stbiw__linear_to_rgbe	src/io/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear) {$/;"	f
stbiw__max	src/io/stb_image_write.h	605;"	d
stbiw__outfile	src/io/stb_image_write.h	/^static int stbiw__outfile($/;"	f
stbiw__paeth	src/io/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c) {$/;"	f
stbiw__sbcount	src/io/stb_image_write.h	793;"	d
stbiw__sbfree	src/io/stb_image_write.h	794;"	d
stbiw__sbgrow	src/io/stb_image_write.h	790;"	d
stbiw__sbgrowf	src/io/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize) {$/;"	f
stbiw__sbm	src/io/stb_image_write.h	785;"	d
stbiw__sbmaybegrow	src/io/stb_image_write.h	789;"	d
stbiw__sbn	src/io/stb_image_write.h	786;"	d
stbiw__sbneedgrow	src/io/stb_image_write.h	788;"	d
stbiw__sbpush	src/io/stb_image_write.h	792;"	d
stbiw__sbraw	src/io/stb_image_write.h	784;"	d
stbiw__wp32	src/io/stb_image_write.h	1039;"	d
stbiw__wpcrc	src/io/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len) {$/;"	f
stbiw__wpng4	src/io/stb_image_write.h	1033;"	d
stbiw__wptag	src/io/stb_image_write.h	1040;"	d
stbiw__write3	src/io/stb_image_write.h	/^stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c) {$/;"	f
stbiw__write_dump_data	src/io/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data) {$/;"	f
stbiw__write_hdr_scanline	src/io/stb_image_write.h	/^void stbiw__write_hdr_scanline($/;"	f
stbiw__write_pixel	src/io/stb_image_write.h	/^static void stbiw__write_pixel($/;"	f
stbiw__write_pixels	src/io/stb_image_write.h	/^static void stbiw__write_pixels($/;"	f
stbiw__write_run_data	src/io/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte) {$/;"	f
stbiw__writef	src/io/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...) {$/;"	f
stbiw__writefv	src/io/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v) {$/;"	f
stbiw__zhash	src/io/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data) {$/;"	f
stbiw__zlib_add	src/io/stb_image_write.h	851;"	d
stbiw__zlib_bitrev	src/io/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits) {$/;"	f
stbiw__zlib_countm	src/io/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit) {$/;"	f
stbiw__zlib_flush	src/io/stb_image_write.h	850;"	d
stbiw__zlib_flushf	src/io/stb_image_write.h	/^stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount) {$/;"	f
stbiw__zlib_huff	src/io/stb_image_write.h	859;"	d
stbiw__zlib_huff1	src/io/stb_image_write.h	855;"	d
stbiw__zlib_huff2	src/io/stb_image_write.h	856;"	d
stbiw__zlib_huff3	src/io/stb_image_write.h	857;"	d
stbiw__zlib_huff4	src/io/stb_image_write.h	858;"	d
stbiw__zlib_huffa	src/io/stb_image_write.h	853;"	d
stbiw__zlib_huffb	src/io/stb_image_write.h	863;"	d
stbiw_uint32	src/io/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
stddevs	tests/LIFTest/src/LIFTestProbe.hpp	/^   double *stddevs;$/;"	m	class:PV::LIFTestProbe
stds	python/probe_analysis/noArborReadProbe.py	/^stds = {}$/;"	v
stds	python/probe_analysis/readProbe.py	/^    stds          = {}$/;"	v
step	python/probe_analysis/noArborReadProbe.py	/^        step = (maxVal - minVal) \/ float(numTCBins)$/;"	v
step	src/io/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
stepHist	python/probe_analysis/noArborReadProbe.py	/^            stepHist = (maxVal - minVal) \/ float(numHistBins)$/;"	v
stepWidths	python/probe_analysis/readProbe.py	/^                stepWidths = [(maxVals[arborID] - minVals[arborID]) \/ float(numTCBins) for arborID in range(numArbors[tok])]$/;"	v
stop	src/arch/cuda/CudaTimer.cpp	/^double CudaTimer::stop() {$/;"	f	class:PVCuda::CudaTimer
stop	src/utils/Timer.cpp	/^double Timer::stop() {$/;"	f	class:PV::Timer
stopEvent	src/arch/cuda/CudaTimer.hpp	/^   cudaEvent_t stopEvent;$/;"	m	class:PVCuda::CudaTimer
stop_clock	src/utils/Clock.cpp	/^void Clock::stop_clock() {$/;"	f	class:PV::Clock
stop_nodraw_regex	python/param_draw.py	/^    stop_nodraw_regex = re.compile('^\/\/ STOP NODRAW')$/;"	v	class:Param_Reader
store	src/columns/Publisher.hpp	/^   DataStore *store;$/;"	m	class:PV::Publisher
stream	src/arch/cuda/CudaBuffer.hpp	/^   cudaStream_t stream;$/;"	m	class:PVCuda::CudaBuffer
stream	src/arch/cuda/CudaDevice.hpp	/^   cudaStream_t stream;$/;"	m	class:PVCuda::CudaDevice
stream	src/arch/cuda/CudaTimer.hpp	/^   cudaStream_t stream;$/;"	m	class:PVCuda::CudaTimer
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, DebugLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, ErrorLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, FatalType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, InfoLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, StackTraceType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::ostream &LogStreamTraits<char, WarnLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, DebugLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, ErrorLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, FatalType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, InfoLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, StackTraceType>::stream() {$/;"	f	class:PV::LogStreamTraits
stream	src/utils/PVLog.hpp	/^inline std::wostream &LogStreamTraits<wchar_t, WarnLogType>::stream() {$/;"	f	class:PV::LogStreamTraits
strength	src/normalizers/NormalizeBase.hpp	/^   float strength; \/\/ Value to normalize to; precise interpretation depends on normalization method$/;"	m	class:PV::NormalizeBase
strength	src/weightinit/InitCocircWeightsParams.hpp	/^   float strength;$/;"	m	class:PV::InitCocircWeightsParams
strength	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float strength;$/;"	m	class:PV::InitGauss2DWeightsParams
strengthParamHasBeenWritten	src/connections/HyPerConn.hpp	/^   bool strengthParamHasBeenWritten;$/;"	m	class:PV::HyPerConn
strideB	src/utils/conversions.h	/^static inline size_t strideB(const PVLayerLoc *loc) { return loc->nf * loc->nx * loc->ny; }$/;"	f
strideBExtended	src/utils/conversions.h	/^static inline size_t strideBExtended(const PVLayerLoc *loc) {$/;"	f
strideF	src/utils/conversions.h	/^static inline size_t strideF(const PVLayerLoc *loc) { return 1; }$/;"	f
strideFExtended	src/utils/conversions.h	/^static inline size_t strideFExtended(const PVLayerLoc *loc) { return 1; }$/;"	f
strideX	src/utils/conversions.h	/^static inline size_t strideX(const PVLayerLoc *loc) { return loc->nf; }$/;"	f
strideXExtended	src/utils/conversions.h	/^static inline size_t strideXExtended(const PVLayerLoc *loc) { return loc->nf; }$/;"	f
strideY	src/utils/conversions.h	/^static inline size_t strideY(const PVLayerLoc *loc) { return loc->nf * loc->nx; }$/;"	f
strideYExtended	src/utils/conversions.h	/^static inline size_t strideYExtended(const PVLayerLoc *loc) {$/;"	f
stringPresent	src/io/PVParams.cpp	/^int PVParams::stringPresent(const char *groupName, const char *paramStringName) {$/;"	f	class:PV::PVParams
stringPresent	src/io/PVParams.cpp	/^int ParameterGroup::stringPresent(const char *stringName) {$/;"	f	class:PV::ParameterGroup
stringStack	src/io/PVParams.hpp	/^   ParameterStringStack *stringStack;$/;"	m	class:PV::PVParams
stringStack	src/io/PVParams.hpp	/^   ParameterStringStack *stringStack;$/;"	m	class:PV::ParameterGroup
stringValue	src/io/PVParams.cpp	/^PVParams::stringValue(const char *groupName, const char *paramStringName, bool warnIfAbsent) {$/;"	f	class:PV::PVParams
stringValue	src/io/PVParams.cpp	/^const char *ParameterGroup::stringValue(const char *stringName) {$/;"	f	class:PV::ParameterGroup
stripLeadingTrailingWhitespace	src/io/ConfigParser.cpp	/^std::string ConfigParser::stripLeadingTrailingWhitespace(std::string const &inString) {$/;"	f	class:PV::ConfigParser
stripOverwriteTag	src/io/PVParams.cpp	/^char *PVParams::stripOverwriteTag(const char *s) {$/;"	f	class:PV::PVParams
stripQuotationMarks	src/io/PVParams.cpp	/^char *PVParams::stripQuotationMarks(const char *s) {$/;"	f	class:PV::PVParams
subtractOffsetAndNormalize	src/normalizers/NormalizeContrastZeroMean.cpp	/^void NormalizeContrastZeroMean::subtractOffsetAndNormalize($/;"	f	class:PV::NormalizeContrastZeroMean
succ_high	src/io/stb_image.h	/^   int succ_high;$/;"	m	struct:__anon9
succ_low	src/io/stb_image.h	/^   int succ_low;$/;"	m	struct:__anon9
suffix	src/io/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon19
sum	src/probes/StatsProbe.hpp	/^   double *sum;$/;"	m	class:PV::StatsProbe
sum2	src/probes/StatsProbe.hpp	/^   double *sum2;$/;"	m	class:PV::StatsProbe
sumMaps	demos/HeatMapLocalization/src/BBFind.cpp	/^BBFind::Map3 BBFind::sumMaps(const Map3 &mapA, const Map3 &mapB, float scale)$/;"	f	class:BBFind
sumWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::sumWeights($/;"	f	class:PV::HyPerConn
sx	src/include/pv_types.h	/^   int sx, sy, sf; \/\/ stride in x,y,features$/;"	m	struct:PVPatchStrides_
sxp	src/connections/HyPerConn.hpp	/^   int sxp, syp, sfp; \/\/ stride in x,y,features$/;"	m	class:PV::HyPerConn
sy	src/cudakernels/CudaRecvPost.hpp	/^   int sy;$/;"	m	struct:PVCuda::recv_post_params
sy	src/cudakernels/CudaRecvPre.hpp	/^   int sy;$/;"	m	struct:PVCuda::recv_pre_params
sy	src/include/pv_types.h	/^   int sx, sy, sf; \/\/ stride in x,y,features$/;"	m	struct:PVPatchStrides_
symmetrizeWeightsFlag	src/connections/HyPerConn.hpp	/^   bool symmetrizeWeightsFlag;$/;"	m	class:PV::HyPerConn
syncDevice	src/arch/cuda/CudaDevice.cpp	/^void CudaDevice::syncDevice() { handleError(cudaDeviceSynchronize(), "Synchronizing device"); }$/;"	f	class:PVCuda::CudaDevice
syncFilePos	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::syncFilePos() {$/;"	f	class:PV::CheckpointableFileStream
syncGpu	src/layers/HyPerLayer.cpp	/^void HyPerLayer::syncGpu() {$/;"	f	class:PV::HyPerLayer
synchronizeMarginWidth	src/layers/HyPerLayer.cpp	/^void HyPerLayer::synchronizeMarginWidth(HyPerLayer *layer) {$/;"	f	class:PV::HyPerLayer
synchronizedMarginWidthLayers	src/layers/HyPerLayer.hpp	/^   HyPerLayer **synchronizedMarginWidthLayers;$/;"	m	class:PV::HyPerLayer
syp	src/connections/HyPerConn.hpp	/^   int sxp, syp, sfp; \/\/ stride in x,y,features$/;"	m	class:PV::HyPerConn
syp	src/cudakernels/CudaRecvPost.hpp	/^   int syp;$/;"	m	struct:PVCuda::recv_post_params
syw	src/cudakernels/CudaRecvPre.hpp	/^   int syw;$/;"	m	struct:PVCuda::recv_pre_params
tags	src/columns/Communicator.hpp	/^   int tags[NUM_NEIGHBORHOOD]; \/\/ diagonal communication needs a different tag$/;"	m	class:PV::Communicator
targetBBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapProbe.hpp	/^   BBFindConfRemapLayer * targetBBFindConfRemapLayer = NULL;$/;"	m	class:BBFindConfRemapProbe
targetConn	src/probes/BaseConnectionProbe.hpp	/^   BaseConnection *targetConn; \/\/ The connection itself.$/;"	m	class:PV::BaseConnectionProbe
targetHyPerConn	src/probes/BaseHyPerConnProbe.hpp	/^   HyPerConn *targetHyPerConn;$/;"	m	class:PV::BaseHyPerConnProbe
targetLayer	src/probes/LayerProbe.hpp	/^   HyPerLayer *targetLayer;$/;"	m	class:PV::LayerProbe
targetMax	src/layers/RescaleLayer.hpp	/^   float targetMax;$/;"	m	class:PV::RescaleLayer
targetMean	src/layers/RescaleLayer.hpp	/^   float targetMean;$/;"	m	class:PV::RescaleLayer
targetMin	src/layers/RescaleLayer.hpp	/^   float targetMin;$/;"	m	class:PV::RescaleLayer
targetName	src/probes/BaseProbe.hpp	/^   char *targetName;$/;"	m	class:PV::BaseProbe
targetRateHz	src/layers/LCALIFLayer.hpp	/^   float targetRateHz;$/;"	m	class:PV::LCALIFLayer
targetStd	src/layers/RescaleLayer.hpp	/^   float targetStd;$/;"	m	class:PV::RescaleLayer
targetrates	tests/LIFTest/src/LIFTestProbe.hpp	/^   double *targetrates;$/;"	m	class:PV::LIFTestProbe
tau	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float tau;$/;"	m	struct:PVCuda::HyPerLCAParams
tau	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float tau;$/;"	m	struct:PVCuda::ISTAParams
tau	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float tau;$/;"	m	struct:PVCuda::MomentumLCAParams
tau	src/layers/LIF.hpp	/^   float tau;$/;"	m	struct:LIF_params
tauE	src/layers/LIF.hpp	/^   float tauE;$/;"	m	struct:LIF_params
tauFactor	src/probes/AdaptiveTimeScaleProbe.hpp	/^   double tauFactor               = 1.0;$/;"	m	class:PV::AdaptiveTimeScaleProbe
tauI	src/layers/LIF.hpp	/^   float tauI;$/;"	m	struct:LIF_params
tauIB	src/layers/LIF.hpp	/^   float tauIB;$/;"	m	struct:LIF_params
tauTHR	src/layers/LCALIFLayer.hpp	/^   float tauTHR;$/;"	m	class:PV::LCALIFLayer
tauVth	src/layers/LIF.hpp	/^   float tauVth;$/;"	m	struct:LIF_params
taus_get	src/utils/cl_random.c	/^static inline unsigned int taus_get(taus_state_t *state) {$/;"	f	file:
taus_set	src/utils/cl_random.c	/^static void taus_set(taus_state_t *state, unsigned int s) {$/;"	f	file:
taus_state_t	src/include/pv_types.h	/^typedef struct { unsigned int s1, s2, s3; } taus_state_t;$/;"	t	typeref:struct:__anon22
taus_uint4	src/include/pv_types.h	/^} taus_uint4;$/;"	t	typeref:struct:taus_uint4_
taus_uint4_	src/include/pv_types.h	/^typedef struct taus_uint4_ {$/;"	s
tempTime	python/probe_analysis/noArborReadProbe.py	/^                tempTime = float(splitLine(line)[0][1])$/;"	v
tempTime	python/probe_analysis/noArborReadProbe.py	/^            tempTime = currentTime #to make sure we actually back up$/;"	v
tempValsHist	python/probe_analysis/noArborReadProbe.py	/^                tempValsHist = [[len([a for a in val if a > boundListHist[i] and a <= boundListHist[i+1]]) for i in range(len(boundListHist) - 1)] for val in allVals]$/;"	v
terms	src/probes/ColumnEnergyProbe.hpp	/^   BaseProbe **terms;$/;"	m	class:PV::ColumnEnergyProbe
testAsVector	tests/BufferTest/src/main.cpp	/^void testAsVector() {$/;"	f
testAtSet	tests/BufferTest/src/main.cpp	/^void testAtSet() {$/;"	f
testBmpLoad	tests/ImageTest/src/main.cpp	/^void testBmpLoad() {$/;"	f
testByFile	tests/BatchIndexerTest/src/main.cpp	/^void testByFile() {$/;"	f
testByList	tests/BatchIndexerTest/src/main.cpp	/^void testByList() {$/;"	f
testBySpecified	tests/BatchIndexerTest/src/main.cpp	/^void testBySpecified() {$/;"	f
testConvertToColor	tests/ImageTest/src/main.cpp	/^void testConvertToColor() {$/;"	f
testConvertToGray	tests/ImageTest/src/main.cpp	/^void testConvertToGray() {$/;"	f
testCrop	tests/BufferTest/src/main.cpp	/^void testCrop() {$/;"	f
testDataNoBroadcast	tests/CheckpointEntryTest/src/testDataNoBroadcast.cpp	/^void testDataNoBroadcast(PV::MPIBlock const *mpiBlock, std::string const &directory) {$/;"	f
testDataPatchEqual	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int testDataPatchEqual($/;"	f
testDataPatchEqual	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int testDataPatchEqual($/;"	f
testDataWithBroadcast	tests/CheckpointEntryTest/src/testDataWithBroadcast.cpp	/^void testDataWithBroadcast(PV::MPIBlock const *mpiBlock, std::string const &directory) {$/;"	f
testExtended	tests/BufferUtilsMPITest/src/main.cpp	/^void testExtended(Communicator *comm) {$/;"	f
testJpgLoad	tests/ImageTest/src/main.cpp	/^void testJpgLoad() {$/;"	f
testPatchesEqual	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int testPatchesEqual($/;"	f
testPatchesEqual	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int testPatchesEqual($/;"	f
testPng24Load	tests/ImageTest/src/main.cpp	/^void testPng24Load() {$/;"	f
testPng32Load	tests/ImageTest/src/main.cpp	/^void testPng32Load() {$/;"	f
testPvpBatch	tests/CheckpointEntryTest/src/testPvpBatch.cpp	/^void testPvpBatch(PV::MPIBlock const *mpiBlock, std::string const &directory) {$/;"	f
testPvpExtended	tests/CheckpointEntryTest/src/testPvpExtended.cpp	/^void testPvpExtended(PV::MPIBlock const *mpiBlock, std::string const &directory) {$/;"	f
testPvpRestricted	tests/CheckpointEntryTest/src/testPvpRestricted.cpp	/^void testPvpRestricted(PV::MPIBlock const *mpiBlock, std::string const &directory) {$/;"	f
testReadFromPvp	tests/BufferUtilsPvpTest/src/main.cpp	/^void testReadFromPvp() {$/;"	f
testReadFromSparseBinaryPvp	tests/BufferUtilsPvpTest/src/main.cpp	/^void testReadFromSparseBinaryPvp() {$/;"	f
testReadSparseFromPvp	tests/BufferUtilsPvpTest/src/main.cpp	/^void testReadSparseFromPvp() { testSparseFile("input\/sparse_5x5x1_x5.pvp"); }$/;"	f
testRescale	tests/BufferTest/src/main.cpp	/^void testRescale() {$/;"	f
testResize	tests/BufferTest/src/main.cpp	/^void testResize() {$/;"	f
testRestricted	tests/BufferUtilsMPITest/src/main.cpp	/^void testRestricted(Communicator *comm) {$/;"	f
testSeparatedName	tests/CheckpointEntryTest/src/testSeparatedName.cpp	/^void testSeparatedName(PV::MPIBlock const *mpiBlock) {$/;"	f
testSetVector	tests/BufferTest/src/main.cpp	/^void testSetVector() {$/;"	f
testSparseFile	tests/BufferUtilsPvpTest/src/main.cpp	/^void testSparseFile(const char *fName) {$/;"	f
testTransposeOfTransposeWeights	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int testTransposeOfTransposeWeights($/;"	f
testTransposeOfTransposeWeights	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int testTransposeOfTransposeWeights($/;"	f
testWeightsEqual	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int testWeightsEqual(HyPerConn *conn1, HyPerConn *conn2) {$/;"	f
testWeightsEqual	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int testWeightsEqual(HyPerConn *conn1, HyPerConn *conn2) {$/;"	f
testWriteSparseToPvp	tests/BufferUtilsPvpTest/src/main.cpp	/^void testWriteSparseToPvp() {$/;"	f
testWriteToPvp	tests/BufferUtilsPvpTest/src/main.cpp	/^void testWriteToPvp() {$/;"	f
test_PatchHead	tests/test_patch_head/src/test_patch_head.cpp	/^int test_PatchHead(int kzPre, int nzPatch, int zScaleLog2Pre, int zScaleLog2Post) {$/;"	f
testcheckpoint	tests/GenericSystemTest/src/main.cpp	/^int testcheckpoint(PV_Init *initObj, int rank) {$/;"	f
testcheckpoint	tests/LCATest/src/main.cpp	/^int testcheckpoint(PV_Init *initObj, int rank) {$/;"	f
testcheckpoint	tests/MomentumLCATest/src/main.cpp	/^int testcheckpoint(PV_Init *initObj, int rank) {$/;"	f
testcheckpoint	tests/TotalEnergyTest/src/main.cpp	/^int testcheckpoint(PV_Init *initObj, int rank) {$/;"	f
testcheckpoint	tests/WriteSparseFileTest/src/main.cpp	/^int testcheckpoint(PV_Init *initObj, int rank) {$/;"	f
testioparams	tests/GenericSystemTest/src/main.cpp	/^int testioparams(PV_Init *initObj, int rank) {$/;"	f
testioparams	tests/LCATest/src/main.cpp	/^int testioparams(PV_Init *initObj, int rank) {$/;"	f
testioparams	tests/MomentumLCATest/src/main.cpp	/^int testioparams(PV_Init *initObj, int rank) {$/;"	f
testioparams	tests/TotalEnergyTest/src/main.cpp	/^int testioparams(PV_Init *initObj, int rank) {$/;"	f
testioparams	tests/WriteSparseFileTest/src/main.cpp	/^int testioparams(PV_Init *initObj, int rank) {$/;"	f
testrun	tests/GenericSystemTest/src/main.cpp	/^int testrun(PV_Init *initObj, int rank) {$/;"	f
testrun	tests/LCATest/src/main.cpp	/^int testrun(PV_Init *initObj, int rank) {$/;"	f
testrun	tests/MomentumLCATest/src/main.cpp	/^int testrun(PV_Init *initObj, int rank) {$/;"	f
testrun	tests/TotalEnergyTest/src/main.cpp	/^int testrun(PV_Init *initObj, int rank) {$/;"	f
testrun	tests/WriteSparseFileTest/src/main.cpp	/^int testrun(PV_Init *initObj, int rank) {$/;"	f
textOutputFlag	src/probes/BaseProbe.hpp	/^   bool textOutputFlag;$/;"	m	class:PV::BaseProbe
th0Post	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float th0Post;$/;"	m	class:PV::InitGauss2DWeightsParams
thPre	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float thPre;$/;"	m	class:PV::InitGauss2DWeightsParams
thetaMax	src/weightinit/InitGauss2DWeightsParams.hpp	/^   float thetaMax; \/\/ max orientation in units of PI$/;"	m	class:PV::InitGauss2DWeightsParams
third_name	python/timers_txt_to_csv.py	/^    third_name = re.search(third_name_pattern,raw).group()$/;"	v
third_name_pattern	python/timers_txt_to_csv.py	/^third_name_pattern = "\\w+$"$/;"	v
thread_gSyn	src/connections/HyPerConn.hpp	/^   float **thread_gSyn; \/\/ Accumulate buffer for each thread, only used if numThreads > 1 \/\/ Move$/;"	m	class:PV::HyPerConn
thread_gSyn	src/layers/HyPerLayer.hpp	/^   float **thread_gSyn; \/\/ Accumulate buffer for each thread, only used if numThreads > 1$/;"	m	class:PV::HyPerLayer
thread_gateIdxBuffer	src/connections/PoolingConn.hpp	/^   float **thread_gateIdxBuffer;$/;"	m	class:PV::PoolingConn
threshold	demos/HeatMapLocalization/src/BBFindConfRemapLayer.hpp	/^   float threshold;$/;"	m	class:BBFindConfRemapLayer
threshold	demos/HeatMapLocalization/src/LocalizationBBFindProbe.hpp	/^   float threshold;$/;"	m	class:LocalizationBBFindProbe
thresholdWeight	src/connections/HyPerConn.hpp	/^   float thresholdWeight;$/;"	m	struct:PV::SparseWeightInfo
time	python/probe_analysis/noArborReadProbe.py	/^time = array(data['t'])$/;"	v
time	python/probe_analysis/readProbe.py	/^    time = array(data['t'][0][0][:]) #data[key][arbor][preNeuron]$/;"	v
time	src/arch/cuda/CudaTimer.hpp	/^   float time; \/\/ TODO maybe use Timer's member variables to store the time?$/;"	m	class:PVCuda::CudaTimer
timeConstantTau	src/layers/HyPerLCALayer.hpp	/^   float timeConstantTau;$/;"	m	class:PV::HyPerLCALayer
timeConstantTau	src/layers/ISTALayer.hpp	/^   float timeConstantTau;$/;"	m	class:PV::ISTALayer
timeFromParams	src/io/fileio.cpp	/^double timeFromParams(void *params) {$/;"	f	namespace:PV
timeLastComputed	src/probes/AbstractNormProbe.hpp	/^   double timeLastComputed; \/\/ the value of the input argument timevalue for the$/;"	m	class:PV::AbstractNormProbe
timeOffset	python/probe_analysis/noArborReadProbe.py	/^    timeOffset = startTime - fileStartTime #now we know how many lines forward we need to go$/;"	v
timePlot	python/probe_analysis/readProbeParams.py	/^timePlot    = True $/;"	v
timeToParams	src/io/fileio.cpp	/^void timeToParams(double time, void *params) { memcpy(params, &time, sizeof(double)); }$/;"	f	namespace:PV
time_elapsed	src/utils/Timer.hpp	/^   uint64_t time_elapsed;$/;"	m	class:PV::Timer
time_end	src/utils/Timer.hpp	/^   uint64_t time_start, time_end;$/;"	m	class:PV::Timer
time_pattern	python/timers_txt_to_csv.py	/^time_pattern = "\\d+.\\d+$"$/;"	v
time_start	src/utils/Timer.hpp	/^   uint64_t time_start, time_end;$/;"	m	class:PV::Timer
timerName	python/timerPie.py	/^timerName = []$/;"	v
timerTimes	python/timerPie.py	/^timerTimes = {}$/;"	v
timersFile	python/timerPie.py	/^timersFile = "\/home\/sheng\/mountData\/KITTI\/KITTI_Deep_2X3frames\/benchmark0\/output.txt"$/;"	v
times	python/timerPie.py	/^times = []$/;"	v
timescale_timer	src/layers/HyPerLayer.hpp	/^   Timer *timescale_timer;$/;"	m	class:PV::HyPerLayer
timestamp	src/utils/BufferUtilsPvp.hpp	/^   double timestamp;$/;"	m	struct:PV::BufferUtils::ActivityHeader
toBuffer	src/structures/SparseList.hpp	/^   void toBuffer(Buffer<T> &dest, T zeroVal) {$/;"	f	class:PV::SparseList
toFrame	python/deprecated/readPvpFile.py	/^def toFrame(skipnum, filestream, numPerFrame, headerSize):$/;"	f
todo	src/io/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon9
tok	python/probe_analysis/noArborReadProbe.py	/^        tok = key$/;"	v
tok	python/probe_analysis/noArborReadProbe.py	/^        tok = key[:len(key) - 1]$/;"	v
tok	python/probe_analysis/readProbe.py	/^                tok = key$/;"	v
tok	python/probe_analysis/readProbe.py	/^                tok = key[:len(key) - 1]$/;"	v
tok	python/probe_analysis/readProbe.py	/^            tok = key$/;"	v
tok	python/probe_analysis/readProbe.py	/^            tok = key[:len(key) - 1]$/;"	v
tok	python/probe_analysis/readProbe.py	/^        tok = 'weight'$/;"	v
tolerance	tests/LIFTest/src/LIFTestProbe.hpp	/^   double tolerance; \/\/ Number of standard deviations that the observed rates can differ from the$/;"	m	class:PV::LIFTestProbe
tolerance	tests/ReceiveFromPostTest/src/ReceiveFromPostProbe.hpp	/^   float tolerance;$/;"	m	class:PV::ReceiveFromPostProbe
tolerance	tests/Shared/ColumnArchive.hpp	/^   float tolerance;$/;"	m	struct:ConnArchive
tolerance	tests/Shared/ColumnArchive.hpp	/^   float tolerance;$/;"	m	struct:LayerArchive
top	demos/HeatMapLocalization/src/BBFind.hpp	/^            int top()    const { return y - height\/ 2; }$/;"	f	class:BBFind::Rectangle
top	demos/HeatMapLocalization/src/LocalizationData.hpp	/^   int top;$/;"	m	struct:LocalizationData
touching	demos/HeatMapLocalization/src/BBFind.cpp	/^bool BBFind::Rectangle::touching(const Rectangle &rectA, const Rectangle &rectB)$/;"	f	class:BBFind::Rectangle
tq	src/io/stb_image.h	/^      int tq;$/;"	m	struct:__anon9::__anon10
trainingFlag	src/layers/KmeansLayer.hpp	/^   bool trainingFlag;$/;"	m	class:PV::KmeansLayer
transparent	src/io/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon20
transpose	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::transpose(int arborId) {$/;"	f	class:PV::privateTransposeConn
transposeNonsharedWeights	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::transposeNonsharedWeights(int arborId) {$/;"	f	class:PV::privateTransposeConn
transposeSharedWeights	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::transposeSharedWeights(int arborId) {$/;"	f	class:PV::privateTransposeConn
triggerBehavior	src/layers/HyPerLayer.hpp	/^   char *triggerBehavior; \/\/ Specifies how to respond to a trigger.  Current values are$/;"	m	class:PV::HyPerLayer
triggerBehaviorType	src/layers/HyPerLayer.hpp	/^   TriggerBehaviorType triggerBehaviorType;$/;"	m	class:PV::HyPerLayer
triggerFlag	src/connections/HyPerConn.hpp	/^   bool triggerFlag;$/;"	m	class:PV::HyPerConn
triggerFlag	src/layers/HyPerLayer.hpp	/^   bool triggerFlag; \/\/ Whether the layer has different behavior in response to another layer's$/;"	m	class:PV::HyPerLayer
triggerFlag	src/probes/BaseProbe.hpp	/^   bool triggerFlag;$/;"	m	class:PV::BaseProbe
triggerLayer	src/connections/HyPerConn.hpp	/^   HyPerLayer *triggerLayer;$/;"	m	class:PV::HyPerConn
triggerLayer	src/layers/HyPerLayer.hpp	/^   HyPerLayer *triggerLayer;$/;"	m	class:PV::HyPerLayer
triggerLayer	src/probes/BaseProbe.hpp	/^   HyPerLayer *triggerLayer;$/;"	m	class:PV::BaseProbe
triggerLayerName	src/connections/HyPerConn.hpp	/^   char *triggerLayerName;$/;"	m	class:PV::HyPerConn
triggerLayerName	src/layers/HyPerLayer.hpp	/^   char *triggerLayerName; \/\/ The layer that triggers different behavior.  To turn triggering off,$/;"	m	class:PV::HyPerLayer
triggerLayerName	src/probes/BaseProbe.hpp	/^   char *triggerLayerName;$/;"	m	class:PV::BaseProbe
triggerOffset	src/connections/HyPerConn.hpp	/^   double triggerOffset;$/;"	m	class:PV::HyPerConn
triggerOffset	src/layers/HyPerLayer.hpp	/^   double triggerOffset; \/\/ Adjust the timestep when the trigger is receieved by this amount; must$/;"	m	class:PV::HyPerLayer
triggerOffset	src/probes/BaseProbe.hpp	/^   double triggerOffset;$/;"	m	class:PV::BaseProbe
triggerResetLayer	src/layers/HyPerLayer.hpp	/^   HyPerLayer *triggerResetLayer;$/;"	m	class:PV::HyPerLayer
triggerResetLayerName	src/layers/HyPerLayer.hpp	/^   char *triggerResetLayerName; \/\/ If triggerBehavior is "resetStateOnTrigger", specifies the layer$/;"	m	class:PV::HyPerLayer
type	src/io/PVParams.hpp	/^   SweepType type;$/;"	m	class:PV::ParameterSweep
type	src/io/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon14
type	src/io/stb_image.h	/^typedef struct { stbi_uc size, type, channel; } stbi__pic_packet;$/;"	m	struct:__anon18
type	src/probes/StatsProbe.hpp	/^   PVBufType type;$/;"	m	class:PV::StatsProbe
type_regex	python/analysis_parse.py	/^                type_regex = "\\A" + i + "\\s"$/;"	v
uncompressWeight	src/connections/weight_conversions.hpp	/^static inline float uncompressWeight(float w, float minVal, float maxVal) { return w; }$/;"	f	namespace:PV
uncompressWeight	src/connections/weight_conversions.hpp	/^static inline float uncompressWeight(unsigned char w, float minVal, float maxVal) {$/;"	f	namespace:PV
uniformRandom	src/columns/Random.cpp	/^float Random::uniformRandom(int localIndex) {$/;"	f	class:PV::Random
uniformRandom	src/columns/Random.hpp	/^   float uniformRandom(int localIndex, float min, float max) {$/;"	f	class:PV::Random
uniformRandom	src/columns/Random.hpp	/^   void uniformRandom(float *values, int localIndex, int count = 1) {$/;"	f	class:PV::Random
uniformRandom	src/columns/Random.hpp	/^   void uniformRandom(float *values, int localIndex, int count, float min, float max) {$/;"	f	class:PV::Random
uniformWeights	src/weightinit/InitUniformWeights.cpp	/^int InitUniformWeights::uniformWeights($/;"	f	class:PV::InitUniformWeights
unsetAccumulateType	src/connections/HyPerConn.cpp	/^void HyPerConn::unsetAccumulateType() {$/;"	f	class:PV::HyPerConn
unsetAccumulateType	src/connections/PoolingConn.cpp	/^void PoolingConn::unsetAccumulateType() {$/;"	f	class:PV::PoolingConn
up	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int up;$/;"	m	struct:PVCuda::HyPerLCAParams
up	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int up;$/;"	m	struct:PVCuda::ISTAParams
up	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   int up;$/;"	m	struct:PVCuda::MomentumLCAParams
up	src/include/PVLayerLoc.h	/^   int lt, rt, dn, up; \/\/ padding in {left, right, down, up} directions$/;"	m	struct:PVHalo_
update	tests/HyPerConnCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::update() {$/;"	f	class:CorrectState
update	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::update() {$/;"	f	class:CorrectState
update	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::update() {$/;"	f	class:CorrectState
update	tests/PoolingConnCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::update() {$/;"	f	class:CorrectState
updateActiveIndices	src/columns/DataStore.cpp	/^void DataStore::updateActiveIndices(int bufferId, int level) {$/;"	f	class:PV::DataStore
updateActiveIndices	src/columns/Publisher.cpp	/^int Publisher::updateActiveIndices(int delay) {$/;"	f	class:PV::Publisher
updateActiveIndices	src/layers/HyPerLayer.cpp	/^int HyPerLayer::updateActiveIndices() { return publisher->updateActiveIndices(0); }$/;"	f	class:PV::HyPerLayer
updateAllActiveIndices	src/columns/Publisher.cpp	/^int Publisher::updateAllActiveIndices() {$/;"	f	class:PV::Publisher
updateAllActiveIndices	src/layers/HyPerLayer.cpp	/^int HyPerLayer::updateAllActiveIndices() { return publisher->updateAllActiveIndices(); }$/;"	f	class:PV::HyPerLayer
updateArbors	src/connections/HyPerConn.cpp	/^void HyPerConn::updateArbors() {$/;"	f	class:PV::HyPerConn
updateCocircNChord	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::updateCocircNChord($/;"	f	class:PV::InitCocircWeightsParams
updateCorrectInputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::updateCorrectInputBuffer() {$/;"	f	class:CorrectState
updateCorrectOutputBuffer	tests/PoolingConnCheckpointerTest/src/CorrectState.cpp	/^void CorrectState::updateCorrectOutputBuffer() {$/;"	f	class:CorrectState
updateDeviceWeights	src/connections/HyPerConn.cpp	/^void HyPerConn::updateDeviceWeights() {$/;"	f	class:PV::HyPerConn
updateFilePos	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::updateFilePos() {$/;"	f	class:PV::CheckpointableFileStream
updateGSynFromPostPerspective	src/connections/HyPerConn.hpp	/^   bool updateGSynFromPostPerspective;$/;"	m	class:PV::HyPerConn
updateGpu	src/layers/HyPerLayer.hpp	/^   bool updateGpu;$/;"	m	class:PV::HyPerLayer
updateHeader	python/pvtools/pvpFile.py	/^    def updateHeader(self, data):$/;"	m	class:pvpOpen
updateInd_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::updateInd_dW($/;"	f	class:PV::HyPerConn
updateLocal_dW	src/connections/HyPerConn.cpp	/^void HyPerConn::updateLocal_dW() {$/;"	f	class:PV::HyPerConn
updatePV_StreamFilepos	src/io/fileio.cpp	/^long int updatePV_StreamFilepos(PV_Stream *pvstream) {$/;"	f	namespace:PV
updateRule_dW	src/connections/HyPerConn.cpp	/^float HyPerConn::updateRule_dW(float pre, float post) { return dWMax * pre * post; }$/;"	f	class:PV::HyPerConn
updateRule_dW	tests/PlasticConnTest/src/PlasticTestConn.cpp	/^float PlasticTestConn::updateRule_dW(float pre, float post) { return pre - post; }$/;"	f	class:PV::PlasticTestConn
updateSparsityTermDeriv_LogLatWTAGenLayer	src/layers/updateStateFunctions.h	/^int updateSparsityTermDeriv_LogLatWTAGenLayer($/;"	f
updateState	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^int BBFindConfRemapLayer::updateState(double t, double dt) {$/;"	f	class:BBFindConfRemapLayer
updateState	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^int ConvertFromTable::updateState(double timed, double dt)$/;"	f	class:ConvertFromTable
updateState	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^int MaskFromMemoryBuffer::updateState(double time, double dt)$/;"	f	class:MaskFromMemoryBuffer
updateState	src/connections/CloneConn.cpp	/^int CloneConn::updateState(double time, double dt) {$/;"	f	class:PV::CloneConn
updateState	src/connections/CopyConn.cpp	/^int CopyConn::updateState(double time, double dt) {$/;"	f	class:PV::CopyConn
updateState	src/connections/HyPerConn.cpp	/^int HyPerConn::updateState(double simTime, double dt) {$/;"	f	class:PV::HyPerConn
updateState	src/connections/TransposeConn.cpp	/^int TransposeConn::updateState(double time, double dt) {$/;"	f	class:PV::TransposeConn
updateState	src/connections/TransposePoolingConn.cpp	/^int TransposePoolingConn::updateState(double time, double dt) {$/;"	f	class:PV::TransposePoolingConn
updateState	src/connections/privateTransposeConn.cpp	/^int privateTransposeConn::updateState(double time, double dt) {$/;"	f	class:PV::privateTransposeConn
updateState	src/layers/ANNErrorLayer.cpp	/^int ANNErrorLayer::updateState(double time, double dt) {$/;"	f	class:PV::ANNErrorLayer
updateState	src/layers/ANNLayer.cpp	/^int ANNLayer::updateState(double time, double dt) {$/;"	f	class:PV::ANNLayer
updateState	src/layers/ANNSquaredLayer.cpp	/^int ANNSquaredLayer::updateState(double time, double dt) {$/;"	f	class:PV::ANNSquaredLayer
updateState	src/layers/ANNWhitenedLayer.cpp	/^int ANNWhitenedLayer::updateState(double time, double dt) {$/;"	f	class:PV::ANNWhitenedLayer
updateState	src/layers/BackgroundLayer.cpp	/^int BackgroundLayer::updateState(double timef, double dt) {$/;"	f	class:PV::BackgroundLayer
updateState	src/layers/BinningLayer.cpp	/^int BinningLayer::updateState(double timef, double dt) {$/;"	f	class:PV::BinningLayer
updateState	src/layers/CloneVLayer.cpp	/^int CloneVLayer::updateState(double timed, double dt) {$/;"	f	class:PV::CloneVLayer
updateState	src/layers/DropoutLayer.cpp	/^int DropoutLayer::updateState(double timestamp, double dt) {$/;"	f	class:PV::DropoutLayer
updateState	src/layers/FilenameParsingGroundTruthLayer.cpp	/^int FilenameParsingGroundTruthLayer::updateState(double time, double dt) {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
updateState	src/layers/GapLayer.cpp	/^int GapLayer::updateState($/;"	f	class:PV::GapLayer
updateState	src/layers/GapLayer.cpp	/^int GapLayer::updateState(double timef, double dt) {$/;"	f	class:PV::GapLayer
updateState	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::updateState(double time, double dt) {$/;"	f	class:PV::HyPerLCALayer
updateState	src/layers/HyPerLayer.cpp	/^int HyPerLayer::updateState(double timef, double dt) {$/;"	f	class:PV::HyPerLayer
updateState	src/layers/ISTALayer.cpp	/^int ISTALayer::updateState(double time, double dt) {$/;"	f	class:PV::ISTALayer
updateState	src/layers/ImageFromMemoryBuffer.cpp	/^int ImageFromMemoryBuffer::updateState(double time, double dt) {$/;"	f	class:PV::ImageFromMemoryBuffer
updateState	src/layers/InputLayer.cpp	/^int InputLayer::updateState(double time, double dt) {$/;"	f	class:PV::InputLayer
updateState	src/layers/KmeansLayer.cpp	/^int KmeansLayer::updateState(double time, double dt) {$/;"	f	class:PV::KmeansLayer
updateState	src/layers/LCALIFLayer.cpp	/^int LCALIFLayer::updateState(double timed, double dt) {$/;"	f	class:PV::LCALIFLayer
updateState	src/layers/LIF.cpp	/^int LIF::updateState(double time, double dt) {$/;"	f	class:PV::LIF
updateState	src/layers/LIFGap.cpp	/^int LIFGap::updateState(double time, double dt) {$/;"	f	class:PV::LIFGap
updateState	src/layers/LabelErrorLayer.cpp	/^int LabelErrorLayer::updateState(double time, double dt) {$/;"	f	class:PV::LabelErrorLayer
updateState	src/layers/LeakyIntegrator.cpp	/^int LeakyIntegrator::updateState(double timed, double dt) {$/;"	f	class:PV::LeakyIntegrator
updateState	src/layers/MaskLayer.cpp	/^int MaskLayer::updateState(double time, double dt) {$/;"	f	class:PV::MaskLayer
updateState	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::updateState(double time, double dt) {$/;"	f	class:PV::MomentumLCALayer
updateState	src/layers/PtwiseProductLayer.cpp	/^int PtwiseProductLayer::updateState(double timef, double dt) {$/;"	f	class:PV::PtwiseProductLayer
updateState	src/layers/PtwiseQuotientLayer.cpp	/^int PtwiseQuotientLayer::updateState(double timef, double dt) {$/;"	f	class:PV::PtwiseQuotientLayer
updateState	src/layers/RescaleLayer.cpp	/^int RescaleLayer::updateState(double timef, double dt) {$/;"	f	class:PV::RescaleLayer
updateState	src/layers/Retina.cpp	/^int Retina::updateState(double timed, double dt) {$/;"	f	class:PV::Retina
updateState	src/layers/RunningAverageLayer.cpp	/^int RunningAverageLayer::updateState(double timef, double dt) {$/;"	f	class:PV::RunningAverageLayer
updateState	src/layers/SegmentLayer.cpp	/^int SegmentLayer::updateState(double timef, double dt) {$/;"	f	class:PV::SegmentLayer
updateState	src/layers/Segmentify.cpp	/^int Segmentify::updateState(double timef, double dt) {$/;"	f	class:PV::Segmentify
updateState	src/layers/ShuffleLayer.cpp	/^int ShuffleLayer::updateState(double timef, double dt) {$/;"	f	class:PV::ShuffleLayer
updateState	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::updateState($/;"	f	class:PV::SigmoidLayer
updateState	src/layers/SigmoidLayer.cpp	/^int SigmoidLayer::updateState(double timef, double dt) {$/;"	f	class:PV::SigmoidLayer
updateState	src/layers/WTALayer.cpp	/^int WTALayer::updateState(double timef, double dt) {$/;"	f	class:PV::WTALayer
updateState	tests/AvgPoolTest/src/AvgPoolTestInputLayer.cpp	/^int AvgPoolTestInputLayer::updateState(double timef, double dt) {$/;"	f	class:PV::AvgPoolTestInputLayer
updateState	tests/AvgPoolTest/src/AvgPoolTestLayer.cpp	/^int AvgPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::AvgPoolTestLayer
updateState	tests/AvgPoolTest/src/GateAvgPoolTestLayer.cpp	/^int GateAvgPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::GateAvgPoolTestLayer
updateState	tests/BackgroundLayerTest/src/ComparisonLayer.cpp	/^int ComparisonLayer::updateState(double timef, double dt) {$/;"	f	class:PV::ComparisonLayer
updateState	tests/BinningLayerTest/src/BinningTestLayer.cpp	/^int BinningTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::BinningTestLayer
updateState	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^int FailBeforeExpectedStartTimeLayer::updateState(double simTime, double dt) {$/;"	f	class:FailBeforeExpectedStartTimeLayer
updateState	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^int DatastoreDelayTestLayer::updateState($/;"	f	class:PV::DatastoreDelayTestLayer
updateState	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^int DatastoreDelayTestLayer::updateState(double timed, double dt) {$/;"	f	class:PV::DatastoreDelayTestLayer
updateState	tests/ImageOffsetTest/src/ImageOffsetTestLayer.cpp	/^int ImageOffsetTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::ImageOffsetTestLayer
updateState	tests/ImageOffsetTest/src/ImagePvpOffsetTestLayer.cpp	/^int ImagePvpOffsetTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::ImagePvpOffsetTestLayer
updateState	tests/ImageSystemTest/src/ImagePvpTestLayer.cpp	/^int ImagePvpTestLayer::updateState(double time, double dt) {$/;"	f	class:PV::ImagePvpTestLayer
updateState	tests/ImageSystemTest/src/ImageTestLayer.cpp	/^int ImageTestLayer::updateState(double time, double dt) {$/;"	f	class:PV::ImageTestLayer
updateState	tests/ImageSystemTest/src/MoviePvpTestLayer.cpp	/^int MoviePvpTestLayer::updateState(double time, double dt) {$/;"	f	class:PV::MoviePvpTestLayer
updateState	tests/ImageSystemTest/src/MovieTestLayer.cpp	/^int MovieTestLayer::updateState(double time, double dt) {$/;"	f	class:PV::MovieTestLayer
updateState	tests/ImprintConnTest/src/ImprintConnTestInputLayer.cpp	/^int ImprintConnTestInputLayer::updateState(double timef, double dt) {$/;"	f	class:PV::ImprintConnTestInputLayer
updateState	tests/ImprintConnTest/src/TestLayer.cpp	/^int TestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::TestLayer
updateState	tests/LIFTest/src/AverageRateConn.cpp	/^int AverageRateConn::updateState(double timed, double dt) {$/;"	f	class:PV::AverageRateConn
updateState	tests/MPITest/src/MPITestLayer.cpp	/^int MPITestLayer::updateState(double timed, double dt) { return PV_SUCCESS; }$/;"	f	class:PV::MPITestLayer
updateState	tests/MaskLayerTest/src/MaskTestInputLayer.cpp	/^int MaskTestInputLayer::updateState(double timef, double dt) {$/;"	f	class:PV::MaskTestInputLayer
updateState	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^int MaskTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::MaskTestLayer
updateState	tests/MaxPoolTest/src/GateMaxPoolTestLayer.cpp	/^int GateMaxPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::GateMaxPoolTestLayer
updateState	tests/MaxPoolTest/src/MaxPoolTestLayer.cpp	/^int MaxPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::MaxPoolTestLayer
updateState	tests/PlasticConnTest/src/PlasticConnTestLayer.cpp	/^int PlasticConnTestLayer::updateState(double timef, double dt) { return PV_SUCCESS; }$/;"	f	class:PV::PlasticConnTestLayer
updateState	tests/SegmentTest/src/SegmentTestLayer.cpp	/^int SegmentTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::SegmentTestLayer
updateState	tests/SegmentTest/src/SegmentifyTest.cpp	/^int SegmentifyTest::updateState(double timef, double dt) {$/;"	f	class:PV::SegmentifyTest
updateState	tests/Shared/CPTestInputLayer.cpp	/^int CPTestInputLayer::updateState(double timed, double dt) {$/;"	f	class:PV::CPTestInputLayer
updateState	tests/Shared/Example.cpp	/^int Example::updateState(double time, double dt) {$/;"	f	class:PV::Example
updateState	tests/ShrunkenPatchTest/src/ShrunkenPatchTestLayer.cpp	/^int ShrunkenPatchTestLayer::updateState(double timed, double dt) { return PV_SUCCESS; }$/;"	f	class:PV::ShrunkenPatchTestLayer
updateState	tests/SumPoolTest/src/GateSumPoolTestLayer.cpp	/^int GateSumPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::GateSumPoolTestLayer
updateState	tests/SumPoolTest/src/SumPoolTestInputLayer.cpp	/^int SumPoolTestInputLayer::updateState(double timef, double dt) {$/;"	f	class:PV::SumPoolTestInputLayer
updateState	tests/SumPoolTest/src/SumPoolTestLayer.cpp	/^int SumPoolTestLayer::updateState(double timef, double dt) {$/;"	f	class:PV::SumPoolTestLayer
updateState	tests/TriggerTest/src/TriggerTestConn.cpp	/^int TriggerTestConn::updateState(double time, double dt) {$/;"	f	class:PV::TriggerTestConn
updateState	tests/TriggerTest/src/TriggerTestLayer.cpp	/^int TriggerTestLayer::updateState(double time, double dt) {$/;"	f	class:PV::TriggerTestLayer
updateState	tests/test_constant_input/src/TestImage.cpp	/^int TestImage::updateState(double timed, double dt) { return PV_SUCCESS; }$/;"	f	class:PV::TestImage
updateStateGpu	src/layers/HyPerLCALayer.cpp	/^int HyPerLCALayer::updateStateGpu(double time, double dt) {$/;"	f	class:PV::HyPerLCALayer
updateStateGpu	src/layers/HyPerLayer.cpp	/^int HyPerLayer::updateStateGpu(double timef, double dt) {$/;"	f	class:PV::HyPerLayer
updateStateGpu	src/layers/ISTALayer.cpp	/^int ISTALayer::updateStateGpu(double time, double dt) {$/;"	f	class:PV::ISTALayer
updateStateGpu	src/layers/MomentumLCALayer.cpp	/^int MomentumLCALayer::updateStateGpu(double time, double dt) {$/;"	f	class:PV::MomentumLCALayer
updateStateGpu	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.cpp	/^int FailBeforeExpectedStartTimeLayer::updateStateGpu(double simTime, double dt) {$/;"	f	class:FailBeforeExpectedStartTimeLayer
updateV_ANNDivInh	src/layers/updateStateFunctions.h	/^int updateV_ANNDivInh(int nbatch, int numNeurons, MEM_GLOBAL float *V, MEM_GLOBAL float *GSynHead) {$/;"	f
updateV_ANNErrorLayer	src/layers/updateStateFunctions.h	/^int updateV_ANNErrorLayer($/;"	f
updateV_ANNLayer_threshminmax	src/layers/updateStateFunctions.h	/^int updateV_ANNLayer_threshminmax($/;"	f
updateV_ANNLayer_vertices	src/layers/updateStateFunctions.h	/^int updateV_ANNLayer_vertices($/;"	f
updateV_ANNSquaredLayer	src/layers/updateStateFunctions.h	/^int updateV_ANNSquaredLayer($/;"	f
updateV_ANNWhitenedLayer	src/layers/updateStateFunctions.h	/^int updateV_ANNWhitenedLayer($/;"	f
updateV_CPTestInputLayer	tests/Shared/CPTest_updateStateFunctions.h	/^static inline int updateV_CPTestInputLayer(int nbatch, int numNeurons, float *V) {$/;"	f
updateV_DatastoreDelayTestLayer	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^int DatastoreDelayTestLayer::updateV_DatastoreDelayTestLayer($/;"	f	class:PV::DatastoreDelayTestLayer
updateV_GapLayer	src/layers/updateStateFunctions.h	/^int updateV_GapLayer() {$/;"	f
updateV_HyPerLCALayer	src/layers/updateStateFunctions.h	/^int updateV_HyPerLCALayer($/;"	f
updateV_ISTALayer	src/layers/updateStateFunctions.h	/^int updateV_ISTALayer($/;"	f
updateV_LabelErrorLayer	src/layers/updateStateFunctions.h	/^int updateV_LabelErrorLayer($/;"	f
updateV_MomentumLCALayer	src/layers/updateStateFunctions.h	/^int updateV_MomentumLCALayer($/;"	f
updateV_PoolingANNLayer	src/layers/updateStateFunctions.h	/^int updateV_PoolingANNLayer($/;"	f
updateV_PtwiseLinearTransferLayer	src/layers/updateStateFunctions.h	/^int updateV_PtwiseLinearTransferLayer($/;"	f
updateV_PtwiseProductLayer	src/layers/updateStateFunctions.h	/^int updateV_PtwiseProductLayer($/;"	f
updateV_PtwiseQuotientLayer	src/layers/updateStateFunctions.h	/^int updateV_PtwiseQuotientLayer($/;"	f
updateV_SigmoidLayer	src/layers/updateStateFunctions.h	/^int updateV_SigmoidLayer() {$/;"	f
updateWeights	src/connections/CopyConn.cpp	/^int CopyConn::updateWeights(int axonID) {$/;"	f	class:PV::CopyConn
updateWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::updateWeights(int arborId) {$/;"	f	class:PV::HyPerConn
updateWeights	src/connections/IdentConn.hpp	/^   virtual int updateWeights(int axonID) { return PV_SUCCESS; }$/;"	f	class:PV::IdentConn
updateWeights	src/connections/ImprintConn.cpp	/^int ImprintConn::updateWeights(int arbor_ID) {$/;"	f	class:PV::ImprintConn
updateWeights	src/connections/MomentumConn.cpp	/^int MomentumConn::updateWeights(int arborId) {$/;"	f	class:PV::MomentumConn
updateWeights	tests/Shared/VaryingHyPerConn.cpp	/^int VaryingHyPerConn::updateWeights(int axonId) {$/;"	f	class:PV::VaryingHyPerConn
updateWeightsDelayed	src/connections/HyPerConn.cpp	/^void HyPerConn::updateWeightsDelayed(double simTime, double dt) {$/;"	f	class:PV::HyPerConn
updateWeightsImmediate	src/connections/HyPerConn.cpp	/^void HyPerConn::updateWeightsImmediate(double simTime, double dt) {$/;"	f	class:PV::HyPerConn
update_dW	src/connections/HyPerConn.cpp	/^int HyPerConn::update_dW(int arborID) {$/;"	f	class:PV::HyPerConn
update_dW	src/connections/ImprintConn.cpp	/^int ImprintConn::update_dW(int arborID) {$/;"	f	class:PV::ImprintConn
update_timer	src/connections/HyPerConn.hpp	/^   Timer *update_timer;$/;"	m	class:PV::HyPerConn
update_timer	src/layers/HyPerLayer.hpp	/^   Timer *update_timer;$/;"	m	class:PV::HyPerLayer
updatedDeviceActivity	src/layers/HyPerLayer.hpp	/^   bool updatedDeviceActivity;$/;"	m	class:PV::HyPerLayer
updatedDeviceDatastore	src/layers/HyPerLayer.hpp	/^   bool updatedDeviceDatastore;$/;"	m	class:PV::HyPerLayer
updatedDeviceGSyn	src/layers/HyPerLayer.hpp	/^   bool updatedDeviceGSyn;$/;"	m	class:PV::HyPerLayer
updategKurvePreNgKurvePost	src/weightinit/InitCocircWeightsParams.cpp	/^void InitCocircWeightsParams::updategKurvePreNgKurvePost(float cocircKurve_shift) {$/;"	f	class:PV::InitCocircWeightsParams
usage	src/io/io.cpp	/^void usage() {$/;"	f	namespace:PV
useListOfArborFiles	src/connections/HyPerConn.hpp	/^   bool useListOfArborFiles;$/;"	m	class:PV::HyPerConn
useListOfArborFiles	src/weightinit/InitWeightsParams.hpp	/^   bool useListOfArborFiles;$/;"	m	class:PV::InitWeightsParams
useMask	src/connections/HyPerConn.hpp	/^   bool useMask;$/;"	m	class:PV::HyPerConn
useMirrorBCs	src/layers/HyPerLayer.hpp	/^   bool useMirrorBCs() { return this->mirrorBCflag; }$/;"	f	class:PV::HyPerLayer
use_last	src/utils/cl_random.h	/^   int use_last;$/;"	m	struct:box_muller_state
usingSharedWeights	src/connections/HyPerConn.hpp	/^   inline bool usingSharedWeights() { return sharedWeights; }$/;"	f	class:PV::HyPerConn
v	src/io/stb_image.h	/^      int h, v;$/;"	m	struct:__anon9::__anon10
v_convAlgo	src/cudakernels/CudaRecvPost.hpp	/^   \/* cudnnConvolutionFwdAlgo_t* *\/ void *v_convAlgo;$/;"	m	struct:PVCuda::recv_post_params
v_convDescriptor	src/cudakernels/CudaRecvPost.hpp	/^   \/* cudnnConvolutionDescriptor_t *\/ void *v_convDescriptor;$/;"	m	struct:PVCuda::recv_post_params
v_filterDescriptor	src/cudakernels/CudaRecvPost.hpp	/^   \/* cudnnFilterDescriptor_t *\/ void *v_filterDescriptor;$/;"	m	struct:PVCuda::recv_post_params
v_inputDescriptor	src/cudakernels/CudaRecvPost.hpp	/^   \/* cudnnTensorDescriptor_t *\/ void *v_inputDescriptor;$/;"	m	struct:PVCuda::recv_post_params
v_outputDescriptor	src/cudakernels/CudaRecvPost.hpp	/^   \/* cudnnTensorDescriptor_t *\/ void *v_outputDescriptor;$/;"	m	struct:PVCuda::recv_post_params
val	python/analysis_parse.py	/^                val = findregex(["(?<=" + j + ").+", "-?\\w+(\\.\\w+)?"],k)$/;"	v
val	tests/test_constant_input/src/TestImage.hpp	/^   float val;$/;"	m	class:PV::TestImage
valToString	parameterWrapper/PVModule.lua	/^local function valToString(paramStringTable, val)$/;"	f
validate_uint32	src/io/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32) == 4 ? 1 : -1];$/;"	t
value	src/io/PVParams.cpp	/^double PVParams::value($/;"	f	class:PV::PVParams
value	src/io/PVParams.cpp	/^double PVParams::value(const char *groupName, const char *paramName) {$/;"	f	class:PV::PVParams
value	src/io/PVParams.cpp	/^double ParameterGroup::value(const char *name) {$/;"	f	class:PV::ParameterGroup
value	src/io/PVParams.hpp	/^   double value() {$/;"	f	class:PV::Parameter
value	src/io/fileio.hpp	/^   float value;$/;"	m	struct:PV::indexvaluepair_
value	src/io/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon12
value	src/structures/SparseList.hpp	/^      T value;$/;"	m	struct:PV::SparseList::__anon1
valueBC	src/layers/HyPerLayer.hpp	/^   float valueBC; \/\/ If mirrorBCflag is false, the value of A to fill extended cells with$/;"	m	class:PV::HyPerLayer
valueDblPtr	src/io/PVParams.hpp	/^   const double *valueDblPtr() {$/;"	f	class:PV::Parameter
valueDescription	src/probes/QuotientColProbe.hpp	/^   char *valueDescription; \/\/ A string description of the quantity calculated by$/;"	m	class:PV::QuotientColProbe
valueInt	src/io/PVParams.cpp	/^int PVParams::valueInt($/;"	f	class:PV::PVParams
valueInt	src/io/PVParams.cpp	/^int PVParams::valueInt(const char *groupName, const char *paramName) {$/;"	f	class:PV::PVParams
valuePtr	src/io/PVParams.hpp	/^   const float *valuePtr() {$/;"	f	class:PV::Parameter
values	python/pvtools/pvpFile.py	/^    values = np.zeros((2, 32, 32, 3))$/;"	v	class:pvpOpen
values	src/io/PVParams.hpp	/^   float *values;$/;"	m	class:PV::ParameterArray
values	src/io/stb_image.h	/^   stbi_uc values[256];$/;"	m	struct:__anon8
valuesDbl	src/io/PVParams.hpp	/^   double *valuesDbl;$/;"	m	class:PV::ParameterArray
valuesIncluded	src/utils/BufferUtilsPvp.hpp	/^   bool valuesIncluded;$/;"	m	struct:PV::BufferUtils::SparseFileTable
valuesNumber	src/io/PVParams.hpp	/^   double *valuesNumber;$/;"	m	class:PV::ParameterSweep
valuesString	src/io/PVParams.hpp	/^   char **valuesString;$/;"	m	class:PV::ParameterSweep
verifyConnValue	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^bool MomentumConnSimpleCheckpointerTestProbe::verifyConnValue($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
verifyConnValue	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^bool MomentumConnViscosityCheckpointerTestProbe::verifyConnValue($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
verifyConnection	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^bool HyPerConnCheckpointerTestProbe::verifyConnection($/;"	f	class:HyPerConnCheckpointerTestProbe
verifyConnection	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^bool MomentumConnSimpleCheckpointerTestProbe::verifyConnection($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
verifyConnection	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^bool MomentumConnViscosityCheckpointerTestProbe::verifyConnection($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
verifyDirectory	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::verifyDirectory(char const *directory, std::string const &description) {$/;"	f	class:PV::Checkpointer
verifyEqual	tests/TransposeConnTest/src/TransposeConnTest.cpp	/^int verifyEqual($/;"	f
verifyEqual	tests/TransposeHyPerConnTest/src/TransposeHyPerConnTest.cpp	/^int verifyEqual($/;"	f
verifyFlags	src/io/FileStream.cpp	/^void FileStream::verifyFlags(const char *caller) {$/;"	f	class:PV::FileStream
verifyLayer	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^bool HyPerConnCheckpointerTestProbe::verifyLayer($/;"	f	class:HyPerConnCheckpointerTestProbe
verifyLayer	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^bool MomentumConnSimpleCheckpointerTestProbe::verifyLayer($/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
verifyLayer	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^bool MomentumConnViscosityCheckpointerTestProbe::verifyLayer($/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
verifyLayer	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^bool PoolingConnCheckpointerTestProbe::verifyLayer($/;"	f	class:PoolingConnCheckpointerTestProbe
verifyLoc	tests/test_mpi_specifyrowscolumns/src/test_mpi_specifyrowscolumns.cpp	/^int verifyLoc(PV::HyPerCol *hc, int rows, int columns) {$/;"	f
verifyWrites	src/include/pv_types.h	/^   int verifyWrites;$/;"	m	struct:PV_Stream_
verticesA	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *verticesA;$/;"	m	struct:PVCuda::HyPerLCAParams
verticesA	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *verticesA;$/;"	m	struct:PVCuda::MomentumLCAParams
verticesA	src/layers/ANNLayer.hpp	/^   float *verticesA = nullptr;$/;"	m	class:PV::ANNLayer
verticesListInParams	src/layers/ANNLayer.hpp	/^   bool verticesListInParams =$/;"	m	class:PV::ANNLayer
verticesV	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *verticesV;$/;"	m	struct:PVCuda::HyPerLCAParams
verticesV	src/cudakernels/CudaUpdateStateFunctions.hpp	/^   float *verticesV;$/;"	m	struct:PVCuda::MomentumLCAParams
verticesV	src/layers/ANNLayer.hpp	/^   float *verticesV = nullptr;$/;"	m	class:PV::ANNLayer
view	python/pvtools/display.py	/^def view(data,frame=0):$/;"	f
voidptr	src/arch/mpi/mpi.h	/^typedef void *voidptr;$/;"	t
vs	src/io/stb_image.h	/^   int hs, vs; \/\/ expansion factor in each axis$/;"	m	struct:__anon11
w	python/analysis_parse.py	/^w = []$/;"	v
w	src/io/stb_image.h	/^   int w, h;$/;"	m	struct:__anon20
w2	src/io/stb_image.h	/^      int x, y, w2, h2;$/;"	m	struct:__anon9::__anon10
wDataStart	src/connections/HyPerConn.hpp	/^   float **wDataStart; \/\/ now that data for all patches are allocated to one continuous block of$/;"	m	class:PV::HyPerConn
wGaussMean	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^   float wGaussMean;$/;"	m	class:PV::InitGaussianRandomWeightsParams
wGaussStdev	src/weightinit/InitGaussianRandomWeightsParams.hpp	/^   float wGaussStdev;$/;"	m	class:PV::InitGaussianRandomWeightsParams
wMap	python/probe_analysis/noArborReadProbe.py	/^    wMap = reshape(wMap,(sqrt(numWeights),sqrt(numWeights))) #reshape(vect, (nRows,nCols)), writes cols first$/;"	v
wMap	python/probe_analysis/noArborReadProbe.py	/^    wMap = zeros(numWeights)$/;"	v
wMap	python/probe_analysis/readProbe.py	/^                wMap = [[mean(workingLines[arborID][neuronID][:]) for neuronID in range(numPreNeurons[tok])] for arborID in range(numArbors[tok])] #List of maps, one for each arbor$/;"	v
wMap	python/probe_analysis/readProbe.py	/^                wMap = [reshape(array(wMap[arborID]),(sqrt(numPreNeurons[tok]),sqrt(numPreNeurons[tok]))) for arborID in range(numArbors[tok])] #reshape(vect, (nRows,nCols)), writes cols first$/;"	v
wMax	src/connections/HyPerConn.hpp	/^   float wMax;$/;"	m	class:PV::HyPerConn
wMin	src/connections/HyPerConn.hpp	/^   float wMin;$/;"	m	class:PV::HyPerConn
wPatches	src/connections/HyPerConn.hpp	/^   PVPatch ***wPatches; \/\/ list of weight patches, one set per arbor$/;"	m	class:PV::HyPerConn
wPostDataStart	src/connections/HyPerConn.hpp	/^   float **wPostDataStart;$/;"	m	class:PV::HyPerConn
wPostDataStartp	src/connections/HyPerConn.hpp	/^   float ***wPostDataStartp; \/\/ Pointer to wDataStart, but from the postsynaptic perspective$/;"	m	class:PV::HyPerConn
wPostPatches	src/connections/HyPerConn.hpp	/^   PVPatch ***wPostPatches; \/\/ post-synaptic linkage of weights \/\/ This is being deprecated in favor$/;"	m	class:PV::HyPerConn
wPostPatchesp	src/connections/HyPerConn.hpp	/^   PVPatch ****wPostPatchesp; \/\/ Pointer to wPatches, but from the postsynaptic perspective$/;"	m	class:PV::HyPerConn
wPostTime	src/connections/HyPerConn.hpp	/^   double wPostTime; \/\/ time of last conversion to wPostPatches$/;"	m	class:PV::HyPerConn
w_lores	src/io/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon11
wait	src/columns/Publisher.cpp	/^int Publisher::wait(int delay \/*default 0*\/) {$/;"	f	class:PV::Publisher
wait	src/utils/BorderExchange.cpp	/^int BorderExchange::wait(std::vector<MPI_Request> &req) {$/;"	f	class:PV::BorderExchange
waitOnPublish	src/layers/HyPerLayer.cpp	/^int HyPerLayer::waitOnPublish(Communicator *comm) {$/;"	f	class:PV::HyPerLayer
wait_dWReduceRequests	src/connections/HyPerConn.cpp	/^void HyPerConn::wait_dWReduceRequests() {$/;"	f	class:PV::HyPerConn
warnDefaultNfp	src/connections/HyPerConn.hpp	/^   bool warnDefaultNfp; \/\/ Whether to print a warning if the default nfp is used.$/;"	m	class:PV::HyPerConn
warnUnread	src/io/PVParams.cpp	/^int PVParams::warnUnread() {$/;"	f	class:PV::PVParams
warnUnread	src/io/PVParams.cpp	/^int ParameterGroup::warnUnread() {$/;"	f	class:PV::ParameterGroup
warpSize	src/cudakernels/CudaRecvPost.hpp	/^   int warpSize;$/;"	m	struct:PVCuda::recv_post_params
weightInitTypeString	src/connections/HyPerConn.hpp	/^   char *weightInitTypeString;$/;"	m	class:PV::HyPerConn
weightInitializer	src/connections/HyPerConn.hpp	/^   InitWeights *weightInitializer;$/;"	m	class:PV::HyPerConn
weightMap	python/probe_analysis/noArborReadProbe.py	/^weightMap   = False  #if True, display a weight map$/;"	v
weightMap	python/probe_analysis/readProbe.py	/^        weightMap = False$/;"	v
weightMap	python/probe_analysis/readProbeParams.py	/^weightMap   = True #Needs 'weight*' in data dictionary$/;"	v
weightParams	src/weightinit/InitWeights.hpp	/^   InitWeightsParams *weightParams;$/;"	m	class:PV::InitWeights
weightUpdatePeriod	src/connections/HyPerConn.hpp	/^   double weightUpdatePeriod;$/;"	m	class:PV::HyPerConn
weightUpdateTime	src/connections/HyPerConn.hpp	/^   double weightUpdateTime;$/;"	m	class:PV::HyPerConn
weights	src/connections/HyPerConn.hpp	/^   inline PVPatch **weights(int arborId = 0) { return wPatches[arborId]; }$/;"	f	class:PV::HyPerConn
weights	src/cudakernels/CudaRecvPost.hpp	/^   float *weights;$/;"	m	struct:PVCuda::recv_post_params
weights	src/cudakernels/CudaRecvPre.hpp	/^   float *weights;$/;"	m	struct:PVCuda::recv_pre_params
weightsBufNum	src/cudakernels/CudaRecvPost.hpp	/^   size_t weightsBufNum;$/;"	m	struct:PVCuda::recv_post_params
west	src/columns/Communicator.cpp	/^int Communicator::west(int commRow, int commColumn) {$/;"	f	class:PV::Communicator
west	src/utils/BorderExchange.cpp	/^int BorderExchange::west(int row, int column, int numRows, int numColumns) {$/;"	f	class:PV::BorderExchange
width	demos/HeatMapLocalization/src/BBFind.hpp	/^            int x,  y, width, height;$/;"	m	class:BBFind::Rectangle
workingLines	python/probe_analysis/noArborReadProbe.py	/^        workingLines = [[float(x[1]) for x in lineSp if x[0][:min(len(x[0]), len(tok))] == tok] for lineSp in workingLines]$/;"	v
workingLines	python/probe_analysis/noArborReadProbe.py	/^    workingLines = lines[:]$/;"	v
workingLines	python/probe_analysis/readProbe.py	/^                workingLines = [[[[preNeuronVal $/;"	v
workingLines	python/probe_analysis/readProbe.py	/^                workingLines = [[[workingLines[arborID][preNeuron][timeStep]$/;"	v
workingLines	python/probe_analysis/readProbe.py	/^            workingLines = [[float(part[1]) for part in line if part[0] == tok] for line in workingLines]$/;"	v
workingLines	python/probe_analysis/readProbe.py	/^            workingLines = [[float(part[1]) for part in line if part[0].split('_')[0] == tok] for line in workingLines]$/;"	v
workingLines	python/probe_analysis/readProbe.py	/^        workingLines = [[[workingLines[timeIndex][preIndex] for timeIndex in xrange(numTimeSteps)] for preIndex in range(numPreNeurons[tok]*arborID,numPreNeurons[tok]*arborID+numPreNeurons[tok])] for arborID in xrange(numArbors[tok])]$/;"	v
workingLines	python/probe_analysis/readProbe.py	/^        workingLines = lines[:] #Make a single copy of the lines, use this copy throughout the loop$/;"	v
workspaceDir	python/probe_analysis/readProbeParams.py	/^workspaceDir  = "\/Users\/dpaiton\/Documents\/Work\/LANL\/workspace" #Dylan Mac$/;"	v
workspaceSize	src/cudakernels/CudaRecvPost.hpp	/^   size_t *workspaceSize;$/;"	m	struct:PVCuda::recv_post_params
worldRank	src/io/PVParams.hpp	/^   int worldRank;$/;"	m	class:PV::PVParams
worldSize	src/io/PVParams.hpp	/^   int worldSize;$/;"	m	class:PV::PVParams
write	python/pvtools/pvpFile.py	/^    def write(self, data, shape=None, useExistingHeader=False):$/;"	m	class:pvpOpen
write	src/checkpointing/CheckpointEntry.hpp	/^   write(std::string const &checkpointDirectory, double simTime, bool verifyWritesFlag) const {$/;"	f	class:PV::CheckpointEntry
write	src/checkpointing/CheckpointEntryRandState.cpp	/^void CheckpointEntryRandState::write($/;"	f	class:PV::CheckpointEntryRandState
write	src/checkpointing/CheckpointEntryWeightPvp.cpp	/^void CheckpointEntryWeightPvp::write($/;"	f	class:PV::CheckpointEntryWeightPvp
write	src/checkpointing/CheckpointableFileStream.cpp	/^void CheckpointableFileStream::write(void const *data, long length) {$/;"	f	class:PV::CheckpointableFileStream
write	src/components/AdaptiveTimeScaleController.cpp	/^void CheckpointEntryTimeScaleInfo::write($/;"	f	class:PV::CheckpointEntryTimeScaleInfo
write	src/io/FileStream.cpp	/^void FileStream::write(void const *data, long length) {$/;"	f	class:PV::FileStream
write	src/structures/Image.cpp	/^void Image::write(std::string filename) {$/;"	f	class:PV::Image
writeActivity	src/io/fileio.cpp	/^int writeActivity(FileStream *fileStream, Communicator *comm, double timed, PVLayerCube *cube) {$/;"	f	namespace:PV
writeActivity	src/layers/HyPerLayer.cpp	/^int HyPerLayer::writeActivity(double timed) {$/;"	f	class:PV::HyPerLayer
writeActivityCalls	src/layers/HyPerLayer.hpp	/^   int writeActivityCalls; \/\/ Number of calls to writeActivity (written to nbands in the header of$/;"	m	class:PV::HyPerLayer
writeActivitySparse	src/io/fileio.cpp	/^int writeActivitySparse($/;"	f	namespace:PV
writeActivitySparse	src/layers/HyPerLayer.cpp	/^int HyPerLayer::writeActivitySparse(double timed, bool includeValues) {$/;"	f	class:PV::HyPerLayer
writeActivitySparseCalls	src/layers/HyPerLayer.hpp	/^   int writeActivitySparseCalls; \/\/ Number of calls to writeActivitySparse (written to nbands in the$/;"	m	class:PV::HyPerLayer
writeCompressedCheckpoints	src/connections/HyPerConn.hpp	/^   bool writeCompressedCheckpoints; \/\/ similar to writeCompressedWeights, but for checkpointWrite$/;"	m	class:PV::HyPerConn
writeCompressedWeights	src/connections/HyPerConn.hpp	/^   bool writeCompressedWeights; \/\/ if true, outputState writes weights with 8-bit precision; if$/;"	m	class:PV::HyPerConn
writeData	python/deprecated/writePvpFile.py	/^def writeData(filestream, inmat, idx):$/;"	f
writeData	python/tmp/writePvpFile.py	/^def writeData(filestream, inmat, idx):$/;"	f
writeData	tests/ReceiveFromPostTest/scripts/writePvpFile.py	/^def writeData(filestream, inmat, idx):$/;"	f
writeHeader	python/pvtools/pvpFile.py	/^    def writeHeader(self):$/;"	m	class:pvpOpen
writeHeaderFile	python/deprecated/writePvpFile.py	/^def writeHeaderFile(filestream, shape, numFrames):$/;"	f
writeHeaderFile	python/tmp/writePvpFile.py	/^def writeHeaderFile(filestream, shape, numFrames):$/;"	f
writeHeaderFile	tests/ReceiveFromPostTest/scripts/writePvpFile.py	/^def writeHeaderFile(filestream, shape, numFrames):$/;"	f
writeMontage	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^void BBFindConfRemapProbe::writeMontage() {$/;"	f	class:BBFindConfRemapProbe
writeMontage	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^int LocalizationProbe::writeMontage() {$/;"	f	class:LocalizationProbe
writeParam	src/io/PVParams.cpp	/^void PVParams::writeParam<bool>(const char *paramName, bool paramValue) {$/;"	f	class:PV::PVParams
writeParam	src/io/PVParams.hpp	/^void PVParams::writeParam(const char *paramName, T paramValue) {$/;"	f	class:PV::PVParams
writeParamArray	src/io/PVParams.hpp	/^void PVParams::writeParamArray(const char *paramName, const T *array, int arraysize) {$/;"	f	class:PV::PVParams
writeParamString	src/io/PVParams.cpp	/^void PVParams::writeParamString(const char *paramName, const char *svalue) {$/;"	f	class:PV::PVParams
writePostSynapticWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::writePostSynapticWeights(double timef, bool last) {$/;"	f	class:PV::HyPerConn
writeRandState	src/io/randomstateio.cpp	/^void writeRandState($/;"	f	namespace:PV
writeSparseValues	src/layers/HyPerLayer.hpp	/^   bool writeSparseValues; \/\/ if true, sparseLayer writes index-value pairs.  if false, sparseLayer$/;"	m	class:PV::HyPerLayer
writeState	src/probes/PointLIFProbe.cpp	/^int PointLIFProbe::writeState(double timed) {$/;"	f	class:PV::PointLIFProbe
writeState	src/probes/PointProbe.cpp	/^int PointProbe::writeState(double timef) {$/;"	f	class:PV::PointProbe
writeStep	src/connections/HyPerConn.hpp	/^   double writeStep; \/\/ output time interval$/;"	m	class:PV::HyPerConn
writeStep	src/layers/HyPerLayer.hpp	/^   double writeStep; \/\/ output time interval$/;"	m	class:PV::HyPerLayer
writeStep	src/probes/PointLIFProbe.hpp	/^   double writeStep; \/\/ output time interval$/;"	m	class:PV::PointLIFProbe
writeTextWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::writeTextWeights(const char *filename, int k) {$/;"	f	class:PV::HyPerConn
writeTextWeightsExtra	src/connections/HyPerConn.hpp	/^   virtual int writeTextWeightsExtra(PrintStream *pvstream, int k, int arborID) {$/;"	f	class:PV::HyPerConn
writeTime	src/connections/HyPerConn.hpp	/^   double writeTime; \/\/ time of next output, initialized in params file parameter initialWriteTime$/;"	m	class:PV::HyPerConn
writeTime	src/layers/HyPerLayer.hpp	/^   double writeTime; \/\/ time of next output$/;"	m	class:PV::HyPerLayer
writeTime	src/probes/PointLIFProbe.hpp	/^   double writeTime; \/\/ time of next output$/;"	m	class:PV::PointLIFProbe
writeTimer	src/probes/BaseProbe.hpp	/^   virtual int writeTimer(PrintStream &stream) { return PV_SUCCESS; }$/;"	f	class:PV::BaseProbe
writeTimers	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::writeTimers(PrintStream &stream) const {$/;"	f	class:PV::Checkpointer
writeTimers	src/checkpointing/Checkpointer.cpp	/^void Checkpointer::writeTimers(std::string const &directory) {$/;"	f	class:PV::Checkpointer
writeTimestepInfo	src/components/AdaptiveTimeScaleController.cpp	/^void AdaptiveTimeScaleController::writeTimestepInfo(double timeValue, PrintStream &stream) {$/;"	f	class:PV::AdaptiveTimeScaleController
writeWeights	src/connections/CloneConn.hpp	/^   virtual int writeWeights(const char *filename) { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
writeWeights	src/connections/CloneConn.hpp	/^   virtual int writeWeights(double time, bool last = false) { return PV_SUCCESS; }$/;"	f	class:PV::CloneConn
writeWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::writeWeights($/;"	f	class:PV::HyPerConn
writeWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::writeWeights(const char *filename) {$/;"	f	class:PV::HyPerConn
writeWeights	src/connections/HyPerConn.cpp	/^int HyPerConn::writeWeights(double timed, bool last) {$/;"	f	class:PV::HyPerConn
writeWeights	src/io/fileio.cpp	/^int writeWeights($/;"	f	namespace:PV
writeable	src/io/FileStream.hpp	/^   bool writeable() { return mFStream.flags() & std::ios_base::out; }$/;"	f	class:PV::FileStream
writepvpfile	python/deprecated/max_writepvpfile.py	/^def writepvpfile(pvObject, filename):$/;"	f
writepvpfile	python/pvtools/writepvpfile.py	/^def writepvpfile(filename, data, shape=None, useExistingHeader=False):$/;"	f
writepvpsharedweightfile	mlab/util/writepvpsharedweightfile.m	/^function writepvpsharedweightfile(filename, data)$/;"	f
writepvpsparseactivityfile	mlab/util/writepvpsparseactivityfile.m	/^function writepvpsparseactivityfile(filename, data, nx, ny, nf)$/;"	f
writepvpweightfile	mlab/util/writepvpweightfile.m	/^function writepvpweightfile(filename, data, nxGlobalPre, nyGlobalPre, nfPre, nbPre, nxGlobalPost, nyGlobalPost, postweightsflag)$/;"	f
writingToFile	src/probes/BaseProbe.hpp	/^   bool writingToFile; \/\/ true outputStream is a FileStream$/;"	m	class:PV::BaseProbe
x	demos/HeatMapLocalization/src/BBFind.hpp	/^            int x,  y, width, height;$/;"	m	class:BBFind::Rectangle
x	src/io/stb_image.h	/^      int x, y, w2, h2;$/;"	m	struct:__anon9::__anon10
xDistHeadPreUnits	src/weightinit/InitWeightsParams.hpp	/^   float xDistHeadPreUnits;$/;"	m	class:PV::InitWeightsParams
xLoc	src/probes/PointProbe.hpp	/^   int xLoc;$/;"	m	class:PV::PointProbe
xOriginGlobal	src/utils/conversions.h	/^static inline float xOriginGlobal(int xScaleLog2) { return 0.5f * deltaX(xScaleLog2); }$/;"	f
xPatchSize	src/connections/HyPerConn.hpp	/^   inline int xPatchSize() { return nxp; }$/;"	f	class:PV::HyPerConn
xPatchStride	src/connections/HyPerConn.hpp	/^   inline int xPatchStride() { return sxp; }$/;"	f	class:PV::HyPerConn
xPosGlobal	src/utils/conversions.h	/^static inline float xPosGlobal(int kGlobal, int xScaleLog2, int nxGlobal, int nyGlobal, int nf) {$/;"	f
xPostPatchSize	src/connections/HyPerConn.hpp	/^   inline int xPostPatchSize() { return nxpPost; }$/;"	f	class:PV::HyPerConn
xScale	src/include/pv_types.h	/^   int xScale, yScale;$/;"	m	struct:PVLayer_
xVals	python/probe_analysis/noArborReadProbe.py	/^            xVals = {}$/;"	v
xVals	python/probe_analysis/noArborReadProbe.py	/^    xVals = arange(0,maxWeight,maxWeight\/len(counts))$/;"	v
xVals	python/probe_analysis/readProbe.py	/^                    xVals = {}$/;"	v
xmargin	src/layers/HyPerLayer.hpp	/^   int xmargin, ymargin;$/;"	m	class:PV::HyPerLayer
y	demos/HeatMapLocalization/src/BBFind.hpp	/^            int x,  y, width, height;$/;"	m	class:BBFind::Rectangle
y	src/io/stb_image.h	/^      int x, y, w2, h2;$/;"	m	struct:__anon9::__anon10
yDistHeadPreUnits	src/weightinit/InitWeightsParams.hpp	/^   float yDistHeadPreUnits;$/;"	m	class:PV::InitWeightsParams
yLoc	src/probes/PointProbe.hpp	/^   int yLoc;$/;"	m	class:PV::PointProbe
yOriginGlobal	src/utils/conversions.h	/^static inline float yOriginGlobal(int yScaleLog2) { return 0.5f * deltaY(yScaleLog2); }$/;"	f
yPatchSize	src/connections/HyPerConn.hpp	/^   inline int yPatchSize() { return nyp; }$/;"	f	class:PV::HyPerConn
yPatchStride	src/connections/HyPerConn.hpp	/^   inline int yPatchStride() { return syp; }$/;"	f	class:PV::HyPerConn
yPosGlobal	src/utils/conversions.h	/^static inline float yPosGlobal(int kGlobal, int yScaleLog2, int nxGlobal, int nyGlobal, int nf) {$/;"	f
yPostPatchSize	src/connections/HyPerConn.hpp	/^   inline int yPostPatchSize() { return nypPost; }$/;"	f	class:PV::HyPerConn
yScale	src/include/pv_types.h	/^   int xScale, yScale;$/;"	m	struct:PVLayer_
yVals	python/probe_analysis/noArborReadProbe.py	/^            yVals = {}$/;"	v
yVals	python/probe_analysis/readProbe.py	/^                    yVals = {}$/;"	v
ymargin	src/layers/HyPerLayer.hpp	/^   int xmargin, ymargin;$/;"	m	class:PV::HyPerLayer
ypos	src/io/stb_image.h	/^   int ypos; \/\/ which pre-expansion row we're on$/;"	m	struct:__anon11
ystep	src/io/stb_image.h	/^   int ystep; \/\/ how far through vertical expansion we are$/;"	m	struct:__anon11
zPatchHead	src/utils/conversions.c	/^int zPatchHead(int kzPre, int nzPatch, int zScaleLog2Pre, int zScaleLog2Post) {$/;"	f
zUnitCellSize	src/utils/conversions.h	/^static inline int zUnitCellSize(float preZScale, float postZScale) {$/;"	f
z_distance	src/io/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
z_expandable	src/io/stb_image.h	/^   int z_expandable;$/;"	m	struct:__anon13
z_length	src/io/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon13
zbuffer	src/io/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
zbuffer_end	src/io/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13
zero	tests/test_delta/src/test_delta.cpp	/^static int zero(float x) {$/;"	f	file:
zero	tests/test_sign/src/test_sign.cpp	/^static int zero(float x) {$/;"	f	file:
zeroDCR	src/layers/BinningLayer.hpp	/^   bool zeroDCR;$/;"	m	class:PV::BinningLayer
zeroNeg	src/layers/BinningLayer.hpp	/^   bool zeroNeg;$/;"	m	class:PV::BinningLayer
zeroWeightsOutsideShrunkenPatch	src/weightinit/InitWeights.cpp	/^int InitWeights::zeroWeightsOutsideShrunkenPatch(PVPatch ***patches) {$/;"	f	class:PV::InitWeights
zout	src/io/stb_image.h	/^   char *zout;$/;"	m	struct:__anon13
zout_end	src/io/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon13
zout_start	src/io/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon13
~ANNErrorLayer	src/layers/ANNErrorLayer.cpp	/^ANNErrorLayer::~ANNErrorLayer() {}$/;"	f	class:PV::ANNErrorLayer
~ANNLayer	src/layers/ANNLayer.cpp	/^ANNLayer::~ANNLayer() {$/;"	f	class:PV::ANNLayer
~ANNSquaredLayer	src/layers/ANNSquaredLayer.cpp	/^ANNSquaredLayer::~ANNSquaredLayer() {}$/;"	f	class:PV::ANNSquaredLayer
~ANNWhitenedLayer	src/layers/ANNWhitenedLayer.cpp	/^ANNWhitenedLayer::~ANNWhitenedLayer() {}$/;"	f	class:PV::ANNWhitenedLayer
~AbstractNormProbe	src/probes/AbstractNormProbe.cpp	/^AbstractNormProbe::~AbstractNormProbe() {$/;"	f	class:PV::AbstractNormProbe
~AdaptiveTimeScaleController	src/components/AdaptiveTimeScaleController.cpp	/^AdaptiveTimeScaleController::~AdaptiveTimeScaleController() { free(mName); }$/;"	f	class:PV::AdaptiveTimeScaleController
~AdaptiveTimeScaleProbe	src/probes/AdaptiveTimeScaleProbe.cpp	/^AdaptiveTimeScaleProbe::~AdaptiveTimeScaleProbe() { delete mAdaptiveTimeScaleController; }$/;"	f	class:PV::AdaptiveTimeScaleProbe
~AllConstantValueProbe	tests/GroupNormalizationTest/src/AllConstantValueProbe.cpp	/^AllConstantValueProbe::~AllConstantValueProbe() {}$/;"	f	class:PV::AllConstantValueProbe
~AlwaysFailsLayer	tests/DryRunFlagTest/src/AlwaysFailsLayer.cpp	/^AlwaysFailsLayer::~AlwaysFailsLayer() {}$/;"	f	class:PV::AlwaysFailsLayer
~ArborTestForOnesProbe	tests/ArborSystemTest/src/ArborTestForOnesProbe.cpp	/^ArborTestForOnesProbe::~ArborTestForOnesProbe() {}$/;"	f	class:PV::ArborTestForOnesProbe
~ArborTestProbe	tests/ArborSystemTest/src/ArborTestProbe.cpp	/^ArborTestProbe::~ArborTestProbe() {}$/;"	f	class:PV::ArborTestProbe
~Arguments	src/columns/Arguments.cpp	/^Arguments::~Arguments() { delete mConfigFromStream; }$/;"	f	class:PV::Arguments
~AverageRateConn	tests/LIFTest/src/AverageRateConn.cpp	/^AverageRateConn::~AverageRateConn() {}$/;"	f	class:PV::AverageRateConn
~BBFindConfRemapLayer	demos/HeatMapLocalization/src/BBFindConfRemapLayer.cpp	/^BBFindConfRemapLayer::~BBFindConfRemapLayer() {$/;"	f	class:BBFindConfRemapLayer
~BBFindConfRemapProbe	demos/HeatMapLocalization/src/BBFindConfRemapProbe.cpp	/^BBFindConfRemapProbe::~BBFindConfRemapProbe() {$/;"	f	class:BBFindConfRemapProbe
~BackgroundLayer	src/layers/BackgroundLayer.cpp	/^BackgroundLayer::~BackgroundLayer() {}$/;"	f	class:PV::BackgroundLayer
~BaseConnection	src/connections/BaseConnection.cpp	/^BaseConnection::~BaseConnection() {$/;"	f	class:PV::BaseConnection
~BaseConnectionProbe	src/probes/BaseConnectionProbe.cpp	/^BaseConnectionProbe::~BaseConnectionProbe() {}$/;"	f	class:PV::BaseConnectionProbe
~BaseHyPerConnProbe	src/probes/BaseHyPerConnProbe.cpp	/^BaseHyPerConnProbe::~BaseHyPerConnProbe() {}$/;"	f	class:PV::BaseHyPerConnProbe
~BaseInitV	src/initv/BaseInitV.cpp	/^BaseInitV::~BaseInitV() {}$/;"	f	class:PV::BaseInitV
~BaseLayer	src/layers/BaseLayer.cpp	/^BaseLayer::~BaseLayer() {}$/;"	f	class:PV::BaseLayer
~BaseMessage	src/observerpattern/BaseMessage.hpp	/^   virtual ~BaseMessage() {}$/;"	f	class:PV::BaseMessage
~BaseObject	src/columns/BaseObject.cpp	/^BaseObject::~BaseObject() { free(name); }$/;"	f	class:PV::BaseObject
~BaseProbe	src/probes/BaseProbe.cpp	/^BaseProbe::~BaseProbe() {$/;"	f	class:PV::BaseProbe
~BatchSweepTestProbe	tests/BatchSweepTest/src/BatchSweepTestProbe.cpp	/^BatchSweepTestProbe::~BatchSweepTestProbe() {}$/;"	f	class:PV::BatchSweepTestProbe
~BinningLayer	src/layers/BinningLayer.cpp	/^BinningLayer::~BinningLayer() {$/;"	f	class:PV::BinningLayer
~BorderExchange	src/utils/BorderExchange.cpp	/^BorderExchange::~BorderExchange() { freeDatatypes(); }$/;"	f	class:PV::BorderExchange
~CPTestInputLayer	tests/Shared/CPTestInputLayer.cpp	/^CPTestInputLayer::~CPTestInputLayer() {}$/;"	f	class:PV::CPTestInputLayer
~Checkpointer	src/checkpointing/Checkpointer.cpp	/^Checkpointer::~Checkpointer() {$/;"	f	class:PV::Checkpointer
~CloneConn	src/connections/CloneConn.cpp	/^CloneConn::~CloneConn() {$/;"	f	class:PV::CloneConn
~CloneKernelConn	src/connections/CloneKernelConn.cpp	/^CloneKernelConn::~CloneKernelConn() {}$/;"	f	class:PV::CloneKernelConn
~CloneVLayer	src/layers/CloneVLayer.cpp	/^CloneVLayer::~CloneVLayer() {$/;"	f	class:PV::CloneVLayer
~ColProbe	src/probes/ColProbe.cpp	/^ColProbe::~ColProbe() {}$/;"	f	class:PV::ColProbe
~ColumnArchive	tests/Shared/ColumnArchive.hpp	/^   virtual ~ColumnArchive() {}$/;"	f	class:ColumnArchive
~ColumnEnergyProbe	src/probes/ColumnEnergyProbe.cpp	/^ColumnEnergyProbe::~ColumnEnergyProbe() {$/;"	f	class:PV::ColumnEnergyProbe
~CommandLineArguments	src/columns/CommandLineArguments.hpp	/^   virtual ~CommandLineArguments() {}$/;"	f	class:PV::CommandLineArguments
~Communicator	src/columns/Communicator.cpp	/^Communicator::~Communicator() {$/;"	f	class:PV::Communicator
~ConfigFileArguments	src/columns/ConfigFileArguments.hpp	/^   virtual ~ConfigFileArguments() {}$/;"	f	class:PV::ConfigFileArguments
~Configuration	src/io/Configuration.hpp	/^   ~Configuration() {}$/;"	f	class:PV::Configuration
~ConstantLayer	src/layers/ConstantLayer.cpp	/^ConstantLayer::~ConstantLayer() {}$/;"	f	class:PV::ConstantLayer
~ConstantV	src/initv/ConstantV.cpp	/^ConstantV::~ConstantV() {}$/;"	f	class:PV::ConstantV
~ConvertFromTable	demos/HeatMapLocalization/src/ConvertFromTable.cpp	/^ConvertFromTable::~ConvertFromTable() {$/;"	f	class:ConvertFromTable
~CopyConn	src/connections/CopyConn.cpp	/^CopyConn::~CopyConn() { free(originalConnName); }$/;"	f	class:PV::CopyConn
~CorrectState	tests/HyPerConnCheckpointerTest/src/CorrectState.hpp	/^   virtual ~CorrectState() {}$/;"	f	class:CorrectState
~CorrectState	tests/MomentumConnSimpleCheckpointerTest/src/CorrectState.hpp	/^   virtual ~CorrectState() {}$/;"	f	class:CorrectState
~CorrectState	tests/MomentumConnViscosityCheckpointerTest/src/CorrectState.hpp	/^   virtual ~CorrectState() {}$/;"	f	class:CorrectState
~CorrectState	tests/PoolingConnCheckpointerTest/src/CorrectState.hpp	/^   virtual ~CorrectState() {}$/;"	f	class:CorrectState
~CudaBuffer	src/arch/cuda/CudaBuffer.cpp	/^CudaBuffer::~CudaBuffer() { handleError(cudaFree(d_ptr), "Freeing device pointer"); }$/;"	f	class:PVCuda::CudaBuffer
~CudaDevice	src/arch/cuda/CudaDevice.cpp	/^CudaDevice::~CudaDevice() {$/;"	f	class:PVCuda::CudaDevice
~CudaKernel	src/arch/cuda/CudaKernel.cpp	/^CudaKernel::~CudaKernel() {}$/;"	f	class:PVCuda::CudaKernel
~CudaPoolingDeliverKernel	src/cudakernels/CudaPoolingDeliverKernel.cpp	/^CudaPoolingDeliverKernel::~CudaPoolingDeliverKernel() {$/;"	f	class:PVCuda::CudaPoolingDeliverKernel
~CudaRecvPost	src/cudakernels/CudaRecvPost.cpp	/^CudaRecvPost::~CudaRecvPost() {$/;"	f	class:PVCuda::CudaRecvPost
~CudaRecvPre	src/cudakernels/CudaRecvPre.cpp	/^CudaRecvPre::~CudaRecvPre() {}$/;"	f	class:PVCuda::CudaRecvPre
~CudaTimer	src/arch/cuda/CudaTimer.cpp	/^CudaTimer::~CudaTimer() {$/;"	f	class:PVCuda::CudaTimer
~CudaTransposePoolingDeliverKernel	src/cudakernels/CudaTransposePoolingDeliverKernel.cpp	/^CudaTransposePoolingDeliverKernel::~CudaTransposePoolingDeliverKernel() {}$/;"	f	class:PVCuda::CudaTransposePoolingDeliverKernel
~CudaUpdateHyPerLCALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateHyPerLCALayer::~CudaUpdateHyPerLCALayer() {}$/;"	f	class:PVCuda::CudaUpdateHyPerLCALayer
~CudaUpdateISTALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateISTALayer::~CudaUpdateISTALayer() {}$/;"	f	class:PVCuda::CudaUpdateISTALayer
~CudaUpdateMomentumLCALayer	src/cudakernels/CudaUpdateStateFunctions.cpp	/^CudaUpdateMomentumLCALayer::~CudaUpdateMomentumLCALayer() {}$/;"	f	class:PVCuda::CudaUpdateMomentumLCALayer
~DataStore	src/columns/DataStore.hpp	/^   virtual ~DataStore() {$/;"	f	class:PV::DataStore
~DatastoreDelayTestLayer	tests/DatastoreDelayTest/src/DatastoreDelayTestLayer.cpp	/^DatastoreDelayTestLayer::~DatastoreDelayTestLayer() {}$/;"	f	class:PV::DatastoreDelayTestLayer
~DatastoreDelayTestProbe	tests/DatastoreDelayTest/src/DatastoreDelayTestProbe.cpp	/^DatastoreDelayTestProbe::~DatastoreDelayTestProbe() {}$/;"	f	class:PV::DatastoreDelayTestProbe
~DelayTestProbe	tests/DelaysToFeaturesTest/src/DelayTestProbe.cpp	/^DelayTestProbe::~DelayTestProbe() {}$/;"	f	class:PV::DelayTestProbe
~DropoutLayer	src/layers/DropoutLayer.cpp	/^DropoutLayer::~DropoutLayer() {}$/;"	f	class:PV::DropoutLayer
~Factory	src/columns/Factory.cpp	/^Factory::~Factory() { clearKeywordHandlerList(); }$/;"	f	class:PV::Factory
~FailBeforeExpectedStartTimeLayer	tests/CommandLineRestartTest/src/FailBeforeExpectedStartTimeLayer.hpp	/^   ~FailBeforeExpectedStartTimeLayer() {}$/;"	f	class:FailBeforeExpectedStartTimeLayer
~FileStream	src/io/FileStream.cpp	/^FileStream::~FileStream() {$/;"	f	class:PV::FileStream
~FilenameParsingGroundTruthLayer	src/layers/FilenameParsingGroundTruthLayer.cpp	/^FilenameParsingGroundTruthLayer::~FilenameParsingGroundTruthLayer() {$/;"	f	class:PV::FilenameParsingGroundTruthLayer
~FirmThresholdCostFnLCAProbe	src/probes/FirmThresholdCostFnLCAProbe.hpp	/^   virtual ~FirmThresholdCostFnLCAProbe() {}$/;"	f	class:PV::FirmThresholdCostFnLCAProbe
~FirmThresholdCostFnProbe	src/probes/FirmThresholdCostFnProbe.cpp	/^FirmThresholdCostFnProbe::~FirmThresholdCostFnProbe() {}$/;"	f	class:PV::FirmThresholdCostFnProbe
~FrameServer	demos/HeatMapLocalization/src/main.cpp	/^   virtual ~FrameServer() {$/;"	f	class:FrameServer
~GapConn	src/connections/GapConn.cpp	/^GapConn::~GapConn() {}$/;"	f	class:PV::GapConn
~GapLayer	src/layers/GapLayer.cpp	/^GapLayer::~GapLayer() {}$/;"	f	class:PV::GapLayer
~GaussianRandom	src/columns/GaussianRandom.cpp	/^GaussianRandom::~GaussianRandom() {}$/;"	f	class:PV::GaussianRandom
~GaussianRandomV	src/initv/GaussianRandomV.cpp	/^GaussianRandomV::~GaussianRandomV() {}$/;"	f	class:PV::GaussianRandomV
~HarnessObject	demos/HeatMapLocalization/src/main.cpp	/^   ~HarnessObject() {}$/;"	f	class:HarnessObject
~HyPerCol	src/columns/HyPerCol.cpp	/^HyPerCol::~HyPerCol() {$/;"	f	class:PV::HyPerCol
~HyPerConn	src/connections/HyPerConn.cpp	/^HyPerConn::~HyPerConn() {$/;"	f	class:PV::HyPerConn
~HyPerConnCheckpointerTestProbe	tests/HyPerConnCheckpointerTest/src/HyPerConnCheckpointerTestProbe.cpp	/^HyPerConnCheckpointerTestProbe::~HyPerConnCheckpointerTestProbe() {}$/;"	f	class:HyPerConnCheckpointerTestProbe
~HyPerConnDebugInitWeights	tests/InitWeightsTest/src/HyPerConnDebugInitWeights.cpp	/^HyPerConnDebugInitWeights::~HyPerConnDebugInitWeights() { free(otherConnName); }$/;"	f	class:PV::HyPerConnDebugInitWeights
~HyPerLCALayer	src/layers/HyPerLCALayer.cpp	/^HyPerLCALayer::~HyPerLCALayer() { free(mAdaptiveTimeScaleProbeName); }$/;"	f	class:PV::HyPerLCALayer
~HyPerLayer	src/layers/HyPerLayer.cpp	/^HyPerLayer::~HyPerLayer() {$/;"	f	class:PV::HyPerLayer
~ISTALayer	src/layers/ISTALayer.cpp	/^ISTALayer::~ISTALayer() {}$/;"	f	class:PV::ISTALayer
~ImageFromMemoryBuffer	src/layers/ImageFromMemoryBuffer.cpp	/^ImageFromMemoryBuffer::~ImageFromMemoryBuffer() {}$/;"	f	class:PV::ImageFromMemoryBuffer
~ImageLayer	src/layers/ImageLayer.hpp	/^   virtual ~ImageLayer() {}$/;"	f	class:PV::ImageLayer
~ImprintConn	src/connections/ImprintConn.cpp	/^ImprintConn::~ImprintConn() {$/;"	f	class:PV::ImprintConn
~InitCloneKernelWeights	src/weightinit/InitCloneKernelWeights.cpp	/^InitCloneKernelWeights::~InitCloneKernelWeights() {}$/;"	f	class:PV::InitCloneKernelWeights
~InitCocircWeights	src/weightinit/InitCocircWeights.cpp	/^InitCocircWeights::~InitCocircWeights() {}$/;"	f	class:PV::InitCocircWeights
~InitCocircWeightsParams	src/weightinit/InitCocircWeightsParams.cpp	/^InitCocircWeightsParams::~InitCocircWeightsParams() {}$/;"	f	class:PV::InitCocircWeightsParams
~InitGaborWeights	tests/InitWeightsTest/src/InitGaborWeights.cpp	/^InitGaborWeights::~InitGaborWeights() {}$/;"	f	class:PV::InitGaborWeights
~InitGaborWeightsParams	tests/InitWeightsTest/src/InitGaborWeightsParams.cpp	/^InitGaborWeightsParams::~InitGaborWeightsParams() {}$/;"	f	class:PV::InitGaborWeightsParams
~InitGauss2DWeights	src/weightinit/InitGauss2DWeights.cpp	/^InitGauss2DWeights::~InitGauss2DWeights() {}$/;"	f	class:PV::InitGauss2DWeights
~InitGauss2DWeightsParams	src/weightinit/InitGauss2DWeightsParams.cpp	/^InitGauss2DWeightsParams::~InitGauss2DWeightsParams() {}$/;"	f	class:PV::InitGauss2DWeightsParams
~InitGaussianRandomWeights	src/weightinit/InitGaussianRandomWeights.cpp	/^InitGaussianRandomWeights::~InitGaussianRandomWeights() {$/;"	f	class:PV::InitGaussianRandomWeights
~InitGaussianRandomWeightsParams	src/weightinit/InitGaussianRandomWeightsParams.cpp	/^InitGaussianRandomWeightsParams::~InitGaussianRandomWeightsParams() {}$/;"	f	class:PV::InitGaussianRandomWeightsParams
~InitIdentWeights	src/weightinit/InitIdentWeights.cpp	/^InitIdentWeights::~InitIdentWeights() {}$/;"	f	class:PV::InitIdentWeights
~InitIdentWeightsParams	src/weightinit/InitIdentWeightsParams.cpp	/^InitIdentWeightsParams::~InitIdentWeightsParams() {}$/;"	f	class:PV::InitIdentWeightsParams
~InitMaxPoolingWeights	src/weightinit/InitMaxPoolingWeights.cpp	/^InitMaxPoolingWeights::~InitMaxPoolingWeights() {}$/;"	f	class:PV::InitMaxPoolingWeights
~InitMaxPoolingWeightsParams	src/weightinit/InitMaxPoolingWeightsParams.cpp	/^InitMaxPoolingWeightsParams::~InitMaxPoolingWeightsParams() {}$/;"	f	class:PV::InitMaxPoolingWeightsParams
~InitOneToOneWeights	src/weightinit/InitOneToOneWeights.cpp	/^InitOneToOneWeights::~InitOneToOneWeights() {}$/;"	f	class:PV::InitOneToOneWeights
~InitOneToOneWeightsParams	src/weightinit/InitOneToOneWeightsParams.cpp	/^InitOneToOneWeightsParams::~InitOneToOneWeightsParams() {}$/;"	f	class:PV::InitOneToOneWeightsParams
~InitOneToOneWeightsWithDelays	src/weightinit/InitOneToOneWeightsWithDelays.cpp	/^InitOneToOneWeightsWithDelays::~InitOneToOneWeightsWithDelays() {}$/;"	f	class:PV::InitOneToOneWeightsWithDelays
~InitOneToOneWeightsWithDelaysParams	src/weightinit/InitOneToOneWeightsWithDelaysParams.cpp	/^InitOneToOneWeightsWithDelaysParams::~InitOneToOneWeightsWithDelaysParams() {}$/;"	f	class:PV::InitOneToOneWeightsWithDelaysParams
~InitRandomWeights	src/weightinit/InitRandomWeights.cpp	/^InitRandomWeights::~InitRandomWeights() {$/;"	f	class:PV::InitRandomWeights
~InitRandomWeightsParams	src/weightinit/InitRandomWeightsParams.cpp	/^InitRandomWeightsParams::~InitRandomWeightsParams() {}$/;"	f	class:PV::InitRandomWeightsParams
~InitSmartWeights	src/weightinit/InitSmartWeights.cpp	/^InitSmartWeights::~InitSmartWeights() {}$/;"	f	class:PV::InitSmartWeights
~InitSpreadOverArborsWeights	src/weightinit/InitSpreadOverArborsWeights.cpp	/^InitSpreadOverArborsWeights::~InitSpreadOverArborsWeights() {}$/;"	f	class:PV::InitSpreadOverArborsWeights
~InitSpreadOverArborsWeightsParams	src/weightinit/InitSpreadOverArborsWeightsParams.cpp	/^InitSpreadOverArborsWeightsParams::~InitSpreadOverArborsWeightsParams() {}$/;"	f	class:PV::InitSpreadOverArborsWeightsParams
~InitUniformRandomWeights	src/weightinit/InitUniformRandomWeights.cpp	/^InitUniformRandomWeights::~InitUniformRandomWeights() {}$/;"	f	class:PV::InitUniformRandomWeights
~InitUniformRandomWeightsParams	src/weightinit/InitUniformRandomWeightsParams.cpp	/^InitUniformRandomWeightsParams::~InitUniformRandomWeightsParams() {}$/;"	f	class:PV::InitUniformRandomWeightsParams
~InitUniformWeights	src/weightinit/InitUniformWeights.cpp	/^InitUniformWeights::~InitUniformWeights() {}$/;"	f	class:PV::InitUniformWeights
~InitUniformWeightsParams	src/weightinit/InitUniformWeightsParams.cpp	/^InitUniformWeightsParams::~InitUniformWeightsParams() {}$/;"	f	class:PV::InitUniformWeightsParams
~InitVFromFile	src/initv/InitVFromFile.cpp	/^InitVFromFile::~InitVFromFile() { free(mVfilename); }$/;"	f	class:PV::InitVFromFile
~InitWeights	src/weightinit/InitWeights.cpp	/^InitWeights::~InitWeights() {$/;"	f	class:PV::InitWeights
~InitWeightsParams	src/weightinit/InitWeightsParams.cpp	/^InitWeightsParams::~InitWeightsParams() {$/;"	f	class:PV::InitWeightsParams
~InputLayer	src/layers/InputLayer.cpp	/^InputLayer::~InputLayer() { delete mBorderExchanger; }$/;"	f	class:PV::InputLayer
~KernelConnDebugInitWeights	tests/InitWeightsTest/src/KernelConnDebugInitWeights.cpp	/^KernelConnDebugInitWeights::~KernelConnDebugInitWeights() { free(otherConnName); }$/;"	f	class:PV::KernelConnDebugInitWeights
~KernelProbe	src/probes/KernelProbe.cpp	/^KernelProbe::~KernelProbe() {}$/;"	f	class:PV::KernelProbe
~KeywordHandler	src/columns/KeywordHandler.cpp	/^KeywordHandler::~KeywordHandler() { free(keyword); }$/;"	f	class:PV::KeywordHandler
~KmeansLayer	src/layers/KmeansLayer.cpp	/^KmeansLayer::~KmeansLayer() {}$/;"	f	class:PV::KmeansLayer
~L0NormLCAProbe	src/probes/L0NormLCAProbe.hpp	/^   virtual ~L0NormLCAProbe() {}$/;"	f	class:PV::L0NormLCAProbe
~L0NormProbe	src/probes/L0NormProbe.cpp	/^L0NormProbe::~L0NormProbe() {}$/;"	f	class:PV::L0NormProbe
~L1NormLCAProbe	src/probes/L1NormLCAProbe.hpp	/^   virtual ~L1NormLCAProbe() {}$/;"	f	class:PV::L1NormLCAProbe
~L1NormProbe	src/probes/L1NormProbe.cpp	/^L1NormProbe::~L1NormProbe() {}$/;"	f	class:PV::L1NormProbe
~L2ConnProbe	src/probes/L2ConnProbe.cpp	/^L2ConnProbe::~L2ConnProbe() {}$/;"	f	class:PV::L2ConnProbe
~L2NormProbe	src/probes/L2NormProbe.cpp	/^L2NormProbe::~L2NormProbe() {}$/;"	f	class:PV::L2NormProbe
~LCALIFLayer	src/layers/LCALIFLayer.cpp	/^LCALIFLayer::~LCALIFLayer() {$/;"	f	class:PV::LCALIFLayer
~LIF	src/layers/LIF.cpp	/^LIF::~LIF() {$/;"	f	class:PV::LIF
~LIFGap	src/layers/LIFGap.cpp	/^LIFGap::~LIFGap() { free(gapStrength); }$/;"	f	class:PV::LIFGap
~LIFTestProbe	tests/LIFTest/src/LIFTestProbe.cpp	/^LIFTestProbe::~LIFTestProbe() {$/;"	f	class:PV::LIFTestProbe
~LabelErrorLayer	src/layers/LabelErrorLayer.cpp	/^LabelErrorLayer::~LabelErrorLayer() {}$/;"	f	class:PV::LabelErrorLayer
~LayerProbe	src/probes/LayerProbe.cpp	/^LayerProbe::~LayerProbe() {}$/;"	f	class:PV::LayerProbe
~LeakyIntegrator	src/layers/LeakyIntegrator.cpp	/^LeakyIntegrator::~LeakyIntegrator() {}$/;"	f	class:PV::LeakyIntegrator
~LocalizationBBFindProbe	demos/HeatMapLocalization/src/LocalizationBBFindProbe.cpp	/^LocalizationBBFindProbe::~LocalizationBBFindProbe() {$/;"	f	class:LocalizationBBFindProbe
~LocalizationProbe	demos/HeatMapLocalization/src/LocalizationProbe.cpp	/^LocalizationProbe::~LocalizationProbe() {$/;"	f	class:LocalizationProbe
~Log	src/utils/PVLog.hpp	/^   ~Log() { LogType::exit(); }$/;"	f	struct:PV::Log
~LogFileStream	src/utils/PVLog.cpp	/^   virtual ~LogFileStream() {$/;"	f	class:PV::LogFileStream
~MaskFromMemoryBuffer	demos/HeatMapLocalization/src/MaskFromMemoryBuffer.cpp	/^MaskFromMemoryBuffer::~MaskFromMemoryBuffer(){$/;"	f	class:MaskFromMemoryBuffer
~MaskLayer	src/layers/MaskLayer.cpp	/^MaskLayer::~MaskLayer() {$/;"	f	class:PV::MaskLayer
~MaskTestLayer	tests/MaskLayerTest/src/MaskTestLayer.cpp	/^MaskTestLayer::~MaskTestLayer() {$/;"	f	class:PV::MaskTestLayer
~MomentumConn	src/connections/MomentumConn.cpp	/^MomentumConn::~MomentumConn() {$/;"	f	class:PV::MomentumConn
~MomentumConnSimpleCheckpointerTestProbe	tests/MomentumConnSimpleCheckpointerTest/src/MomentumConnSimpleCheckpointerTestProbe.cpp	/^MomentumConnSimpleCheckpointerTestProbe::~MomentumConnSimpleCheckpointerTestProbe() {}$/;"	f	class:MomentumConnSimpleCheckpointerTestProbe
~MomentumConnViscosityCheckpointerTestProbe	tests/MomentumConnViscosityCheckpointerTest/src/MomentumConnViscosityCheckpointerTestProbe.cpp	/^MomentumConnViscosityCheckpointerTestProbe::~MomentumConnViscosityCheckpointerTestProbe() {}$/;"	f	class:MomentumConnViscosityCheckpointerTestProbe
~MomentumLCALayer	src/layers/MomentumLCALayer.cpp	/^MomentumLCALayer::~MomentumLCALayer() {}$/;"	f	class:PV::MomentumLCALayer
~MomentumTestConnProbe	tests/UpdateFromCloneTest/src/MomentumTestConnProbe.cpp	/^MomentumTestConnProbe::~MomentumTestConnProbe() {}$/;"	f	class:PV::MomentumTestConnProbe
~NormalizeBase	src/normalizers/NormalizeBase.cpp	/^NormalizeBase::~NormalizeBase() {$/;"	f	class:PV::NormalizeBase
~NormalizeContrastZeroMean	src/normalizers/NormalizeContrastZeroMean.cpp	/^NormalizeContrastZeroMean::~NormalizeContrastZeroMean() {}$/;"	f	class:PV::NormalizeContrastZeroMean
~NormalizeGap	src/normalizers/NormalizeGap.cpp	/^NormalizeGap::~NormalizeGap() {}$/;"	f	class:PV::NormalizeGap
~NormalizeGroup	src/normalizers/NormalizeGroup.cpp	/^NormalizeGroup::~NormalizeGroup() { free(normalizeGroupName); }$/;"	f	class:PV::NormalizeGroup
~NormalizeL2	src/normalizers/NormalizeL2.cpp	/^NormalizeL2::~NormalizeL2() {}$/;"	f	class:PV::NormalizeL2
~NormalizeL3	tests/NormalizeSubclassSystemTest/src/NormalizeL3.cpp	/^NormalizeL3::~NormalizeL3() {}$/;"	f	class:PV::NormalizeL3
~NormalizeMax	src/normalizers/NormalizeMax.cpp	/^NormalizeMax::~NormalizeMax() {}$/;"	f	class:PV::NormalizeMax
~NormalizeMultiply	src/normalizers/NormalizeMultiply.cpp	/^NormalizeMultiply::~NormalizeMultiply() {}$/;"	f	class:PV::NormalizeMultiply
~NormalizeSum	src/normalizers/NormalizeSum.cpp	/^NormalizeSum::~NormalizeSum() {}$/;"	f	class:PV::NormalizeSum
~Observer	src/observerpattern/Observer.hpp	/^   virtual ~Observer() {}$/;"	f	class:PV::Observer
~ObserverTable	src/observerpattern/ObserverTable.hpp	/^   virtual ~ObserverTable() {}$/;"	f	class:PV::ObserverTable
~PVParams	src/io/PVParams.cpp	/^PVParams::~PVParams() {$/;"	f	class:PV::PVParams
~PV_Init	src/columns/PV_Init.cpp	/^PV_Init::~PV_Init() {$/;"	f	class:PV::PV_Init
~Parameter	src/io/PVParams.cpp	/^Parameter::~Parameter() { free(paramName); }$/;"	f	class:PV::Parameter
~ParameterArray	src/io/PVParams.cpp	/^ParameterArray::~ParameterArray() {$/;"	f	class:PV::ParameterArray
~ParameterArrayStack	src/io/PVParams.cpp	/^ParameterArrayStack::~ParameterArrayStack() {$/;"	f	class:PV::ParameterArrayStack
~ParameterGroup	src/io/PVParams.cpp	/^ParameterGroup::~ParameterGroup() {$/;"	f	class:PV::ParameterGroup
~ParameterStack	src/io/PVParams.cpp	/^ParameterStack::~ParameterStack() {$/;"	f	class:PV::ParameterStack
~ParameterString	src/io/PVParams.cpp	/^ParameterString::~ParameterString() {$/;"	f	class:PV::ParameterString
~ParameterStringStack	src/io/PVParams.cpp	/^ParameterStringStack::~ParameterStringStack() {$/;"	f	class:PV::ParameterStringStack
~ParameterSweep	src/io/PVParams.cpp	/^ParameterSweep::~ParameterSweep() {$/;"	f	class:PV::ParameterSweep
~ParameterSweepTestProbe	tests/ParameterSweepTest/src/ParameterSweepTestProbe.cpp	/^ParameterSweepTestProbe::~ParameterSweepTestProbe() {}$/;"	f	class:PV::ParameterSweepTestProbe
~PlasticCloneConn	src/connections/PlasticCloneConn.cpp	/^PlasticCloneConn::~PlasticCloneConn() { deleteWeights(); }$/;"	f	class:PV::PlasticCloneConn
~PlasticConnTestProbe	tests/PlasticConnTest/src/PlasticConnTestProbe.cpp	/^PlasticConnTestProbe::~PlasticConnTestProbe() {$/;"	f	class:PV::PlasticConnTestProbe
~PlasticTestConn	tests/PlasticConnTest/src/PlasticTestConn.cpp	/^PlasticTestConn::~PlasticTestConn() {}$/;"	f	class:PV::PlasticTestConn
~PointProbe	src/probes/PointProbe.cpp	/^PointProbe::~PointProbe() {}$/;"	f	class:PV::PointProbe
~PoolingConn	src/connections/PoolingConn.cpp	/^PoolingConn::~PoolingConn() {$/;"	f	class:PV::PoolingConn
~PoolingConnCheckpointerTestProbe	tests/PoolingConnCheckpointerTest/src/PoolingConnCheckpointerTestProbe.cpp	/^PoolingConnCheckpointerTestProbe::~PoolingConnCheckpointerTestProbe() {}$/;"	f	class:PoolingConnCheckpointerTestProbe
~PoolingIndexLayer	src/layers/PoolingIndexLayer.cpp	/^PoolingIndexLayer::~PoolingIndexLayer() {}$/;"	f	class:PV::PoolingIndexLayer
~PrintStream	src/io/PrintStream.hpp	/^   virtual ~PrintStream() {}$/;"	f	class:PV::PrintStream
~PtwiseProductLayer	src/layers/PtwiseProductLayer.cpp	/^PtwiseProductLayer::~PtwiseProductLayer() {}$/;"	f	class:PV::PtwiseProductLayer
~PtwiseQuotientLayer	src/layers/PtwiseQuotientLayer.cpp	/^PtwiseQuotientLayer::~PtwiseQuotientLayer() {}$/;"	f	class:PV::PtwiseQuotientLayer
~Publisher	src/columns/Publisher.cpp	/^Publisher::~Publisher() {$/;"	f	class:PV::Publisher
~PvpLayer	src/layers/PvpLayer.cpp	/^PvpLayer::~PvpLayer() {}$/;"	f	class:PV::PvpLayer
~QuotientColProbe	src/probes/QuotientColProbe.cpp	/^QuotientColProbe::~QuotientColProbe() {$/;"	f	class:PV::QuotientColProbe
~Random	src/columns/Random.cpp	/^Random::~Random() {}$/;"	f	class:PV::Random
~RandomSeed	src/columns/RandomSeed.hpp	/^   virtual ~RandomSeed() {}$/;"	f	class:PV::RandomSeed
~RequireAllZeroActivityProbe	src/probes/RequireAllZeroActivityProbe.cpp	/^RequireAllZeroActivityProbe::~RequireAllZeroActivityProbe() {$/;"	f	class:PV::RequireAllZeroActivityProbe
~RescaleConn	src/connections/RescaleConn.cpp	/^RescaleConn::~RescaleConn() {}$/;"	f	class:PV::RescaleConn
~RescaleLayer	src/layers/RescaleLayer.cpp	/^RescaleLayer::~RescaleLayer() { free(rescaleMethod); }$/;"	f	class:PV::RescaleLayer
~ResetStateOnTriggerTestProbe	tests/ResetStateOnTriggerTest/src/ResetStateOnTriggerTestProbe.cpp	/^ResetStateOnTriggerTestProbe::~ResetStateOnTriggerTestProbe() {}$/;"	f	class:ResetStateOnTriggerTestProbe
~Retina	src/layers/Retina.cpp	/^Retina::~Retina() { delete randState; }$/;"	f	class:PV::Retina
~RingBuffer	src/structures/RingBuffer.hpp	/^   virtual ~RingBuffer() {}$/;"	f	class:PV::RingBuffer
~RunningAverageLayer	src/layers/RunningAverageLayer.cpp	/^RunningAverageLayer::~RunningAverageLayer() {}$/;"	f	class:PV::RunningAverageLayer
~SegmentLayer	src/layers/SegmentLayer.cpp	/^SegmentLayer::~SegmentLayer() {$/;"	f	class:PV::SegmentLayer
~Segmentify	src/layers/Segmentify.cpp	/^Segmentify::~Segmentify() {$/;"	f	class:PV::Segmentify
~ShrunkenPatchTestProbe	tests/ShrunkenPatchTest/src/ShrunkenPatchTestProbe.cpp	/^ShrunkenPatchTestProbe::~ShrunkenPatchTestProbe() {$/;"	f	class:PV::ShrunkenPatchTestProbe
~ShuffleLayer	src/layers/ShuffleLayer.cpp	/^ShuffleLayer::~ShuffleLayer() {$/;"	f	class:PV::ShuffleLayer
~SigmoidLayer	src/layers/SigmoidLayer.cpp	/^SigmoidLayer::~SigmoidLayer() {}$/;"	f	class:PV::SigmoidLayer
~StatsProbe	src/probes/StatsProbe.cpp	/^StatsProbe::~StatsProbe() {$/;"	f	class:PV::StatsProbe
~StochasticReleaseTestProbe	tests/StochasticReleaseTest/src/StochasticReleaseTestProbe.cpp	/^StochasticReleaseTestProbe::~StochasticReleaseTestProbe() {}$/;"	f	class:PV::StochasticReleaseTestProbe
~Subject	src/observerpattern/Subject.hpp	/^   virtual ~Subject() {}$/;"	f	class:PV::Subject
~TestConnProbe	tests/UpdateFromCloneTest/src/TestConnProbe.cpp	/^TestConnProbe::~TestConnProbe() {}$/;"	f	class:PV::TestConnProbe
~TestImage	tests/test_constant_input/src/TestImage.cpp	/^TestImage::~TestImage() {}$/;"	f	class:PV::TestImage
~TestPointProbe	tests/PointProbeTest/src/TestPointProbe.cpp	/^TestPointProbe::~TestPointProbe() {}$/;"	f	class:PV::TestPointProbe
~Timer	src/utils/Timer.cpp	/^Timer::~Timer() { free(message); }$/;"	f	class:PV::Timer
~TransposeConn	src/connections/TransposeConn.cpp	/^TransposeConn::~TransposeConn() {$/;"	f	class:PV::TransposeConn
~TransposePoolingConn	src/connections/TransposePoolingConn.cpp	/^TransposePoolingConn::~TransposePoolingConn() {$/;"	f	class:PV::TransposePoolingConn
~UniformRandomV	src/initv/UniformRandomV.cpp	/^UniformRandomV::~UniformRandomV() {}$/;"	f	class:PV::UniformRandomV
~VaryingHyPerConn	tests/Shared/VaryingHyPerConn.cpp	/^VaryingHyPerConn::~VaryingHyPerConn() {}$/;"	f	class:PV::VaryingHyPerConn
~WTALayer	src/layers/WTALayer.cpp	/^WTALayer::~WTALayer() {}$/;"	f	class:PV::WTALayer
~ZeroV	src/initv/ZeroV.cpp	/^ZeroV::~ZeroV() {}$/;"	f	class:PV::ZeroV
~privateTransposeConn	src/connections/privateTransposeConn.cpp	/^privateTransposeConn::~privateTransposeConn() {} \/\/ privateTransposeConn::~privateTransposeConn()$/;"	f	class:PV::privateTransposeConn
