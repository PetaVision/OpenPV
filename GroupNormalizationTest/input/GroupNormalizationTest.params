//
// GroupNormalizationTest.params
//
// created by peteschultz: Dec 17, 2014
//

//  A system test for testing group normalization
//  Input layer is a 16x16 3-colorband image of all ones.
//  It goes to two different 16x16 output layers:
//  to output1 using a 5x5x8 connection,
//  and output2 using a 3x3x4 connection
//  The connections to output1 and output2 are initialized
//  to all ones, and normalized together.
//  A patch in the connection to output1 has 5x5x8=200 synapses.
//  A patch in the connection to output2 has 3x3x4=36 synapses.
//  The normalization is over all 236 synapses.
//  Thus, for normalization method normalizeSum, with strength=1,
//  each weight gets normalized to 1/236=0.0042372881
//  For normalizeL2, it gets normalized to 1/sqrt(236)=0.0650944555

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 16;   //size of the whole networks
   ny = 16;
   dt = 1.0;  //time step in ms.
   dtAdaptFlag = false;  // If true, layers can provide HyPerCol info on acceptable timesteps and dt can be adjusted accordingly 
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 5.0;  
   errorOnNotANumber = true;
   progressInterval = 10.0; //Program will output its progress at each progressStep
   writeProgressToErr = false;  
   outputPath = "output/";
   printParamsFilename = "pv.params"; // A record of the parameters used, including defaults and excluding unused params, will be written to this file.
   filenamesContainLayerNames = false;  
   filenamesContainConnectionNames = false;
   initializeFromCheckpointDir = "";
   checkpointWrite = false;
   suppressLastOutput = false; //If true, save the last output as checkpoint.
};

//
// layers
//

Image "input" = {
    nxScale = 1;
    nyScale = 1;
    imagePath = "input/ones.png";
    nf = 3;
    phase = 0;
    writeStep = -1;
    sparseLayer = false;
    mirrorBCflag = false;
    valueBC = 0.0;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    autoResizeFlag = false;
    writeImages = false;
    offsetAnchor = "tl";
    offsetX = 0;
    offsetY = 0;
    jitterFlag = false;
};

ANNLayer "output1" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 8;
    phase = 1;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

ANNLayer "output2" = {
    nxScale = 1; 
    nyScale = 1;
    nf = 4;
    phase = 1;
    triggerFlag = false;
    writeStep = 1.0;
    initialWriteTime = 0.0;
    mirrorBCflag = 1;
    sparseLayer = false;

    InitVType = "ZeroV";

    VThresh = -infinity;   
    AMax = infinity;
    AMin = -infinity;
    AShift = 0.0;
    VWidth = 0.0;
};

//
// connections
//

HyPerConn "input_to_output1" = {
    preLayerName = "input";
    postLayerName = "output1";
    channelCode = 0;
    nxp = 5;
    nyp = 5;
    nfp = 8; 
    numAxonalArbors = 1;
    sharedWeights = true;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformWeight";
    weightInit = 1.0;
    connectOnlySameFeatures = false;
      
    strength = 1.0;
    normalizeMethod = "normalizeL2";
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    nonnegativeConstraintFlag = false;
    preActivityIsNotRate = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "Convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;
};

HyPerConn "input_to_output2" = {
    preLayerName = "input";
    postLayerName = "output2";
    channelCode = 0;
    nxp = 3;
    nyp = 3;
    nfp = 4; 
    numAxonalArbors = 1;
    sharedWeights = true;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "UniformWeight";
    weightInit = 1.0;
    connectOnlySameFeatures = false;
      
    normalizeMethod = "normalizeGroup";
    normalizeGroupName = "input_to_output1";
    normalizeOnInitialize = true;
    normalizeOnWeightUpdate = true;
    nonnegativeConstraintFlag = false;
    preActivityIsNotRate = false;
    minSumTolerated = 0.0;
    normalizeFromPostPerspective = false;
    rMinX = 0.0;
    rMinY = 0.0;

    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    selfFlag = false;

    delay = 0;

    pvpatchAccumulateType = "Convolve";
    shrinkPatches = false;
    updateGSynFromPostPerspective = false;
};
