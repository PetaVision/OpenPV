//
// MLPTest.params
//
// created by slundquist: Mar 21, 2014
//

//A params file to test PV implementation of a multilayer perceptron
//This test is solving the xor problem
//http://www.mind.ilstu.edu/curriculum/artificial_neural_net/xor_problem_and_solution.php?modGUI=239&compGUI=1286&itemGUI=2253

debugParsing = false;    // Debug the reading of this parameter file.

HyPerCol "column" = {
   nx = 16;  
   ny = 16;
   dt = 1.0;  //time step in ms.	     
   randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   startTime = 0.0;
   stopTime = 40000; //180000001; //200000;
   progressInterval = 100.0; //Program will output its progress at each progressStep
   writeProgressToErr = false;  
   outputPath = "/nh/compneuro/Data/MLPLCA/LCA/cifar_ontrain_nodropout_S1C1_double/";
   filenamesContainLayerNames = true;  
   filenamesContainConnectionNames = true;
   checkpointRead = false;  
   checkpointWrite = false;
   checkpointWriteDir = "/nh/compneuro/Data/MLPLCA/LCA/cifar_ontrain_nodropout_S1C1_double/Checkpoints/";
   checkpointWriteStepInterval = 10000;
   deleteOlderCheckpoints = false;
   outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
   suppressLastOutput = false;
};

//
// layers
//

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = 1; 
    nyScale = 1;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

//The input layer of data
Movie "InputS1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/CIFAR/LCA/data_batch_all15/a2_S1.pvp";
    nf = 48;
    writeStep = -1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "S1Buffer" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 48;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;
    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

RescaleLayer "S1Rescale" = {
    restart                         = false;
    originalLayerName               = "S1Buffer";
    nxScale                         = 1; 
    nyScale                         = 1; 
    nf                              = 48;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    //initialWriteTime                = ;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 2;

    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

Movie "InputC1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/CIFAR/LCA/data_batch_all15/a6_C1.pvp";
    nf = 192;
    writeStep = -1;
    initialWriteTime = 1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 0;
    echoFramePathnameFlag = true;
    writeFrameToTimestamp = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = false;
    phase = 0;
    //useParamsImage = true;
};

ANNLayer "C1Buffer" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 192;
    writeStep = -1; //Change based on display period
    initialWriteTime = 999.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    phase = 1;
    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

RescaleLayer "C1Rescale" = {
    restart                         = false;
    originalLayerName               = "C1Buffer";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 192;
    mirrorBCflag                    = false;
    //
    writeStep                       = -1;
    //initialWriteTime                = ;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 2;

    //triggerFlag = true;
    //triggerLayerName = "LeftImage";
};

MLPForwardLayer "ForwardLayer1" = {
    restart = 0;
    nxScale = .0625;
    nyScale = .0625;
    nf = 2000;
    writeStep = -1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    dropoutChance = 0;
    phase = 3;
};

MLPSigmoidLayer "HiddenLayer1" = {  // 2
    nxScale           = .0625;
    nyScale           = .0625;
    nf                = 2000;
    originalLayerName = "ForwardLayer1";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = -1;
    writeNonspikingActivity = false;
    phase = 4;
};

MLPForwardLayer "ForwardLayer2" = {
   #include "ForwardLayer1";
   @nxScale = .0625;
   @nyScale = .0625;
   @nf      = 500;
   @phase = 5;
};

MLPSigmoidLayer "HiddenLayer2" = {  // 2
    #include "HiddenLayer1";
    @nxScale           = .0625;
    @nyScale           = .0625;
    @nf                = 500;
    @originalLayerName = "ForwardLayer2";
    @phase = 6;
};

MLPForwardLayer "ForwardLayer3" = {
   #include "ForwardLayer1";
   @nxScale = .0625;
   @nyScale = .0625;
   @nf      = 100;
   @phase = 7;
};

MLPSigmoidLayer "HiddenLayer3" = {  // 2
    #include "HiddenLayer1";
    @nxScale           = .0625;
    @nyScale           = .0625;
    @nf                = 100;
    @originalLayerName = "ForwardLayer3";
    @phase = 8;
};

MLPForwardLayer "ForwardLayerFinal" = {
   #include "ForwardLayer1";
   @nxScale = .0625;
   @nyScale = .0625;
   @nf      = 10; //For 10 categories
   @phase = 9;
};

MLPOutputLayer "OutputLayer" = {  // 2
    nxScale           = .0625; //Doing 2 by 2 since this will test multiprocess as well
    nyScale           = .0625;
    nf                = 10;
    originalLayerName = "ForwardLayerFinal";
    InitVType         = "ZeroV";
    valueV            = 0;
    mirrorBCflag      = 0.0; 
    restart           = 0.0;      // from graylast
    linAlpha            = 0.1;
    spikingFlag       = 0.0;
    writeStep         = -1;
    writeNonspikingActivity = false;
    //Local target in training will be different than local target in testing: this will test that each x/y network gets the same answer
    localTarget = false; //Reducing across all output layers
    statProgressPeriod = 100;
    gtLayername = "GroundTruth";
    phase = 10;
};

CIFARGTLayer "GroundTruth" = {
    restart = 0;
    nxScale = .0625; 
    nyScale = .0625;
    nf = 10;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ZeroV";
    //define a linear relation between its input and output, with some hard cut-off.
    VThresh = -infinity;   
    startFrame = 1;
    inFilename = "/nh/compneuro/Data/CIFAR/LCA/data_batch_all15/timestamps/Image.txt"; //Timestamp file of the run, will grab class from that file
    phase = 9;
};

//Connections
IdentConn "InputS1ToS1Buffer" = {
    preLayerName = "InputS1";
    postLayerName = "S1Buffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "W1S1" = {
    preLayerName = "S1Rescale";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 2000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/W1S1_W.pvp";
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .00111; //sqrt(12288)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "B1S1" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 2000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/B1S1_W.pvp";
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .00111; //sqrt(12288)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

IdentConn "InputC1ToC1Buffer" = {
    preLayerName = "InputC1";
    postLayerName = "C1Buffer";
    channelCode = 0;
    writeStep = -1;    
    delay = 0;
};

KernelConn "W1C1" = {
    preLayerName = "C1Rescale";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 2000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/W1C1_W.pvp";
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .00111; //sqrt(12288)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "B1C1" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer1";
    channelCode = 0; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 2000;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/B1C1_W.pvp";
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    weightUpdatePeriod = 1.0;
    initialWeightUpdateTime = 1.0;
    dWMax = .00111; //sqrt(12288)/100000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W2" = {
   #include "W1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 500;
   @preLayerName = "HiddenLayer1";
   @postLayerName = "ForwardLayer2";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/W2_W.pvp";
};

KernelConn "B2" = {
   #include "B1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 500;
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayer2";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/B2_W.pvp";
};

KernelConn "W3" = {
   #include "W1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 100;
   @preLayerName = "HiddenLayer2";
   @postLayerName = "ForwardLayer3";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/W3_W.pvp";
};

KernelConn "B3" = {
   #include "B1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 100;
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayer3";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/B3_W.pvp";
};

KernelConn "W4" = {
   #include "W1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "HiddenLayer3";
   @postLayerName = "ForwardLayerFinal";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1_double/Checkpoints/Checkpoint40000/W4_W.pvp";
};

KernelConn "B4" = {
   #include "B1C1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "onesLayer";
   @postLayerName = "ForwardLayerFinal";
   @initWeightsFile = "/nh/compneuro/Data/MLPLCA/LCA/cifar_training_nodropout_S1C1/Checkpoints/Checkpoint40000/B4_W.pvp";
};
