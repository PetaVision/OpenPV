HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    stopTime= 300;
    progressStep = 1;
    outputPath = "/nh/compneuro/Data/MLPLCA/LCA/depth_slp/";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/stack_ndepth/Checkpoints";
    //checkpointReadDirIndex = ;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/MLPLCA/LCA/depth_slp/Checkpoints";
    checkpointWriteStepInterval = 5000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

ConstantLayer "onesLayer" = {
    restart = 0;
    nxScale = .125; 
    nyScale = .125;
    nf = 1;
    writeStep = -1;
    initialWriteTime = 0.0;
    mirrorBCflag = 0;
    writeSparseActivity = false;
    InitVType = "ConstantV";
    valueV    = 1;
    VThresh = -infinity;   
    phase = 0;
};

Movie "V1S2" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    readPvpFile = true;
    imageListPath = "/nh/compneuro/Data/Depth/LCA/stack_mlp/a16_V1S2.pvp";
    writeFrameToTimestamp = true;
    nf = 32;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = true;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

Movie "V1S4" = {
    #include "V1S2";
    @nxScale = .25;
    @nyScale = .25;
    @imageListPath = "/nh/compneuro/Data/Depth/LCA/stack_mlp/a17_V1S4.pvp";
    @nf = 64;
};

Movie "V1S8" = {
    #include "V1S2";
    @nxScale = .125;
    @nyScale = .125;
    @imageListPath = "/nh/compneuro/Data/Depth/LCA/stack_mlp/a18_V1S8.pvp";
    @nf = 128;
};

Movie "DepthImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false; 
    imageListPath = "/nh/compneuro/Data/Depth/raw/depth_02.txt";
    writeFrameToTimestamp = true;
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 1;
    start_frame_index = 2; //PVP file is one ahead of pvp file
    skip_frame_index = 1;
    echoFramePathnameFlag = true;
    mirrorBCflag = false;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    autoResizeFlag = 0;
    phase = 0;
    //useParamsImage = true;
};

////This is the ground truth layer
ANNLayer "DepthGT" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = 1;
    initialWriteTime = 0.0;
    mirrorBCflag = false;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 1;  
};

//MLP layers
ANNLayer "ForwardLayer" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = 1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 2;
};

ANNLayer "MLPError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 1;
    writeStep = -1; //Change based on display period
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    InitVType = "ZeroV";
    VThresh = -infinity;
    phase = 3;
};

//Depth connections
KernelConn "DepthMovieToDepthGT" = {
    preLayerName = "DepthImage";
    postLayerName = "DepthGT";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

//MLP connections
KernelConn "W1V1S2" = {
    preLayerName = "V1S2";
    postLayerName = "MLPError";
    channelCode = 2; //Doesn't actually feed to error, but attached for weight updates
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mlp/W1V1S2_W.pvp";
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.0625; //GT is from 0 to 1, input is unbounded, doing 1/16
    wMaxInit = .0625;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;

    dWMax = .05; //sqrt(512)
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "W1V1S2Clone" = {
    preLayerName = "V1S2";
    postLayerName = "ForwardLayer";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "W1V1S2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "W1V1S4" = {
   #include "W1V1S2";
   @preLayerName = "V1S4";
   @nxp = 1; 
   @nyp = 1; 
   @wMinInit = -.25; // 1/4
   @wMaxInit = .25;
   @dWMax = .05; //sqrt(256)
   //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mlp/W1V1S4_W.pvp";
};

CloneKernelConn "W1V1S4Clone" = {
   #include "W1V1S2Clone";
   @preLayerName = "V1S4";
   @originalConnName = "W1V1S4";
};

KernelConn "W1V1S8" = {
   #include "W1V1S2";
   @preLayerName = "V1S8";
   @nxp = 1; 
   @nyp = 1; 
   @wMinInit = -.5; //1/2
   @wMaxInit = .5;
   @dWMax = .05; //sqrt(128)
   //@initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mlp/W1V1S8_W.pvp";
};

CloneKernelConn "W1V1S8Clone" = {
   #include "W1V1S2Clone";
   @preLayerName = "V1S8";
   @originalConnName = "W1V1S8";
};

KernelConn "B1" = {
    preLayerName = "onesLayer";
    postLayerName = "MLPError";
    channelCode = 2; //Prev layer to next err is on inhib b
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/Depth/LCA/Checkpoints/saved_stack_mlp/B1_W.pvp";
    weightInitType = "UniformRandomWeight";
    //with uniform random weights, min/max is +-sqrt(3/m), where m is # of connections per post node
    wMinInit = -.1; //sqrt(3/9408)
    wMaxInit = .1;
        
    strength = 1.0;  
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 1;

    dWMax = .05; //sqrt(9408)/10000
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "B1Clone" = {
    preLayerName = "onesLayer";
    postLayerName = "ForwardLayer";
    channelCode = 0; //On exc channel
    writeStep = -1;
    originalConnName = "B1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

IdentConn "DepthGTToMLPError" = {
    preLayerName = "DepthGT";
    postLayerName = "MLPError";
    channelCode = 0; //Excitatory Channel
    writeStep = -1;    
    delay = 0;
};

IdentConn "ForwardLayerToMLPError" = {
    preLayerName = "ForwardLayer";
    postLayerName = "MLPError";
    channelCode = 1; //Inhibitory Channel
    writeStep = -1;    
    delay = 0;
};
