// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
   nx                              = 1;//always 1x1
   ny                              = 1;
   dt                              = 1.0;
   randomSeed                      = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   stopTime                        = 441839;       
   progressStep                    = 5000;
   outputPath                      = "output";
   filenamesContainLayerNames      = true;
   filenamesContainConnectionNames = true;
   checkpointRead                  = false;
   checkpointWrite                 = true;
   checkpointWriteDir              = "output/checkpoints";
   checkpointWriteStepInterval     = 500000;
   deleteOlderCheckpoints          = false;
   writeProgressToErr              = true;
   outputNamesOfLayersAndConns     = "LayerAndConnNames.txt";
   printTimescales                 = false;
};

//
// layers
//

SoundStream "Sound" = {
    restart                = 0;
    nxScale                = 1;
    nyScale                = 1;
    soundInputPath         = "input/furElise.wav";
    nf                     = 1;
    writeStep              = -1;
    writeSparseActivity    = false;
    displayPeriod          = 1;//5000;  // [in time steps - I think] TODO: change to [ms] 
    soundBCFlag            = true;
    soundOffset            = 1; //In seconds
    phase = 0;
};

CochlearLayer "Cochlear" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    writeStep = 1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;

    inputLayername = "Sound"; 
    targetChannel = 0;

    freqMin = 200;
    freqMax = 4200;

    dampingRatio = .5;

    sampleRate = 44100;
    
    phase = 1;
};

inverseCochlearLayer "inverseCochlear" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    // nf automatically set to 2 (real part & imaginary part)
    writeStep = 1; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;

    //These 2 layers are the same right now, but eventually the inputLayername will be different
    inputLayername = "Cochlear"; 
    cochlearLayername = "Cochlear";

    sampleRate = 44100;
    bufferLength = 1000;
    
    phase = 1;
};

SoundProbe "soundProbe" = {
   restart = 0;
   targetLayer = "Sound";
   soundOutputPath = "output/out.wav";
   soundInputType  = "input/furElise.wav";
};

