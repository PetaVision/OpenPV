// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified bliu June 20, 2014
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
   nx                              = 1;//always 1x1
   ny                              = 1;
   dt                              = 1e-6;
   randomSeed                      = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
   stopTime                        = 0.1;
   progressInterval                = 1e-3;
   outputPath                      = "output";
   filenamesContainLayerNames      = true;
   filenamesContainConnectionNames = true;
   checkpointRead                  = false;
   checkpointWrite                 = true;
   checkpointWriteDir              = "output/checkpoints";
   checkpointWriteStepInterval     = 500000;
   deleteOlderCheckpoints          = false;
   writeProgressToErr              = true;
   outputNamesOfLayersAndConns     = "LayerAndConnNames.txt";
   printTimescales                 = false;
};

//
// layers
//

SoundStream "Sound" = {
    restart                = 0;
    nxScale                = 1;
    nyScale                = 1;
    soundInputPath         = "input/A.wav";
    nf                     = 1;
    writeStep              = 1e-6;
    initialWriteTime       = 0;
    writeSparseActivity    = false;
    displayPeriod          = 1;//5000;  // [in time steps - I think] TODO: change to [ms] 
    soundBCFlag            = true;
    soundOffset            = 1; //In seconds
    phase = 0;
};

CochlearLayer "Cochlear" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    writeStep = 1e-6; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;

    inputLayername = "Sound"; 
    targetChannel = 0;

    freqMin = 200;
    freqMax = 4200;

    dampingRatio = .5;

    sampleRate = 44100;
    cochlearScale = 1000000;    
    phase = 1;
    displayPeriod = .000023;
};

inverseCochlearLayer "inverseCochlear" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    // nf automatically set to 2 (real part & imaginary part)
    writeStep = 1e-6; //Change based on display period
    initialWriteTime = 0.0; //Change based on display period 
    mirrorBCflag = 0;
    writeSparseActivity = 0;

    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;

    //These 2 layers are the same right now, but eventually the inputLayername will be different
    inputLayername = "Cochlear"; 
    cochlearLayername = "Cochlear";

    sampleRate = 44100;
    bufferLength = 1;
    
    phase = 1;
};


SoundProbe "soundProbe" = {
   restart = 0;
   targetLayer = "inverseCochlear";
   soundOutputPath = "output/out.wav";
   soundInputType  = "input/A.wav";
};


disable = true;

ANNLayer "CochlearThreshold" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 0;
    writeStep = 1000.0;
    initialWriteTime = 999.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //
    VThresh = 0; // change to desired threshold
    AMax = infinity;
    AMin = -infinity;
    AShift = 0;
    // 
    phase = 2;

};

LIF "LIFLayer" = {
    restart                         = 0;
    nxScale                         = 1;
    nyScale                         = 1;
    nf                              = 1;
    writeStep                       = -1.0;
    mirrorBCflag                    = false;
    valueBC                         = 0.0;
    writeSparseActivity             = true;
    phase                           = 0;
    
    InitVType                       = "ConstantV";
    valueV                          = -70.0;
    Vrest                           = -70.0;    // adjusted for gap of 0.025   
    Vexc                            = 0.0;     // reversal potential 
    Vinh                            = -75.0;   // chloride channel
    VinhB                           = -90.0;   // potassium reversal
    tau                             = 15.0;    // intrinsic leak membrane time constant 
};

ANNErrorLayer "ErrorLayer" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    marginWidth = 8;
    initialWriteTime = 0.0;
    writeStep = 1;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/";
};

HyPerLCALayer "A1" = {
    restart = 0;
    nxScale = 0.5;
    nyScale = 0.5;
    nf = 48;
    numChannels = 1; // should be 1
    numWindowX = 1;
    numWindowY = 1;
    initialWriteTime = 40.0;
    writeStep = 40.0;
    mirrorBCflag = 0;
    valueBC = 0;
    writeSparseActivity = 1;
    writeSparseValues = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .15; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_30/output/Checkpoints/Checkpoint6000000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.05; //  // 0.05 works for animalDB
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    VWidth = 0.05;
    //
    phase = 2;
};



IdentConn "CochleaToThreshold" = {
	preLayerName = "Cochlear";
	postLayerName = "CochlearThreshold";
	channelCode = 0;
	delay = 0;
	writeStep = -1;
};


IdentConn "ThresholdToLIF" = {
	preLayerName = "CochlearThreshold";
	postLayerName = "LIFLayer";
	channelCode = 0;
	delay = 0;
	writeStep = -1;



};

IdentConn "LIFToError" = {
	preLayerName = "LIFLayer";
	postLayerName = "ErrorLayer";
	channelCode = 0;
	delay = 0;
	writeStep = -1;
};

HyPerConn "ErrorToA1" = {
	preLayerName = "ErrorLayer";
	postLayerName = "A1";
	channelCode = 0;
	delay = 0;
	writeStep = -1;
};
