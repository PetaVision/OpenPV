///////////////////////////
// // LCA.params
//
// created by dpaiton Oct 28 2014
//
//
// Algorithm inspired by LCA:
// 	Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// 	in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = false;

HyPerCol "column" = {
    nx                              = 512;   // [px]
    ny                              = 512;   // [px]
    dt                              = 1.0;   // [ms]
    dtAdaptFlag                     = false; // Time step size is scaled by 1 / (maximimum % error)
//                                           // i.e. adaptive time step uses the average error to scale dt
//    dtScaleMax                      = 5.0;   // Maximum step size is dtScaleMax times the base time step size
//    dtScaleMin                      = 0.25;  // Minimum step size is dtScaleMin times the base time step size
//    dtChangeMax                     = 0.05;
//    dtChangeMin                     = 0.0;
//    dtMinToleratedTimeScale         = 0.001;
    randomSeed                      = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
//    numSteps                        = 1808800; 
    startTime                       = 0;
    stopTime                        = 23400; //displayPeriod * numImages
    progressInterval                = 100;
    outputPath                      = "/home/dpaiton/workspace/LIFLCA/output/LCA/";
    filenamesContainLayerNames      = true;
    filenamesContainConnectionNames = true;
    initializeFromCheckpointDir     = "";
    checkpointWriteTriggerMode      = "step";
    checkpointWrite                 = true;
    checkpointWriteDir              = "/home/dpaiton/workspace/LIFLCA/output/LCA/checkpoints/";
    checkpointWriteStepInterval     = 100000;
    deleteOlderCheckpoints          = false;
    writeProgressToErr              = true;
    outputNamesOfLayersAndConns     = "LayerAndConnNames.txt";
    suppressLastOutput              = false;
    printParamsFilename             = "LCA_LIF_trial_1.params";    
    verifyWrites                    = true;
    errorOnNotANumber               = true;
};


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS
// LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS
// LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS
// LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS
// LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS LAYERS
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////


Movie "Input" = {
    nxScale                = 1;
    nyScale                = 1;
    imageListPath          = "/home/dpaiton/workspace/LIFLCA/input/img_list.txt";
    nf                     = 1;        // nf=3 for RGB, nf=1 for greyscale
//
    writeStep              = -1;
    initialWriteTime       = 0;
    writeSparseActivity    = false;
    displayPeriod          = 40;
    start_frame_index      = 1;
    skip_frame_index       = 0;
    echoFramePathnameFlag  = true;
    writeFrameToTimestamp  = true;
    flipOnTimescaleError   = 1;
//
    offsetAnchor           = "tl";
    offsetX                = 0;
    offsetY                = 0;
    randomMovie            = 0;
    mirrorBCflag           = true;
    jitterFlag             = false;
    useImageBCflag         = false;
    inverseFlag            = false;
    normalizeLuminanceFlag = true;     // mean 0
    normalizeStdDev        = true;     // std 1
//
    writeImages            = false;
    autoResizeFlag         = false;
    readPvpFile            = false;
    updateGPU              = false;
    phase                  = 0;
};


ANNErrorLayer "Residual" = {
    nxScale                = 1;
    nyScale                = 1;
    nf                     = 1;
//
    mirrorBCflag           = false;
    valueBC                = 0;
    triggerFlag            = false;
//    initialWriteTime       = 40;
    writeStep              = -1;
    writeSparseActivity    = 0;
//
    InitVType              = "ZeroV";
    //InitVType              = "InitVFromFile";
    //Vfilename              = "/home/dpaiton/workspace/LIFLCA/output/Residual_V.pvp";
//
    VThresh                = 0.005;
    AMax                   = infinity;
    AMin                   = 0;
    AShift                 = 0; //TODO: What does this mean?
    VWidth                 = 0; //TODO: What does this mean?
    errScale               = 1; //TODO: What does this mean?
//
    updateGPU              = false;
    phase                  = 1;  
};


HyPerLCALayer "L1" = {
    nxScale                = 0.125;     // xStride = nxp * nxScale
    nyScale                = 0.125;
    nf                     = 128;  // 2x overcomplete wrt patch size // if stride < nxp; overcompleteness = 0.5 * nf / stride^2 
    numChannels            = 1;    // should be 1
    numWindowX             = 1;    // for location dependent kernels
    numWindowY             = 1;
//
    mirrorBCflag           = false;
    valueBC                = 0;
    initialWriteTime       = 40.0;
    writeStep              = 40.0;
    writeSparseActivity    = 1;
    writeSparseValues      = 1;
    triggerFlag            = false;
    selfInteract           = true;
//
    InitVType              = "UniformRandomV";
    minV                   = -1.0;
    maxV                   = .1; //0.05 above VThresh
    //InitVType              = "InitVFromFile";
    //Vfilename              = "/Users//output/Checkpoints/Checkpoint6000000/L1_V.pvp";
// 
    timeConstantTau        = 100.0;  // TODO: Describe how this works
    VThresh                = 0.05;   // TODO: Describe how this works
    AMax                   = infinity;
    AMin                   = 0;
    AShift                 = 1.0;  // 0 -> hard threshold, 1 -> soft threshold, 0 -> firm; subtract AShift from A to get output
    VWidth                 = 1.00; // 0 -> hard, 1 -> soft, 0.05 -> firm
//
    updateGpu              = true;
    phase                  = 2;
};


ANNLayer "Recon" = {
    nxScale             = 1;
    nyScale             = 1;
    nf                  = 1;
//
    triggerFlag         = true;
    triggerLayerName    = "Input";
    triggerOffset       = 1;
//
    initialWriteTime    = 40; //
    writeStep           = 40;
//
    mirrorBCflag        = 0;
    valueBC             = 0;
    writeSparseActivity = 0;
    movieLayerName      = "Input";
//
    InitVType           = "ZeroV";
    //InitVType           = "InitVFromFile";
    //Vfilename           = "/home/dpaiton/workspace/LIFLCA/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
//
    VThresh             = -infinity;
    AMax                = infinity;     // prevent reconstruction from exceeding reasonable bounds
    AMin                = -infinity; 
    AShift              = 0;
    VWidth              = 0;
// 
    phase               = 1; 
};


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS 
// CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS 
// CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS 
// CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS 
// CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS CONNECTIONS 
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////


HyPerConn "Input_to_Residual" = {
   preLayerName                  = "Input";
   postLayerName                 = "Residual";
   nxp                           = 1;
   nyp                           = 1;
   nxpShrunken                   = 1;
   nypShrunken                   = 1;
   nfp                           = 1;
   shrinkPatches                 = false;
   channelCode                   = 0;
   //
   delay                         = [0.0];
   sharedWeights                 = true;
   weightInitType                = "OneToOneWeights";
   weightInit                    = 0.03125;             // 1 / 32
   normalizeMethod               = "none";
   numAxonalArbors               = 1;
   plasticityFlag                = false;
   pvpatchAccumulateType         = "convolve";
   preActivityIsNotRate          = false;
   writeStep                     = -1;
   writeCompressedCheckpoints    = false;
   //
   selfFlag                      = false;
   updateGSynFromPostPerspective = false;
   receiveGpu                    = false; // Happens quickly, GPU overhead is probably not worth it
};

HyPerConn "L1_to_Residual" = {
    preLayerName                        = "L1";
    postLayerName                       = "Residual";
    nxp                                 = 8;
    nyp                                 = 8;
    //nxpShrunken                         = 12;
    //nypShrunken                         = 12;
    nfp                                 = 1;
    numAxonalArbors                     = 1;
    channelCode                         = 1;
    sharedWeights                       = true;                   // Acts like a kernelconn
//
    weightInitType                      = "UniformRandomWeight";
    // initWeightsFile                     was set to (NULL);
    wMinInit                            = -1;
    wMaxInit                            = 1;
    sparseFraction                      = 0.9;                    // What percentage of weights are set to 0
    plasticityFlag                      = true;
//    weightUpdatePeriod                  = 200;                    // Interval between updates, usually set to before the image flips
    initialWeightUpdateTime             = 0;
//
    triggerFlag                         = true;
    triggerLayerName                    = "Input";
    triggerOffset                       = 1;
//
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    delay                               = [0.0];
    updateGSynFromPostPerspective       = false;
//
    normalizeMethod                     = "normalizeL2";
    normalize_cutoff                    = 0;
    normalizeFromPostPerspective        = false;
    normalizeArborsIndividually         = false;
    normalizeOnInitialize               = true;      // Normalize weights after they have been initialized
    normalizeOnWeightUpdate             = true;      // Normalize weights after each batch
    minL2NormTolerated                  = 0;
    strength                            = 1;
    rMinX                               = 0;
    rMinY                               = 0;
    symmetrizeWeights                   = false;
    dWMax                               = 1.0; //TODO: Write out equation here? - how does this relate to eta?
//
    keepKernelsSynchronized             = true;
    shrinkPatches                       = false;
    receiveGpu                          = false; // Sparse convolution, most efficient on CPU
};


TransposeConn "Residual_to_L1" = {
    preLayerName                        = "Residual";
    postLayerName                       = "L1";
    channelCode                         = 0;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    updateGSynFromPostPerspective       = true;
    originalConnName                    = "L1_to_Residual";
    preDataLocal                        = true; // TODO: What is this?
    receiveGpu                          = true; // Dense convolution, most efficient on GPU
};


CloneConn "L1_to_Recon" = {
    preLayerName                        = "L1";
    postLayerName                       = "Recon";
    channelCode                         = 0;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    delay                               = [0.0];
    updateGSynFromPostPerspective       = false;
    originalConnName                    = "L1_to_Residual";
    receiveGpu                          = false;
};


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES
// PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES
// PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES
// PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES
// PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES PROBES
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

