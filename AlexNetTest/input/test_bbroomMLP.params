// PetaVision version something-point-something run at Mon Dec 15 14:29:52 2014
// Compiled with MPI and run using 1 rows and 1 columns.
// Compiled with OpenCL.
// Compiled without CUDA.
// Compiled with OpenMP parallel code and run using 8 threads.

HyPerCol "column" = {
    startTime                           = 0;
    dt                                  = 1;
    dtAdaptFlag                         = true;
    dtScaleMax                          = 1;
    dtScaleMin                          = 1;
    dtChangeMax                         = 0;
    dtChangeMin                         = 0;
    dtMinToleratedTimeScale             = 0.0001;
    stopTime                            = 10000; //size of the test set
    progressInterval                    = 10;
    writeProgressToErr                  = false;
    verifyWrites                        = true;
    outputPath                          = "output/test2_train004/";
    printParamsFilename                 = "pv.params";
    randomSeed                          = 1234567890;
    nx                                  = 32;
    ny                                  = 32;
    filenamesContainLayerNames          = 1;
    filenamesContainConnectionNames     = 1;
//  initializeFromCheckpointDir         = "output/test_004/checkpoints/Checkpoint80000/";
//    checkpointRead                      = false;
//    checkpointReadDir
//  checkpointWrite                     = false;
//  checkpointWriteDir					= "output/test2_train004/checkpoints/";
//  checkpointWriteTriggerMode			= "step";
//  checkpointWriteStepInterval			= 10000;
    suppressLastOutput                  = false;
    writeTimescales                     = true;
    errorOnNotANumber                   = false;
    deleteOlderCheckpoints				= 0;		//0 = false; 1 = true
};


//                 ___  __   __  
//  |     /\  \ / |__  |__) /__` 
//  |___ /~~\  |  |___ |  \ .__/ 
//


ConstantLayer "onesLayer" = {						// sub:ANNLayer;  Used for Bias
    nxScale                             = 0.03125;		// 1 x 1 x 1 matrix, for the ones layer
    nyScale                             = 0.03125;
    nf                                  = 1;
    phase                               = 0;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ConstantV";
    valueV                              = 1;
    writeStep                           = -1;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
};

Movie "Image" = {
    nxScale                             = 1;
    nyScale                             = 1;
    nf                                  = 3;
    phase                               = 0;
    mirrorBCflag                        = true;
    writeStep                           = -1;
//  initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
    offsetAnchor                        = "tl";
    offsetX                             = 0;
    offsetY                             = 0;
    writeImages                         = 0;
    useImageBCflag                      = false;
    autoResizeFlag                      = false;
    inverseFlag                         = false;
    normalizeLuminanceFlag              = true;  // weak whitening, make sure to do for classification, removes trivial img transformations
    normalizeStdDev                     = true;
    jitterFlag                          = 0;
    imageListPath                       = "/nh/compneuro/Data/CIFAR/images/CIFAR_test_images.txt";
    displayPeriod                       = 1;
    randomMovie                         = 0;
    readPvpFile                         = false;
    echoFramePathnameFlag               = true;
    start_frame_index                   = 1;
    skip_frame_index                    = 1;
    writeFrameToTimestamp               = true;
    flipOnTimescaleError                = true;
    resetToStartOnLoop                  = false;
};

MLPForwardLayer "ForwardLayer1" = {			// sub:ANNLayer
    nxScale                             = 0.03125;	// (1/32) fully connected; try kernalized on future runs
    nyScale                             = 0.03125;	// (1/32) 
    nf                                  = 6144;  	// 2*(32*32*3) = 6144; 
    phase                               = 3;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    InitVType                           = "ZeroV";
    triggerFlag                         = false;
    writeStep                           = -1;
    initialWriteTime                    = 0;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = -3.40282e+38;
    AMin                                = -3.40282e+38;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
    dropoutChance                       = 0;
    potentialScale                      = 1;
};

MLPSigmoidLayer "HiddenLayer1" = { 			// sub: CloneVLayer
    nxScale                             = 0.03125;
    nyScale                             = 0.03125;
    nf                                  = 6144;
    phase                               = 4;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    triggerFlag                         = false;
    writeStep                           = -1;
    sparseLayer                         = false;
    updateGpu                           = false;
    originalLayerName                   = "ForwardLayer1";			// this is where the values come from
    symSigmoid                          = true;
    linAlpha                            = 0;
};

MLPForwardLayer "ForwardLayer2" = {			// sub:ANNLayer
   #include "ForwardLayer1";
   @nf = 10;	// match 10 cifar categories
   @phase = 5;
};

MLPOutputLayer "FinalLayer" = {	  		//	sub:CloneVLayer sub:MLPSigmoidLayer
    nxScale                             = 0.03125;
    nyScale                             = 0.03125;
    nf                                  = 10;
    phase                               = 6;
    mirrorBCflag                        = false;
    valueBC                             = 0;
    triggerFlag                         = false;
    writeStep                           = -1;			// This layer doesn't do anything, must print 
    sparseLayer                         = false;
    updateGpu                           = false;
    originalLayerName                   = "ForwardLayer2";
    symSigmoid                          = true;
    linAlpha                            = 0;
    localTarget                         = false;	
    		//Reducing across all output layers
    		// Local target in training will be different than local target in testing: 
		    // this will test that each x/y network gets the same answer
    statProgressPeriod                  = 0;
};



//	Parses the ground truth from image path in the movie layer
// 	Need to have a classes.txt file in directory = 'output' to describe how to parse categories
// 	eg. using /0/ /1/ /2/ /3/ /4/ /5/ /6/ /7/ /8/ /9/ separated by a newline
// 		since that is the way the CIFAR images are divided in the CIFAR_train_images.txt
// 		[0-10] = 
//				/0/ airplane
//				/1/ automobile
//				/2/ bird
//				/3/ cat
//				/4/ deer
//				/5/ dog
//				/6/ frog
//				/7/ horse
//				/8/ ship
//				/9/ truck
//


ANNLayer "Output" = {
    nxScale                             = 0.03125;
    nyScale                             = 0.03125;
    nf                                  = 10;
    phase                               = 7;
    mirrorBCflag                        = true;
    InitVType                           = "ZeroV";
    triggerFlag                         = true;
    triggerLayerName                    = "Image";
    triggerOffset                       = 0;
    writeStep                           = 1;
    initialWriteTime                    = 1;
    sparseLayer                         = false;
    updateGpu                           = false;
    VThresh                             = 0;
    AMin                                = 0;
    AMax                                = 3.40282e+38;
    AShift                              = 0;
    VWidth                              = 0;
};	
	


//   __   __             ___  __  ___    __        __  
//  /  ` /  \ |\ | |\ | |__  /  `  |  | /  \ |\ | /__` 
//  \__, \__/ | \| | \| |___ \__,  |  | \__/ | \| .__/ 
// 

//
//	

HyPerConn "W1" = {			//Hyperconn with shared weights set to true  // may want to rename to match actual connection
    preLayerName                        = "Image";
    postLayerName                       = "ForwardLayer1";
    channelCode                         = 0;				// 0 = activation, 1 = inhibition, -1 = Do not update on this channel		
    //weightInitType                      = "UniformRandomWeight";
    // initWeightsFile                     was set to (NULL);
    weightInitType = "FileWeight";
    initWeightsFile = "output/test_004/checkpoints/Checkpoint90000/W1_W.pvp";
    //wMinInit                            = -1.225;
    //wMaxInit                            = 1.225;
    sparseFraction                      = 0;
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;	// 
    triggerFlag                         = false;
    weightUpdatePeriod                  = 1;
    initialWeightUpdateTime             = 0;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    initialWriteTime                    = 0;
    writeCompressedWeights              = false;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    delay                               = [0.000000];
    nxp                                 = 1;
    nyp                                 = 1;
    nxpShrunken                         = 1;
    nypShrunken                         = 1;
    nfp                                 = 6144;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    normalizeMethod                     = "none";
    dWMax                               = 0.1;
    keepKernelsSynchronized             = true;
    useMask                             = false;
    receiveGpu                          = false;
    sharedWeights						= true;	
};


HyPerConn "B1" = {
    preLayerName                        = "onesLayer";
    postLayerName 						= "ForwardLayer1";
    channelCode                         = 0;
    // weightInitType                      = "UniformRandomWeight";
    // initWeightsFile                     was set to (NULL);
    weightInitType = "FileWeight";
    initWeightsFile = "output/test_004/checkpoints/Checkpoint90000/B1_W.pvp";
   // wMinInit                            = -1.225;
    // wMaxInit                            = 1.225;
    sparseFraction                      = 0;
    numAxonalArbors                     = 1;
    plasticityFlag                      = false;	//
    triggerFlag                         = false;
    weightUpdatePeriod                  = 1;
    initialWeightUpdateTime             = 0;
    pvpatchAccumulateType               = "convolve";
    preActivityIsNotRate                = false;
    writeStep                           = -1;
    writeCompressedCheckpoints          = false;
    selfFlag                            = false;
    combine_dW_with_W_flag              = false;
    delay                               = [0.000000];
    nxp                                 = 1;
    nyp                                 = 1;
    nxpShrunken                         = 1;
    nypShrunken                         = 1;
    nfp                                 = 6144;
    shrinkPatches                       = false;
    updateGSynFromPostPerspective       = false;
    normalizeMethod                     = "none";
    dWMax                               = 0.1;
    keepKernelsSynchronized             = true;
    useMask                             = false;
    receiveGpu                          = false;
    sharedWeights						= true;

};


HyPerConn "W2" = {
   #include "W1";
   @nxp = 1;
   @nyp = 1;
   @nfp = 10;
   @preLayerName = "HiddenLayer1";
   @postLayerName = "ForwardLayer2";
   @initWeightsFile = "output/test_004/checkpoints/Checkpoint90000/W2_W.pvp";
};


HyPerConn "B2" = {
   #include "B1";
   @postLayerName = "ForwardLayer2";
   @nfp = 10;
   @initWeightsFile = "output/test_004/checkpoints/Checkpoint90000/B2_W.pvp";
};


IdentConn "FinalLayerToOutput" = {
    preLayerName                        = "FinalLayer";
    postLayerName                       = "Output";
    channelCode                         = 0;
    // initWeightsFile                     was set to (NULL);
    writeStep                           = -1;
    delay                               = [0.000000];
    receiveGpu                          = false;
};
