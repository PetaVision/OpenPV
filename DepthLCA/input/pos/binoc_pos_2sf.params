// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    numSteps = 200000;       // Runs 3 times through entire dataset
    progressStep = 100;
    outputPath = "/nh/compneuro/Data/Depth/LCA/binoc_pos_2sf";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/dataset01_binocular/Checkpoints";
    //checkpointReadDirIndex = 250000;
    checkpointWrite = true;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/binoc_pos_2sf/Checkpoints";
    checkpointWriteStepInterval = 1000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/Depth/concat_data/image_00.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 200;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNTriggerUpdateOnNewImageLayer "LeftBipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0; //Change based on display period
    initialWriteTime = 199.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    movieLayerName = "LeftImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 2;
};

ANNTriggerUpdateOnNewImageLayer "LeftGanglion1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNTriggerUpdateOnNewImageLayer "LeftGanglion2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNTriggerUpdateOnNewImageLayer "LeftDownsample1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

ANNTriggerUpdateOnNewImageLayer "LeftDownsample2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

RescaleLayer "LeftRescale1" = {
    restart                         = false;
    originalLayerName               = "LeftDownsample1";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 1;
    mirrorBCflag                    = false;

    phase                           = 5;

    writeStep                       = 200;
    initialWriteTime                = 199;
    writeSparseActivity             = false;

    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
};

RescaleLayer "LeftRescale2" = {
    restart                         = false;
    originalLayerName               = "LeftDownsample2";
    nxScale                         = .25; 
    nyScale                         = .25; 
    nf                              = 1;
    mirrorBCflag                    = false;

    phase                           = 5;

    writeStep                       = 200;
    initialWriteTime                = 199;
    writeSparseActivity             = false;

    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
};

ANNErrorLayer "LeftError1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

ANNErrorLayer "LeftError2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "LeftRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    initialWriteTime = 201.0; //1 + writestep
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase
};

ANNTriggerUpdateOnNewImageLayer "LeftRecon2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    initialWriteTime = 201.0;
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase 
};

////
//// Left depth eye layers
////
//
//
//
//Movie "LeftDepthImage" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    readPvpFile = true; //Reading a pvp file
//    imageListPath = "/nh/compneuro/Data/Depth/depth_data_1/pvp/depth_00.pvp";
//    nf = 32;
//    marginWidth = 0;
//    writeStep = -1;
//    writeSparseActivity = false;
//    displayPeriod = 2000;
//    start_frame_index = 1;
//    skip_frame_index = 1;
//    echoFramePathnameFlag = false;
//    mirrorBCflag = true;
//    jitterFlag = 0;
//    useImageBCflag = false;
//    inverseFlag = false;
//    normalizeLuminanceFlag = false;
//    writeImages = false;
//    offsetX = 0;
//    offsetY = 0;
//    randomMovie = 0;
//    phase = 0;
//    //useParamsImage = true;
//};
//
//ANNLayer "LeftDepthDownsample" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 0;
//    writeStep = 2000;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
//    //
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    //
//    phase = 5;  
//};
//
//ANNErrorLayer "LeftDepthError" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 1;
//    writeStep = 2000;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
//    //
//    VThresh = 0.01;
//    VMax =  infinity;
//    VMin = 0;
//    VShift = 0;
//    //
//    phase = 6;  
//};
//
//ANNLayer "LeftDepthRecon" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 0;
//    writeStep = 2000.0;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
//    //
//    VThresh = -infinity;
//    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
//    VMin = -infinity; 
//    VShift = 0;
//    // 
//    phase = 8; 
//};

//
// Right eye layers
//

Movie "RightImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/Depth/concat_data/image_01.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 200;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNTriggerUpdateOnNewImageLayer "RightBipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    movieLayerName = "RightImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    
    phase = 2;
};

ANNTriggerUpdateOnNewImageLayer "RightGanglion1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNTriggerUpdateOnNewImageLayer "RightGanglion2" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    // 
    phase = 3;
};

ANNTriggerUpdateOnNewImageLayer "RightDownsample1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

ANNTriggerUpdateOnNewImageLayer "RightDownsample2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

RescaleLayer "RightRescale1" = {
    restart                         = false;
    originalLayerName               = "RightDownsample1";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 1;
    mirrorBCflag                    = false;

    phase                           = 5;

    writeStep                       = 200;
    initialWriteTime                = 199;
    writeSparseActivity             = false;

    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
};

RescaleLayer "RightRescale2" = {
    restart                         = false;
    originalLayerName               = "RightDownsample2";
    nxScale                         = .25; 
    nyScale                         = .25; 
    nf                              = 1;
    mirrorBCflag                    = false;

    phase                           = 5;

    writeStep                       = 200;
    initialWriteTime                = 199;
    writeSparseActivity             = false;

    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
};

ANNErrorLayer "RightError1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

ANNErrorLayer "RightError2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0;
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "RightRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    initialWriteTime = 201.0;
    writeStep = 200.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase 
};

ANNTriggerUpdateOnNewImageLayer "RightRecon2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 1;
    initialWriteTime = 201.0;
    writeStep = 200.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "RightImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase 
};

//
// Right depth eye layers
//
//
//Movie "RightDepthImage" = {
//    restart = 0;
//    nxScale = 1;
//    nyScale = 1;
//    readPvpFile = true; //Reading pvp file
//    imageListPath = "/nh/compneuro/Data/Depth/depth_data_1/pvp/depth_01.pvp";
//    nf = 32;
//    marginWidth = 0; 
//    writeStep = -1;
//    writeSparseActivity = false;
//    displayPeriod = 2000;
//    start_frame_index = 1;
//    skip_frame_index = 1;
//    echoFramePathnameFlag = false;
//    mirrorBCflag = true;
//    jitterFlag = 0;
//    useImageBCflag = false;
//    inverseFlag = false;
//    normalizeLuminanceFlag = false;
//    writeImages = false;
//    offsetX = 0;
//    offsetY = 0;
//    randomMovie = 0;
//    phase = 0;
//    //useParamsImage = true;
//};
//
//ANNLayer "RightDepthDownsample" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 0;
//    writeStep = 2000;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
//    //
//    VThresh = -infinity;
//    VMax =  infinity;
//    VMin = -infinity;
//    VShift = 0;
//    //
//    phase = 5;  
//};
//
//ANNErrorLayer "RightDepthError" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 1;
//    writeStep = 2000;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
//    //
//    VThresh = 0.01;
//    VMax =  infinity;
//    VMin = 0;
//    VShift = 0;
//    //
//    phase = 6;  
//};
//
//ANNLayer "RightDepthRecon" = {
//    restart = 0;
//    nxScale = .125;
//    nyScale = .125;
//    nf = 32;
//    marginWidth = 0;
//    writeStep = 2000.0;
//    initialWriteTime = 1999.0;
//    mirrorBCflag = 1;
//    writeSparseActivity = 0;
//    //
//    InitVType = "ZeroV";
//    //InitVType = "InitVFromFile";
//    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
//    //
//    VThresh = -infinity;
//    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
//    VMin = -infinity; 
//    VShift = 0;
//    // 
//    phase = 8; 
//};

//Position layers
Image "Position" = {
    restart = 0;  // make only a certain layer restart
    nxScale = 1;  
    nyScale = 1; 
    imagePath = "/nh/compneuro/Data/Depth/pos.pvp";
    nf = 5; 
    writeStep = -1;  //-1 means doesn't write for log
    writeSparseActivity = false;
    mirrorBCflag = true;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    phase = 0;
};

ConstantLayer "PosDownsample1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

ConstantLayer "PosDownsample2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

ANNErrorLayer "PosError1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

ANNErrorLayer "PosError2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    phase = 6;  
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "PosRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 5;
    initialWriteTime = 201.0; //1 + writestep
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase
};

ANNTriggerUpdateOnNewImageLayer "PosRecon2" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 5;
    initialWriteTime = 201.0;
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase 
};

// binoclular layers

HyPerLCALayer "BinocularV1S1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .55; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    // 
    VThresh = 0.5; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 7;
};

HyPerLCALayer "BinocularV1S2" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 64; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    //
    InitVType = "UniformRandomV";
    minV = -1.0;
    maxV = .55; //0.05 above VThresh
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1_V.pvp";
    // 
    timeConstantTau = 200.0;
    // 
    VThresh = 0.5; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 7;
};

// connections

// Left eye connections

KernelConn "LeftImageToLeftBipolarCenter" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftBipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglion1Center" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglion1Surround" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion1";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftBipolarToLeftGanglion2Center" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion2";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 3;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglion2Surround" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion2";
    channelCode = 1;
    nxp = 33; 
    nyp = 33; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 15.5;
    rMax  = 23;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftGanglion1ToLeftDownsample1" = {
    preLayerName = "LeftGanglion1";
    postLayerName = "LeftDownsample1";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftGanglion2ToLeftDownsample2" = {
    preLayerName = "LeftGanglion2";
    postLayerName = "LeftDownsample2";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

IdentConn "LeftRescale1ToLeftError1" = {
    preLayerName = "LeftRescale1";
    postLayerName = "LeftError1";
    channelCode = 0;
    delay = 0;
    writeStep = -1;

    updateGSynFromPostPerspective = false;
};

IdentConn "LeftRescale2ToLeftError2" = {
    preLayerName = "LeftRescale2";
    postLayerName = "LeftError2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;

    updateGSynFromPostPerspective = false;
};

// Left depth connections

//KernelConn "LeftDepthMovieToLeftDepthDownsample" = {
//    preLayerName = "LeftDepthImage";
//    postLayerName = "LeftDepthDownsample";
//    channelCode = 0;
//    nxp = 1;
//    nyp = 1;
//    nfp = 32;
//    numAxonalArbors = 1;
//    writeStep = -1;
//    initFromLastFlag = 0;
//    
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 10000;
//    rMax  = 8;
//    rMin = 0;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//        
//    strength = 1.0;  
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//    
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    stochasticReleaseFlag = false;
//     
//    delay = 0;
//     
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};
//
//IdentConn "LeftDepthDownsampleToLeftDepthError" = {
//    preLayerName = "LeftDepthDownsample";
//    postLayerName = "LeftDepthError";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//};

// Right eye connections

KernelConn "RightImageToRightBipolarCenter" = {
    preLayerName = "RightImage";
    postLayerName = "RightBipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "RightBipolarToRightGanglion1Center" = {
    preLayerName = "RightBipolar";
    postLayerName = "RightGanglion1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "RightBipolarToRightGanglion1Surround" = {
    preLayerName = "RightBipolar";
    postLayerName = "RightGanglion1";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "RightBipolarToRightGanglion2Center" = {
    preLayerName = "RightBipolar";
    postLayerName = "RightGanglion2";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 3;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "RightBipolarToRightGanglion2Surround" = {
    preLayerName = "RightBipolar";
    postLayerName = "RightGanglion2";
    channelCode = 1;
    nxp = 33; 
    nyp = 33; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 15.5;
    rMax  = 23;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "RightGanglion1ToRightDownsample1" = {
    preLayerName = "RightGanglion1";
    postLayerName = "RightDownsample1";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "RightGanglion2ToRightDownsample2" = {
    preLayerName = "RightGanglion2";
    postLayerName = "RightDownsample2";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

IdentConn "RightRescale1ToRightError1" = {
    preLayerName = "RightRescale1";
    postLayerName = "RightError1";
    channelCode = 0;
    delay = 0;
    writeStep = -1;

    updateGSynFromPostPerspective = false;
};

IdentConn "RightRescale2ToRightError2" = {
    preLayerName = "RightRescale2";
    postLayerName = "RightError2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;

    updateGSynFromPostPerspective = false;
};

//Right depth Connections

//KernelConn "RightDepthMovieToRightDepthDownsample" = {
//    preLayerName = "RightDepthImage";
//    postLayerName = "RightDepthDownsample";
//    channelCode = 0;
//    nxp = 1;
//    nyp = 1;
//    nfp = 32;
//    numAxonalArbors = 1;
//    writeStep = -1;
//    initFromLastFlag = 0;
//    
//    weightInitType = "Gauss2DWeight";
//    aspect = 1;
//    sigma = 10000;
//    rMax  = 8;
//    rMin = 0;
//    numOrientationsPre = 1;
//    numOrientationsPost = 1;
//        
//    strength = 1.0;  
//    normalizeMethod = "normalizeSum";
//    minSumTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = true;
//    symmetrizeWeights = false;
//    
//    shrinkPatches = false;
//    //writeCompressedWeights = 0.0;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = 0;
//    stochasticReleaseFlag = false;
//     
//    delay = 0;
//     
//    preActivityIsNotRate = false;
//    selfFlag = false;
//    shmget_flag = false;
//};
//
//IdentConn "RightDepthDownsampleToRightDepthError" = {
//    preLayerName = "RightDepthDownsample";
//    postLayerName = "RightDepthError";
//    channelCode = 0;
//    delay = 0;
//    writeStep = -1;
//};

//Pos connections

KernelConn "PositionToPosDownsample1" = {
    preLayerName = "Position";
    postLayerName = "PosDownsample1";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    stochasticReleaseFlag = false;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

IdentConn "PosDownsample1ToPosError1" = {
    preLayerName = "PosDownsample1";
    postLayerName = "PosError1";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};

KernelConn "PositionToPosDownsample2" = {
    preLayerName = "Position";
    postLayerName = "PosDownsample2";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
    stochasticReleaseFlag = false;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

IdentConn "PosDownsample1ToPosError2" = {
    preLayerName = "PosDownsample2";
    postLayerName = "PosError2";
    channelCode = 0;
    delay = 0;
    writeStep = -1;
};


// binocular connections

KernelConn "BinocularV1S1ToLeftError1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "LeftError1";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToLeftError2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "LeftError2";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nxpShrunken = 32;
    nypShrunken = 32;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "LeftError1ToBinocularV1S1" = {
    preLayerName = "LeftError1";
    postLayerName = "BinocularV1S1";
    channelCode = 0;
    originalConnName = "BinocularV1S1ToLeftError1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftError2ToBinocularV1S2" = {
    preLayerName = "LeftError2";
    postLayerName = "BinocularV1S2";
    channelCode = 0;
    originalConnName = "BinocularV1S2ToLeftError2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

CloneKernelConn "BinocularV1S1ToLeftRecon1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "LeftRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S1ToLeftError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1S2ToLeftRecon2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "LeftRecon2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S2ToLeftError2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S1ToRightError1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "RightError1";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToRightError2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "RightError2";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nxpShrunken = 32;
    nypShrunken = 32;
    //nxp = 15;
    //nyp = 15;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1;
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "RightError1ToBinocularV1S1" = {
    preLayerName = "RightError1";
    postLayerName = "BinocularV1S1";
    channelCode = 0;
    originalConnName = "BinocularV1S1ToRightError1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "RightError2ToBinocularV1S2" = {
    preLayerName = "RightError2";
    postLayerName = "BinocularV1S2";
    channelCode = 0;
    originalConnName = "BinocularV1S2ToRightError2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

CloneKernelConn "BinocularV1S1ToRightRecon1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "RightRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S1ToRightError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1S2ToRightRecon2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "RightRecon2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S2ToRightError2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

// Depth Binocular Connections

//KernelConn "BinocularV1S1ToLeftDepthError" = {
//    preLayerName = "BinocularV1S1";
//    postLayerName = "LeftDepthError";
//    channelCode = 1;
//    nxp = 3; 
//    nyp = 3; 
//    nfp = 32;
//    numAxonalArbors = 8;
//    initFromLastFlag = 0;
//    //
//    //weightInitType = "FileWeight";
//    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
//    //ightInitType = "FileWeight";
//    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
//    weightInitType = "UniformRandomWeight";
//    wMinInit = -1.0;
//    wMaxInit = 1.0;
//    sparseFraction = 0;
//    //
//    strength = 0.25; 
//    normalizeMethod = "normalizeL2";
//    minL2NormTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = false;
//    symmetrizeWeights = false;
//    //
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//    //
//    writeStep = 2000;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = true;
//    weightUpdatePeriod = 50.0;
//    initialWeightUpdateTime = 1999.0;
//    initialWriteTime = 0.0;
//    dWMax = 0.05; // 200.0 used for initial training
//    selfFlag = false;
//    shmget_flag = false;
//    //
//    delay = 0;
//    //
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//    useWindowPost = false;
//};
//
//KernelConn "BinocularV1S2ToLeftDepthError" = {
//    preLayerName = "BinocularV1S2";
//    postLayerName = "LeftDepthError";
//    channelCode = 1;
//    nxp = 3; 
//    nyp = 3; 
//    nfp = 32;
//    numAxonalArbors = 8;
//    initFromLastFlag = 0;
//    //
//    //weightInitType = "FileWeight";
//    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
//    //ightInitType = "FileWeight";
//    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
//    weightInitType = "UniformRandomWeight";
//    wMinInit = -1.0;
//    wMaxInit = 1.0;
//    sparseFraction = 0;
//    //
//    strength = 0.25; 
//    normalizeMethod = "normalizeL2";
//    minL2NormTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = false;
//    symmetrizeWeights = false;
//    //
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//    //
//    writeStep = 2000;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = true;
//    weightUpdatePeriod = 50.0;
//    initialWeightUpdateTime = 1999.0;
//    initialWriteTime = 0.0;
//    dWMax = 0.05; // 200.0 used for initial training
//    selfFlag = false;
//    shmget_flag = false;
//    //
//    delay = 0;
//    //
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//    useWindowPost = false;
//};
//
//TransposeConn "LeftDepthErrorToBinocularV1S1" = {
//    preLayerName = "LeftDepthError";
//    postLayerName = "BinocularV1S1";
//    channelCode = 0;
//    originalConnName = "BinocularV1S1ToLeftDepthError";
//    selfFlag = false;
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    writeStep = -1;
//    writeCompressedCheckpoints = false;
//    shmget_flag = false;
//    delay = 0;
//    stochasticReleaseFlag = false;
//    useWindowPost = true;
//};
//
//TransposeConn "LeftDepthErrorToBinocularV1S2" = {
//    preLayerName = "LeftDepthError";
//    postLayerName = "BinocularV1S2";
//    channelCode = 0;
//    originalConnName = "BinocularV1S2ToLeftDepthError";
//    selfFlag = false;
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    writeStep = -1;
//    writeCompressedCheckpoints = false;
//    shmget_flag = false;
//    delay = 0;
//    stochasticReleaseFlag = false;
//    useWindowPost = true;
//};
//
//CloneKernelConn "BinocularV1S1ToLeftDepthRecon" = {
//    preLayerName = "BinocularV1S1";
//    postLayerName = "LeftDepthRecon";
//    channelCode = 0;
//    writeStep = -1;
//    originalConnName = "BinocularV1S1ToLeftDepthError";
//    selfFlag = false;
//    stochasticReleaseFlag = false;
//    delay = 0;
//    preActivityIsNotRate = false;
//    useWindowPost = false;
//};
//
//CloneKernelConn "BinocularV1S2ToLeftDepthRecon" = {
//    preLayerName = "BinocularV1S2";
//    postLayerName = "LeftDepthRecon";
//    channelCode = 0;
//    writeStep = -1;
//    originalConnName = "BinocularV1S2ToLeftDepthError";
//    selfFlag = false;
//    stochasticReleaseFlag = false;
//    delay = 0;
//    preActivityIsNotRate = false;
//    useWindowPost = false;
//};
//
//KernelConn "BinocularV1S1ToRightDepthError" = {
//    preLayerName = "BinocularV1S1";
//    postLayerName = "RightDepthError";
//    channelCode = 1;
//    nxp = 3;
//    nyp = 3;
//    nfp = 32;
//    numAxonalArbors = 8;
//    initFromLastFlag = 0;
//    //
//    //weightInitType = "FileWeight";
//    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
//    //ightInitType = "FileWeight";
//    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
//    weightInitType = "UniformRandomWeight";
//    wMinInit = -1.0;
//    wMaxInit = 1.0;
//    sparseFraction = 0;
//    //
//    strength = 0.25; 
//    normalizeMethod = "normalizeL2";
//    minL2NormTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = false;
//    symmetrizeWeights = false;
//    //
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//    //
//    writeStep = 2000;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = true;
//    weightUpdatePeriod = 50.0;
//    initialWeightUpdateTime = 1999.0;
//    initialWriteTime = 0.0;
//    dWMax = 0.05; // 200.0 used for initial training
//    selfFlag = false;
//    shmget_flag = false;
//    //
//    delay = 0;
//    //
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//    useWindowPost = false;
//};
//
//KernelConn "BinocularV1S2ToRightDepthError" = {
//    preLayerName = "BinocularV1S2";
//    postLayerName = "RightDepthError";
//    channelCode = 1;
//    nxp = 3;
//    nyp = 3;
//    nfp = 32;
//    numAxonalArbors = 8;
//    initFromLastFlag = 0;
//    //
//    //weightInitType = "FileWeight";
//    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
//    //ightInitType = "FileWeight";
//    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
//    weightInitType = "UniformRandomWeight";
//    wMinInit = -1.0;
//    wMaxInit = 1.0;
//    sparseFraction = 0;
//    //
//    strength = 0.25; 
//    normalizeMethod = "normalizeL2";
//    minL2NormTolerated = 0;
//    normalizeArborsIndividually = 0;
//    normalize_cutoff = 0.0;
//    normalizeFromPostPerspective = false;
//    symmetrizeWeights = false;
//    //
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    keepKernelsSynchronized = true; 
//    combine_dW_with_W_flag = false; 
//    //
//    writeStep = 2000;
//    writeCompressedWeights = false;
//    writeCompressedCheckpoints = false;
//    plasticityFlag = true;
//    weightUpdatePeriod = 50.0;
//    initialWeightUpdateTime = 1999.0;
//    initialWriteTime = 0.0;
//    dWMax = 0.05; // 200.0 used for initial training
//    selfFlag = false;
//    shmget_flag = false;
//    //
//    delay = 0;
//    //
//    stochasticReleaseFlag = false;
//    shrinkPatches = false;
//    useWindowPost = false;
//};
//
//TransposeConn "RightDepthErrorToBinocularV1S1" = {
//    preLayerName = "RightDepthError";
//    postLayerName = "BinocularV1S1";
//    channelCode = 0;
//    originalConnName = "BinocularV1S1ToRightDepthError";
//    selfFlag = false;
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    writeStep = -1;
//    writeCompressedCheckpoints = false;
//    shmget_flag = false;
//    delay = 0;
//    stochasticReleaseFlag = false;
//    useWindowPost = true;
//};
//
//TransposeConn "RightDepthErrorToBinocularV1S2" = {
//    preLayerName = "RightDepthError";
//    postLayerName = "BinocularV1S2";
//    channelCode = 0;
//    originalConnName = "BinocularV1S2ToRightDepthError";
//    selfFlag = false;
//    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
//    writeStep = -1;
//    writeCompressedCheckpoints = false;
//    shmget_flag = false;
//    delay = 0;
//    stochasticReleaseFlag = false;
//    useWindowPost = true;
//};
//
//CloneKernelConn "BinocularV1S1ToRightDepthRecon" = {
//    preLayerName = "BinocularV1S1";
//    postLayerName = "RightDepthRecon";
//    channelCode = 0;
//    writeStep = -1;
//    originalConnName = "BinocularV1S1ToRightDepthError";
//    selfFlag = false;
//    stochasticReleaseFlag = false;
//    delay = 0;
//    preActivityIsNotRate = false;
//    useWindowPost = false;
//};
//
//CloneKernelConn "BinocularV1S2ToRightDepthRecon" = {
//    preLayerName = "BinocularV1S2";
//    postLayerName = "RightDepthRecon";
//    channelCode = 0;
//    writeStep = -1;
//    originalConnName = "BinocularV1S2ToRightDepthError";
//    selfFlag = false;
//    stochasticReleaseFlag = false;
//    delay = 0;
//    preActivityIsNotRate = false;
//    useWindowPost = false;
//};

//Position connections

KernelConn "BinocularV1S1ToPosError1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "PosError1";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 5;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToPosError2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "PosError2";
    channelCode = 1;
    nxp = 34;
    nyp = 34;
    nxpShrunken = 32;
    nypShrunken = 32;
    nfp = 5;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    //weightInitType = "FileWeight";
    //initWeightsFile = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/V1ToError_W.pvp";
    //ightInitType = "FileWeight";
    //itWeightsFile = "/Users/garkenyon/workspace/HyPerHLCA2/output_animal1200000_color/Checkpoints/Checkpoint1200000/V1ToError_W.pvp";
    weightInitType = "UniformRandomWeight";
    wMinInit = -1.0;
    wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = .57735; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = true;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 1; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

TransposeConn "PosError1ToBinocularV1S1" = {
    preLayerName = "PosError1";
    postLayerName = "BinocularV1S1";
    channelCode = 0;
    originalConnName = "BinocularV1S1ToPosError1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "PosError2ToBinocularV1S2" = {
    preLayerName = "PosError2";
    postLayerName = "BinocularV1S2";
    channelCode = 0;
    originalConnName = "BinocularV1S2ToPosError2";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

CloneKernelConn "BinocularV1S1ToPosRecon1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "PosRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S1ToPosError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1S2ToPosRecon2" = {
    preLayerName = "BinocularV1S2";
    postLayerName = "PosRecon2";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S2ToPosError2";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

// Probes

StatsProbe "LeftGanglion1StatsFile" = {
    targetLayer = "LeftGanglion1";
    probeOutputFile = "LeftGanglion1_Stats.txt";
};

StatsProbe "LeftGanglion2StatsFile" = {
    targetLayer = "LeftGanglion2";
    probeOutputFile = "LeftGanglion2_Stats.txt";
};

StatsProbe "LeftDownsample1StatsFile" = {
    targetLayer = "LeftDownsample1";
    probeOutputFile = "LeftDownsample1_Stats.txt";
};

StatsProbe "LeftDownsample2StatsFile" = {
    targetLayer = "LeftDownsample2";
    probeOutputFile = "LeftDownsample2_Stats.txt";
};

StatsProbe "LeftRescale1StatsFile" = {
    targetLayer = "LeftRescale1";
    probeOutputFile = "LeftRescale1_Stats.txt";
};

StatsProbe "LeftRescale2StatsFile" = {
    targetLayer = "LeftRescale2";
    probeOutputFile = "LeftRescale2_Stats.txt";
};

StatsProbe "LeftError1StatsFile" = {
    targetLayer = "LeftError1";
    probeOutputFile = "LeftError1_Stats.txt";
};

StatsProbe "LeftError2StatsFile" = {
    targetLayer = "LeftError2";
    probeOutputFile = "LeftError2_Stats.txt";
};

StatsProbe "LeftRecon1StatsFile" = {
    targetLayer = "LeftRecon1";
    probeOutputFile = "LeftRecon1_Stats.txt";
};

StatsProbe "LeftRecon2StatsFile" = {
    targetLayer = "LeftRecon2";
    probeOutputFile = "LeftRecon2_Stats.txt";
};

//StatsProbe "LeftDepthDownsampleStatsFile" = {
//   targetLayer = "LeftDepthDownsample";
//   probeOutputFile = "LeftDepthDownsample_Stats.txt";
//};
//
//StatsProbe "LeftDepthErrorStatsFile" = {
//    targetLayer = "LeftDepthError";
//    probeOutputFile = "LeftDepthError_Stats.txt";
//};
//
//StatsProbe "LeftDepthReconStatsFile" = {
//    targetLayer = "LeftDepthRecon";
//    probeOutputFile = "LeftDepthRecon_Stats.txt";
//};

StatsProbe "RightGanglion1StatsFile" = {
    targetLayer = "RightGanglion1";
    probeOutputFile = "RightGanglion1_Stats.txt";
};

StatsProbe "RightGanglion2StatsFile" = {
    targetLayer = "RightGanglion2";
    probeOutputFile = "RightGanglion2_Stats.txt";
};

StatsProbe "RightDownsample1StatsFile" = {
    targetLayer = "RightDownsample1";
    probeOutputFile = "RightDownsample1_Stats.txt";
};

StatsProbe "RightDownsample2StatsFile" = {
    targetLayer = "RightDownsample2";
    probeOutputFile = "RightDownsample2_Stats.txt";
};

StatsProbe "RightRescale1StatsFile" = {
    targetLayer = "RightRescale1";
    probeOutputFile = "RightRescale1_Stats.txt";
};

StatsProbe "RightRescale2StatsFile" = {
    targetLayer = "RightRescale2";
    probeOutputFile = "RightRescale2_Stats.txt";
};

StatsProbe "RightError1StatsFile" = {
    targetLayer = "RightError1";
    probeOutputFile = "RightError1_Stats.txt";
};

StatsProbe "RightError2StatsFile" = {
    targetLayer = "RightError2";
    probeOutputFile = "RightError2_Stats.txt";
};

StatsProbe "RightRecon1StatsFile" = {
    targetLayer = "RightRecon1";
    probeOutputFile = "RightRecon1_Stats.txt";
};

StatsProbe "RightRecon2StatsFile" = {
    targetLayer = "RightRecon2";
    probeOutputFile = "RightRecon2_Stats.txt";
};

//StatsProbe "RightDepthDownsampleStatsFile" = {
//   targetLayer = "RightDepthDownsample";
//   probeOutputFile = "RightDepthDownsample_Stats.txt";
//};
//
//StatsProbe "RightDepthErrorStatsFile" = {
//    targetLayer = "RightDepthError";
//    probeOutputFile = "RightDepthError_Stats.txt";
//};
//
//StatsProbe "RightDepthReconStatsFile" = {
//    targetLayer = "RightDepthRecon";
//    probeOutputFile = "RightDepthRecon_Stats.txt";
//};

StatsProbe "BinocularV1S1StatsFile" = {
    targetLayer = "BinocularV1S1";
    probeOutputFile = "BinocularV1S1_Stats.txt";
};

StatsProbe "BinocularV1S2StatsFile" = {
    targetLayer = "BinocularV1S2";
    probeOutputFile = "BinocularV1S2_Stats.txt";
};

StatsProbe "PosDownsample1StatsFile" = {
    targetLayer = "PosDownsample1";
    probeOutputFile = "PosDownsample1_Stats.txt";
};

StatsProbe "PosDownsample2StatsFile" = {
    targetLayer = "PosDownsample2";
    probeOutputFile = "PosDownsample2_Stats.txt";
};

StatsProbe "PosError1StatsFile" = {
    targetLayer = "PosError1";
    probeOutputFile = "PosError1_Stats.txt";
};

StatsProbe "PosError2StatsFile" = {
    targetLayer = "PosError2";
    probeOutputFile = "PosError2_Stats.txt";
};

StatsProbe "PosRecon1StatsFile" = {
    targetLayer = "PosRecon1";
    probeOutputFile = "PosRecon1_Stats.txt";
};

StatsProbe "PosRecon2StatsFile" = {
    targetLayer = "PosRecon2";
    probeOutputFile = "PosRecon2_Stats.txt";
};

