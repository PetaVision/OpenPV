// // HyPerHLCA.params
//
// created by peteschultz: Sept 27, 2012, modified garkenyon, 1/20/13
//
//
// Implements the locally competitive algorithm described in
// Rozell et al., "Sparse Coding via Thresholding and Local Cometition
// in Neural Circuits," Neural Computation 20, 2526-2563 (2008).
///////////////////////////

debugParsing = true;

HyPerCol "column" = {
    nx = 1200; //1242;  // KITTI synced value
    ny = 216;  //218;
    dt = 1.0;
    randomSeed = 1234567890;  // Must be at least 8 digits long.  // if not set here,  clock time is used to generate seed
    startTime = 0;
    numSteps = 67800;       // Runs 1 times through entire dataset
    progressStep = 200;
    outputPath = "/nh/compneuro/Data/Depth/LCA/binoc_test";
    filenamesContainLayerNames = true;
    filenamesContainConnectionNames = true;
    checkpointRead = false; //true;
    //checkpointReadDir = "/nh/compneuro/Data/Depth/LCA/dataset01_binocular/Checkpoints";
    //checkpointReadDirIndex = 250000;
    checkpointWrite = false;
    checkpointWriteDir = "/nh/compneuro/Data/Depth/LCA/binoc_test/Checkpoints";
    checkpointWriteStepInterval = 5000;
    deleteOlderCheckpoints = false;
    //suppressLastOutput = false;
    writeProgressToErr = true;
    outputNamesOfLayersAndConns = "LayerAndConnNames.txt";
};

//
// layers
//

// left eye layers

Movie "LeftImage" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    readPvpFile = false;
    imageListPath = "/nh/compneuro/Data/Depth/concat_data/image_00.txt";
    nf = 1;
    writeStep = -1;
    writeSparseActivity = false;
    displayPeriod = 200;
    start_frame_index = 1;
    skip_frame_index = 1;
    echoFramePathnameFlag = false;
    mirrorBCflag = true;
    jitterFlag = 0;
    useImageBCflag = false;
    inverseFlag = false;
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    autoResizeFlag = 0;
    randomMovie = 0;
    phase = 0;
    //useParamsImage = true;
};

ANNTriggerUpdateOnNewImageLayer "LeftBipolar" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0; //Change based on display period
    initialWriteTime = 199.0; //Change based on display period 
    mirrorBCflag = 1;
    writeSparseActivity = 0;

    movieLayerName = "LeftImage";
    InitVType = "ZeroV";

    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    
    phase = 2;
};

ANNTriggerUpdateOnNewImageLayer "LeftGanglion1" = {
    restart = 0;
    nxScale = 1;
    nyScale = 1;
    nf = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //
    VThresh = -infinity;
    VMax = infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    // 
    phase = 3;
};

ANNTriggerUpdateOnNewImageLayer "LeftGanglion2" = {
    #include "LeftGanglion1";
};

ANNTriggerUpdateOnNewImageLayer "LeftDownsample1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    VWidth = 0;
    //
    phase = 4;  
};

ANNTriggerUpdateOnNewImageLayer "LeftDownsample2" = {
    #include "LeftDownsample1";
    @nxScale = .25;
    @nyScale = .25;
};

RescaleLayer "LeftRescale1" = {
    restart                         = false;
    originalLayerName               = "LeftDownsample1";
    nxScale                         = .5; 
    nyScale                         = .5; 
    nf                              = 1;
    mirrorBCflag                    = false;
    //
    writeStep                       = 200;
    initialWriteTime                = 199;
    writeSparseActivity             = false;
    //
    rescaleMethod                   = "meanstd"; //Can be either meanstd or maxmin
    targetMean                      = 0;
    targetStd                       = 1;
    //
    valueBC = 0;
    //
    phase                           = 5;
};

RescaleLayer "LeftRescale2" = {
    #include "LeftRescale1";
    @originalLayerName               = "LeftDownsample2";
    @nxScale                         = .25; 
    @nyScale                         = .25; 
};

ANNErrorLayer "LeftError1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    //InitVType = "ZeroV";
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/LeftError1_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    //
    errScale = .461892; //Normal is .2
    //
    phase = 6;  
};

ANNErrorLayer "LeftError2" = {
    #include "LeftError1";
    @nxScale = .25;
    @nyScale = .25;
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/LeftError2_V.pvp";
    //
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "LeftRecon1" = {
    restart = 0;
    nxScale = .5;
    nyScale = .5;
    nf = 1;
    initialWriteTime = 201.0; //1 + writestep
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    VWidth = 0;
    valueBC = 0;
    // 
    phase = 2; //Less than v1 phase
};

ANNTriggerUpdateOnNewImageLayer "LeftRecon2" = {
    #include "LeftRecon1";
    @nxScale = .25;
    @nyScale = .25;
};

//
// Left depth eye layers
//

ANNLayer "LeftDepthRecon" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 32;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 8; 
};

//
// Right eye layers
//
Movie "RightImage" = {
    #include "LeftImage";
    @imageListPath = "/nh/compneuro/Data/Depth/concat_data/image_01.txt";
};

ANNTriggerUpdateOnNewImageLayer "RightBipolar" = {
    #include "LeftBipolar";
    @movieLayerName = "RightImage";
};

ANNTriggerUpdateOnNewImageLayer "RightGanglion1" = {
    #include "LeftGanglion1";
    @movieLayerName = "RightImage";
};

ANNTriggerUpdateOnNewImageLayer "RightGanglion2" = {
    #include "LeftGanglion2";
    @movieLayerName = "RightImage";
};

ANNTriggerUpdateOnNewImageLayer "RightDownsample1" = {
    #include "LeftDownsample1";
    @movieLayerName = "RightImage";
};

ANNTriggerUpdateOnNewImageLayer "RightDownsample2" = {
    #include "LeftDownsample2";
    @movieLayerName = "RightImage";
};

RescaleLayer "RightRescale1" = {
    #include "LeftRescale1";
    @originalLayerName = "RightDownsample1";
};

RescaleLayer "RightRescale2" = {
    #include "LeftRescale2";
    @originalLayerName               = "RightDownsample2";
};

ANNErrorLayer "RightError1" = {
    #include "LeftError1";
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/RightError1_V.pvp";
};

ANNErrorLayer "RightError2" = {
    #include "LeftError2";
    //@InitVType = "ZeroV";
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/RightError2_V.pvp";
};

// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "RightRecon1" = {
    #include "LeftRecon1";
    @movieLayerName = "RightImage";
};

ANNTriggerUpdateOnNewImageLayer "RightRecon2" = {
    #include "LeftRecon2";
    @movieLayerName = "RightImage";
};

//
// Right depth eye layers
//

ANNLayer "RightDepthRecon" = {
    #include "LeftDepthRecon";
};

//Position layers
Image "Position" = {
    restart = 0;  // make only a certain layer restart
    nxScale = 1;  
    nyScale = 1; 
    imagePath = "/nh/compneuro/Data/Depth/pos.pvp";
    nf = 5; 
    writeStep = -1;  //-1 means doesn't write for log
    writeSparseActivity = false;
    mirrorBCflag = true;
    useImageBCflag = false;
    inverseFlag = false; 
    normalizeLuminanceFlag = false;
    writeImages = false;
    offsetX = 0;
    offsetY = 0;
    phase = 0;
};

ConstantLayer "PosDownsample" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 1;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = -infinity;
    VMax =  infinity;
    VMin = -infinity;
    VShift = 0;
    //
    phase = 4;  
};

ANNErrorLayer "PosError" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    writeStep = 200;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Error_V.pvp";
    //
    VThresh = 0; //Change this for efficiency
    VMax =  infinity;
    VMin = 0;
    VShift = 0;
    //
    errScale = .07621218; //Same ratio minus 2 other inputs to v1
    //
    phase = 6;  
};


// for visualization only, makes no output
ANNTriggerUpdateOnNewImageLayer "PosRecon" = {
    restart = 0;
    nxScale = .125;
    nyScale = .125;
    nf = 5;
    initialWriteTime = 201.0; //1 + writestep
    writeStep = 200.0;
    mirrorBCflag = 0;
    writeSparseActivity = 0;
    //
    movieLayerName = "LeftImage";
    InitVType = "ZeroV";
    //InitVType = "InitVFromFile";
    //Vfilename = "/nh/compneuro/Data/vine/LCA/2013_01_31/output/Checkpoints/Checkpoint6000000/Recon_V.pvp";
    //
    VThresh = -infinity;
    VMax = infinity;     // prevent reconstruction from exceeding reasonable bounds
    VMin = -infinity; 
    VShift = 0;
    // 
    phase = 2; //Less than v1 phase
};

// binoclular layers

HyPerLCALayer "BinocularV1S1" = {
    restart = 0;
    nxScale = .25;
    nyScale = .25;
    nf = 64; //2048 or 4096;
    numChannels = 1;
    numWindowX = 1;
    numWindowY = 1;
    writeStep = 200.0;
    initialWriteTime = 199.0;
    mirrorBCflag = 0;
    writeSparseActivity = 1;
    //
    //InitVType = "UniformRandomV";
    //minV = -1.0;
    //maxV = .15; //0.05 above VThresh
    InitVType = "InitVFromFile";
    Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1_V.pvp";
    // 
    timeConstantTau = 200.0;
    timeConstantTauMinimum = 10.0;
    slopeErrorStd = 0.01;
    // 
    VThresh = 0.1; //mean + 1 std of the positive input to error
    VMax = infinity;
    VMin = 0;
    VShift = 0.0;  // 0 -> hard threshold, 1 -> soft threshold
    //
    phase = 7;
};

HyPerLCALayer "BinocularV1S2" = {
    #include "BinocularV1S1";
    @nxScale = .125;
    @nyScale = .125;
    @Vfilename = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2_V.pvp";
};

// connections

// Left eye connections

KernelConn "LeftImageToLeftBipolarCenter" = {
    preLayerName = "LeftImage";
    postLayerName = "LeftBipolar";
    channelCode = 0;
    nxp = 3; 
    nyp = 3; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 0.5;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglion1Center" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 1;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


KernelConn "LeftBipolarToLeftGanglion1Surround" = {
    preLayerName = "LeftBipolar";
    postLayerName = "LeftGanglion1";
    channelCode = 1;
    nxp = 11; 
    nyp = 11; 
    nfp = 1;
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 5.5;
    rMax  = 7.5;
    rMin = 0.5;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
               
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftBipolarToLeftGanglion2Center" = {
    #include "LeftBipolarToLeftGanglion1Center";
    @postLayerName = "LeftGanglion2";
    @nxp = 3; 
    @nyp = 3; 
    @sigma = 3;
};


KernelConn "LeftBipolarToLeftGanglion2Surround" = {
    #include "LeftBipolarToLeftGanglion1Surround";
    @postLayerName = "LeftGanglion2";
    @nxp = 33; 
    @nyp = 33; 

    @sigma = 15.5;
    @rMax  = 23;
};

KernelConn "LeftGanglion1ToLeftDownsample1" = {
    preLayerName = "LeftGanglion1";
    postLayerName = "LeftDownsample1";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 1;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 3;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "LeftGanglion2ToLeftDownsample2" = {
    #include "LeftGanglion1ToLeftDownsample1";
    @preLayerName = "LeftGanglion2";
    @postLayerName = "LeftDownsample2";

    @rMax  = 8;
};

KernelConn "LeftRescale1ToLeftError1" = {
    preLayerName = "LeftRescale1";
    postLayerName = "LeftError1";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .0624;  // 1/sqrt(16*16);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};

KernelConn "LeftRescale2ToLeftError2" = {
    #include "LeftRescale1ToLeftError1";
    @preLayerName = "LeftRescale2";
    @postLayerName = "LeftError2";
};


// Right eye connections

KernelConn "RightImageToRightBipolarCenter" = {
    #include "LeftImageToLeftBipolarCenter";
    @preLayerName = "RightImage";
    @postLayerName = "RightBipolar";
};

KernelConn "RightBipolarToRightGanglion1Center" = {
    #include "LeftBipolarToLeftGanglion1Center";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion1";
};

KernelConn "RightBipolarToRightGanglion1Surround" = {
    #include "LeftBipolarToLeftGanglion1Surround";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion1";
};

KernelConn "RightBipolarToRightGanglion2Center" = {
    #include "LeftBipolarToLeftGanglion2Center";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion2";
};

KernelConn "RightBipolarToRightGanglion2Surround" = {
    #include "LeftBipolarToLeftGanglion2Surround";
    @preLayerName = "RightBipolar";
    @postLayerName = "RightGanglion2";
};

KernelConn "RightGanglion1ToRightDownsample1" = {
    #include "LeftGanglion1ToLeftDownsample1";
    @preLayerName = "RightGanglion1";
    @postLayerName = "RightDownsample1";
};

KernelConn "RightGanglion2ToRightDownsample2" = {
    #include "LeftGanglion2ToLeftDownsample2";
    @preLayerName = "RightGanglion2";
    @postLayerName = "RightDownsample2";
};

KernelConn "RightRescale1ToRightError1" = {
    #include "LeftRescale1ToLeftError1";
    @preLayerName = "RightRescale1";
    @postLayerName = "RightError1";
};

KernelConn "RightRescale2ToRightError2" = {
    #include "LeftRescale2ToLeftError2";
    @preLayerName = "RightRescale2";
    @postLayerName = "RightError2";
};

//Pos connections

KernelConn "PositionToPosDownsample" = {
    preLayerName = "Position";
    postLayerName = "PosDownsample";
    channelCode = 0;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    numAxonalArbors = 1;
    writeStep = -1;
    initFromLastFlag = 0;
    
    weightInitType = "Gauss2DWeight";
    aspect = 1;
    sigma = 10000;
    rMax  = 8;
    rMin = 0;
    numOrientationsPre = 1;
    numOrientationsPost = 1;
        
    strength = 1.0;  
    normalizeMethod = "normalizeSum";
    minSumTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = true;
    symmetrizeWeights = false;
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    writeCompressedCheckpoints = false;
    plasticityFlag = 0;
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;

    pvpatchAccumulateType = "convolve";
};

KernelConn "PosDownsampleToPosError" = {
    preLayerName = "PosDownsample";
    postLayerName = "PosError";
    channelCode = 0;
    nxp = 1; 
    nyp = 1; 
    numAxonalArbors = 1;
    initFromLastFlag = 0;  // 1;  // restart
    writeStep = -1;
    writeCompressedCheckpoints = false;
    
    weightInitType = "OneToOneWeights"; //"UniformWeight";
    weightInit = .44721;  // 1/sqrt(1*1*5);
    normalizeMethod = "none";
    
    shrinkPatches = false;
    //writeCompressedWeights = 0.0;
    plasticityFlag = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;     
     
    delay = 0;
     
    preActivityIsNotRate = false;
    selfFlag = false;
    shmget_flag = false;
};


// binocular connections

KernelConn "BinocularV1S1ToLeftError1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "LeftError1";
    channelCode = 1;
    nxp = 18;
    nyp = 18;
    nxpShrunken = 16;
    nypShrunken = 16;
    nfp = 1;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1ToLeftError1_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    sparseFraction = .90;
    //
    strength = 1; //.25/2  
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 15; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToLeftError2" = {
    #include "BinocularV1S1ToLeftError1";
    @preLayerName = "BinocularV1S2";
    @postLayerName = "LeftError2";
    //
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2ToLeftError2_W.pvp";
};

TransposeConn "LeftError1ToBinocularV1S1" = {
    preLayerName = "LeftError1";
    postLayerName = "BinocularV1S1";
    channelCode = 0;
    originalConnName = "BinocularV1S1ToLeftError1";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

TransposeConn "LeftError2ToBinocularV1S2" = {
    #include "LeftError1ToBinocularV1S1";
    @preLayerName = "LeftError2";
    @postLayerName = "BinocularV1S2";
    @originalConnName = "BinocularV1S2ToLeftError2";
};

CloneKernelConn "BinocularV1S1ToLeftRecon1" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "LeftRecon1";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S1ToLeftError1";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

CloneKernelConn "BinocularV1S2ToLeftRecon2" = {
    #include "BinocularV1S1ToLeftRecon1";
    @preLayerName = "BinocularV1S2";
    @postLayerName = "LeftRecon2";
    @originalConnName = "BinocularV1S2ToLeftError2";
};

KernelConn "BinocularV1S1ToRightError1" = {
    #include "BinocularV1S1ToLeftError1";
    @postLayerName = "RightError1";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1ToRightError1_W.pvp";
};

KernelConn "BinocularV1S2ToRightError2" = {
    #include "BinocularV1S2ToLeftError2";
    @preLayerName = "BinocularV1S2";
    @postLayerName = "RightError2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2ToRightError2_W.pvp";
};

TransposeConn "RightError1ToBinocularV1S1" = {
    #include "LeftError1ToBinocularV1S1";
    @preLayerName = "RightError1";
    @originalConnName = "BinocularV1S1ToRightError1";
};

TransposeConn "RightError2ToBinocularV1S2" = {
    #include "LeftError2ToBinocularV1S2";
    @preLayerName = "RightError2";
    @originalConnName = "BinocularV1S2ToRightError2";
};

CloneKernelConn "BinocularV1S1ToRightRecon1" = {
    #include "BinocularV1S1ToLeftRecon1";
    @postLayerName = "RightRecon1";
    @originalConnName = "BinocularV1S1ToRightError1";
};

CloneKernelConn "BinocularV1S2ToRightRecon2" = {
    #include "BinocularV1S2ToLeftRecon2";
    @postLayerName = "RightRecon2";
    @originalConnName = "BinocularV1S2ToRightError2";
};

// Depth Binocular Connections

KernelConn "BinocularV1S1ToLeftDepthRecon" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "LeftDepthRecon";
    channelCode = 1;
    nxp = 1; 
    nyp = 1; 
    nfp = 32;
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1ToLeftDepthError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    //
    strength = 1; 
    //normalizeMethod = "normalizeL2";
    //minL2NormTolerated = 0;
    //normalizeArborsIndividually = 0;
    //normalize_cutoff = 0.0;
    //normalizeFromPostPerspective = false;
    //symmetrizeWeights = false;
    //
    //preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    //keepKernelsSynchronized = true; 
    //combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 5; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    shrinkPatches = false;
    useWindowPost = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToLeftDepthRecon" = {
    #include "BinocularV1S1ToLeftDepthRecon";
    @preLayerName = "BinocularV1S2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2ToLeftDepthError_W.pvp";
};

KernelConn "BinocularV1S1ToRightDepthRecon" = {
    #include "BinocularV1S1ToLeftDepthRecon";
    @postLayerName = "RightDepthRecon";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1ToRightDepthError_W.pvp";
};

KernelConn "BinocularV1S2ToRightDepthRecon" = {
    #include "BinocularV1S2ToLeftDepthRecon";
    @postLayerName = "RightDepthRecon";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2ToRightDepthError_W.pvp";
};

//Position connections

KernelConn "BinocularV1S1ToPosError" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "PosError";
    channelCode = 1;
    nxp = 1;
    nyp = 1;
    nfp = 5;
    shrinkPatches = false;
    //
    numAxonalArbors = 1;
    initFromLastFlag = 0;
    //
    weightInitType = "FileWeight";
    initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S1ToPosError_W.pvp";
    //weightInitType = "UniformRandomWeight";
    //wMinInit = -1.0;
    //wMaxInit = 1.0;
    //sparseFraction = 0;
    //
    strength = 1;
    normalizeMethod = "normalizeL2"; //Switch to normalizecontrastzeromean
    //normalizeMethod = "normalizeContrastZeroMean"; 
    //SET PARAMS TO NEW NORMALIZATION METHOD
    minL2NormTolerated = 0;
    normalizeArborsIndividually = 0;
    normalize_cutoff = 0.0;
    normalizeFromPostPerspective = false;
    symmetrizeWeights = false;
    //
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    keepKernelsSynchronized = true; 
    combine_dW_with_W_flag = false; 
    //
    writeStep = 200;
    writeCompressedWeights = false;
    writeCompressedCheckpoints = false;
    plasticityFlag = false;
    weightUpdatePeriod = 200.0;
    initialWeightUpdateTime = 199.0;
    initialWriteTime = 0.0;
    dWMax = 2; // 200.0 used for initial training
    selfFlag = false;
    shmget_flag = false;
    //
    delay = 0;
    //
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};


TransposeConn "PosErrorToBinocularV1S1" = {
    preLayerName = "PosError";
    postLayerName = "BinocularV1S1";
    channelCode = 0;
    originalConnName = "BinocularV1S1ToPosError";
    selfFlag = false;
    preActivityIsNotRate = false;  // should help make response more indepenent of time step size dt
    writeStep = -1;
    writeCompressedCheckpoints = false;
    shmget_flag = false;
    delay = 0;
    pvpatchAccumulateType = "convolve";
    updateGSynFromPostPerspective = false;
};

CloneKernelConn "BinocularV1S1ToPosRecon" = {
    preLayerName = "BinocularV1S1";
    postLayerName = "PosRecon";
    channelCode = 0;
    writeStep = -1;
    originalConnName = "BinocularV1S1ToPosError";
    selfFlag = false;
    delay = 0;
    preActivityIsNotRate = false;
    useWindowPost = false;
    updateGSynFromPostPerspective = false;
    pvpatchAccumulateType = "convolve";
};

KernelConn "BinocularV1S2ToPosError" = {
    #include "BinocularV1S1ToPosError";
    @preLayerName = "BinocularV1S2";
    @initWeightsFile = "/nh/compneuro/Data/Depth/LCA/savedCheckpoint/BinocularV1S2ToPosError_W.pvp";
};


TransposeConn "PosErrorToBinocularV1S2" = {
    #include "PosErrorToBinocularV1S1";
    @postLayerName = "BinocularV1S2";
    @originalConnName = "BinocularV1S2ToPosError";
};

CloneKernelConn "BinocularV1S2ToPosRecon" = {
    #include "BinocularV1S1ToPosRecon";
    @preLayerName = "BinocularV1S2";
    @originalConnName = "BinocularV1S2ToPosError";
};

// Probes
//
//StatsProbe "LeftGanglion1StatsFile" = {
//    targetLayer = "LeftGanglion1";
//    probeOutputFile = "LeftGanglion1_Stats.txt";
//};
//
//StatsProbe "LeftGanglion2StatsFile" = {
//    targetLayer = "LeftGanglion2";
//    probeOutputFile = "LeftGanglion2_Stats.txt";
//};
//
//StatsProbe "LeftDownsample1StatsFile" = {
//    targetLayer = "LeftDownsample1";
//    probeOutputFile = "LeftDownsample1_Stats.txt";
//};
//
//StatsProbe "LeftDownsample2StatsFile" = {
//    targetLayer = "LeftDownsample2";
//    probeOutputFile = "LeftDownsample2_Stats.txt";
//};
//
//StatsProbe "LeftRescale1StatsFile" = {
//    targetLayer = "LeftRescale1";
//    probeOutputFile = "LeftRescale1_Stats.txt";
//};
//
//StatsProbe "LeftRescale2StatsFile" = {
//    targetLayer = "LeftRescale2";
//    probeOutputFile = "LeftRescale2_Stats.txt";
//};
//
//StatsProbe "LeftError1StatsFile" = {
//    targetLayer = "LeftError1";
//    probeOutputFile = "LeftError1_Stats.txt";
//};
//
//StatsProbe "LeftError2StatsFile" = {
//    targetLayer = "LeftError2";
//    probeOutputFile = "LeftError2_Stats.txt";
//};
//
//StatsProbe "LeftRecon1StatsFile" = {
//    targetLayer = "LeftRecon1";
//    probeOutputFile = "LeftRecon1_Stats.txt";
//};
//
//StatsProbe "LeftRecon2StatsFile" = {
//    targetLayer = "LeftRecon2";
//    probeOutputFile = "LeftRecon2_Stats.txt";
//};
//
//StatsProbe "LeftDepthDownsampleStatsFile" = {
//   targetLayer = "LeftDepthDownsample";
//   probeOutputFile = "LeftDepthDownsample_Stats.txt";
//};
//
//StatsProbe "LeftDepthErrorStatsFile" = {
//    targetLayer = "LeftDepthError";
//    probeOutputFile = "LeftDepthError_Stats.txt";
//};
//
//StatsProbe "LeftDepthReconStatsFile" = {
//    targetLayer = "LeftDepthRecon";
//    probeOutputFile = "LeftDepthRecon_Stats.txt";
//};
//
//StatsProbe "RightGanglion1StatsFile" = {
//    targetLayer = "RightGanglion1";
//    probeOutputFile = "RightGanglion1_Stats.txt";
//};
//
//StatsProbe "RightGanglion2StatsFile" = {
//    targetLayer = "RightGanglion2";
//    probeOutputFile = "RightGanglion2_Stats.txt";
//};
//
//StatsProbe "RightDownsample1StatsFile" = {
//    targetLayer = "RightDownsample1";
//    probeOutputFile = "RightDownsample1_Stats.txt";
//};
//
//StatsProbe "RightDownsample2StatsFile" = {
//    targetLayer = "RightDownsample2";
//    probeOutputFile = "RightDownsample2_Stats.txt";
//};
//
//StatsProbe "RightRescale1StatsFile" = {
//    targetLayer = "RightRescale1";
//    probeOutputFile = "RightRescale1_Stats.txt";
//};
//
//StatsProbe "RightRescale2StatsFile" = {
//    targetLayer = "RightRescale2";
//    probeOutputFile = "RightRescale2_Stats.txt";
//};
//
//StatsProbe "RightError1StatsFile" = {
//    targetLayer = "RightError1";
//    probeOutputFile = "RightError1_Stats.txt";
//};
//
//StatsProbe "RightError2StatsFile" = {
//    targetLayer = "RightError2";
//    probeOutputFile = "RightError2_Stats.txt";
//};
//
//StatsProbe "RightRecon1StatsFile" = {
//    targetLayer = "RightRecon1";
//    probeOutputFile = "RightRecon1_Stats.txt";
//};
//
//StatsProbe "RightRecon2StatsFile" = {
//    targetLayer = "RightRecon2";
//    probeOutputFile = "RightRecon2_Stats.txt";
//};
//
//StatsProbe "RightDepthDownsampleStatsFile" = {
//   targetLayer = "RightDepthDownsample";
//   probeOutputFile = "RightDepthDownsample_Stats.txt";
//};
//
//StatsProbe "RightDepthErrorStatsFile" = {
//    targetLayer = "RightDepthError";
//    probeOutputFile = "RightDepthError_Stats.txt";
//};
//
//StatsProbe "RightDepthReconStatsFile" = {
//    targetLayer = "RightDepthRecon";
//    probeOutputFile = "RightDepthRecon_Stats.txt";
//};
//
//StatsProbe "BinocularV1S1StatsFile" = {
//    targetLayer = "BinocularV1S1";
//    probeOutputFile = "BinocularV1S1_Stats.txt";
//};
//
//StatsProbe "BinocularV1S2StatsFile" = {
//    targetLayer = "BinocularV1S2";
//    probeOutputFile = "BinocularV1S2_Stats.txt";
//};
//
//StatsProbe "PosDownsampleStatsFile" = {
//    targetLayer = "PosDownsample";
//    probeOutputFile = "PosDownsample_Stats.txt";
//};
//
//StatsProbe "PosErrorStatsFile" = {
//    targetLayer = "PosError";
//    probeOutputFile = "PosError_Stats.txt";
//};
//
//StatsProbe "PosReconStatsFile" = {
//    targetLayer = "PosRecon";
//    probeOutputFile = "PosRecon_Stats.txt";
//};
//
