It is possible to run the PASCAL_Classification demo remotely on an AWS instance,
while uploading images from a local Mac, and downloading the heat map montages
once the remote machine has run processed the image.

You will need two bash scripts running on the local machine (one to upload and one
to download), and a bash script running on the remote machine (to monitor the upload
folder).  The bash script on the remote machine prints the filename on standard
output as it is received, where it can be piped to the PASCAL_Classification process.

The upload script uses AppleScript, so the local machine needs to be a Mac.

On the repository for PASCAL_Classification, there is a tar file, "demo-localside.tgz".
cd into any convenient directory, and expand the archive with the command
tar xzf /path/to/demo-localside.tgz

This creates a directory called demo-localside, that contains
two regular files and two empty directories:
    download_from_aws.bash
    upload_to_aws.bash
    heatMapMontage/
    inputImages/

Launch an aws instance, and attach the volume "PASCAL_Classifier demo" to the
instance.  Note the public IP address of the instance.

First we illustrate the process of uploading image files to the instance.

Open a window in Terminal and ssh to the instance in this terminal.
Run the commands
    sudo mount /dev/sdf ~/mountData
        #If the volume was attached somewhere other than /dev/sdf, adjust accordingly.
    cd ~/mountData/workspace/demo/PASCAL_Classification
    bash monitorInputImagesDir.bash

The demo-localside scripts assume that the user on the aws instance
is ec2-user.  If your username is different, you will need to edit the
scripts accordingly.

Open a second window in Terminal.
In that window, cd to the demo-localside directory.
Then run the command
    bash upload_to_aws.bash <ip_address>
        # <ip_address> is the public ip address of the AWS instance.

A file chooser dialog appears.  Choose an image file (it will let you choose
any regular file) and select "Choose".  The selected file is uploaded to the
AWS instance in the directory
    ~/mountData/workspace/demo/PASCAL_Classification/inputImages/

Once the file is uploaded, the monitorInputImagesDir script running on AWS takes note
and prints the path to the new file to standard output.

Once you select choose, the file chooser dialog closes and reopens, allowing
you to choose another file.  If you select a second file and click "Choose",
that file also gets uploaded and the monitorInputImagesDir.bash script
prints the path to the new file to standard output.  This will continue until
you click cancel.  The upload_to_aws.bash script then creates a
file called .uploadfinished in the AWS instance's inputImages/ directory, and
quits.  When the monitorInputImageDir.bash script notices the .uploadfinished file,
it also quits.

We are now ready to do the full pipeline of uploading images, processing
them on AWS, and downloading the resulting heat map montages locally.

In the Terminal window logged into the AWS instance, run the
monitorInputImagesDir.bash and pipe its output to PetaVision:
    bash monitorInputImagesDir.bash |
        mpiexec -np 4 --bind-to none \
        Release/PASCAL_Classification -p paramsfiles/landscape.params \
        -t 8 -rows 1 -columns 4 2>&1 | tee logfile

This launches using 4 MPI processes and 8 threads, with GPUs assigned
automatically.  Accordingly this invocation works best with g2.8x instances
(32 cores and 4 GPUs).  If you have a different instance type, the command
line needs to be adjusted accordingly.

The params file paramfiles/landscape.params has an input
of 256 pixels wide by 192 pixels high, and a classification layer of 4 pixels
wide by 3 pixels high, so the number of rows needs to divide 3 and the number
of columns needs to divide 4.  With 4 MPI processes, we are forced to use
one row and 4 columns.  There are also two additional params files:
paramsfiles/portrait.params (192x256 input layer, 3x4 classification layer)
paramsfiles/square.params (256x256 input layer, 4x4 classification layer)
If you use one of the other params files, the number of rows and number of
columns needs to be adjusted (r=4,c=1 for portrait; r=2,c=2 for square).

Finally, standard output and standard error are tied together ("2>&1")
and the result is sent to the file "logfile" as well as to the screen.

If the prompt "Enter filename: " appears, it can be ignored.  PetaVision
is getting its input from the monitorInputImagesDir.bash script, which
is waiting for a file to appear.

We will restart the upload_to_aws.bash script as well, but it is convenient
to do that last because the file chooser dialog box can get in the way.

In a third Terminal window, cd to the demo-localside directory, and run the
command
    bash download_to_aws.bash <ip_address>
        # <ip_address> is the public ip address of the AWS instance.

Finally, return to the window that was running the upload script, and
run the script again with the command
    bash upload_to_aws.bash <ip_address>

Select an image file using the file chooser dialog.  Note that PetaVision will
internally crop the image to a 4:3 landscape aspect ratio and then resize it to
256x192.  When you click "Choose" the upload script sends it to the AWS instance.
When the monitorInputImagesDir notices the uploaded file, it sends the path
to PetaVision, which processes it for 200 timesteps (the stopTime parameter
in the paramsFile).
    
Once the simulation time reaches 200, PetaVision launches an Octave process
to generate the heat map montage, which is stored in the directory
heatMapMontage/ (this directory is specified in src/config.txt, but is also
hardcoded into the download_from_aws.bash script.  If you use a different
heatMapMontageDir in src/config.txt, you will also need to edit the definition
of remotedir in download_from_aws.bash)

download_from_aws.bash periodically rsyncs the local heatMapMontage to the
AWS instance's heatMapMontage.  When new files arrive in the local
heatMapMontage directory, it opens them.  The heat map montage files are PNG
files, and they open in Preview.app.  The window stays open until you close it.

As before, you can serially select several files in the file chooser dialog.
Once you are suitably amazed, click cancel.  As before, the upload and monitor
scripts then stop.  Currently, you have to stop the download script manually
with control-C.  You may need to type control-C twice, since the first may
only interrupt an rsync in progress.